{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/Butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/Gallery/index.md","hash":"27dd226ef8c1e27b5082bf244946499b18a62319","modified":1629442580877},{"_id":"source/_data/link.yml","hash":"23c8507157ebe59a3eaf402af327906510592a85","modified":1629442580878},{"_id":"source/_posts/搭建教程.md","hash":"7cc4d49ee8d849ef9122e8dd2dc6423ed03638d7","modified":1631930630583},{"_id":"source/archives/index.md","hash":"105726e1f512a2e84d0f7e7ba4a0c1c7575abc30","modified":1629442580881},{"_id":"source/about/index.md","hash":"9ae91bc571a77e336825b28c1258bb9e21d4f917","modified":1629442580880},{"_id":"source/categories/index.md","hash":"f51fa379edc8652aef5745632e629a33aeab5c41","modified":1629442580881},{"_id":"source/link/index.md","hash":"19c696dc344d8be774a13bf2ab79b8ccd43dffea","modified":1629442580882},{"_id":"source/movies/index.md","hash":"a892e7431149b102a341fc36dc5827da7e5ad1cb","modified":1629442580883},{"_id":"source/music/index.md","hash":"8f146c803c91b7848bf026e1b777e38369d8d97d","modified":1629442580883},{"_id":"source/tags/index.md","hash":"e299247d2ac2020a196df9f9def787840cfd3ea3","modified":1629442580884},{"_id":"source/_data/_config.butterfly.yml","hash":"1223f1dabde5c04f4a81e635a1af9b1d6f682d9f","modified":1629442580877},{"_id":"source/_posts/androidDrawable.md","hash":"e38870db90c83b1518d876bd3587e6f407724953","modified":1629442580878},{"_id":"themes/Butterfly/package.json","hash":"82947e8929ef73b4f63877556ed4443039cbadf0","modified":1629442580925},{"_id":"themes/Butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1629442580885},{"_id":"themes/Butterfly/languages/en.yml","hash":"fd1c1211c8f166d089a7697872185a81182d92e1","modified":1629442580886},{"_id":"themes/Butterfly/layout/archive.pug","hash":"2d5bf4b1755f89898c579c18d601be83d2bc8ebd","modified":1629442580887},{"_id":"themes/Butterfly/_config.yml","hash":"712907c112ba1b6da70f1ab4967ac15a8a5f02e7","modified":1630462973614},{"_id":"themes/Butterfly/languages/zh-TW.yml","hash":"736bec8eeb3a29d0d43669d81f1fa686e02be18e","modified":1629442580886},{"_id":"themes/Butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1629442580923},{"_id":"themes/Butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1629442580887},{"_id":"themes/Butterfly/layout/page.pug","hash":"cae76ce64c114fd192b5da5a7d14aa0240df2f06","modified":1629442580923},{"_id":"themes/Butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1629442580924},{"_id":"themes/Butterfly/layout/includes/404.pug","hash":"3cdc5e32d0f1e5866bcf86f94a0d76aaf7142937","modified":1629442580888},{"_id":"themes/Butterfly/layout/includes/additional-js.pug","hash":"a1ca58fdff74b890cade94479f8f0eb9ce7e5e73","modified":1629442580888},{"_id":"themes/Butterfly/layout/includes/head.pug","hash":"1fa780da96774efde891a7271e05bf08181f48c2","modified":1629442580889},{"_id":"themes/Butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1629442580888},{"_id":"themes/Butterfly/languages/zh-CN.yml","hash":"46685048a05b419ed9c72cf31bd6e5efef7524f2","modified":1629442580886},{"_id":"themes/Butterfly/layout/includes/layout.pug","hash":"f2e1d8a05d2e409c4804f67a98f5f59f527d6627","modified":1629442580894},{"_id":"themes/Butterfly/layout/includes/pagination.pug","hash":"bb1847f45e713cc88b1c0a97035ec01f0209c995","modified":1629442580898},{"_id":"themes/Butterfly/layout/post.pug","hash":"8f2f13c9ae099dd83827ce3dbac5abc8d7d5bde3","modified":1629442580924},{"_id":"themes/Butterfly/languages/default.yml","hash":"b9dbdb20bd1f1c7ca8a8f38635bdc4ed8bb1d44c","modified":1629442580886},{"_id":"themes/Butterfly/layout/includes/rightside.pug","hash":"72f66c4f3220ef16abd1739492972a22dcc99751","modified":1629442580900},{"_id":"themes/Butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1629442580953},{"_id":"themes/Butterfly/source/js/main.js","hash":"26fc5478c1d656443bc620cff8382801d4331bf3","modified":1629442580955},{"_id":"themes/Butterfly/layout/includes/sidebar.pug","hash":"2cf68619af17ece9acea71aa2cb06737097890a5","modified":1629442580900},{"_id":"themes/Butterfly/source/js/utils.js","hash":"1b8bf1e6d50fa8ffe2aff7548b141cab72540ba0","modified":1629442580956},{"_id":"themes/Butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1629442580952},{"_id":"themes/Butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1629442580953},{"_id":"themes/Butterfly/source/css/var.styl","hash":"31198af95fecc6819d3b2cb7ef03988ef67257da","modified":1629442580952},{"_id":"themes/Butterfly/scripts/events/init.js","hash":"5803aa55d9c21e51ea64c1ae50c9b602979aaee2","modified":1629442580926},{"_id":"themes/Butterfly/scripts/events/welcome.js","hash":"1e1da036fae593be7e2cc502f0a5cbeb2e7881d1","modified":1629442580926},{"_id":"themes/Butterfly/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1629442580953},{"_id":"themes/Butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1629442580925},{"_id":"themes/Butterfly/scripts/filters/random_cover.js","hash":"bd29f20fad3d3fab600940e7a6dc9a803943cb33","modified":1629442580927},{"_id":"themes/Butterfly/scripts/filters/post_lazyload.js","hash":"98ef86305b8d2ad9dbab969715e1ac93b407f036","modified":1629442580926},{"_id":"themes/Butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1629442580927},{"_id":"themes/Butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1629442580927},{"_id":"themes/Butterfly/scripts/helpers/inject_head_js.js","hash":"98ab13a60413d68bd9d02d54d121c66a6d4634d2","modified":1629442580928},{"_id":"themes/Butterfly/scripts/helpers/page.js","hash":"384de3c04809ec5fa996e8aa0628f770cd4bff3e","modified":1629442580928},{"_id":"themes/Butterfly/scripts/helpers/related_post.js","hash":"51112d3db07f87034422ff4acc69ca2eb4215b4e","modified":1629442580929},{"_id":"themes/Butterfly/scripts/tag/button.js","hash":"8cb7ef368cc2ac7f4a13c2959908b1574e572acf","modified":1629442580929},{"_id":"themes/Butterfly/scripts/tag/gallery.js","hash":"00211af801a42f08a80f63ffad45699834a412fc","modified":1629442580929},{"_id":"themes/Butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1629442580930},{"_id":"themes/Butterfly/scripts/tag/hide.js","hash":"eb019da8c190923e759d2fd7cb846281eef8594e","modified":1629442580930},{"_id":"themes/Butterfly/scripts/tag/mermaid.js","hash":"829229b0074b332ba779e159219eb2466612ff6e","modified":1629442580931},{"_id":"themes/Butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1629442580930},{"_id":"themes/Butterfly/scripts/tag/note.js","hash":"420ba8b11e7316b4c09eb301d39814bc9bae9f90","modified":1629442580932},{"_id":"themes/Butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1629442580932},{"_id":"themes/Butterfly/layout/includes/head/Open_Graph.pug","hash":"07380718ed3af19a7e64b30e8c13726fe5983947","modified":1629442580889},{"_id":"themes/Butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1629442580954},{"_id":"themes/Butterfly/source/js/tw_cn.js","hash":"4db1170be7a9360e2c5399d281b979da730df2a3","modified":1629442580956},{"_id":"themes/Butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1629442580890},{"_id":"themes/Butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1629442580891},{"_id":"themes/Butterfly/layout/includes/head/config.pug","hash":"3ca9d9cdfd6e61df1d5b07de40f34349cda7a7c7","modified":1629442580890},{"_id":"themes/Butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1629442580892},{"_id":"themes/Butterfly/layout/includes/head/analytics.pug","hash":"903d12250ce70713dd5b8ac7e1f7a20fe15eb815","modified":1629442580889},{"_id":"themes/Butterfly/layout/includes/head/config_site.pug","hash":"b27b7ba90b209de29eeb64d5ac6eb93b86f5d784","modified":1629442580890},{"_id":"themes/Butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1629442580892},{"_id":"themes/Butterfly/layout/includes/header/nav.pug","hash":"419807903e5586b8804b1f8f17cea97bd05f0b17","modified":1629442580893},{"_id":"themes/Butterfly/layout/includes/head/preconnect.pug","hash":"d6556d5396eb0e10ea0ec10158779c21dc78f738","modified":1629442580891},{"_id":"themes/Butterfly/layout/includes/header/index.pug","hash":"3a2797d2744607ba6cdb5a02853851957c0f7e29","modified":1629442580893},{"_id":"themes/Butterfly/layout/includes/header/menu_item.pug","hash":"4d52000cae1fce333329c382dac6c9a21ad0b195","modified":1629442580893},{"_id":"themes/Butterfly/layout/includes/loading/loading-js.pug","hash":"2e1ab0c2ca59a1ff5a5ba9b6ef60f3e34af5430c","modified":1629442580895},{"_id":"themes/Butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1629442580894},{"_id":"themes/Butterfly/layout/includes/loading/loading.pug","hash":"dd8e6813976be64e80eba6562b54e74527ab306d","modified":1629442580895},{"_id":"themes/Butterfly/layout/includes/header/post-info.pug","hash":"3b0b2053fe9f08cbc21b3baa53163adc2f76c19a","modified":1629442580893},{"_id":"themes/Butterfly/layout/includes/page/default-page.pug","hash":"f5ea1e10a169aeb98e42b19ac084c4eb27693b46","modified":1629442580897},{"_id":"themes/Butterfly/layout/includes/page/tags.pug","hash":"62dc2e683d56ddc9b588abc44dc1cfb778a2c68f","modified":1629442580898},{"_id":"themes/Butterfly/layout/includes/page/categories.pug","hash":"95924d28d71b28769963529f82b376a9dc731fad","modified":1629442580897},{"_id":"themes/Butterfly/layout/includes/third-party/aplayer.pug","hash":"bee06b3f01fa1f0d8fa08c154234b452da425101","modified":1629442580901},{"_id":"themes/Butterfly/layout/includes/page/flink.pug","hash":"c2c25db0678ef31ba495a521522036de1878e06c","modified":1629442580898},{"_id":"themes/Butterfly/layout/includes/post/reward.pug","hash":"c762732e200ff2627bc046af5f170b3269343341","modified":1629442580899},{"_id":"themes/Butterfly/layout/includes/mixins/post-ui.pug","hash":"dcccb1425fabcf12a1bed955518b0e7b1054cab0","modified":1629442580896},{"_id":"themes/Butterfly/layout/includes/post/post-copyright.pug","hash":"6ec54b77e3a90e148e66e317e5bb6c89624fddca","modified":1629442580899},{"_id":"themes/Butterfly/layout/includes/third-party/pangu.pug","hash":"d06dafe7faf3a2e328ef62f26166a51ffe7a5579","modified":1629442580915},{"_id":"themes/Butterfly/layout/includes/third-party/prismjs.pug","hash":"2448b243ded58aa1d5fc22fd115e6d06b636f9fd","modified":1629442580916},{"_id":"themes/Butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1629442580919},{"_id":"themes/Butterfly/layout/includes/mixins/article-sort.pug","hash":"971038debf539333b1687b4a1d87cf4fc965a846","modified":1629442580896},{"_id":"themes/Butterfly/layout/includes/widget/card_announcement.pug","hash":"009bdbef23381f10664622fafdc602f2ff5bf1ec","modified":1629442580919},{"_id":"themes/Butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1629442580919},{"_id":"themes/Butterfly/layout/includes/third-party/effect.pug","hash":"4c3da5a89b4e6fd3ab527f5c6d27790359d57f71","modified":1629442580910},{"_id":"themes/Butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1629442580920},{"_id":"themes/Butterfly/layout/includes/third-party/pjax.pug","hash":"ad59dcce32e4e67066303a1ffd1dd95874d9953e","modified":1629442580915},{"_id":"themes/Butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1629442580921},{"_id":"themes/Butterfly/layout/includes/widget/card_newest_comment.pug","hash":"0f1a5c356c1ffd47ff49e153226e2d670dc61057","modified":1629442580921},{"_id":"themes/Butterfly/layout/includes/widget/card_post_toc.pug","hash":"0b5c165664f9f8691551fc5ff435b40e7f73c737","modified":1629442580921},{"_id":"themes/Butterfly/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1629442580922},{"_id":"themes/Butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1629442580922},{"_id":"themes/Butterfly/layout/includes/third-party/subtitle.pug","hash":"5896c1b48ead4142f92223f31ae73ad04321eb97","modified":1629442580918},{"_id":"themes/Butterfly/layout/includes/widget/card_author.pug","hash":"8de5b5342082715047e2457f505bd5d74db5f89f","modified":1629442580920},{"_id":"themes/Butterfly/layout/includes/widget/card_recent_post.pug","hash":"471b20e71a19db1f5115727082e5188200c49383","modified":1629442580921},{"_id":"themes/Butterfly/layout/includes/widget/card_webinfo.pug","hash":"62adef7998fb9bebc5891a49472cfea944a1bf7a","modified":1629442580922},{"_id":"themes/Butterfly/layout/includes/widget/index.pug","hash":"ee7c9c6b66798eabbc0f6e6844f40c80e8a9c3fb","modified":1629442580923},{"_id":"themes/Butterfly/source/css/_global/index.styl","hash":"48e013802b713c02406c80c32c2609976399551c","modified":1629442580934},{"_id":"themes/Butterfly/source/css/_global/function.styl","hash":"f9de9db2a49ac4d5447660ab159171ac5c228e3c","modified":1629442580933},{"_id":"themes/Butterfly/source/css/_highlight/highlight.styl","hash":"f8197fed53d62c30e52cce6999fbe1911dc9377c","modified":1629442580934},{"_id":"themes/Butterfly/source/css/_layout/aside.styl","hash":"23ea60f8becc91f6e9f6cfb1cbfd25689c263b9c","modified":1629442580937},{"_id":"themes/Butterfly/source/css/_highlight/theme.styl","hash":"3f0b8699f529f0842c3b101006f60cb7933c16ff","modified":1629442580936},{"_id":"themes/Butterfly/source/css/_layout/chat.styl","hash":"f27ad7b5d781c98bcac5c12c2d70b69b830e0374","modified":1629442580937},{"_id":"themes/Butterfly/source/css/_layout/footer.styl","hash":"bfc4b9d8df66593c11c9ae78899f54e69785ca90","modified":1629442580938},{"_id":"themes/Butterfly/source/css/_layout/comments.styl","hash":"8e6c9a2c1881985e4b2ae14ef1bdfdbb1bc83b37","modified":1629442580937},{"_id":"themes/Butterfly/source/css/_layout/head.styl","hash":"dd71e34edece4e06b59e941fb3cc5ad9a3ad09cf","modified":1629442580938},{"_id":"themes/Butterfly/source/css/_layout/loading.styl","hash":"807f18717c29b5c41de6fc600a69a80ce8b7a19c","modified":1629442580938},{"_id":"themes/Butterfly/source/css/_layout/pagination.styl","hash":"db7fe645662d87be4f8dfc08e55bbe1a3734bf93","modified":1629442580939},{"_id":"themes/Butterfly/source/css/_layout/relatedposts.styl","hash":"8c4e08c8a63dacdfb2a733a0d0035fa97c7f5e9e","modified":1629442580940},{"_id":"themes/Butterfly/source/css/_layout/post.styl","hash":"7d9cd3d9ab09402682e0cd8d360ee907b8d5267a","modified":1629442580939},{"_id":"themes/Butterfly/source/css/_layout/reward.styl","hash":"4ae98e703440b616d2a36da139bda844c94d425e","modified":1629442580940},{"_id":"themes/Butterfly/source/css/_layout/rightside.styl","hash":"a00ad74074513a1c7f6e02977b8fa778beaa2108","modified":1629442580940},{"_id":"themes/Butterfly/source/css/_layout/sidebar.styl","hash":"9b4bb5bfbf670222ee3a846be14be00d7829c890","modified":1629442580940},{"_id":"themes/Butterfly/source/css/_layout/third-party.styl","hash":"943aa34c83c87d0225db65ae90621870472972fa","modified":1629442580941},{"_id":"themes/Butterfly/source/css/_mode/readmode.styl","hash":"89a6cb63a97cc08675319c403e4a89391f6ab401","modified":1629442580941},{"_id":"themes/Butterfly/source/css/_mode/darkmode.styl","hash":"8489722684aa9b4baa38386f4d4b39f4dbd60113","modified":1629442580941},{"_id":"themes/Butterfly/source/css/_page/404.styl","hash":"87c576a3361f30eefafec27a872ad76e9fbb2765","modified":1629442580942},{"_id":"themes/Butterfly/source/css/_page/categories.styl","hash":"ca1d3a885a85a91fcd6f7b55fca96cafb6a1b0a3","modified":1629442580943},{"_id":"themes/Butterfly/source/css/_page/archives.styl","hash":"190b85de3e686393e45869d12464995f23b304dc","modified":1629442580942},{"_id":"themes/Butterfly/source/css/_page/flink.styl","hash":"48ad198d0ea97a25db4d2a3e587a16ef41617c0b","modified":1629442580943},{"_id":"themes/Butterfly/source/css/_page/common.styl","hash":"5e5c1d6d104cc15314ae365d0da7cb07334a6457","modified":1629442580943},{"_id":"themes/Butterfly/source/css/_page/tags.styl","hash":"26e26797b3175498e20b2a8bf1679d3ed9fac5a6","modified":1629442580944},{"_id":"themes/Butterfly/source/css/_page/homepage.styl","hash":"0da09b1811a776106ca66c56be6e2a396dca5680","modified":1629442580943},{"_id":"themes/Butterfly/source/js/search/algolia.js","hash":"a19f12257b14f70806a0c3cb0e9df1090f36e919","modified":1629442580955},{"_id":"themes/Butterfly/source/js/search/local-search.js","hash":"3234942decaa1fde5b872766d4943a2e8cb9ef72","modified":1629442580956},{"_id":"themes/Butterfly/source/css/_tags/gallery.styl","hash":"b2698657f4c89393067c20365d0b8cb34772a355","modified":1629442580947},{"_id":"themes/Butterfly/source/css/_tags/button.styl","hash":"c3369a14f4111c098d0177036ca57df6deb59d72","modified":1629442580946},{"_id":"themes/Butterfly/source/css/_tags/hexo.styl","hash":"aa0728c556af75f5d66ecd44fa207722d474c26d","modified":1629442580947},{"_id":"themes/Butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1629442580947},{"_id":"themes/Butterfly/source/css/_tags/hide.styl","hash":"56691537c7f06c2cf1ffa1509a328f506d938ee8","modified":1629442580947},{"_id":"themes/Butterfly/source/css/_tags/label.styl","hash":"c91609b7f431cacecc3718ae2fb7403c55f8267a","modified":1629442580948},{"_id":"themes/Butterfly/source/css/_tags/tabs.styl","hash":"8520674768dd0b1837f947892e8402b192a4f9c1","modified":1629442580951},{"_id":"themes/Butterfly/source/css/_tags/note.styl","hash":"75a5c15c7029197ec5cffd27f7c5455891c946c9","modified":1629442580950},{"_id":"themes/Butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1629442580952},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1629442580901},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4eebb2d94ca75809ef0cf32d70f13e9bf1e87091","modified":1629442580901},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"a18415004d03c0a1783eccac522fbcb6ce0ea1f1","modified":1629442580902},{"_id":"themes/Butterfly/source/css/_search/local-search.styl","hash":"fa2985afd08556b25f5f1a01bc1a7c76b294a962","modified":1629442580946},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"896dc0b7480151562c5717771e3000c5a7fc1b16","modified":1629442580902},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"f3db5c5e738e097a191dc0de59c61d3e1444f7c3","modified":1629442580903},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"eb2d840fa42de3ec7a7fda0eaa30246d52f543e2","modified":1629442580902},{"_id":"themes/Butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1629442580903},{"_id":"themes/Butterfly/source/css/_search/algolia.styl","hash":"25ac939fc57346de07ba9e15a1a760b492baefd7","modified":1629442580945},{"_id":"themes/Butterfly/source/css/_search/index.styl","hash":"e65ed98056e6c91e622f94bad5283d00fdb22142","modified":1629442580945},{"_id":"themes/Butterfly/layout/includes/third-party/chat/index.pug","hash":"bb467bb22f3d0775b33f9eacbfc086ecb7831e78","modified":1629442580905},{"_id":"themes/Butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1629442580904},{"_id":"themes/Butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1629442580904},{"_id":"themes/Butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1629442580904},{"_id":"themes/Butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1629442580905},{"_id":"themes/Butterfly/layout/includes/third-party/comments/disqus.pug","hash":"d5f81fd5443a1b09efb165b5f4447a35949d14ad","modified":1629442580906},{"_id":"themes/Butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"0bf6a47e804fb793b40f82690a24816b902edd41","modified":1629442580906},{"_id":"themes/Butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"9ddfac9ae7071ecd982ca3808dcfd4d2d6098f33","modified":1629442580906},{"_id":"themes/Butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"b22ed23c78fb372cbdc4cfd3f733beb2ebea5d74","modified":1629442580907},{"_id":"themes/Butterfly/layout/includes/third-party/comments/index.pug","hash":"d97403cdd58c759cfd1752dd85aa4a0f9b73dc46","modified":1629442580907},{"_id":"source/_posts/javaWeb笔记.md","hash":"64983313242359f3b504dce2b7ba41dac8a197b2","modified":1630244795731},{"_id":"themes/Butterfly/layout/includes/third-party/comments/js.pug","hash":"e877c98949873a62659db7501d19eb3d66650b51","modified":1629442580907},{"_id":"themes/Butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1629442580908},{"_id":"themes/Butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"afffc4ac8ce93d39dcc892bd518805cf33531244","modified":1629442580908},{"_id":"themes/Butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1629442580910},{"_id":"themes/Butterfly/layout/includes/third-party/math/katex.pug","hash":"266caf985dc0703ff81b871b8f8d206f57db6e79","modified":1629442580910},{"_id":"themes/Butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1c7e9fe86b7d7ef18cc876dfce19263fd4e73066","modified":1629442580909},{"_id":"themes/Butterfly/layout/includes/third-party/math/mermaid.pug","hash":"faf1113de12d6db0486572d7e99b03cbd0c4a896","modified":1629442580911},{"_id":"themes/Butterfly/layout/includes/third-party/comments/valine.pug","hash":"d1ac48307e4999be08c63c673e98fe3fcee5bfce","modified":1629442580909},{"_id":"themes/Butterfly/layout/includes/third-party/comments/waline.pug","hash":"0bf1c53b914443c66be5077ff09cfc218f111e11","modified":1629442580909},{"_id":"themes/Butterfly/layout/includes/third-party/math/mathjax.pug","hash":"87e40f0c315407ab88571a2b3450d640f15c96bc","modified":1629442580911},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"8890becd8220c57db2c7451409710942c103a7f4","modified":1629442580912},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0ad766ae491e6fcba2ef3d136a7af6158cd4153e","modified":1629442580913},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"16cf05cf9649322da57e9b8d316573bb65f8d8d8","modified":1629442580913},{"_id":"themes/Butterfly/layout/includes/third-party/search/algolia.pug","hash":"1c06e60b120c946c1856904848ceba6ab58d1f82","modified":1629442580916},{"_id":"themes/Butterfly/layout/includes/third-party/search/local-search.pug","hash":"fbcf94ecdca30bed7cfc4f4ec08b200579c2614e","modified":1629442580917},{"_id":"themes/Butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1629442580916},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"767c38e3dfa0097b0dc1fdfd0df292c16f757d05","modified":1629442580914},{"_id":"themes/Butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1629442580917},{"_id":"themes/Butterfly/layout/includes/third-party/share/addtoany.pug","hash":"fbac21a6c5924fb2f8d1190fd634105fdbc603d4","modified":1629442580917},{"_id":"themes/Butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1629442580918},{"_id":"themes/Butterfly/layout/includes/third-party/share/share-js.pug","hash":"7e9a7347dd8ca4c33c564fb62512743b6012bb2d","modified":1629442580918},{"_id":"themes/Butterfly/source/css/_highlight/highlight/diff.styl","hash":"b0916c8c7d15b67b55cb1618be8370870fedbf42","modified":1629442580935},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"a3d43cc360666b5b9730e8bb9e5c8fd940ae5b3d","modified":1629442580914},{"_id":"themes/Butterfly/source/css/_highlight/prismjs/index.styl","hash":"4d71aab9082c67d3ee52ad58dfc3c1c9b41f2ab1","modified":1629442580936},{"_id":"themes/Butterfly/source/css/_highlight/highlight/index.styl","hash":"b74c61f6e15b422e9d2df23133552bbd1b5fe513","modified":1629442580935},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"83103bad0db195bce095330c4a84e7529bbd40dd","modified":1629442580915},{"_id":"themes/Butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1629442580935},{"_id":"themes/Butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1629442580936},{"_id":"public/atom.xml","hash":"323e13e75bc9d21a17c0e1a5ea36eb1837b89b54","modified":1631949438577},{"_id":"public/sitemap.xml","hash":"b0ff3fd04f9c48571045d52234aa04d256435258","modified":1631949438577},{"_id":"public/Gallery/index.html","hash":"9b1e07ffee1743c5eab2d57ec4c47840dd24fd72","modified":1631949438577},{"_id":"public/categories/index.html","hash":"d5b981eb9a5613d6855435f6124c8344ad825c9d","modified":1631949438577},{"_id":"public/archives/index.html","hash":"d1af971a06dbf35ab1432ba7f0025447a0253cb7","modified":1631949438577},{"_id":"public/about/index.html","hash":"c16d527e2e28494871aa40df3a773ad934011fb1","modified":1631949438577},{"_id":"public/movies/index.html","hash":"ec391b72edee769661cdec1e0a86b43d8314f50f","modified":1631949438577},{"_id":"public/link/index.html","hash":"4cd140057a0a01a3061db1c26fd62c9b8ffbbcb0","modified":1631949438577},{"_id":"public/music/index.html","hash":"bb66cabc14d470e80356580e8b8ba2e73789aed6","modified":1631949438577},{"_id":"public/tags/index.html","hash":"91006a0ca73348539ab8d8dccea36fb078b3b865","modified":1631949438577},{"_id":"public/2021/08/19/androidDrawable/index.html","hash":"89e74e1f7188e4ef9c6b61f965ca35f550d0b042","modified":1631949438577},{"_id":"public/2021/08/19/javaWeb笔记/index.html","hash":"b163bf875d12d1547904ef008e73e4978d006aca","modified":1631949438577},{"_id":"public/2021/08/19/搭建教程/index.html","hash":"ec6a6ef8f81f06541638ba245ed09f2271f23370","modified":1631949438577},{"_id":"public/archives/2021/index.html","hash":"80eb1963f73e2f8236936fd7e619511009a5bdb1","modified":1631949438577},{"_id":"public/archives/2021/08/index.html","hash":"d33680635e0663109a12a52e6dc5d5274289a292","modified":1631949438577},{"_id":"public/categories/教程/index.html","hash":"3a9b6bd8bf6ccfdfa428212cd5b2bac46e858f3e","modified":1631949438577},{"_id":"public/categories/笔记/index.html","hash":"fb5ba56ed7a4dc9dcdf80d4688ef49c24855a241","modified":1631949438577},{"_id":"public/index.html","hash":"e034ffe2f793870414a44d7b937453ddad1af8a7","modified":1631949438577},{"_id":"public/tags/android/index.html","hash":"5c277c8354431f35eb74ee5a28b34b77aebbf98e","modified":1631949438577},{"_id":"public/tags/drawable/index.html","hash":"c08bb40cb27076b1b2c02d4a7a1bd41bf3b143c2","modified":1631949438577},{"_id":"public/tags/hexo/index.html","hash":"e44bf14aac2bb6e9782a87b98bde0c1e3d3c4942","modified":1631949438577},{"_id":"public/tags/主题/index.html","hash":"1edfeaaaccf94d68214b629ce432edbae8b0365b","modified":1631949438577},{"_id":"public/tags/javaweb/index.html","hash":"dff5f6e6bd44c1736042521f16e8ba8b231570c8","modified":1631949438577},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1630228733389},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1630228733389},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1630228733389},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1630228733389},{"_id":"public/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1630228733389},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1630228733389},{"_id":"public/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":1630228733389},{"_id":"public/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1630228733389},{"_id":"public/css/index.css","hash":"1f474a067978c799d2574daec42134d188957a98","modified":1630228733389},{"_id":"public/js/main.js","hash":"8a6a7d71613d5c66efdf592e96f0f49ab21cdf3f","modified":1630228733389},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1630228733389},{"_id":"source/_posts/c++阶段一第一讲.md","hash":"5c00cc8bee4275c796a7548b50ac816d9b533e6e","modified":1631689958337},{"_id":"source/_posts/c++阶段二第一讲.md","hash":"fe1e0c71f2e2bed6519267d8de766987c75e815d","modified":1631150240466},{"_id":"source/_posts/c++阶段三第一讲.md","hash":"e285fd9dc237bb1f94d92aab59960c02a3f0824b","modified":1631150240466},{"_id":"source/_posts/c++阶段一第三讲.md","hash":"b453622748e5f89f52ebc449156939b9e110e642","modified":1631676547024},{"_id":"source/_posts/c++阶段一第二讲.md","hash":"436f2b84ff8db8dbcffdf3ee48f244a345f3e96b","modified":1631949881219},{"_id":"source/_posts/c++阶段三第三讲.md","hash":"6a4d63e14af9bc87c4fece9908f46db2d3206d65","modified":1631689902016},{"_id":"source/_posts/c++阶段三第二讲.md","hash":"e2d1c6508b4d62345ff6b8baaf027de263ce56e4","modified":1631689958349},{"_id":"source/_posts/flutter笔记.md","hash":"babe873fd3c85a2babb8c90c57daaab88cd44cf8","modified":1631948712008},{"_id":"source/_posts/c++阶段二第三讲.md","hash":"8b27f1c4076598f63309edcb2c2a54a2a47e50d4","modified":1631687437029},{"_id":"source/_posts/c++阶段二第二讲.md","hash":"4a3917c4d8c07bacb87cadf395cfb6acf0ae06b4","modified":1631948995672},{"_id":"source/_posts/Flutter.md","hash":"4683b261c8a8a1299e7dee0a4dc6baf1cf72bc31","modified":1631871295376},{"_id":"source/_posts/Flutter-AppBar.md","hash":"c782864ba0b2d050684895d4c1becf70ccf67d58","modified":1631932488848},{"_id":"source/_posts/Flutter-MaterialApp.md","hash":"443e995ad9bc22dd11c20c135a68e700439a915a","modified":1631928428121},{"_id":"source/_posts/Flutter-Center.md","hash":"7acdba87849ace3b71bbfa177708ab6a95555dd7","modified":1631925983073},{"_id":"source/_posts/Flutter-Scaffold.md","hash":"fb0254dc12abb27503c0b10738f1eadcc8c942c4","modified":1631929459262},{"_id":"source/_posts/Flutter-Container.md","hash":"e49d0dbeb4b6f446161c485c03a9491c580bab21","modified":1631871348368},{"_id":"public/2021/09/18/Flutter-AppBar/index.html","hash":"d7418529fd2216ed0de9570b8475ad11918b1990","modified":1631949438577},{"_id":"public/2021/09/18/Flutter-Scaffold/index.html","hash":"cb7a65061a141912c4917f5179ec9b01a732719d","modified":1631949438577},{"_id":"public/2021/09/18/Flutter-MaterialApp/index.html","hash":"58782185013f93e28c479cff8e1e11c450120b0e","modified":1631949438577},{"_id":"public/2021/09/17/Flutter-Center/index.html","hash":"344845cf0d85d0d0aaa598fbc1b7d67604570412","modified":1631949438577},{"_id":"public/2021/09/17/Flutter-Container/index.html","hash":"1e167d57303d99801cf69c8148e568a68e386bd3","modified":1631949438577},{"_id":"public/2021/09/17/flutter笔记/index.html","hash":"47ad82c2b5568911882b453145df5bab98be8efc","modified":1631949438577},{"_id":"public/2021/09/15/c++阶段三第三讲/index.html","hash":"b501f6d6a96d9671da726b413ea6286d2ff101bd","modified":1631949438577},{"_id":"public/2021/09/15/c++阶段二第三讲/index.html","hash":"82890d1fc4a88c30fe1da8e18797d948281e68ce","modified":1631949438577},{"_id":"public/2021/09/15/c++阶段一第三讲/index.html","hash":"9a9ff95bd45dd15cd2cadc259cc1566e29b56a80","modified":1631949438577},{"_id":"public/2021/09/10/c++阶段三第二讲/index.html","hash":"04915f79a4150ca8bdbe821962ceb37e4a697a28","modified":1631949438577},{"_id":"public/2021/09/09/c++阶段二第二讲/index.html","hash":"19b66271cf5f49401c9f351ce44ac7374b9d2885","modified":1631949438577},{"_id":"public/2021/09/09/c++阶段一第二讲/index.html","hash":"4a87b5bd97094351ed8443b1aec36f0255cb4dc4","modified":1631949438577},{"_id":"public/2021/08/31/c++阶段三第一讲/index.html","hash":"88a1cc4dadc51533089b981ebab2fdfb85d78ef9","modified":1631949438577},{"_id":"public/2021/08/31/c++阶段二第一讲/index.html","hash":"089f8e9f8cf546ff390cda95cfbbfff2c5fcd98e","modified":1631949438577},{"_id":"public/2021/08/31/c++阶段一第一讲/index.html","hash":"7cd2b5fffcf91e19ec838c49f5c7f1ebdec58bd6","modified":1631949438577},{"_id":"public/archives/page/2/index.html","hash":"9fc5a12c60992775a4e2bd20f3f68aaf03f910a3","modified":1631949438577},{"_id":"public/archives/2021/page/2/index.html","hash":"a4b6ea51243caee9fbee45d7d3429544df632ab7","modified":1631949438577},{"_id":"public/archives/2021/09/index.html","hash":"4e4cff2552ce7748328e05425a914fbf11be6a53","modified":1631949438577},{"_id":"public/archives/2021/09/page/2/index.html","hash":"001fee9b6edfe13d6f7c6dde6b294c5e7a8dfbd5","modified":1631949438577},{"_id":"public/categories/c/index.html","hash":"31632aa9626cfa34efda2103ab604965359babb4","modified":1631949438577},{"_id":"public/categories/flutter/index.html","hash":"c764a8019cc05f968a03b93fb65a7dfde44476d7","modified":1631949438577},{"_id":"public/page/2/index.html","hash":"e2616c3a45310dd9b6bbc7e02b9379a2a5030050","modified":1631949438577},{"_id":"public/tags/教材/index.html","hash":"73722cf6316835da2a573823dd08f7a0ace460a1","modified":1631949438577},{"_id":"public/tags/阶段三/index.html","hash":"dec52e5ebdb3b0a7dad7df589b8d423f614e0c6a","modified":1631949438577},{"_id":"public/tags/阶段一/index.html","hash":"5752fed039fa656197604514e2fdd5484a9d3ae5","modified":1631949438577},{"_id":"public/tags/阶段二/index.html","hash":"5efc2a7bbc7743aba344e0899b56ad0f553418b9","modified":1631949438577},{"_id":"public/tags/笔记/index.html","hash":"8a7f4f48ff8386b53ee8cba9de6f5dc33b2bca60","modified":1631949438577}],"Category":[{"name":"教程","_id":"cksx03ihd00049cu975486bp6"},{"name":"笔记","_id":"cksx03kn3000n9cu97pp96z0f"},{"name":"c++","_id":"ckt0vl5fq0002ocu901wo5o7h"},{"name":"c**","_id":"cktnr5v060003k0ux6v1x7css"},{"name":"flutter","_id":"cktnr5v0j000gk0ux164732kq"}],"Data":[{"_id":"_config.butterfly","data":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}}},{"_id":"link","data":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}],"Page":[{"title":"图库","date":"2000-06-22T16:00:00.000Z","type":"Gallery","top_img":"/img/图库.jpg","_content":"\n","source":"Gallery/index.md","raw":"---\ntitle: 图库\ndate: 2000-06-23 00:00:00\ntype: \"Gallery\"\ntop_img: /img/图库.jpg\n---\n\n","updated":"2021-08-20T06:56:20.877Z","path":"Gallery/index.html","comments":1,"layout":"page","_id":"cksx03igw00009cu9abtm77mm","content":"","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"分类","date":"2000-06-22T16:00:00.000Z","type":"tags","top_img":"/img/category.jpg","_content":"\n","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2000-06-23 00:00:00\ntype: \"tags\"\ntop_img: /img/category.jpg\n---\n\n","updated":"2021-08-20T06:56:20.881Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cksx03ihb00029cu9g5pgfd8d","content":"","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"时间轴","date":"2000-06-22T16:00:00.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: 时间轴\ndate: 2000-06-23 00:00:00\ntype: \"archives\"\n---\n","updated":"2021-08-20T06:56:20.881Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cksx03ihe00069cu9dz89htub","content":"","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"关于","date":"2000-06-22T16:00:00.000Z","type":"about","top_img":"/img/关于.jpg","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2000-06-23 00:00:00\ntype: \"about\"\ntop_img: /img/关于.jpg\n---\n","updated":"2021-08-20T06:56:20.880Z","path":"about/index.html","comments":1,"layout":"page","_id":"cksx03ihf00079cu91c0nhmhn","content":"","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"电影","date":"2000-06-22T16:00:00.000Z","type":"movies","top_img":"/img/电影.jpg","_content":"\n","source":"movies/index.md","raw":"---\ntitle: 电影\ndate: 2000-06-23 00:00:00\ntype: \"movies\"\ntop_img: /img/电影.jpg\n---\n\n","updated":"2021-08-20T06:56:20.883Z","path":"movies/index.html","comments":1,"layout":"page","_id":"cksx03ihf00089cu9d4jz8bo6","content":"","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"友情链接","date":"2000-06-22T16:00:00.000Z","type":"link","top_img":"/img/链接.jpg","_content":"","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2000-06-23 00:00:00\ntype: \"link\"\ntop_img: /img/链接.jpg\n---\n","updated":"2021-08-20T06:56:20.882Z","path":"link/index.html","comments":1,"layout":"page","_id":"cksx03ihi000b9cu95e3c42ij","content":"","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"音乐","date":"2000-06-22T16:00:00.000Z","type":"music","top_img":"/img/音乐.jpg","_content":"\n","source":"music/index.md","raw":"---\ntitle: 音乐\ndate: 2000-06-23 00:00:00\ntype: \"music\"\ntop_img: /img/音乐.jpg\n---\n\n","updated":"2021-08-20T06:56:20.883Z","path":"music/index.html","comments":1,"layout":"page","_id":"cksx03ihj000c9cu92piqg0y0","content":"","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"标签","date":"2000-06-22T16:00:00.000Z","type":"tags","top_img":"/img/tag.jpg","_content":"\n","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2000-06-23 00:00:00\ntype: \"tags\"\ntop_img: /img/tag.jpg\n---\n\n","updated":"2021-08-20T06:56:20.884Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cksx03ihk000f9cu918h1g2vg","content":"","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""}],"Post":[{"title":"androidDrawable","date":"2021-08-19T08:59:46.000Z","description":"Android Drawable竟然还能这么写","_content":"\n# Android Drawable竟然还能这么写\n\n通常我们在`res/drawable`下面自定义`shape`和`selector`来满足一些UI的设计，但是由于xml最终转换为`drawable`需要经过IO或反射创建，会有一些性能损耗，另外随着项目的增大和模块化等，很多通用的样式并不能快速复用，需要合理的项目资源管理规范才能实施。那么通过代码直接创建这些`drawable`，可以在一定程度上降低这些副作用。本篇介绍用`kotlin DSL`简洁的语法特性来实现常见的`drawable`。\n\n## 代码对应效果预览\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4ML6PBu1beWAPjx4co2ZYLbbFxmZXZ5QdqRYTCNMHE2df1gv2d76LpQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4gheGkzKnqYsx0jvqgaBibQ8UNWmSJ86rX1zdg2ycY4QlnYKc2Bgv1eg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4HPpwDiavwzaVxfCicHmsDuJf04PdqwAkcwjWGIguxZd6jXC29X4p1eKg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4eb2Gld7tH8RboMF2wsTGZ55TM3Z6uVLyzRJItReKSkWoqlUAeNlYEg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n![图片](https://mmbiz.qpic.cn/mmbiz_gif/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4QS9k9r6HTL74aUY7akWPWYHEpr94mHDIrOaz8ZD1jv00R6iaYOg22dQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n## 集成和使用\n\n### 在项目级的build.gradle文件种添加仓库Jitpack\n\n```\nallprojects {\n    repositories {\n        ...\n        maven { url 'https://jitpack.io' }\n    }\n}\n```\n\n### 添加依赖\n\n```\ndependencies {        \n    implementation 'com.github.forJrking:DrawableDsl:0.0.3’\n}\n```\n\n\n\n### 抛弃xml创建方式示例（其他参见demo)\n\n```\n// infix用法用于去掉括号更加简洁，详细后面说明\nimage src shapeDrawable {\n    //指定shape样式\n    shape(ShapeBuilder.Shape.RECTANGLE)\n    //圆角，支持4个角单独设置\n    corner(20f)\n    //solid 颜色\n    solid(\"#ABE2E3\")\n    //stroke 颜色，边框dp，虚线设置\n    stroke(R.color.white, 2f, 5f, 8f)\n}\n//按钮点击样式\nbtn.background = selectorDrawable {\n    //默认样式\n    normal = shapeDrawable {\n        corner(20f)\n        gradient(90, R.color.F97794, R.color.C623AA2)\n    }\n    //点击效果\n    pressed = shapeDrawable {\n        corner(20f)\n        solid(\"#84232323\")\n    }\n}\n```\n\n\n\n## 实现思路\n\n### xml如何转换成drawable\n\nxml变成drawable，通过android.graphics.drawable.DrawableInflater这个类来IO解析标签创建，然后通过解析标签再设置属性：\n\n```\n//标签创建\nprivate Drawable inflateFromTag(@NonNull String name) {\n    switch (name) {\n        case \"selector\":\n            return new StateListDrawable();\n        case \"level-list\":\n            return new LevelListDrawable();\n        case \"layer-list\":\n            return new LayerDrawable();\n        ....\n        case \"color\":\n            return new ColorDrawable();\n        case \"shape\":\n            return new GradientDrawable();\n        case \"vector\":\n            return new VectorDrawable();\n        ...\n    }\n}\n//反射创建\nprivate Drawable inflateFromClass(@NonNull String className) {\n    try {\n        Constructor<? extends Drawable> constructor;\n        synchronized (CONSTRUCTOR_MAP) {\n            constructor = CONSTRUCTOR_MAP.get(className);\n            if (constructor == null) {\n                final Class<? extends Drawable> clazz = mClassLoader.loadClass(className).asSubclass(Drawable.class);\n                constructor = clazz.getConstructor();\n                CONSTRUCTOR_MAP.put(className, constructor);\n            }\n        }\n        return constructor.newInstance();\n    } catch (NoSuchMethodException e) {\n    ...\n}\n```\n\n\n\n### 代码实现\n\n由于创建shape等需要设置各种属性来构建，比较符合build设计模式，那我们首先封装build模式的shapeBuilder，这样做虽然代码比起直接使用apply{}要多，但是可以让纯java项目用起来很舒服，其他实现请查看源码：\n\n```\nclass ShapeBuilder : DrawableBuilder {\n    private var mRadius = 0f\n    private var mWidth = 0f\n    private var mHeight = 0f\n    ...\n    private var mShape = GradientDrawable.RECTANGLE\n    private var mSolidColor = 0\n\n    /**分别设置四个角的圆角*/\n    fun corner(leftTop: Float,rightTop: Float,leftBottom: Float,rightBottom: Float): ShapeBuilder {\n        ....if(dp)dp2px(leftTop) else leftTop\n        return this\n    }\n\n    fun solid(@ColorRes colorId: Int): ShapeBuilder {\n        mSolidColor = ContextCompat.getColor(context, colorId)\n        return this\n    }\n    // 省略其他参数设置方法 详细代码查看源码\n    override fun build(): Drawable {\n        val gradientDrawable = GradientDrawable()\n        gradientDrawable = GradientDrawable()\n        gradientDrawable.setColor(mSolidColor)\n        gradientDrawable.shape = mShape\n        ....其他参数设置\n        return gradientDrawable\n    }    \n}\n```\n\n\n\n### 把build模式转换为dsl\n\n理论上所有的build模式都可以轻松转换为dsl写法：\n\n```\ninline fun shapeDrawable(builder: ShapeBuilder.() -> Unit): Drawable {\n    return ShapeBuilder().also(builder).build()\n}\n//使用方法 \nval drawable = shapeDrawable{\n    ...\n}\n```\n\n\n\n### 函数去括号\n\n通过上面封装已经实现了dsl的写法，通常setBackground可以通过setter简化，但是我发现由于有些api设计还需要加括号，这样不太kotlin：\n\n```\n//容易阅读\niv1.background = shapeDrawable {\n    shape(ShapeBuilder.Shape.RECTANGLE)\n    solid(\"#ABE2E3\")\n}\n//多了括号看起来不舒服\niv2.setImageDrawable(shapeDrawable {\n    solid(\"#84232323\")\n})\n```\n\n怎么去掉括号呢？🈶2种方式infix函数(中缀表达)和property setter\n\n\n\n#### infix函数特点和规范\n\n- Kotlin允许在不使用括号和点号的情况下调用函数\n- 必须只有一个参数\n- 必须是成员函数或扩展函数\n- 不支持可变参数和带默认值参数\n\n```\n/**为所有ImageView添加扩展infix函数 来去掉括号*/\ninfix fun ImageView.src(drawable: Drawable?) {\n    this.setImageDrawable(drawable)\n}\n//使用如下\niv2 src shapeDrawable {\n    shape(ShapeBuilder.Shape.OVAL)\n    solid(\"#E3ABC2\")\n}\n```\n\n当然了代码是用来阅读的。个人认为如果我们大量使用infix函数，阅读困难会大大增加，所以建议函数命名必须可以直击函数功能，而且函数功能简单且单一。\n\n#### property setter方式\n\n主要使用kotlin可以简化setter为等号来去括号：\n\n```\n/**扩展变量*/var ImageView.src: Drawable    get() = drawable    set(value) {        this.setImageDrawable(value)    }//使用如下   iv2.src = shapeDrawable {    shape(ShapeBuilder.Shape.OVAL)    solid(\"#E3ABC2\")}    \n```\n\n\n\n### 优缺点\n\n#### 优点\n\n- 代码直接创建比起xml方式可以提升性能\n- dsl方式比起build模式和调用方法设置更加简洁符合kotlin风格\n- 通过合适的代码管理可以复用这些代码，比xml管理方便\n\n\n\n#### 缺点\n\n- 没有as的预览功能，只有通过上机观测\n- api还没有覆盖所有drawable属性（例如shape = ring等)\n\n\n\n## 结语\n\n上面把的DrawableDsl基础用法介绍完了，欢迎大家使用，欢迎提Issues，记得给个star哦。Github链接：\n\n> https://github.com/forJrking/DrawableDsl\n","source":"_posts/androidDrawable.md","raw":"---\ntitle: androidDrawable\ndate: 2021-08-19 16:59:46\ntags: [android,drawable]\ncategories: 教程\ndescription: Android Drawable竟然还能这么写\n---\n\n# Android Drawable竟然还能这么写\n\n通常我们在`res/drawable`下面自定义`shape`和`selector`来满足一些UI的设计，但是由于xml最终转换为`drawable`需要经过IO或反射创建，会有一些性能损耗，另外随着项目的增大和模块化等，很多通用的样式并不能快速复用，需要合理的项目资源管理规范才能实施。那么通过代码直接创建这些`drawable`，可以在一定程度上降低这些副作用。本篇介绍用`kotlin DSL`简洁的语法特性来实现常见的`drawable`。\n\n## 代码对应效果预览\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4ML6PBu1beWAPjx4co2ZYLbbFxmZXZ5QdqRYTCNMHE2df1gv2d76LpQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4gheGkzKnqYsx0jvqgaBibQ8UNWmSJ86rX1zdg2ycY4QlnYKc2Bgv1eg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4HPpwDiavwzaVxfCicHmsDuJf04PdqwAkcwjWGIguxZd6jXC29X4p1eKg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4eb2Gld7tH8RboMF2wsTGZ55TM3Z6uVLyzRJItReKSkWoqlUAeNlYEg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n![图片](https://mmbiz.qpic.cn/mmbiz_gif/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4QS9k9r6HTL74aUY7akWPWYHEpr94mHDIrOaz8ZD1jv00R6iaYOg22dQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n## 集成和使用\n\n### 在项目级的build.gradle文件种添加仓库Jitpack\n\n```\nallprojects {\n    repositories {\n        ...\n        maven { url 'https://jitpack.io' }\n    }\n}\n```\n\n### 添加依赖\n\n```\ndependencies {        \n    implementation 'com.github.forJrking:DrawableDsl:0.0.3’\n}\n```\n\n\n\n### 抛弃xml创建方式示例（其他参见demo)\n\n```\n// infix用法用于去掉括号更加简洁，详细后面说明\nimage src shapeDrawable {\n    //指定shape样式\n    shape(ShapeBuilder.Shape.RECTANGLE)\n    //圆角，支持4个角单独设置\n    corner(20f)\n    //solid 颜色\n    solid(\"#ABE2E3\")\n    //stroke 颜色，边框dp，虚线设置\n    stroke(R.color.white, 2f, 5f, 8f)\n}\n//按钮点击样式\nbtn.background = selectorDrawable {\n    //默认样式\n    normal = shapeDrawable {\n        corner(20f)\n        gradient(90, R.color.F97794, R.color.C623AA2)\n    }\n    //点击效果\n    pressed = shapeDrawable {\n        corner(20f)\n        solid(\"#84232323\")\n    }\n}\n```\n\n\n\n## 实现思路\n\n### xml如何转换成drawable\n\nxml变成drawable，通过android.graphics.drawable.DrawableInflater这个类来IO解析标签创建，然后通过解析标签再设置属性：\n\n```\n//标签创建\nprivate Drawable inflateFromTag(@NonNull String name) {\n    switch (name) {\n        case \"selector\":\n            return new StateListDrawable();\n        case \"level-list\":\n            return new LevelListDrawable();\n        case \"layer-list\":\n            return new LayerDrawable();\n        ....\n        case \"color\":\n            return new ColorDrawable();\n        case \"shape\":\n            return new GradientDrawable();\n        case \"vector\":\n            return new VectorDrawable();\n        ...\n    }\n}\n//反射创建\nprivate Drawable inflateFromClass(@NonNull String className) {\n    try {\n        Constructor<? extends Drawable> constructor;\n        synchronized (CONSTRUCTOR_MAP) {\n            constructor = CONSTRUCTOR_MAP.get(className);\n            if (constructor == null) {\n                final Class<? extends Drawable> clazz = mClassLoader.loadClass(className).asSubclass(Drawable.class);\n                constructor = clazz.getConstructor();\n                CONSTRUCTOR_MAP.put(className, constructor);\n            }\n        }\n        return constructor.newInstance();\n    } catch (NoSuchMethodException e) {\n    ...\n}\n```\n\n\n\n### 代码实现\n\n由于创建shape等需要设置各种属性来构建，比较符合build设计模式，那我们首先封装build模式的shapeBuilder，这样做虽然代码比起直接使用apply{}要多，但是可以让纯java项目用起来很舒服，其他实现请查看源码：\n\n```\nclass ShapeBuilder : DrawableBuilder {\n    private var mRadius = 0f\n    private var mWidth = 0f\n    private var mHeight = 0f\n    ...\n    private var mShape = GradientDrawable.RECTANGLE\n    private var mSolidColor = 0\n\n    /**分别设置四个角的圆角*/\n    fun corner(leftTop: Float,rightTop: Float,leftBottom: Float,rightBottom: Float): ShapeBuilder {\n        ....if(dp)dp2px(leftTop) else leftTop\n        return this\n    }\n\n    fun solid(@ColorRes colorId: Int): ShapeBuilder {\n        mSolidColor = ContextCompat.getColor(context, colorId)\n        return this\n    }\n    // 省略其他参数设置方法 详细代码查看源码\n    override fun build(): Drawable {\n        val gradientDrawable = GradientDrawable()\n        gradientDrawable = GradientDrawable()\n        gradientDrawable.setColor(mSolidColor)\n        gradientDrawable.shape = mShape\n        ....其他参数设置\n        return gradientDrawable\n    }    \n}\n```\n\n\n\n### 把build模式转换为dsl\n\n理论上所有的build模式都可以轻松转换为dsl写法：\n\n```\ninline fun shapeDrawable(builder: ShapeBuilder.() -> Unit): Drawable {\n    return ShapeBuilder().also(builder).build()\n}\n//使用方法 \nval drawable = shapeDrawable{\n    ...\n}\n```\n\n\n\n### 函数去括号\n\n通过上面封装已经实现了dsl的写法，通常setBackground可以通过setter简化，但是我发现由于有些api设计还需要加括号，这样不太kotlin：\n\n```\n//容易阅读\niv1.background = shapeDrawable {\n    shape(ShapeBuilder.Shape.RECTANGLE)\n    solid(\"#ABE2E3\")\n}\n//多了括号看起来不舒服\niv2.setImageDrawable(shapeDrawable {\n    solid(\"#84232323\")\n})\n```\n\n怎么去掉括号呢？🈶2种方式infix函数(中缀表达)和property setter\n\n\n\n#### infix函数特点和规范\n\n- Kotlin允许在不使用括号和点号的情况下调用函数\n- 必须只有一个参数\n- 必须是成员函数或扩展函数\n- 不支持可变参数和带默认值参数\n\n```\n/**为所有ImageView添加扩展infix函数 来去掉括号*/\ninfix fun ImageView.src(drawable: Drawable?) {\n    this.setImageDrawable(drawable)\n}\n//使用如下\niv2 src shapeDrawable {\n    shape(ShapeBuilder.Shape.OVAL)\n    solid(\"#E3ABC2\")\n}\n```\n\n当然了代码是用来阅读的。个人认为如果我们大量使用infix函数，阅读困难会大大增加，所以建议函数命名必须可以直击函数功能，而且函数功能简单且单一。\n\n#### property setter方式\n\n主要使用kotlin可以简化setter为等号来去括号：\n\n```\n/**扩展变量*/var ImageView.src: Drawable    get() = drawable    set(value) {        this.setImageDrawable(value)    }//使用如下   iv2.src = shapeDrawable {    shape(ShapeBuilder.Shape.OVAL)    solid(\"#E3ABC2\")}    \n```\n\n\n\n### 优缺点\n\n#### 优点\n\n- 代码直接创建比起xml方式可以提升性能\n- dsl方式比起build模式和调用方法设置更加简洁符合kotlin风格\n- 通过合适的代码管理可以复用这些代码，比xml管理方便\n\n\n\n#### 缺点\n\n- 没有as的预览功能，只有通过上机观测\n- api还没有覆盖所有drawable属性（例如shape = ring等)\n\n\n\n## 结语\n\n上面把的DrawableDsl基础用法介绍完了，欢迎大家使用，欢迎提Issues，记得给个star哦。Github链接：\n\n> https://github.com/forJrking/DrawableDsl\n","slug":"androidDrawable","published":1,"updated":"2021-08-20T06:56:20.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksx03ih800019cu9g9qaef9b","content":"<h1 id=\"Android-Drawable竟然还能这么写\"><a href=\"#Android-Drawable竟然还能这么写\" class=\"headerlink\" title=\"Android Drawable竟然还能这么写\"></a>Android Drawable竟然还能这么写</h1><p>通常我们在<code>res/drawable</code>下面自定义<code>shape</code>和<code>selector</code>来满足一些UI的设计，但是由于xml最终转换为<code>drawable</code>需要经过IO或反射创建，会有一些性能损耗，另外随着项目的增大和模块化等，很多通用的样式并不能快速复用，需要合理的项目资源管理规范才能实施。那么通过代码直接创建这些<code>drawable</code>，可以在一定程度上降低这些副作用。本篇介绍用<code>kotlin DSL</code>简洁的语法特性来实现常见的<code>drawable</code>。</p>\n<h2 id=\"代码对应效果预览\"><a href=\"#代码对应效果预览\" class=\"headerlink\" title=\"代码对应效果预览\"></a>代码对应效果预览</h2><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4ML6PBu1beWAPjx4co2ZYLbbFxmZXZ5QdqRYTCNMHE2df1gv2d76LpQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4gheGkzKnqYsx0jvqgaBibQ8UNWmSJ86rX1zdg2ycY4QlnYKc2Bgv1eg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4HPpwDiavwzaVxfCicHmsDuJf04PdqwAkcwjWGIguxZd6jXC29X4p1eKg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4eb2Gld7tH8RboMF2wsTGZ55TM3Z6uVLyzRJItReKSkWoqlUAeNlYEg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4QS9k9r6HTL74aUY7akWPWYHEpr94mHDIrOaz8ZD1jv00R6iaYOg22dQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"图片\"></p>\n<h2 id=\"集成和使用\"><a href=\"#集成和使用\" class=\"headerlink\" title=\"集成和使用\"></a>集成和使用</h2><h3 id=\"在项目级的build-gradle文件种添加仓库Jitpack\"><a href=\"#在项目级的build-gradle文件种添加仓库Jitpack\" class=\"headerlink\" title=\"在项目级的build.gradle文件种添加仓库Jitpack\"></a>在项目级的build.gradle文件种添加仓库Jitpack</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        maven &#123; url &#x27;https://jitpack.io&#x27; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;        </span><br><span class=\"line\">    implementation &#x27;com.github.forJrking:DrawableDsl:0.0.3’</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"抛弃xml创建方式示例（其他参见demo\"><a href=\"#抛弃xml创建方式示例（其他参见demo\" class=\"headerlink\" title=\"抛弃xml创建方式示例（其他参见demo)\"></a>抛弃xml创建方式示例（其他参见demo)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// infix用法用于去掉括号更加简洁，详细后面说明</span><br><span class=\"line\">image src shapeDrawable &#123;</span><br><span class=\"line\">    //指定shape样式</span><br><span class=\"line\">    shape(ShapeBuilder.Shape.RECTANGLE)</span><br><span class=\"line\">    //圆角，支持4个角单独设置</span><br><span class=\"line\">    corner(20f)</span><br><span class=\"line\">    //solid 颜色</span><br><span class=\"line\">    solid(&quot;#ABE2E3&quot;)</span><br><span class=\"line\">    //stroke 颜色，边框dp，虚线设置</span><br><span class=\"line\">    stroke(R.color.white, 2f, 5f, 8f)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//按钮点击样式</span><br><span class=\"line\">btn.background = selectorDrawable &#123;</span><br><span class=\"line\">    //默认样式</span><br><span class=\"line\">    normal = shapeDrawable &#123;</span><br><span class=\"line\">        corner(20f)</span><br><span class=\"line\">        gradient(90, R.color.F97794, R.color.C623AA2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //点击效果</span><br><span class=\"line\">    pressed = shapeDrawable &#123;</span><br><span class=\"line\">        corner(20f)</span><br><span class=\"line\">        solid(&quot;#84232323&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><h3 id=\"xml如何转换成drawable\"><a href=\"#xml如何转换成drawable\" class=\"headerlink\" title=\"xml如何转换成drawable\"></a>xml如何转换成drawable</h3><p>xml变成drawable，通过android.graphics.drawable.DrawableInflater这个类来IO解析标签创建，然后通过解析标签再设置属性：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//标签创建</span><br><span class=\"line\">private Drawable inflateFromTag(@NonNull String name) &#123;</span><br><span class=\"line\">    switch (name) &#123;</span><br><span class=\"line\">        case &quot;selector&quot;:</span><br><span class=\"line\">            return new StateListDrawable();</span><br><span class=\"line\">        case &quot;level-list&quot;:</span><br><span class=\"line\">            return new LevelListDrawable();</span><br><span class=\"line\">        case &quot;layer-list&quot;:</span><br><span class=\"line\">            return new LayerDrawable();</span><br><span class=\"line\">        ....</span><br><span class=\"line\">        case &quot;color&quot;:</span><br><span class=\"line\">            return new ColorDrawable();</span><br><span class=\"line\">        case &quot;shape&quot;:</span><br><span class=\"line\">            return new GradientDrawable();</span><br><span class=\"line\">        case &quot;vector&quot;:</span><br><span class=\"line\">            return new VectorDrawable();</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//反射创建</span><br><span class=\"line\">private Drawable inflateFromClass(@NonNull String className) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        Constructor&lt;? extends Drawable&gt; constructor;</span><br><span class=\"line\">        synchronized (CONSTRUCTOR_MAP) &#123;</span><br><span class=\"line\">            constructor = CONSTRUCTOR_MAP.get(className);</span><br><span class=\"line\">            if (constructor == null) &#123;</span><br><span class=\"line\">                final Class&lt;? extends Drawable&gt; clazz = mClassLoader.loadClass(className).asSubclass(Drawable.class);</span><br><span class=\"line\">                constructor = clazz.getConstructor();</span><br><span class=\"line\">                CONSTRUCTOR_MAP.put(className, constructor);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return constructor.newInstance();</span><br><span class=\"line\">    &#125; catch (NoSuchMethodException e) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>由于创建shape等需要设置各种属性来构建，比较符合build设计模式，那我们首先封装build模式的shapeBuilder，这样做虽然代码比起直接使用apply{}要多，但是可以让纯java项目用起来很舒服，其他实现请查看源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ShapeBuilder : DrawableBuilder &#123;</span><br><span class=\"line\">    private var mRadius = 0f</span><br><span class=\"line\">    private var mWidth = 0f</span><br><span class=\"line\">    private var mHeight = 0f</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    private var mShape = GradientDrawable.RECTANGLE</span><br><span class=\"line\">    private var mSolidColor = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    /**分别设置四个角的圆角*/</span><br><span class=\"line\">    fun corner(leftTop: Float,rightTop: Float,leftBottom: Float,rightBottom: Float): ShapeBuilder &#123;</span><br><span class=\"line\">        ....if(dp)dp2px(leftTop) else leftTop</span><br><span class=\"line\">        return this</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fun solid(@ColorRes colorId: Int): ShapeBuilder &#123;</span><br><span class=\"line\">        mSolidColor = ContextCompat.getColor(context, colorId)</span><br><span class=\"line\">        return this</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 省略其他参数设置方法 详细代码查看源码</span><br><span class=\"line\">    override fun build(): Drawable &#123;</span><br><span class=\"line\">        val gradientDrawable = GradientDrawable()</span><br><span class=\"line\">        gradientDrawable = GradientDrawable()</span><br><span class=\"line\">        gradientDrawable.setColor(mSolidColor)</span><br><span class=\"line\">        gradientDrawable.shape = mShape</span><br><span class=\"line\">        ....其他参数设置</span><br><span class=\"line\">        return gradientDrawable</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"把build模式转换为dsl\"><a href=\"#把build模式转换为dsl\" class=\"headerlink\" title=\"把build模式转换为dsl\"></a>把build模式转换为dsl</h3><p>理论上所有的build模式都可以轻松转换为dsl写法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inline fun shapeDrawable(builder: ShapeBuilder.() -&gt; Unit): Drawable &#123;</span><br><span class=\"line\">    return ShapeBuilder().also(builder).build()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//使用方法 </span><br><span class=\"line\">val drawable = shapeDrawable&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"函数去括号\"><a href=\"#函数去括号\" class=\"headerlink\" title=\"函数去括号\"></a>函数去括号</h3><p>通过上面封装已经实现了dsl的写法，通常setBackground可以通过setter简化，但是我发现由于有些api设计还需要加括号，这样不太kotlin：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//容易阅读</span><br><span class=\"line\">iv1.background = shapeDrawable &#123;</span><br><span class=\"line\">    shape(ShapeBuilder.Shape.RECTANGLE)</span><br><span class=\"line\">    solid(&quot;#ABE2E3&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//多了括号看起来不舒服</span><br><span class=\"line\">iv2.setImageDrawable(shapeDrawable &#123;</span><br><span class=\"line\">    solid(&quot;#84232323&quot;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>怎么去掉括号呢？🈶2种方式infix函数(中缀表达)和property setter</p>\n<h4 id=\"infix函数特点和规范\"><a href=\"#infix函数特点和规范\" class=\"headerlink\" title=\"infix函数特点和规范\"></a>infix函数特点和规范</h4><ul>\n<li>Kotlin允许在不使用括号和点号的情况下调用函数</li>\n<li>必须只有一个参数</li>\n<li>必须是成员函数或扩展函数</li>\n<li>不支持可变参数和带默认值参数</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**为所有ImageView添加扩展infix函数 来去掉括号*/</span><br><span class=\"line\">infix fun ImageView.src(drawable: Drawable?) &#123;</span><br><span class=\"line\">    this.setImageDrawable(drawable)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//使用如下</span><br><span class=\"line\">iv2 src shapeDrawable &#123;</span><br><span class=\"line\">    shape(ShapeBuilder.Shape.OVAL)</span><br><span class=\"line\">    solid(&quot;#E3ABC2&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然了代码是用来阅读的。个人认为如果我们大量使用infix函数，阅读困难会大大增加，所以建议函数命名必须可以直击函数功能，而且函数功能简单且单一。</p>\n<h4 id=\"property-setter方式\"><a href=\"#property-setter方式\" class=\"headerlink\" title=\"property setter方式\"></a>property setter方式</h4><p>主要使用kotlin可以简化setter为等号来去括号：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**扩展变量*/var ImageView.src: Drawable    get() = drawable    set(value) &#123;        this.setImageDrawable(value)    &#125;//使用如下   iv2.src = shapeDrawable &#123;    shape(ShapeBuilder.Shape.OVAL)    solid(&quot;#E3ABC2&quot;)&#125;    </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>代码直接创建比起xml方式可以提升性能</li>\n<li>dsl方式比起build模式和调用方法设置更加简洁符合kotlin风格</li>\n<li>通过合适的代码管理可以复用这些代码，比xml管理方便</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>没有as的预览功能，只有通过上机观测</li>\n<li>api还没有覆盖所有drawable属性（例如shape = ring等)</li>\n</ul>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>上面把的DrawableDsl基础用法介绍完了，欢迎大家使用，欢迎提Issues，记得给个star哦。Github链接：</p>\n<blockquote>\n<p><a href=\"https://github.com/forJrking/DrawableDsl\">https://github.com/forJrking/DrawableDsl</a></p>\n</blockquote>\n","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h1 id=\"Android-Drawable竟然还能这么写\"><a href=\"#Android-Drawable竟然还能这么写\" class=\"headerlink\" title=\"Android Drawable竟然还能这么写\"></a>Android Drawable竟然还能这么写</h1><p>通常我们在<code>res/drawable</code>下面自定义<code>shape</code>和<code>selector</code>来满足一些UI的设计，但是由于xml最终转换为<code>drawable</code>需要经过IO或反射创建，会有一些性能损耗，另外随着项目的增大和模块化等，很多通用的样式并不能快速复用，需要合理的项目资源管理规范才能实施。那么通过代码直接创建这些<code>drawable</code>，可以在一定程度上降低这些副作用。本篇介绍用<code>kotlin DSL</code>简洁的语法特性来实现常见的<code>drawable</code>。</p>\n<h2 id=\"代码对应效果预览\"><a href=\"#代码对应效果预览\" class=\"headerlink\" title=\"代码对应效果预览\"></a>代码对应效果预览</h2><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4ML6PBu1beWAPjx4co2ZYLbbFxmZXZ5QdqRYTCNMHE2df1gv2d76LpQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4gheGkzKnqYsx0jvqgaBibQ8UNWmSJ86rX1zdg2ycY4QlnYKc2Bgv1eg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4HPpwDiavwzaVxfCicHmsDuJf04PdqwAkcwjWGIguxZd6jXC29X4p1eKg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4eb2Gld7tH8RboMF2wsTGZ55TM3Z6uVLyzRJItReKSkWoqlUAeNlYEg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4QS9k9r6HTL74aUY7akWPWYHEpr94mHDIrOaz8ZD1jv00R6iaYOg22dQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"图片\"></p>\n<h2 id=\"集成和使用\"><a href=\"#集成和使用\" class=\"headerlink\" title=\"集成和使用\"></a>集成和使用</h2><h3 id=\"在项目级的build-gradle文件种添加仓库Jitpack\"><a href=\"#在项目级的build-gradle文件种添加仓库Jitpack\" class=\"headerlink\" title=\"在项目级的build.gradle文件种添加仓库Jitpack\"></a>在项目级的build.gradle文件种添加仓库Jitpack</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        maven &#123; url &#x27;https://jitpack.io&#x27; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;        </span><br><span class=\"line\">    implementation &#x27;com.github.forJrking:DrawableDsl:0.0.3’</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"抛弃xml创建方式示例（其他参见demo\"><a href=\"#抛弃xml创建方式示例（其他参见demo\" class=\"headerlink\" title=\"抛弃xml创建方式示例（其他参见demo)\"></a>抛弃xml创建方式示例（其他参见demo)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// infix用法用于去掉括号更加简洁，详细后面说明</span><br><span class=\"line\">image src shapeDrawable &#123;</span><br><span class=\"line\">    //指定shape样式</span><br><span class=\"line\">    shape(ShapeBuilder.Shape.RECTANGLE)</span><br><span class=\"line\">    //圆角，支持4个角单独设置</span><br><span class=\"line\">    corner(20f)</span><br><span class=\"line\">    //solid 颜色</span><br><span class=\"line\">    solid(&quot;#ABE2E3&quot;)</span><br><span class=\"line\">    //stroke 颜色，边框dp，虚线设置</span><br><span class=\"line\">    stroke(R.color.white, 2f, 5f, 8f)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//按钮点击样式</span><br><span class=\"line\">btn.background = selectorDrawable &#123;</span><br><span class=\"line\">    //默认样式</span><br><span class=\"line\">    normal = shapeDrawable &#123;</span><br><span class=\"line\">        corner(20f)</span><br><span class=\"line\">        gradient(90, R.color.F97794, R.color.C623AA2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //点击效果</span><br><span class=\"line\">    pressed = shapeDrawable &#123;</span><br><span class=\"line\">        corner(20f)</span><br><span class=\"line\">        solid(&quot;#84232323&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><h3 id=\"xml如何转换成drawable\"><a href=\"#xml如何转换成drawable\" class=\"headerlink\" title=\"xml如何转换成drawable\"></a>xml如何转换成drawable</h3><p>xml变成drawable，通过android.graphics.drawable.DrawableInflater这个类来IO解析标签创建，然后通过解析标签再设置属性：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//标签创建</span><br><span class=\"line\">private Drawable inflateFromTag(@NonNull String name) &#123;</span><br><span class=\"line\">    switch (name) &#123;</span><br><span class=\"line\">        case &quot;selector&quot;:</span><br><span class=\"line\">            return new StateListDrawable();</span><br><span class=\"line\">        case &quot;level-list&quot;:</span><br><span class=\"line\">            return new LevelListDrawable();</span><br><span class=\"line\">        case &quot;layer-list&quot;:</span><br><span class=\"line\">            return new LayerDrawable();</span><br><span class=\"line\">        ....</span><br><span class=\"line\">        case &quot;color&quot;:</span><br><span class=\"line\">            return new ColorDrawable();</span><br><span class=\"line\">        case &quot;shape&quot;:</span><br><span class=\"line\">            return new GradientDrawable();</span><br><span class=\"line\">        case &quot;vector&quot;:</span><br><span class=\"line\">            return new VectorDrawable();</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//反射创建</span><br><span class=\"line\">private Drawable inflateFromClass(@NonNull String className) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        Constructor&lt;? extends Drawable&gt; constructor;</span><br><span class=\"line\">        synchronized (CONSTRUCTOR_MAP) &#123;</span><br><span class=\"line\">            constructor = CONSTRUCTOR_MAP.get(className);</span><br><span class=\"line\">            if (constructor == null) &#123;</span><br><span class=\"line\">                final Class&lt;? extends Drawable&gt; clazz = mClassLoader.loadClass(className).asSubclass(Drawable.class);</span><br><span class=\"line\">                constructor = clazz.getConstructor();</span><br><span class=\"line\">                CONSTRUCTOR_MAP.put(className, constructor);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return constructor.newInstance();</span><br><span class=\"line\">    &#125; catch (NoSuchMethodException e) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>由于创建shape等需要设置各种属性来构建，比较符合build设计模式，那我们首先封装build模式的shapeBuilder，这样做虽然代码比起直接使用apply{}要多，但是可以让纯java项目用起来很舒服，其他实现请查看源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ShapeBuilder : DrawableBuilder &#123;</span><br><span class=\"line\">    private var mRadius = 0f</span><br><span class=\"line\">    private var mWidth = 0f</span><br><span class=\"line\">    private var mHeight = 0f</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    private var mShape = GradientDrawable.RECTANGLE</span><br><span class=\"line\">    private var mSolidColor = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    /**分别设置四个角的圆角*/</span><br><span class=\"line\">    fun corner(leftTop: Float,rightTop: Float,leftBottom: Float,rightBottom: Float): ShapeBuilder &#123;</span><br><span class=\"line\">        ....if(dp)dp2px(leftTop) else leftTop</span><br><span class=\"line\">        return this</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fun solid(@ColorRes colorId: Int): ShapeBuilder &#123;</span><br><span class=\"line\">        mSolidColor = ContextCompat.getColor(context, colorId)</span><br><span class=\"line\">        return this</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 省略其他参数设置方法 详细代码查看源码</span><br><span class=\"line\">    override fun build(): Drawable &#123;</span><br><span class=\"line\">        val gradientDrawable = GradientDrawable()</span><br><span class=\"line\">        gradientDrawable = GradientDrawable()</span><br><span class=\"line\">        gradientDrawable.setColor(mSolidColor)</span><br><span class=\"line\">        gradientDrawable.shape = mShape</span><br><span class=\"line\">        ....其他参数设置</span><br><span class=\"line\">        return gradientDrawable</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"把build模式转换为dsl\"><a href=\"#把build模式转换为dsl\" class=\"headerlink\" title=\"把build模式转换为dsl\"></a>把build模式转换为dsl</h3><p>理论上所有的build模式都可以轻松转换为dsl写法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inline fun shapeDrawable(builder: ShapeBuilder.() -&gt; Unit): Drawable &#123;</span><br><span class=\"line\">    return ShapeBuilder().also(builder).build()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//使用方法 </span><br><span class=\"line\">val drawable = shapeDrawable&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"函数去括号\"><a href=\"#函数去括号\" class=\"headerlink\" title=\"函数去括号\"></a>函数去括号</h3><p>通过上面封装已经实现了dsl的写法，通常setBackground可以通过setter简化，但是我发现由于有些api设计还需要加括号，这样不太kotlin：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//容易阅读</span><br><span class=\"line\">iv1.background = shapeDrawable &#123;</span><br><span class=\"line\">    shape(ShapeBuilder.Shape.RECTANGLE)</span><br><span class=\"line\">    solid(&quot;#ABE2E3&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//多了括号看起来不舒服</span><br><span class=\"line\">iv2.setImageDrawable(shapeDrawable &#123;</span><br><span class=\"line\">    solid(&quot;#84232323&quot;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>怎么去掉括号呢？🈶2种方式infix函数(中缀表达)和property setter</p>\n<h4 id=\"infix函数特点和规范\"><a href=\"#infix函数特点和规范\" class=\"headerlink\" title=\"infix函数特点和规范\"></a>infix函数特点和规范</h4><ul>\n<li>Kotlin允许在不使用括号和点号的情况下调用函数</li>\n<li>必须只有一个参数</li>\n<li>必须是成员函数或扩展函数</li>\n<li>不支持可变参数和带默认值参数</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**为所有ImageView添加扩展infix函数 来去掉括号*/</span><br><span class=\"line\">infix fun ImageView.src(drawable: Drawable?) &#123;</span><br><span class=\"line\">    this.setImageDrawable(drawable)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//使用如下</span><br><span class=\"line\">iv2 src shapeDrawable &#123;</span><br><span class=\"line\">    shape(ShapeBuilder.Shape.OVAL)</span><br><span class=\"line\">    solid(&quot;#E3ABC2&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然了代码是用来阅读的。个人认为如果我们大量使用infix函数，阅读困难会大大增加，所以建议函数命名必须可以直击函数功能，而且函数功能简单且单一。</p>\n<h4 id=\"property-setter方式\"><a href=\"#property-setter方式\" class=\"headerlink\" title=\"property setter方式\"></a>property setter方式</h4><p>主要使用kotlin可以简化setter为等号来去括号：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**扩展变量*/var ImageView.src: Drawable    get() = drawable    set(value) &#123;        this.setImageDrawable(value)    &#125;//使用如下   iv2.src = shapeDrawable &#123;    shape(ShapeBuilder.Shape.OVAL)    solid(&quot;#E3ABC2&quot;)&#125;    </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>代码直接创建比起xml方式可以提升性能</li>\n<li>dsl方式比起build模式和调用方法设置更加简洁符合kotlin风格</li>\n<li>通过合适的代码管理可以复用这些代码，比xml管理方便</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>没有as的预览功能，只有通过上机观测</li>\n<li>api还没有覆盖所有drawable属性（例如shape = ring等)</li>\n</ul>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>上面把的DrawableDsl基础用法介绍完了，欢迎大家使用，欢迎提Issues，记得给个star哦。Github链接：</p>\n<blockquote>\n<p><a href=\"https://github.com/forJrking/DrawableDsl\">https://github.com/forJrking/DrawableDsl</a></p>\n</blockquote>\n"},{"title":"搭建教程","date":"2021-08-19T08:41:14.000Z","description":"记录搭建时参考的教程","_content":"\n# Hexo+Butterfly网站搭建教程\n\n## 流程\n\n1. 安装nodejs\n2. 安装hexo\n3. 拉取Butterfly\n4. 配置主题\n\n## 参考的教程:\n\n+ [小康博客](https://www.antmoe.com/)\n\n+ [Butterfly](https://butterfly.js.org/)\n\n+ [hexo官方文档](https://hexo.io/zh-cn/docs/)\n\n## 写作相关\n\n**文章**\n\n`hexo new [fileName]`\n\n**文章头部信息**\n\n```\n---\ntitle: 搭建教程\ndate: 2021-08-19 16:41:14\ntags: [hexo,主题]\ncategories: 教程\ndescription: 记录搭建时参考的教程\n---\n```\n\n**文章置顶**\n\n修改插件`hero-generator-index`, 文件路径`node_modules/hexo-generator-index/lib/generator.js`\n\n将\n\n```js\nvar posts = locals.posts.sort(config.index_generator.order_by);\n```\n\n改为\n\n```js\nvar posts = locals.posts;\nposts.data = posts.data.sort(function(a, b) {\n  if(a.top && b.top) { // 两篇文章top都有定义\n    if(a.top == b.top) return b.date - a.date; // top值一样则按照文章日期降序排\n    else return b.top - a.top; // 否则按照top值降序排\n  }\n  else if(a.top && !b.top) { // 只有一篇文章top有定义，将排在最前面\n    return -1;\n  }\n  else if(!a.top && b.top) {\n    return 1;\n  }\n  else return b.date - a.date; // 都没定义按照文章日期降序排\n});\n```\n\n在文章头部加上`top: 数字`就能置顶文章了\n\n```\n---\n...\ntop: 10\n...\n---\n```\n\n\n\n## 遇见的问题：\n\n+ 部分css资源或其他**资源无法加载**\n\n  其主要原因在于路径出错了，可以尝试这个打开浏览器的开发者工具\n\n  ![常见问题_资源无法加载_01](常见问题_资源无法加载_01.png)\n\n  解决办法修改配置文件中的`url`和`root`\n\n  [gitee官方解决办法](https://gitee.com/help/articles/4136#article-header1)\n\n## 可能会用到的教程\n\n### GitHub桌面应用连接gitee\n\n左上角>>文件>>克隆仓库>>手动填写url>>填写入gitee的仓库地址\n\n","source":"_posts/搭建教程.md","raw":"---\ntitle: 搭建教程\ndate: 2021-08-19 16:41:14\ntags: [hexo,主题]\ncategories: 教程\ndescription: 记录搭建时参考的教程\n---\n\n# Hexo+Butterfly网站搭建教程\n\n## 流程\n\n1. 安装nodejs\n2. 安装hexo\n3. 拉取Butterfly\n4. 配置主题\n\n## 参考的教程:\n\n+ [小康博客](https://www.antmoe.com/)\n\n+ [Butterfly](https://butterfly.js.org/)\n\n+ [hexo官方文档](https://hexo.io/zh-cn/docs/)\n\n## 写作相关\n\n**文章**\n\n`hexo new [fileName]`\n\n**文章头部信息**\n\n```\n---\ntitle: 搭建教程\ndate: 2021-08-19 16:41:14\ntags: [hexo,主题]\ncategories: 教程\ndescription: 记录搭建时参考的教程\n---\n```\n\n**文章置顶**\n\n修改插件`hero-generator-index`, 文件路径`node_modules/hexo-generator-index/lib/generator.js`\n\n将\n\n```js\nvar posts = locals.posts.sort(config.index_generator.order_by);\n```\n\n改为\n\n```js\nvar posts = locals.posts;\nposts.data = posts.data.sort(function(a, b) {\n  if(a.top && b.top) { // 两篇文章top都有定义\n    if(a.top == b.top) return b.date - a.date; // top值一样则按照文章日期降序排\n    else return b.top - a.top; // 否则按照top值降序排\n  }\n  else if(a.top && !b.top) { // 只有一篇文章top有定义，将排在最前面\n    return -1;\n  }\n  else if(!a.top && b.top) {\n    return 1;\n  }\n  else return b.date - a.date; // 都没定义按照文章日期降序排\n});\n```\n\n在文章头部加上`top: 数字`就能置顶文章了\n\n```\n---\n...\ntop: 10\n...\n---\n```\n\n\n\n## 遇见的问题：\n\n+ 部分css资源或其他**资源无法加载**\n\n  其主要原因在于路径出错了，可以尝试这个打开浏览器的开发者工具\n\n  ![常见问题_资源无法加载_01](常见问题_资源无法加载_01.png)\n\n  解决办法修改配置文件中的`url`和`root`\n\n  [gitee官方解决办法](https://gitee.com/help/articles/4136#article-header1)\n\n## 可能会用到的教程\n\n### GitHub桌面应用连接gitee\n\n左上角>>文件>>克隆仓库>>手动填写url>>填写入gitee的仓库地址\n\n","slug":"搭建教程","published":1,"updated":"2021-09-18T02:03:50.583Z","_id":"cksx03ihb00039cu9gvmwbyqn","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Hexo-Butterfly网站搭建教程\"><a href=\"#Hexo-Butterfly网站搭建教程\" class=\"headerlink\" title=\"Hexo+Butterfly网站搭建教程\"></a>Hexo+Butterfly网站搭建教程</h1><h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><ol>\n<li>安装nodejs</li>\n<li>安装hexo</li>\n<li>拉取Butterfly</li>\n<li>配置主题</li>\n</ol>\n<h2 id=\"参考的教程\"><a href=\"#参考的教程\" class=\"headerlink\" title=\"参考的教程:\"></a>参考的教程:</h2><ul>\n<li><p><a href=\"https://www.antmoe.com/\">小康博客</a></p>\n</li>\n<li><p><a href=\"https://butterfly.js.org/\">Butterfly</a></p>\n</li>\n<li><p><a href=\"https://hexo.io/zh-cn/docs/\">hexo官方文档</a></p>\n</li>\n</ul>\n<h2 id=\"写作相关\"><a href=\"#写作相关\" class=\"headerlink\" title=\"写作相关\"></a>写作相关</h2><p><strong>文章</strong></p>\n<p><code>hexo new [fileName]</code></p>\n<p><strong>文章头部信息</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 搭建教程</span><br><span class=\"line\">date: 2021-08-19 16:41:14</span><br><span class=\"line\">tags: [hexo,主题]</span><br><span class=\"line\">categories: 教程</span><br><span class=\"line\">description: 记录搭建时参考的教程</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p><strong>文章置顶</strong></p>\n<p>修改插件<code>hero-generator-index</code>, 文件路径<code>node_modules/hexo-generator-index/lib/generator.js</code></p>\n<p>将</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> posts = locals.posts.sort(config.index_generator.order_by);</span><br></pre></td></tr></table></figure>\n\n<p>改为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> posts = locals.posts;</span><br><span class=\"line\">posts.data = posts.data.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a.top &amp;&amp; b.top) &#123; <span class=\"comment\">// 两篇文章top都有定义</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.top == b.top) <span class=\"keyword\">return</span> b.date - a.date; <span class=\"comment\">// top值一样则按照文章日期降序排</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b.top - a.top; <span class=\"comment\">// 否则按照top值降序排</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a.top &amp;&amp; !b.top) &#123; <span class=\"comment\">// 只有一篇文章top有定义，将排在最前面</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b.date - a.date; <span class=\"comment\">// 都没定义按照文章日期降序排</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在文章头部加上<code>top: 数字</code>就能置顶文章了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">...</span><br><span class=\"line\">top: 10</span><br><span class=\"line\">...</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"遇见的问题：\"><a href=\"#遇见的问题：\" class=\"headerlink\" title=\"遇见的问题：\"></a>遇见的问题：</h2><ul>\n<li><p>部分css资源或其他<strong>资源无法加载</strong></p>\n<p>其主要原因在于路径出错了，可以尝试这个打开浏览器的开发者工具</p>\n<p><img src=\"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98_%E8%B5%84%E6%BA%90%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD_01.png\" alt=\"常见问题_资源无法加载_01\"></p>\n<p>解决办法修改配置文件中的<code>url</code>和<code>root</code></p>\n<p><a href=\"https://gitee.com/help/articles/4136#article-header1\">gitee官方解决办法</a></p>\n</li>\n</ul>\n<h2 id=\"可能会用到的教程\"><a href=\"#可能会用到的教程\" class=\"headerlink\" title=\"可能会用到的教程\"></a>可能会用到的教程</h2><h3 id=\"GitHub桌面应用连接gitee\"><a href=\"#GitHub桌面应用连接gitee\" class=\"headerlink\" title=\"GitHub桌面应用连接gitee\"></a>GitHub桌面应用连接gitee</h3><p>左上角&gt;&gt;文件&gt;&gt;克隆仓库&gt;&gt;手动填写url&gt;&gt;填写入gitee的仓库地址</p>\n","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h1 id=\"Hexo-Butterfly网站搭建教程\"><a href=\"#Hexo-Butterfly网站搭建教程\" class=\"headerlink\" title=\"Hexo+Butterfly网站搭建教程\"></a>Hexo+Butterfly网站搭建教程</h1><h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><ol>\n<li>安装nodejs</li>\n<li>安装hexo</li>\n<li>拉取Butterfly</li>\n<li>配置主题</li>\n</ol>\n<h2 id=\"参考的教程\"><a href=\"#参考的教程\" class=\"headerlink\" title=\"参考的教程:\"></a>参考的教程:</h2><ul>\n<li><p><a href=\"https://www.antmoe.com/\">小康博客</a></p>\n</li>\n<li><p><a href=\"https://butterfly.js.org/\">Butterfly</a></p>\n</li>\n<li><p><a href=\"https://hexo.io/zh-cn/docs/\">hexo官方文档</a></p>\n</li>\n</ul>\n<h2 id=\"写作相关\"><a href=\"#写作相关\" class=\"headerlink\" title=\"写作相关\"></a>写作相关</h2><p><strong>文章</strong></p>\n<p><code>hexo new [fileName]</code></p>\n<p><strong>文章头部信息</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 搭建教程</span><br><span class=\"line\">date: 2021-08-19 16:41:14</span><br><span class=\"line\">tags: [hexo,主题]</span><br><span class=\"line\">categories: 教程</span><br><span class=\"line\">description: 记录搭建时参考的教程</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p><strong>文章置顶</strong></p>\n<p>修改插件<code>hero-generator-index</code>, 文件路径<code>node_modules/hexo-generator-index/lib/generator.js</code></p>\n<p>将</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> posts = locals.posts.sort(config.index_generator.order_by);</span><br></pre></td></tr></table></figure>\n\n<p>改为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> posts = locals.posts;</span><br><span class=\"line\">posts.data = posts.data.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a.top &amp;&amp; b.top) &#123; <span class=\"comment\">// 两篇文章top都有定义</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.top == b.top) <span class=\"keyword\">return</span> b.date - a.date; <span class=\"comment\">// top值一样则按照文章日期降序排</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b.top - a.top; <span class=\"comment\">// 否则按照top值降序排</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a.top &amp;&amp; !b.top) &#123; <span class=\"comment\">// 只有一篇文章top有定义，将排在最前面</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b.date - a.date; <span class=\"comment\">// 都没定义按照文章日期降序排</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在文章头部加上<code>top: 数字</code>就能置顶文章了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">...</span><br><span class=\"line\">top: 10</span><br><span class=\"line\">...</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"遇见的问题：\"><a href=\"#遇见的问题：\" class=\"headerlink\" title=\"遇见的问题：\"></a>遇见的问题：</h2><ul>\n<li><p>部分css资源或其他<strong>资源无法加载</strong></p>\n<p>其主要原因在于路径出错了，可以尝试这个打开浏览器的开发者工具</p>\n<p><img src=\"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98_%E8%B5%84%E6%BA%90%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD_01.png\" alt=\"常见问题_资源无法加载_01\"></p>\n<p>解决办法修改配置文件中的<code>url</code>和<code>root</code></p>\n<p><a href=\"https://gitee.com/help/articles/4136#article-header1\">gitee官方解决办法</a></p>\n</li>\n</ul>\n<h2 id=\"可能会用到的教程\"><a href=\"#可能会用到的教程\" class=\"headerlink\" title=\"可能会用到的教程\"></a>可能会用到的教程</h2><h3 id=\"GitHub桌面应用连接gitee\"><a href=\"#GitHub桌面应用连接gitee\" class=\"headerlink\" title=\"GitHub桌面应用连接gitee\"></a>GitHub桌面应用连接gitee</h3><p>左上角&gt;&gt;文件&gt;&gt;克隆仓库&gt;&gt;手动填写url&gt;&gt;填写入gitee的仓库地址</p>\n"},{"title":"javaWeb笔记","date":"2021-08-19T08:56:49.000Z","description":"b站javaweb视频笔记","_content":"\n## 1、基本概念\n\n### 1.1、前言\n\nweb开发：\n\n- web，网页的意思  ， www.baidu.com\n- 静态web\n  - html，css\n  - 提供给所有人看的数据始终不会发生变化！\n- 动态web\n  - 淘宝，几乎是所有的网站；\n  - 提供给所有人看的数据始终会发生变化，每个人在不同的时间，不同的地点看到的信息各不相同！\n  - 技术栈：Servlet/JSP，ASP，PHP\n\n在Java中，动态web资源开发的技术统称为JavaWeb；\n\n### 1.2、web应用程序\n\nweb应用程序：可以提供浏览器访问的程序；\n\n- a.html、b.html......多个web资源，这些web资源可以被外界访问，对外界提供服务；\n- 你们能访问到的任何一个页面或者资源，都存在于这个世界的某一个角落的计算机上。\n- URL \n- 这个统一的web资源会被放在同一个文件夹下，web应用程序-->Tomcat：服务器\n- 一个web应用由多部分组成 （静态web，动态web）\n  - html，css，js\n  - jsp，servlet\n  - Java程序\n  - jar包\n  - 配置文件 （Properties）\n\nweb应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理；\n\n#### Web应用程序概述\n\n- Web应用程序是一种可以通过Web访问的应用程序，程序的最大好处是用户很容易访问应用程序，用户只需要有浏览器即可，不需要再安装其他软件。\n\n- 一个Web应用程序是由完成特定任务的各种Web组件（web components)构成的并通过Web将服务展示给外界。在实际应用中，Web应用程序是由多个Servlet、JSP页面、HTML文件以及图像文件等组成。所有这些组件相互协调为用户提供一组完整的服务。\n\n#### 应用程序模式\n\n- 应用程序有两种模式C/S、B/S。C/S是客户端/服务器端程序，也就是说这类程序一般独立运行。而B/S就是浏览器端/服务器端应用程序，这类应用程序一般借助IE、Firefox、Google等浏览器来运行。WEB应用程序一般是B/S模式。\n\n  <img src=\"/狂神web/clip_image001.jpg\" alt=\"12\" style=\"zoom:80%;\" />\n\n  <img src=\"/狂神web/clip_image001-1583293770740.jpg\" alt=\"11\" style=\"zoom:67%;\" />\n\n##### 1，C/S架构\n\n- C/S是Client/Server的缩写。\n- Server即服务器，通常采用高性能的PC或工作站，\n- Client即客户端，需要在客户电脑上安装专用的客户端软件。\n- 例如大家比较熟悉的腾讯QQ就是个典型的C/S结构的软件，用户要安装QQ客户端程序同服务器进行通讯。\n\n##### 2，B/S架构\n\n- B/S架构即==浏览器和服务器==架构模式。它是随着Internet技术的兴起，对C/S架构的一种变化或者改进的架构。\n\n- 在这种架构下，用户工作界面是通过==浏览器==来实现，极少部分事务逻辑在前端(Browser)实现，但是主要事务逻辑在服务器端(Server)实现，形成所谓三层结构。\n\n- 例如京东、淘宝、12306等都是B/S架构。\n\n- WEB应用程序一般是B/S模式。\n\n- B/S优点：\n\n  - 耦合度小，利于分工协作，提高开发效率\n\n  - 具有良好的可扩展性和可维护性\n\n  - 升级成本小\n  - 简化了客户端电脑载荷\n  - 减轻了系统维护与升级的成本和工作量\n  - 降低了用户的总体成本\n\n### 1.3、静态web\n\n- `*.htm, *.html`,这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。通络；\n\n![1567822802516](/狂神web/1567822802516.png)\n\n- 静态web存在的缺点\n  - Web页面无法动态更新，所有用户看到都是同一个页面\n    - 轮播图，点击特效：伪动态\n    - JavaScript [实际开发中，它用的最多]\n    - VBScript\n  - 它无法和数据库交互（数据无法持久化，用户无法交互）\n\n\n\n### 1.4、动态web\n\n页面会动态展示： “Web的页面展示的效果因人而异”；\n\n![1567823191289](/狂神web/1567823191289.png)\n\n缺点：\n\n- 加入服务器的动态web资源出现了错误，我们需要重新编写我们的**后台程序**,重新发布；\n  - 停机维护\n\n优点：\n\n- Web页面可以动态更新，所有用户看到都不是同一个页面\n- 它可以与数据库交互 （数据持久化：注册，商品信息，用户信息........）\n\n![1567823350584](/狂神web/1567823350584.png)\n\n#### 静态网页与动态网页\n\n- 静态网页没有数据库的支持，在网站制作和维护方面工作量较大，静态网页的交互性较差，在功能方面有较大的限制。\n\n- 动态网页是指在服务器端运行的程序或者网页，会根据不同客户、不同时间返回不同的网页。\n\n\n\n### 1.5、访问Web资源\n\n#### 什么是URL\n\n- URL是UniformResource Locator的缩写，意思是统一资源定位符，也被称为网页地址，是因特网上标准的资源地址(Address)。\n- 统一资源定位符(URL)适用于完整地描述Internet上网页和其他资源地址的一种标识方法。\n- 简单地说，URL就是Web地址，俗称“网址”。\n\n##### URL的组成\n\n- URL是唯一能够识别Internet上具体的计算机、目录或文件位置的命名约定。\n\n- 以这样一个URL:http://localhost:8080/FirstWeb/index.jsp为例来分析URL的组成。\n\n1. ==HTTP协议==：两台计算机可能因为系统不同、运行程序所用语言不通，要进行通信必须按照一个约定的规则进行，浏览器和服务器之间必须遵循共同的协议HTTP (HyperText Transfer Protocol ==超文本传输协议==)。HTTP是互联网上应用最为广泛的一种网络协议。\n\n2. ==服务器主机名或IP== :在这里localhost就是服务器的地址， 意思是本机上的服务器。当然也可以使用127.0.0.1或实际IP地址来代替。IP是网络之间互连的协议,是Internet Protocol的缩写,中文缩写为“==网协==”。\n\n3. ==端口号==： 端口号是网络程序和外部进行通信的通道，当从外部访问服务器时要通过指定端口号来访问。物理端口是指物理存在的端口；逻辑端口是指逻辑意义上用于区分服务的端口，如TCP/IP协议中的服务端口，端口号的范围从0到65535。\n\n4. ==路径==： 路径（包括请求的资源）由零个或多个 \"/\" 符号隔开的字符串， 一般用来表示主机上的一个目录或文件地址等。 而请求的资源指请求的文件的名称，可以是 一个HTML页面，也可以是 一个Servlet、 图片等服务器提供的资源。以FirstWeb/index.jsp为例，news代表的是Web应用对外发布的根路径名，而index.jsp代表了一个存放到FirstWeb根目录下的一个文件。\n\n- ==URL的组成:==\n  - 协议\n  - 主机（包括端口号）\n  - 路径\n\n## 2、web服务器\n\n- Web服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，可以向浏览器等Web客户端提供文档，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。\n- 下面介绍几种常用的WEB服务器。\n  - ==WebLogic==\n    - BEA WebLogic Server 在使应用服务器成为企业应用架构的基础方面继续处于领先地位。\n    - BEA WebLogic Server 为构建集成化的企业级应用提供了稳固的基础，\n    - 它们以 Internet 的==容量==和==速度==，在连网的企业之间共享信息、提交服务，实现协作自动化。\n  - ==Apache==\n    - Apache仍然是世界上用的最多的Web服务器，市场占有率达60%左右。\n    - 世界上很多著名的网站都是Apache的产物，\n    - 它的成功之处主要在于它的==源代码开放==、有一支开放的开发队伍、支持跨平台的应用（可以运行在几乎所有的Unix、Windows、Linux系统平台上）以及它的==可移植性==等方面。\n  - ==Tomcat==\n    - Tomcat是一个==开放源代码==、运行Servlet和JSP Web应用软件的基于Java的Web应用软件容器。\n    - 它是==Apache==软件基金会一个开源的==核心项目==，由Apache、Sun和其他一些公司及个人共同开发完成。\n    - Tomcat Server是根据Servlet和JSP规范进行执行的，因此我们就可以说Tomcat Server也实行了Apache-Jakarta规范且比绝大多数商业应用软件服务器要好。\n  - ==Jboss==\n    - 是一个基于==J2EE==的==开放源代码==的应用服务器。\n    - JBoss代码遵循LGPL许可，可以在任何商业应用中==免费==使用，而不用支付费用。\n    - JBoss是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3的规范。\n    - 但JBoss核心服务==不包括支持Servlet/JSP的WEB容器==，一般与Tomcat或Jetty绑定使用。\n\n### 2.1、技术讲解\n\n**ASP:**\n\n- 微软：国内最早流行的就是ASP；\n\n- 在HTML中嵌入了VB的脚本，  ASP + COM；\n\n- 在ASP开发中，基本一个页面都有几千行的业务代码，页面极其换乱\n\n- 维护成本高！\n\n- C# \n\n- IIS\n\n  ```html\n  <h1>\n      <h1><h1>\n          <h1>\n              <h1>\n                  <h1>\n          <h1>\n              <%\n              System.out.println(\"hello\")\n              %>\n              <h1>\n                  <h1>\n     <h1><h1>\n  <h1>\n  ```\n\n  \n\n**php：**\n\n- PHP开发速度很快，功能很强大，跨平台，代码很简单 （70% , WP）\n- 无法承载大访问量的情况（局限性）\n\n\n\n**JSP/Servlet : ** \n\nB/S：浏览和服务器\n\nC/S:  客户端和服务器\n\n- sun公司主推的B/S架构\n- 基于Java语言的 (所有的大公司，或者一些开源的组件，都是用Java写的)\n- 可以承载三高问题带来的影响；\n- 语法像ASP ， ASP-->JSP , 加强市场强度；\n\n### 2.2、web服务器\n\n服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息；\n\n**==IIS==**\n\n微软的； ASP...,Windows中自带的\n\n==**Tomcat**==\n\n![1567824446428](/狂神web/1567824446428.png)\n\n面向百度编程；\n\nTomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且**免费**，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。\n\nTomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用[服务器](https://baike.baidu.com/item/服务器)，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个Java初学web的人来说，它是最佳的选择\n\nTomcat 实际上运行JSP 页面和Servlet。Tomcat最新版本为**9.0。**\n\n**工作3-5年之后，可以尝试手写Tomcat服务器；**\n\n下载tomcat：\n\n1. 安装 or  解压\n2. 了解配置文件及目录结构\n3. 这个东西的作用\n\n\n\n## 3、Tomcat\n\n### 3.1、 安装tomcat\n\ntomcat官网：http://tomcat.apache.org/\n\n![1567825600842](/狂神web/1567825600842.png)\n\n![1567825627138](/狂神web/1567825627138.png)\n\n\n\n### 3.2、Tomcat启动和配置\n\n#### Tomcat目录作用描述\n\n| **目录**        | **说明**                                                  |\n| --------------- | --------------------------------------------------------- |\n| ==**bin**==     | 存放各平台下用于启动和停止Tomcat的脚本文件                |\n| ==**conf**==    | 存放Tomcat各种配置文件，其中最重要的是server.xml和web.xml |\n| ==**lib**==     | 存放tomcat服务器所需的jar文件                             |\n| ==**webapps**== | Web应用的发布目录                                         |\n| ==**work**==    | Jsp运行时生成的Servlet文件                                |\n| ==**logs**==    | 存放tomcat的日志文件                                      |\n| ==**temp**==    | Tomcat运行时存放临时文件                                  |\n\n文件夹作用：\n\n![1567825763180](/狂神web/1567825763180.png)\n\n**启动。关闭Tomcat**\n\n![1567825840657](/狂神web/1567825840657.png)\n\n访问测试：http://localhost:8080/\n\n可能遇到的问题：\n\n1. Java环境变量没有配置\n2. 闪退问题：需要配置兼容性\n3. 乱码问题：配置文件中设置\n\n### 3.3、配置\n\n![1567825967256](/狂神web/1567825967256.png)\n\n可以配置启动的端口号\n\n- tomcat的默认端口号为：8080\n- mysql：3306\n- http：80\n- https：443\n\n```xml\n<Connector port=\"8081\" protocol=\"HTTP/1.1\"\n           connectionTimeout=\"20000\"\n           redirectPort=\"8443\" />\n```\n\n可以配置主机的名称\n\n- 默认的主机名为：localhost->127.0.0.1\n- 默认网站应用存放的位置为：webapps\n\n```xml\n  <Host name=\"www.qinjiang.com\"  appBase=\"webapps\"\n        unpackWARs=\"true\" autoDeploy=\"true\">\n```\n\n#### 高难度面试题\n\n请你谈谈网站是如何进行访问的！\n\n1. 输入一个域名；回车\n\n2. 检查本机的 C:\\Windows\\System32\\drivers\\etc\\hosts配置文件下有没有这个域名映射；\n\n   1. 有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问\n\n      ```java\n      127.0.0.1       www.qinjiang.com\n      ```\n\n   2. 没有：去DNS服务器找，找到的话就返回，找不到就返回找不到；\n\n   <img src=\"/狂神web/1567827057913.png\" alt=\"1567827057913\" style=\"zoom: 67%;\" />\n\n3. 可以配置一下环境变量（可选性）\n\n### 3.4、发布一个web网站\n\n不会就先模仿\n\n- 将自己写的网站，放到服务器(Tomcat)中指定的web应用的文件夹（webapps）下，就可以访问了\n\n网站应该有的结构\n\n```java\n--webapps ：Tomcat服务器的web目录\n\t-ROOT\n\t-kuangstudy ：网站的目录名\n\t\t- WEB-INF\n\t\t\t-classes : java程序\n\t\t\t-lib：web应用所依赖的jar包\n\t\t\t-web.xml ：网站配置文件\n\t\t- index.html 默认的首页\n\t\t- static \n            -css\n            \t-style.css\n            -js\n            -img\n         -.....\n```\n\n\n\nHTTP协议 ： 面试\n\nMaven：构建工具\n\n- Maven安装包\n\nServlet 入门\n\n- HelloWorld！\n- Servlet配置\n- 原理\n\n\n\n## 4、Http\n\n### 4.1、什么是HTTP\n\nHTTP（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。\n\n- 文本：html，字符串，~ ….\n- 超文本：图片，音乐，视频，定位，地图…….\n- 80\n\nHttps：安全的\n\n- 443\n\n### 4.2、两个时代\n\n- http1.0\n\n  - HTTP/1.0：客户端可以与web服务器连接后，只能获得一个web资源，断开连接\n  - HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。\n\n- http2.0\n\n  - HTTP/1.1：客户端可以与web服务器连接后，可以获得多个web资源。\n\n- HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。\n\n  \n\n### 4.3、Http请求\n\n#####  HTTP请求方式\n\n- HTTP请求是指从客户端到服务器端的请求消息。\n- 包括：消息首行中，对资源的请求方法、资源的标识符及使用的协议。\n- 根据HTTP标准，HTTP请求可以使用多种请求方法。 \n\n- ==客户端---发请求（Request）---服务器==\n\n百度：\n\n```java\nRequest URL:https://www.baidu.com/   请求地址\nRequest Method:GET    get方法/post方法\nStatus Code:200 OK    状态码：200\nRemote（远程） Address:14.215.177.39:443\n```\n\n```java\nAccept:text/html  \nAccept-Encoding:gzip, deflate, br\nAccept-Language:zh-CN,zh;q=0.9    语言\nCache-Control:max-age=0\nConnection:keep-alive\n```\n\n#### 1、请求行\n\n- 请求行中的请求方式：GET\n\n- 请求方式：**Get，Post**，HEAD,DELETE,PUT,TRACT…\n\n  - get：\n\n    - 请求能够携带的参数比较少，大小==有限制==，会在浏览器的URL地址栏显示数据内容，==不安全，但高效==\n    - GET是最简单的HTTP方法，\n    - 其主要任务就是要求服务器获得一个资源并把资源发回来，\n    - 请求参数在请求行中用？号和URL区别开，所以所带的参数有限，显示在浏览器的地址栏中。\n    - GET请求网址http://localhost:8080/FirstWeb/test?userName=Jack&age=20\n    - GET 请求可被缓存\n    - GET 请求有长度限制\n\n  - post：\n\n    - 请求能够携带的参数没有限制，大小==没有限制==，不会在浏览器的URL地址栏显示数据内容，==安全，但不高效。==\n    - POST是一种更强大的请求，在请求的同时向服务器发送一些==表单==数据还有==二进制==数据，\n    - 请求参数放在请求体中，可以传输比较大的请求参数，例如图片、视频等，\n    - 浏览器的地址栏中不显示参数信息。\n    - POST请求网址 [http://localhost:8080/FirstWeb/test ](http://localhost:8080/FirstWeb/test)\n    - POST 请求不会被缓存\n    - POST 请求对数据长度没有要求\n\n    \n\n#### 2、消息头\n\n```java\nAccept：告诉浏览器，它所支持的数据类型\nAccept-Encoding：支持哪种编码格式  GBK   UTF-8   GB2312  ISO8859-1\nAccept-Language：告诉浏览器，它的语言环境\nCache-Control：缓存控制\nConnection：告诉浏览器，请求完成是断开还是保持连接\nHOST：主机..../.\n```\n\n### 4.4、Http响应\n\n- 服务器---响应-----客户端\n\n百度：\n\n```java\nCache-Control:private    缓存控制Connection:Keep-Alive    连接Content-Encoding:gzip    编码Content-Type:text/html   类型\n```\n\n#### 1.响应体\n\n```java\nAccept：告诉浏览器，它所支持的数据类型Accept-Encoding：支持哪种编码格式  GBK   UTF-8   GB2312  ISO8859-1Accept-Language：告诉浏览器，它的语言环境Cache-Control：缓存控制Connection：告诉浏览器，请求完成是断开还是保持连接HOST：主机..../.Refresh：告诉客户端，多久刷新一次；Location：让网页重新定位；\n```\n\n#### 2.响应状态码\n\n200：请求响应成功  200\n\n3xx：请求重定向 \n\n- 重定向：你重新到我给你新位置去；\n\n4xx：找不到资源   404\n\n- 资源不存在；\n\n5xx：服务器代码错误   500       502:网关错误\n\n#### 常见面试题\n\n当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？\n\n\n\n## 5、Maven\n\n**我为什么要学习这个技术？**\n\n1. 在Javaweb开发中，需要使用大量的jar包，我们手动去导入；\n\n2. 如何能够让一个东西自动帮我导入和配置这个jar包。\n\n   由此，Maven诞生了！\n\n\n\n### 5.1 Maven项目架构管理工具\n\n我们目前用来就是方便导入jar包的！\n\nMaven的核心思想：**约定大于配置**\n\n- 有约束，不要去违反。\n\nMaven会规定好你该如何去编写我们的Java代码，必须要按照这个规范来；\n\n### 5.2 下载安装Maven\n\n官网;https://maven.apache.org/\n\n![1567842350606](/狂神web/1567842350606.png)\n\n下载完成后，解压即可；\n\n小狂神友情建议：电脑上的所有环境都放在一个文件夹下，方便管理；\n\n\n\n### 5.3 配置环境变量\n\n在我们的系统环境变量中\n\n配置如下配置：\n\n- M2_HOME     maven目录下的bin目录\n- MAVEN_HOME      maven的目录\n- 在系统的path中配置  %MAVEN_HOME%\\bin\n\n![1567842882993](/狂神web/1567842882993.png)\n\n测试Maven是否安装成功，保证必须配置完毕！\n\n### 5.4 阿里云镜像\n\n![1567844609399](/狂神web/1567844609399.png)\n\n- 镜像：mirrors\n  - 作用：加速我们的下载\n- 国内建议使用阿里云的镜像\n\n```xml\n<mirror>    <id>nexus-aliyun</id>      <mirrorOf>*,!jeecg,!jeecg-snapshots</mirrorOf>      <name>Nexus aliyun</name>      <url>http://maven.aliyun.com/nexus/content/groups/public</url> </mirror>\n```\n\n### 5.5 本地仓库\n\n在本地的仓库，远程仓库；\n\n**建立一个本地仓库：**localRepository\n\n```xml\n<localRepository>D:\\Environment\\apache-maven-3.6.2\\maven-repo</localRepository>\n```\n\n### 5.6、在IDEA中使用Maven\n\n1. 启动IDEA\n\n2. 创建一个MavenWeb项目\n\n   ![1567844785602](/狂神web/1567844785602.png)\n\n   ![1567844841172](/狂神web/1567844841172.png)\n\n   ![1567844917185](/狂神web/1567844917185.png)\n\n   ![1567844956177](/狂神web/1567844956177.png)\n\n   ![1567845029864](/狂神web/1567845029864.png)\n\n3. 等待项目初始化完毕\n\n   ![1567845105970](/狂神web/1567845105970.png)\n\n   ![1567845137978](/狂神web/1567845137978.png)\n\n4. 观察maven仓库中多了什么东西？\n\n5. IDEA中的Maven设置\n\n   注意：IDEA项目创建成功后，看一眼Maven的配置\n\n   ![1567845341956](/狂神web/1567845341956.png)\n\n   ![1567845413672](/狂神web/1567845413672.png)\n\n6. 到这里，Maven在IDEA中的配置和使用就OK了!\n\n### 5.7、创建一个普通的Maven项目\n\n![1567845557744](/狂神web/1567845557744.png)\n\n![1567845717377](/狂神web/1567845717377.png)\n\n这个只有在Web应用下才会有！\n\n![1567845782034](/狂神web/1567845782034.png)\n\n### 5.8 标记文件夹功能\n\n![1567845910728](/狂神web/1567845910728.png)\n\n![1567845957139](/狂神web/1567845957139.png)\n\n![1567846034906](/狂神web/1567846034906.png)\n\n![1567846073511](/狂神web/1567846073511.png)\n\n### 5.9 在 IDEA中配置Tomcat\n\n![1567846140348](/狂神web/1567846140348.png)\n\n![1567846179573](/狂神web/1567846179573.png)\n\n![1567846234175](/狂神web/1567846234175.png)\n\n![1567846369751](/狂神web/1567846369751.png)\n\n解决警告问题\n\n必须要的配置：**为什么会有这个问题：我们访问一个网站，需要指定一个文件夹名字；**\n\n![1567846421963](/狂神web/1567846421963.png)\n\n![1567846546465](/狂神web/1567846546465.png)\n\n![1567846559111](/狂神web/1567846559111.png)\n\n![1567846640372](/狂神web/1567846640372.png)\n\n### 5.10 pom文件\n\npom.xml 是Maven的核心配置文件\n\n![1567846784849](/狂神web/1567846784849.png)\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--Maven版本和头文件-->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <!--这里就是我们刚才配置的GAV-->\n  <groupId>com.kuang</groupId>\n  <artifactId>javaweb-01-maven</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <!--Package：项目的打包方式\n  jar：java应用\n  war：JavaWeb应用\n  -->\n  <packaging>war</packaging>\n\n\n  <!--配置-->\n  <properties>\n    <!--项目的默认构建编码-->\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <!--编码版本-->\n    <maven.compiler.source>1.8</maven.compiler.source>\n    <maven.compiler.target>1.8</maven.compiler.target>\n  </properties>\n\n  <!--项目依赖-->\n  <dependencies>\n    <!--具体依赖的jar包配置文件-->\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.11</version>\n    </dependency>\n  </dependencies>\n\n  <!--项目构建用的东西-->\n  <build>\n    <finalName>javaweb-01-maven</finalName>\n    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->\n      <plugins>\n        <plugin>\n          <artifactId>maven-clean-plugin</artifactId>\n          <version>3.1.0</version>\n        </plugin>\n        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->\n        <plugin>\n          <artifactId>maven-resources-plugin</artifactId>\n          <version>3.0.2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>3.8.0</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-surefire-plugin</artifactId>\n          <version>2.22.1</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-war-plugin</artifactId>\n          <version>3.2.2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-install-plugin</artifactId>\n          <version>2.5.2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-deploy-plugin</artifactId>\n          <version>2.8.2</version>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n  </build>\n</project>\n\n```\n\n![1567847410771](/狂神web/1567847410771.png)\n\n\n\nmaven由于他的约定大于配置，我们之后可以能遇到我们写的配置文件，无法被导出或者生效的问题，解决方案：\n\n```xml\n<!--在build中配置resources，来防止我们资源导出失败的问题--><build>    <resources>        <resource>            <directory>src/main/resources</directory>            <includes>                <include>**/*.properties</include>                <include>**/*.xml</include>            </includes>            <filtering>true</filtering>        </resource>        <resource>            <directory>src/main/java</directory>            <includes>                <include>**/*.properties</include>                <include>**/*.xml</include>            </includes>            <filtering>true</filtering>        </resource>    </resources></build>\n```\n\n\n\n### 5.12 IDEA操作\n\n![1567847630808](/狂神web/1567847630808.png)\n\n\n\n![1567847662429](/狂神web/1567847662429.png)\n\n\n\n### 5.13 解决遇到的问题\n\n1. Maven 3.6.2\n\n   解决方法：降级为3.6.1\n\n   ![1567904721301](/狂神web/1567904721301.png)\n\n2. Tomcat闪退\n\n   \n\n3. IDEA中每次都要重复配置Maven\n   在IDEA中的全局默认配置中去配置\n\n   ![1567905247201](/狂神web/1567905247201.png)\n\n   ![1567905291002](/狂神web/1567905291002.png)\n\n4. Maven项目中Tomcat无法配置\n\n5. maven默认web项目中的web.xml版本问题\n\n   ![1567905537026](/狂神web/1567905537026.png)\n\n6. 替换为webapp4.0版本和tomcat一致\n\n   ```xml\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?><web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"         version=\"4.0\"         metadata-complete=\"true\"></web-app>\n   ```\n\n   \n\n7. Maven仓库的使用\n\n   地址：https://mvnrepository.com/\n\n   ![1567905870750](/狂神web/1567905870750.png)\n\n   ![1567905982979](/狂神web/1567905982979.png)\n\n   ![1567906017448](/狂神web/1567906017448.png)\n\n   ![1567906039469](/狂神web/1567906039469.png)\n\n\n\n## 6、Servlet\n\n### 6.1、Servlet简介\n\n- Servlet就是sun公司开发动态web的一门技术\n- Sun在这些API中提供一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤：\n  - 编写一个类，实现Servlet接口\n  - 把开发好的Java类部署到web服务器中。\n\n- **把实现了Servlet接口的Java程序叫做，Servlet**\n- \n\n### 6.2、HelloServlet\n\n#### 1 Servlet入门\n\n- Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器，用Java编写的服务器端程序，具有独立于平台和协议的特性，主要功能在于交互式地浏览和生成数据，生成动态Web内容。\n\n- 狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。Servlet运行于支持Java的应用服务器中。\n\n- Servlet 的主要功能在于交互式地浏览和修改数据，生成动态 Web 内容。\n\n- 这个==过程==为：\n\n  1、客户端发送请求至服务器端；\n\n  2、服务器将请求信息发送至 Servlet；\n\n  3、Servlet 生成响应内容并将其传给服务器。响应内容动态生成，通常取决于客户端的请求；\n\n  4、服务器将响应返回给客户端。\n\n- Serlvet接口Sun公司有两个默认的实现类：HttpServlet，GenericServlet\n\n- 配置web.xml\n\n```xml\n<!-- 注册一个Servlet --><servlet>   <!-- Servlet标识名 -->   <servlet-name>HelloServlet</servlet-name>   <!-- Servlet类的全限定名 -->   <servlet-class>com.aaa.servlet.HelloServlet</servlet-class></servlet><!-- 配置Servlet映射信息 --><servlet-mapping>   <!-- Servlet标识名和上面一致 -->   <servlet-name>HelloServlet</servlet-name>   <!-- 访问路径 -->   <url-pattern>/hello</url-pattern></servlet-mapping>\n```\n\n\n\n1. 构建一个普通的Maven项目，删掉里面的src目录，以后我们的学习就在这个项目里面建立Moudel；这个空的工程就是Maven主工程；\n\n2. 关于Maven父子工程的理解：\n\n   父项目中会有\n\n   ```xml\n       <modules>        <module>servlet-01</module>    </modules>\n   ```\n\n   子项目会有\n\n   ```xml\n       <parent>        <artifactId>javaweb-02-servlet</artifactId>        <groupId>com.kuang</groupId>        <version>1.0-SNAPSHOT</version>    </parent>\n   ```\n\n   父项目中的java子项目可以直接使用\n\n   ```java\n   son extends father\n   ```\n\n3. Maven环境优化\n\n   1. 修改web.xml为最新的\n   2. 将maven的结构搭建完整\n\n4. 编写一个Servlet程序\n\n   ![1567911804700](/狂神web/1567911804700.png)\n\n   1. 编写一个普通类\n\n   2. 实现Servlet接口，这里我们直接继承HttpServlet\n\n      ```java\n      public class HelloServlet extends HttpServlet {        //由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样；    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        //ServletOutputStream outputStream = resp.getOutputStream();        PrintWriter writer = resp.getWriter(); //响应流        writer.print(\"Hello,Serlvet\");    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        doGet(req, resp);    }}\n      ```\n\n5. 编写Servlet的映射\n\n   为什么需要映射：我们写的是JAVA程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要再web服务中注册我们写的Servlet，还需给他一个浏览器能够访问的路径；\n\n   ```xml\n       <!--注册Servlet-->\n       <servlet>\n           <servlet-name>hello</servlet-name>\n           <servlet-class>com.kuang.servlet.HelloServlet</servlet-class>\n       </servlet>\n       <!--Servlet的请求路径-->\n       <servlet-mapping>\n           <servlet-name>hello</servlet-name>\n           <url-pattern>/hello</url-pattern>\n       </servlet-mapping>\n   \n   ```\n\n6. 配置Tomcat\n\n   注意：配置项目发布的路径就可以了\n\n7. 启动测试，OK！\n\n\n\n#### 2 ServletAPI层次结构\n\n**核心技能部分**\n\n     ![222](/狂神web//clip_image001.png)\n    \n       ![Serv et  Servi  Serv IetCmf i g  -se rServIe 'Cca rex : O  HttpServ1et  service Cin EttpServletReque;t. ia  et (/狂神web//clip_image001-1583302830910.jpg) ](file:///C:/Users/YANKUN~1/AppData/Local/Temp/msohtmlclip1/01/clip_image001.jpg)  \n\n**Servlet原理**\n\n##### Servlet接口\n\n- Servlet接口定义了所有 Servlet需要实现的方法， 包括==init()，service()，destroy ()==方法， 以及getServletConfig()方法（返回ServletConfig对象，通过该对象可以得到Servlet的配置信息）。\n\n##### ServletConfig接口\n\n- 在Servlet初始化时，Servlet容器会使用ServletConfig对象向该Servlet传递信息。\n\n- **ServletConfig的常用方法**\n\n| **方法**                              | **功能说明**                          |\n| ------------------------------------- | ------------------------------------- |\n| String  getInitParameter(String name) | 获取web.xml中名称为name的初始化参数值 |\n| ServletContext  getServletContext()   | 返回Servlet上下文对象                 |\n\n##### GenericServlet类\n\n- 抽象类 GenericServlet实现了Servlet接口和ServletConfig接口，简单实现除 service()方法外的其它方法，它定义了通用的，不依赖于协议的Servlet规范。 GenericServlet类的常用方法如表2.2.3所示。\n\n- **GenericServlet类的常用方法**\n\n| **方法**                              | **功能说明**                 |\n| ------------------------------------- | ---------------------------- |\n| void  init(ServletConfig config)      | 初始化方法                   |\n| String  getInitParameter(String name) | 返回名称为name的初始化参数值 |\n| ServletContext  getServletCotext()    | 返回ServletContext对象       |\n\n##### HttpServlet类\n\n- 抽象类HttpServlet继承自GenericServlet类，专门用来处理HTTP请求，并提供了与HTTP相关的实现方法。根据HTTP协议的特点， HttpServlet分别提供了处理请求的相应方法，如表2.2.4所示。\n\n- **HttpServlet类的常用方法**\n\n| **方法**                                                     | **功能说明**                                                 |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| void ==service==  (ServletRequest reg, ServletResponse res)  | 接收客户端请求，然后把请求分发给相应的doXX方法，如果是GET请求就分发给doGet()方法，如果是POST请求就分发给doPost()方法。 |\n| void  ==doGet==(HttpServletRequest reg, HttpServletResponse res) | 处理GET请求                                                  |\n| void  ==doPost==(HttpServletRequest reg, HttpServletResponse res) | 处理POST请求                                                 |\n\n- 如果要自己要编写Servlet程序， 都是继承HttpServlet类， 然后重写其中的某些方法， 使用原则如下：\n\n  (1) 重写doGet方法来处理GET请求。\n\n  (2) 重写doPost方法来处理POST请求。\n\n  (3) 如果需要在Servlet实例化中进行初始化工作，可以重写init()方法。\n\n  (4) 如果需要在 Servlet被释放时进行资源清理的工作，可以重写destroy()方法。\n\n- **提示：**\n\n  - HTTP 请求主要就 get 和 post两种， 为了让 servlet两种请求都能处理，一般doGet ()和doPost()方法都重写，而处理代码只写在一个方法中，另外一个方法调用即可。\n\n##### HttpServletRequest接口\n\n- HttpServletRequest接口继承自ServletRequest接口，它代表客户的请求。\n- 容器在调用Servlet的doGet()和doPost()方法时，会创建一个HttpServletRequest接口的实例，作为参数传给doGet()或doPost()方法。\n\n- **HttpServleRequest 接口的常用方法**\n\n| **方法**                                         | **功能说明**                                                 |\n| ------------------------------------------------ | ------------------------------------------------------------ |\n| String  ==getParameter==(String name)            | 根据页面表单元素名称获取页面提交数据                         |\n| string[]  ==getPararneterValues== (String name)  | 获取页面有重名表单元素（比如复选框）的值                     |\n| void  ==setCharacterEncoding== (String name)     | 设置请求的编码，在调用getParameter()方法  前进行设置，此方法可以解决提供中文数据乱码问题。 |\n| void  ==setAttribute==(String name,Object value) | 设置请求的参数                                               |\n| ==getRequestDispatcher==(String  path)           | 返回一个RequestDispatcher对象，该对象的  forward方法可以把请求转发到指定资源 |\n\n##### HttpServletResponse接口\n\n- HttpServletResponse接口继承自ServletResponse接口，它代表向客户端发送的响应。\n- 容器在调用Servlet的doGet()和doPost()方法时，同样会创建一个 HttpServletResponse接口的实例，作为参数传给doGet()或doPost()方法。\n- Servlet利用HttpServletRequest对象获取客户端的请求数据，经过处理后由 HttpServletResponse对象发送响应数据。\n\n- **HttpServleRequest 接口的常用方法**\n\n| **方法**                                   | **功能说明**       |\n| ------------------------------------------ | ------------------ |\n| setContentType(\"text/html;charset=utf-8\"); | 设置响应的内容类型 |\n| PrintWriter  response.getWriter()          | 获得响应的输出流   |\n| response.sendRedirect(redirect)            | 重定向到指定的网址 |\n\n#####  转发与重定向\n\n**1 转发**\n\n- 转发属于**服务器跳转**。当使用转发时，JSP容器将使用一个内部的方法来调用目标页面，新的页面继续处理同一个请求，而浏览器将不会知道这个过程。\n\n- 整个过程都是在一个Web容器内完成，因而可以共享request范围内的数据。\n\n- 而对应到客户端，不管服务器内部如何处理，作为浏览器都只是提交了一个请求，因而客户端的URL地址不会发生改变。\n\n- 转发的作用：在多个页面交互过程中实现请求数据的共享。\n\n- 实现转发分为两个步骤：\n\n  1、 需要先获取RequestDispatcher实例\n\n  dispatcher=request.getRequestDispatcher(\"servlet2\");\n\n  2、 调用forward方法\n\n  dispatcher.forward(request, response);\n\n \n\n**2 重定向**\n\n- 重定向是**客户端跳转**。\n\n- 重定向方式的含义是第一个页面通知浏览器发送一个新的页面请求。\n\n- 因为，当你使用重定向时，浏览器中所显示的URL会变成新页面的URL。\n\n- 同时，由于重定向方式产生了一个新的请求，所以经过一次重定向后，request内的对象将无法使用。\n\n- 重定向需要使用HttpServletResponse对象的==sendRedirect==()方法实现\n\n  \n\n**3 转发与重定向的区别**\n\n- 转发是继续传递、处理==同一个请求==，在==服务器端==进行；\n  - 重定向在==客户端==运行，会产生==新请求==。\n\n- 转发时浏览器地址栏中显示的是==初次发出请求的地址==；\n  - 重定向时浏览器地址栏中==不再是初次==请求的地址，而是==最后响应==的那个地址。\n\n- 转发时最终的servlet中，request对象和中转的那个request对象是==同一个==；\n  - 重定向最终的servlet中，request对象和中转的那个request对象==不是同一个==。\n\n- 转发只能转发给==当前web应用==的资源； \n  - 重定可以重定向到==任何==资源。\n\n\n\n##### Servlet应用\n\n**使用Servlet处理客户端请求** \n\n前面学习了Servlet的主要作用就是接受客户端请求并返回响应，接下来就通过一个用户登陆功能示例， 学习使用Servlet处理客户端请求,\n\n**获得Servlet初始化参数**\n\n通过Servlet的doGet()和doPost()，可以处理客户端请求并获得表单提交的数据。当然我们也可以对Servlet进行初始化设置，在Servlet加载时就对参数进行初始化。设置初 始化参数首先要在web.xml中的<servlet>元素中使用<init-param>元素进行设置，\n\n**Servlet访问数据库**\n\n进一步完善登录代码，需要连接数据库进行用户名和密码的校验，我们需要建立BaseDao(之前所学)、实体类、Dao接口和Dao实现类。\n\n##### ==Servlet的生命周期==\n\nServlet部署在容器中，其生命周期由容器来管理，可以概括为以下5个阶段：\n\n1. 加载\n2. 实例化\n3. 初始化\n4. 服务\n5. 销毁\n\n### 6.3、Servlet原理\n\nServlet是由Web服务器调用，web服务器在收到浏览器请求之后，会：\n\n![1567913793252](/狂神web/1567913793252.png)\n\n### 6.4、Mapping问题\n\n1. 一个Servlet可以指定一个映射路径\n\n   ```xml\n       <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello</url-pattern>    </servlet-mapping>\n   ```\n\n2. 一个Servlet可以指定多个映射路径\n\n   ```xml\n       <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello</url-pattern>    </servlet-mapping>    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello2</url-pattern>    </servlet-mapping>    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello3</url-pattern>    </servlet-mapping>    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello4</url-pattern>    </servlet-mapping>    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello5</url-pattern>    </servlet-mapping>\n   ```\n\n3. 一个Servlet可以指定通用映射路径\n\n   ```xml\n       <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello/*</url-pattern>    </servlet-mapping>\n   ```\n\n4. 默认请求路径\n\n   ```xml\n       <!--默认请求路径-->    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/*</url-pattern>    </servlet-mapping>\n   ```\n\n5. 指定一些后缀或者前缀等等….\n\n   ```xml\n   <!--可以自定义后缀实现请求映射    注意点，*前面不能加项目映射的路径    hello/sajdlkajda.qinjiang    --><servlet-mapping>    <servlet-name>hello</servlet-name>    <url-pattern>*.qinjiang</url-pattern></servlet-mapping>\n   ```\n\n6. 优先级问题\n   指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；\n\n   ```xml\n   <!--404--><servlet>    <servlet-name>error</servlet-name>    <servlet-class>com.kuang.servlet.ErrorServlet</servlet-class></servlet><servlet-mapping>    <servlet-name>error</servlet-name>    <url-pattern>/*</url-pattern></servlet-mapping>\n   ```\n\n   \n\n### 6.5、ServletContext\n\nweb容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用；\n\n#### 1、共享数据\n\n我在这个Servlet中保存的数据，可以在另外一个servlet中拿到；\n\n```java\npublic class HelloServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {                //this.getInitParameter()   初始化参数        //this.getServletConfig()   Servlet配置        //this.getServletContext()  Servlet上下文        ServletContext context = this.getServletContext();        String username = \"秦疆\"; //数据        context.setAttribute(\"username\",username); //将一个数据保存在了ServletContext中，名字为：username 。值 username    }}\n```\n\n```java\npublic class GetServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        ServletContext context = this.getServletContext();        String username = (String) context.getAttribute(\"username\");        resp.setContentType(\"text/html\");        resp.setCharacterEncoding(\"utf-8\");        resp.getWriter().print(\"名字\"+username);    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        doGet(req, resp);    }}\n```\n\n```XML\n    <servlet>        <servlet-name>hello</servlet-name>        <servlet-class>com.kuang.servlet.HelloServlet</servlet-class>    </servlet>    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello</url-pattern>    </servlet-mapping>    <servlet>        <servlet-name>getc</servlet-name>        <servlet-class>com.kuang.servlet.GetServlet</servlet-class>    </servlet>    <servlet-mapping>        <servlet-name>getc</servlet-name>        <url-pattern>/getc</url-pattern>    </servlet-mapping>\n```\n\n测试访问结果；\n\n\n\n#### 2、获取初始化参数\n\n```xml\n    <!--配置一些web应用初始化参数-->    <context-param>        <param-name>url</param-name>        <param-value>jdbc:mysql://localhost:3306/mybatis</param-value>    </context-param>\n```\n\n```java\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {    ServletContext context = this.getServletContext();    String url = context.getInitParameter(\"url\");    resp.getWriter().print(url);}\n```\n\n#### 3、请求转发\n\n```java\n@Overrideprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {    ServletContext context = this.getServletContext();    System.out.println(\"进入了ServletDemo04\");    //RequestDispatcher requestDispatcher = context.getRequestDispatcher(\"/gp\"); //转发的请求路径    //requestDispatcher.forward(req,resp); //调用forward实现请求转发；    context.getRequestDispatcher(\"/gp\").forward(req,resp);}\n```\n\n<img src=\"/狂神web/1567924457532.png\" alt=\"1567924457532\" style=\"zoom: 80%;\" />\n\n#### 4、读取资源文件\n\nProperties\n\n- 在java目录下新建properties\n- 在resources目录下新建properties\n\n发现：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath:\n\n思路：需要一个文件流；\n\n```properties\nusername=root12312password=zxczxczxc\n```\n\n```java\npublic class ServletDemo05 extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        InputStream is = this.getServletContext().getResourceAsStream(\"/WEB-INF/classes/com/kuang/servlet/aa.properties\");        Properties prop = new Properties();        prop.load(is);        String user = prop.getProperty(\"username\");        String pwd = prop.getProperty(\"password\");        resp.getWriter().print(user+\":\"+pwd);    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        doGet(req, resp);    }}\n```\n\n访问测试即可ok；\n\n### 6.6、HttpServletResponse\n\nweb服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；\n\n- 如果要获取客户端请求过来的参数：找HttpServletRequest\n- 如果要给客户端响应一些信息：找HttpServletResponse\n\n#### 1、简单分类\n\n负责向浏览器发送数据的方法\n\n```java\nServletOutputStream getOutputStream() throws IOException;PrintWriter getWriter() throws IOException;\n```\n\n负责向浏览器发送响应头的方法\n\n```java\n    void setCharacterEncoding(String var1);    void setContentLength(int var1);    void setContentLengthLong(long var1);    void setContentType(String var1);    void setDateHeader(String var1, long var2);    void addDateHeader(String var1, long var2);    void setHeader(String var1, String var2);    void addHeader(String var1, String var2);    void setIntHeader(String var1, int var2);    void addIntHeader(String var1, int var2);\n```\n\n响应的状态码\n\n```java\n    int SC_CONTINUE = 100;\n    int SC_SWITCHING_PROTOCOLS = 101;\n    int SC_OK = 200;\n    int SC_CREATED = 201;\n    int SC_ACCEPTED = 202;\n    int SC_NON_AUTHORITATIVE_INFORMATION = 203;\n    int SC_NO_CONTENT = 204;\n    int SC_RESET_CONTENT = 205;\n    int SC_PARTIAL_CONTENT = 206;\n    int SC_MULTIPLE_CHOICES = 300;\n    int SC_MOVED_PERMANENTLY = 301;\n    int SC_MOVED_TEMPORARILY = 302;\n    int SC_FOUND = 302;\n    int SC_SEE_OTHER = 303;\n    int SC_NOT_MODIFIED = 304;\n    int SC_USE_PROXY = 305;\n    int SC_TEMPORARY_REDIRECT = 307;\n    int SC_BAD_REQUEST = 400;\n    int SC_UNAUTHORIZED = 401;\n    int SC_PAYMENT_REQUIRED = 402;\n    int SC_FORBIDDEN = 403;\n    int SC_NOT_FOUND = 404;\n    int SC_METHOD_NOT_ALLOWED = 405;\n    int SC_NOT_ACCEPTABLE = 406;\n    int SC_PROXY_AUTHENTICATION_REQUIRED = 407;\n    int SC_REQUEST_TIMEOUT = 408;\n    int SC_CONFLICT = 409;\n    int SC_GONE = 410;\n    int SC_LENGTH_REQUIRED = 411;\n    int SC_PRECONDITION_FAILED = 412;\n    int SC_REQUEST_ENTITY_TOO_LARGE = 413;\n    int SC_REQUEST_URI_TOO_LONG = 414;\n    int SC_UNSUPPORTED_MEDIA_TYPE = 415;\n    int SC_REQUESTED_RANGE_NOT_SATISFIABLE = 416;\n    int SC_EXPECTATION_FAILED = 417;\n    int SC_INTERNAL_SERVER_ERROR = 500;\n    int SC_NOT_IMPLEMENTED = 501;\n    int SC_BAD_GATEWAY = 502;\n    int SC_SERVICE_UNAVAILABLE = 503;\n    int SC_GATEWAY_TIMEOUT = 504;\n    int SC_HTTP_VERSION_NOT_SUPPORTED = 505;\n```\n\n#### 2、下载文件\n\n1. 向浏览器输出消息 （一直在讲，就不说了）\n2. 下载文件\n   1. 要获取下载文件的路径\n   2. 下载的文件名是啥？\n   3. 设置想办法让浏览器能够支持下载我们需要的东西\n   4. 获取下载文件的输入流\n   5. 创建缓冲区\n   6. 获取OutputStream对象\n   7. 将FileOutputStream流写入到buffer缓冲区\n   8. 使用OutputStream将缓冲区中的数据输出到客户端！\n\n```java\n@Override\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    // 1. 要获取下载文件的路径\n    String realPath = \"F:\\\\班级管理\\\\西开【19525】\\\\2、代码\\\\JavaWeb\\\\javaweb-02-servlet\\\\response\\\\target\\\\classes\\\\秦疆.png\";\n    System.out.println(\"下载文件的路径：\"+realPath);\n    // 2. 下载的文件名是啥？\n    String fileName = realPath.substring(realPath.lastIndexOf(\"\\\\\") + 1);\n    // 3. 设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件名URLEncoder.encode编码，否则有可能乱码\n    resp.setHeader(\"Content-Disposition\",\"attachment;filename=\"+URLEncoder.encode(fileName,\"UTF-8\"));\n    // 4. 获取下载文件的输入流\n    FileInputStream in = new FileInputStream(realPath);\n    // 5. 创建缓冲区\n    int len = 0;\n    byte[] buffer = new byte[1024];\n    // 6. 获取OutputStream对象\n    ServletOutputStream out = resp.getOutputStream();\n    // 7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端！\n    while ((len=in.read(buffer))>0){\n        out.write(buffer,0,len);\n    }\n\n    in.close();\n    out.close();\n}\n```\n\n#### 3、验证码功能\n\n验证怎么来的？\n\n- 前端实现\n- 后端实现，需要用到 Java 的图片类，生产一个图片\n\n```java\npackage com.kuang.servlet;import javax.imageio.ImageIO;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.awt.*;import java.awt.image.BufferedImage;import java.io.IOException;import java.util.Random;public class ImageServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        //如何让浏览器3秒自动刷新一次;        resp.setHeader(\"refresh\",\"3\");                //在内存中创建一个图片        BufferedImage image = new BufferedImage(80,20,BufferedImage.TYPE_INT_RGB);        //得到图片        Graphics2D g = (Graphics2D) image.getGraphics(); //笔        //设置图片的背景颜色        g.setColor(Color.white);        g.fillRect(0,0,80,20);        //给图片写数据        g.setColor(Color.BLUE);        g.setFont(new Font(null,Font.BOLD,20));        g.drawString(makeNum(),0,20);        //告诉浏览器，这个请求用图片的方式打开        resp.setContentType(\"image/jpeg\");        //网站存在缓存，不让浏览器缓存        resp.setDateHeader(\"expires\",-1);        resp.setHeader(\"Cache-Control\",\"no-cache\");        resp.setHeader(\"Pragma\",\"no-cache\");        //把图片写给浏览器        ImageIO.write(image,\"jpg\", resp.getOutputStream());    }    //生成随机数    private String makeNum(){        Random random = new Random();        String num = random.nextInt(9999999) + \"\";        StringBuffer sb = new StringBuffer();        for (int i = 0; i < 7-num.length() ; i++) {            sb.append(\"0\");        }        num = sb.toString() + num;        return num;    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        doGet(req, resp);    }}\n```\n\n#### 4、实现重定向\n\n![1567931587955](/狂神web/1567931587955.png)\n\nB一个web资源收到客户端A请求后，B他会通知A客户端去访问另外一个web资源C，这个过程叫重定向\n\n常见场景：\n\n- 用户登录\n\n```java\nvoid sendRedirect(String var1) throws IOException;\n```\n\n测试：\n\n```java\n@Overrideprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {    /*        resp.setHeader(\"Location\",\"/r/img\");        resp.setStatus(302);         */    resp.sendRedirect(\"/r/img\");//重定向}\n```\n\n面试题：请你聊聊重定向和转发的区别？\n\n相同点\n\n- 页面都会实现跳转\n\n不同点\n\n- 请求转发的时候，url不会产生变化\n- 重定向时候，url地址栏会发生变化；\n\n![1567932163430](/狂神web/1567932163430.png)\n\n#### 5、简单实现登录重定向\n\n```jsp\n<%--这里提交的路径，需要寻找到项目的路径--%><%--${pageContext.request.contextPath}代表当前的项目--%><form action=\"${pageContext.request.contextPath}/login\" method=\"get\">    用户名：<input type=\"text\" name=\"username\"> <br>    密码：<input type=\"password\" name=\"password\"> <br>    <input type=\"submit\"></form>\n```\n\n```JAVA\n    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        //处理请求        String username = req.getParameter(\"username\");        String password = req.getParameter(\"password\");        System.out.println(username+\":\"+password);        //重定向时候一定要注意，路径问题，否则404；        resp.sendRedirect(\"/r/success.jsp\");    }\n```\n\n```xml\n  <servlet>    <servlet-name>requset</servlet-name>    <servlet-class>com.kuang.servlet.RequestTest</servlet-class>  </servlet>  <servlet-mapping>    <servlet-name>requset</servlet-name>    <url-pattern>/login</url-pattern>  </servlet-mapping>\n```\n\n```jsp\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %><html><head>    <title>Title</title></head><body><h1>Success</h1></body></html>\n```\n\n### 6.7、HttpServletRequest\n\nHttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息；\n\n![1567933996830](/狂神web/1567933996830.png)\n\n![1567934023106](/狂神web/1567934023106.png)\n\n#### 获取参数，请求转发\n\n![1567934110794](/狂神web/1567934110794.png)\n\n```java\n@Overrideprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {    req.setCharacterEncoding(\"utf-8\");    resp.setCharacterEncoding(\"utf-8\");    String username = req.getParameter(\"username\");    String password = req.getParameter(\"password\");    String[] hobbys = req.getParameterValues(\"hobbys\");    System.out.println(\"=============================\");    //后台接收中文乱码问题    System.out.println(username);    System.out.println(password);    System.out.println(Arrays.toString(hobbys));    System.out.println(\"=============================\");    System.out.println(req.getContextPath());    //通过请求转发    //这里的 / 代表当前的web应用    req.getRequestDispatcher(\"/success.jsp\").forward(req,resp);}\n```\n\n**面试题：请你聊聊重定向和转发的区别？**\n\n相同点\n\n- 页面都会实现跳转\n\n不同点\n\n- 请求转发的时候，url不会产生变化   307\n- 重定向时候，url地址栏会发生变化； 302\n\n### 6.8、处理中文乱码\n\n```xml\n注册<form action=\"show.jsp\" method=\"post\">  <input  type=\"text\" name=\"name\">  <input  type=\"submit\" value=\"注册\">  </form>     <%//脚本段   String name = request.getParameter(\"name\");    %>        name:<%=name %>   //表达式     This is my JSP page. <br>//处理中文乱码1.   <%   request.setCharacterEncoding(\"UTF-8\");   response.setContentType(\"text/html;charset=utf-8\");   String name = request.getParameter(\"name\");   %>2.    <%   response.setContentType(\"text/html;charset=utf-8\");   String name = request.getParameter(\"name\");      name = new String(name.getBytes(\"ISO-8859-1\"),\"utf-8\");    %>        name:<%=name %>\n```\n\n\n\n## 7、Cookie、Session\n\n### 7.1、会话\n\n**会话**：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；\n\n**有状态会话**：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；\n\n**你能怎么证明你是西开的学生？**\n\n你              西开\n\n1. 发票                西开给你发票\n2. 学校登记        西开标记你来过了\n\n**一个网站，怎么证明你来过？**\n\n客户端              服务端\n\n1. 服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了； cookie\n2. 服务器登记你来过了，下次你来的时候我来匹配你； seesion\n\n\n\n### 7.2、保存会话的两种技术\n\n**cookie**\n\n- 客户端技术   （响应，请求）\n\n**session**\n\n- 服务器技术，利用这个技术，可以保存用户的会话信息？ 我们可以把信息或者数据放在Session中！\n\n\n\n常见常见：网站登录之后，你下次不用再登录了，第二次访问直接就上去了！\n\n### 7.3、Cookie\n\n![1568344447291](/狂神web/1568344447291.png)\n\n1. 从请求中拿到cookie信息\n2. 服务器响应给客户端cookie\n\n```java\nCookie[] cookies = req.getCookies(); //获得Cookiecookie.getName(); //获得cookie中的keycookie.getValue(); //获得cookie中的vlauenew Cookie(\"lastLoginTime\", System.currentTimeMillis()+\"\"); //新建一个cookiecookie.setMaxAge(24*60*60); //设置cookie的有效期resp.addCookie(cookie); //响应给客户端一个cookie\n```\n\n**cookie：一般会保存在本地的 用户目录下 appdata；**\n\n\n\n一个网站cookie是否存在上限！**聊聊细节问题**\n\n- 一个Cookie只能保存一个信息；\n- 一个web站点可以给浏览器发送多个cookie，最多存放20个cookie；\n- Cookie大小有限制4kb；\n- 300个cookie浏览器上限\n\n\n\n**删除Cookie；**\n\n- 不设置有效期，关闭浏览器，自动失效；\n- 设置有效期时间为 0 ；\n\n\n\n**编码解码：**\n\n```java\nURLEncoder.encode(\"秦疆\",\"utf-8\")URLDecoder.decode(cookie.getValue(),\"UTF-8\")\n```\n\n\n\n### 7.4、Session（重点）\n\n![1568344560794](/狂神web/1568344560794.png)\n\n什么是Session：\n\n- 服务器会给每一个用户（浏览器）创建一个Seesion对象；\n- 一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在；\n- 用户登录之后，整个网站它都可以访问！--> 保存用户的信息；保存购物车的信息…..\n\n![1568342773861](/狂神web/1568342773861.png)\n\nSession和cookie的区别：\n\n- Cookie是把用户的数据写给用户的浏览器，浏览器保存 （可以保存多个）\n- Session把用户的数据写到用户独占Session中，服务器端保存  （保存重要的信息，减少服务器资源的浪费）\n- Session对象由服务创建；\n\n\n\n使用场景：\n\n- 保存一个登录用户的信息；\n- 购物车信息；\n- 在整个网站中经常会使用的数据，我们将它保存在Session中；\n\n\n\n使用Session：\n\n```java\npackage com.kuang.servlet;\n\nimport com.kuang.pojo.Person;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.*;\nimport java.io.IOException;\n\npublic class SessionDemo01 extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        \n        //解决乱码问题\n        req.setCharacterEncoding(\"UTF-8\");\n        resp.setCharacterEncoding(\"UTF-8\");\n        resp.setContentType(\"text/html;charset=utf-8\");\n        \n        //得到Session\n        HttpSession session = req.getSession();\n        //给Session中存东西\n        session.setAttribute(\"name\",new Person(\"秦疆\",1));\n        //获取Session的ID\n        String sessionId = session.getId();\n\n        //判断Session是不是新创建\n        if (session.isNew()){\n            resp.getWriter().write(\"session创建成功,ID:\"+sessionId);\n        }else {\n            resp.getWriter().write(\"session以及在服务器中存在了,ID:\"+sessionId);\n        }\n\n        //Session创建的时候做了什么事情；\n//        Cookie cookie = new Cookie(\"JSESSIONID\",sessionId);\n//        resp.addCookie(cookie);\n\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        doGet(req, resp);\n    }\n}\n\n//得到Session\nHttpSession session = req.getSession();\n\nPerson person = (Person) session.getAttribute(\"name\");\n\nSystem.out.println(person.toString());\n\nHttpSession session = req.getSession();\nsession.removeAttribute(\"name\");\n//手动注销Session\nsession.invalidate();\n```\n\n\n\n**会话自动过期：web.xml配置**\n\n```xml\n<!--设置Session默认的失效时间--><session-config>    <!--15分钟后Session自动失效，以分钟为单位-->    <session-timeout>15</session-timeout></session-config>\n```\n\n\n\n![1568344679763](/狂神web/1568344679763.png)\n\n\n\n## 8、JSP\n\n==**静态网页&动态网页**==\n\n|          | **静态网页** | **动态网页**                |\n| -------- | ------------ | --------------------------- |\n| 组成     | html+js+css  | jsp+html;asp+html;php+html; |\n| 交互     | 不可交互     | 可交互                      |\n| 运行方式 | 客户端运行   | 服务端生成，客户端运行      |\n| 数据库   | 无数据库连接 | 连接数据库                  |\n\n### 8.1、什么是JSP\n\n- Java Server Pages ： Java服务器端页面，也和Servlet一样，用于动态Web技术！\n- http://127.0.0.1:8080/login/index.jsp\n\n- 最大的特点：\n  - 写JSP就像在写HTML\n  - 区别：\n    - HTML只给用户提供静态的数据\n    - JSP页面中可以嵌入JAVA代码，为用户提供动态数据；\n\n- **工作原理**\n\n  - 客户端请求\n  - 把 *.jsp 翻译成 *.java \n  - 编译为 *.class\n  - 执行生成servlet\n  - 反馈结果给客户端显示\n        第二次访问 有改动 执行上述过程 \n        无改动 直接执行\n\n  - ![123](/狂神web/clip_image001-1583305097106.png)\n  - <img src=\"/狂神web/clip_image001-1583305111348.png\" alt=\"112\" style=\"zoom:80%;\" />\n  - ![44](/狂神web/clip_image001-1583305154041.png)\n  - ![54](/狂神web/clip_image001-1583305166669.png)\n\n### 8.2、JSP原理\n\n思路：JSP到底怎么执行的！\n\n- 代码层面没有任何问题\n\n- 服务器内部工作\n\n  tomcat中有一个work目录；\n\n  IDEA中使用Tomcat的会在IDEA的tomcat中生产一个work目录\n\n  ![1568345873736](/狂神web/1568345873736.png)\n\n  我电脑的地址：\n\n  ```java\n  C:\\Users\\Administrator\\.IntelliJIdea2018.1\\system\\tomcat\\Unnamed_javaweb-session-cookie\\work\\Catalina\\localhost\\ROOT\\org\\apache\\jsp\n  ```\n\n  发现页面转变成了Java程序！\n\n  ![1568345948307](/狂神web/1568345948307.png)\n\n\n\n**浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet！**\n\nJSP最终也会被转换成为一个Java类！\n\n**JSP 本质上就是一个Servlet**\n\n```java\n//初始化  public void _jspInit() {        }//销毁  public void _jspDestroy() {  }//JSPService  public void _jspService(.HttpServletRequest request,HttpServletResponse response)      \n```\n\n1. 判断请求\n\n2. 内置一些对象\n\n   ```java\n   final javax.servlet.jsp.PageContext pageContext;  //页面上下文javax.servlet.http.HttpSession session = null;    //sessionfinal javax.servlet.ServletContext application;   //applicationContextfinal javax.servlet.ServletConfig config;         //configjavax.servlet.jsp.JspWriter out = null;           //outfinal java.lang.Object page = this;               //page：当前HttpServletRequest request                        //请求HttpServletResponse response                      //响应\n   ```\n\n3. 输出页面前增加的代码\n\n   ```java\n   response.setContentType(\"text/html\");       //设置响应的页面类型pageContext = _jspxFactory.getPageContext(this, request, response,                                          null, true, 8192, true);_jspx_page_context = pageContext;application = pageContext.getServletContext();config = pageContext.getServletConfig();session = pageContext.getSession();out = pageContext.getOut();_jspx_out = out;\n   ```\n\n4. 以上的这些个对象我们可以在JSP页面中直接使用！\n\n![1568347078207](/狂神web/1568347078207.png)\n\n\n\n在JSP页面中；\n\n只要是 JAVA代码就会原封不动的输出；\n\n如果是HTML代码，就会被转换为：\n\n```java\nout.write(\"<html>\\r\\n\");\n```\n\n这样的格式，输出到前端！\n\n\n\n### 8.3、JSP基础语法\n\n任何语言都有自己的语法，JAVA中有,。 JSP 作为java技术的一种应用，它拥有一些自己扩充的语法（了解，知道即可！），Java所有语法都支持！\n\n#### JSP 的组成 [**JSP页面的构成**](https://www.cnblogs.com/yangyquin/p/5430231.html)\n\n <img src=\"/狂神web/clip_image001-1583305406375.png\" alt=\"54\" style=\"zoom:50%;\" />\n\n**==1 静态页面==**\n\n##### ==2 指令==\n\n```xml\n<%@ %><!--page--><%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"UTF-8\"  contentType=\"text/html; charset=UTF-8\" isErrorPage=\"true\"%><!--include--><%@ include file=\"foot.html\" %>   静态引入/静态包含<%@ include file=\"foot.jsp\" %>使用jsp要删除<% String path = request.getContextPath( );   String basePath = request.getScheme( )+\"://\"+request %><base href=\"<%=basePath%>\"><jsp:include page=\"foot.html\"></jsp:include>   动态引入/动态包含<jsp:include page=\"foot.jsp\"></jsp:include> (可使用html/jsp)    <!--taglib--><%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>     <!--======================================================================-->    <%@page args.... %><%@include file=\"\"%><%--@include会将两个页面合二为一--%><%@include file=\"common/header.jsp\"%><h1>网页主体</h1><%@include file=\"common/footer.jsp\"%><hr><%--jSP标签    jsp:include：拼接页面，本质还是三个    --%><jsp:include page=\"/common/header.jsp\"/><h1>网页主体</h1><jsp:include page=\"/common/footer.jsp\"/>\n```\n\n##### ==3 声明==\n\n- JSP声明：会被编译到JSP生成Java的类中！其他的，就会被生成到_jspService方法中！在JSP，嵌入Java代码即可！\n\n```xml\n在JSP页面中定义变量,方法或类  <%!  %><%!  String s = \"这是一个声明\" ;    public  int  add(int x,int y ){         return x+y;     } %>=========================================<%!static {  System.out.println(\"Loading Servlet!\");}private int globalVar = 0;public void kuang(){  System.out.println(\"进入了方法Kuang！\");}%>\n```\n\n##### ==4 表达式==\n\n```xml\n<%= 变量或表达式%> basePath:<%=basePath%><body>    <h1>当前时间： </h1>    <%= new Date() %></body>================================<%--JSP表达式作用：用来将程序的输出，输出到客户端<%= 变量或者表达式%>--%><%= new java.util.Date()%>\n```\n\n##### ==5 脚本段==（小脚本/代码块）\n\n```xml\n在JSP页面中执行的Java代码 语法： <% Java代码 %><%  System.out.println(\"这是一个代码块\");%>================================================== <%--jsp脚本片段--%><%int sum = 0;for (int i = 1; i <=100 ; i++) {  sum+=i;}out.println(\"<h1>Sum=\"+sum+\"</h1>\");%>\n```\n\n```xml\n<!--脚本片段的再实现--><%int x = 10;out.println(x);%><p>这是一个JSP文档</p><%int y = 2;out.println(y);%><hr><%--在代码嵌入HTML元素--%><%for (int i = 0; i < 5; i++) {%><h1>Hello,World  <%=i%> </h1><%}%>\n```\n\n##### ==6 标准动作==\n\n```xml\n<jsp:include page=\"foot.html\"></jsp:include>   动态引入/动态包含<jsp:forward page=\"encoding.jsp\"></jsp:forward>\n```\n\n##### ==7 注释==\n\n- JSP的注释，不会在客户端显示，HTML就会！\n\n\n```xml\n<!-- This is my JSP page. <br> --><%--  <% System.out.println(\"这是一个代码块\");%>--%>//System.out.println(\"这是一个代码块\"); /* System.out.println(\"这是一个代码块1\"); */\n```\n\n\n\n### 8.4、9大内置对象\n\n- PageContext    存东西\n- Request     存东西\n- Response\n- Session      存东西\n- Application   【SerlvetContext】   存东西\n- config    【SerlvetConfig】\n- out\n- page ，不用了解\n- exception\n\n```java\npageContext.setAttribute(\"name1\",\"秦疆1号\"); //保存的数据只在一个页面中有效request.setAttribute(\"name2\",\"秦疆2号\"); //保存的数据只在一次请求中有效，请求转发会携带这个数据session.setAttribute(\"name3\",\"秦疆3号\"); //保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器application.setAttribute(\"name4\",\"秦疆4号\");  //保存的数据只在服务器中有效，从打开服务器到关闭服务器\n```\n\nrequest：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！\n\nsession：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车；\n\napplication：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如：聊天数据；\n\n### 8.5、JSP标签、JSTL标签、EL表达式\n\n```xml\n<!-- JSTL表达式的依赖 --><dependency>    <groupId>javax.servlet.jsp.jstl</groupId>    <artifactId>jstl-api</artifactId>    <version>1.2</version></dependency><!-- standard标签库 --><dependency>    <groupId>taglibs</groupId>    <artifactId>standard</artifactId>    <version>1.1.2</version></dependency>\n```\n\nEL表达式：  ${ }\n\n- **获取数据**\n- **执行运算**\n- **获取web开发的常用对象**\n\n\n\n**JSP标签**\n\n```jsp\n<%--jsp:include--%><%--http://localhost:8080/jsptag.jsp?name=kuangshen&age=12--%><jsp:forward page=\"/jsptag2.jsp\">    <jsp:param name=\"name\" value=\"kuangshen\"></jsp:param>    <jsp:param name=\"age\" value=\"12\"></jsp:param></jsp:forward>\n```\n\n\n\n**JSTL表达式**\n\nJSTL标签库的使用就是为了弥补HTML标签的不足；它自定义许多标签，可以供我们使用，标签的功能和Java代码一样！\n\n**格式化标签**\n\n**SQL标签**\n\n**XML 标签**\n\n**核心标签** （掌握部分）\n\n![1568362473764](/狂神web/1568362473764.png)\n\n**JSTL标签库使用步骤**\n\n- 引入对应的 taglib\n- 使用其中的方法\n- **在Tomcat 也需要引入 jstl的包，否则会报错：JSTL解析错误**\n\nc：if\n\n```jsp\n<head>\n    <title>Title</title>\n</head>\n<body>\n\n\n<h4>if测试</h4>\n\n<hr>\n\n<form action=\"coreif.jsp\" method=\"get\">\n    <%--\n    EL表达式获取表单中的数据\n    ${param.参数名}\n    --%>\n    <input type=\"text\" name=\"username\" value=\"${param.username}\">\n    <input type=\"submit\" value=\"登录\">\n</form>\n\n<%--判断如果提交的用户名是管理员，则登录成功--%>\n<c:if test=\"${param.username=='admin'}\" var=\"isAdmin\">\n    <c:out value=\"管理员欢迎您！\"/>\n</c:if>\n\n<%--自闭合标签--%>\n<c:out value=\"${isAdmin}\"/>\n\n</body>\n```\n\nc:choose   c:when\n\n```jsp\n<body><%--定义一个变量score，值为85--%><c:set var=\"score\" value=\"55\"/><c:choose>    <c:when test=\"${score>=90}\">        你的成绩为优秀    </c:when>    <c:when test=\"${score>=80}\">        你的成绩为一般    </c:when>    <c:when test=\"${score>=70}\">        你的成绩为良好    </c:when>    <c:when test=\"${score<=60}\">        你的成绩为不及格    </c:when></c:choose></body>\n```\n\nc:forEach\n\n```jsp\n<%    ArrayList<String> people = new ArrayList<>();    people.add(0,\"张三\");    people.add(1,\"李四\");    people.add(2,\"王五\");    people.add(3,\"赵六\");    people.add(4,\"田六\");    request.setAttribute(\"list\",people);%><%--var , 每一次遍历出来的变量items, 要遍历的对象begin,   哪里开始end,     到哪里step,   步长--%><c:forEach var=\"people\" items=\"${list}\">    <c:out value=\"${people}\"/> <br></c:forEach><hr><c:forEach var=\"people\" items=\"${list}\" begin=\"1\" end=\"3\" step=\"1\" >    <c:out value=\"${people}\"/> <br></c:forEach>\n```\n\n## 9、JavaBean\n\n实体类\n\nJavaBean有特定的写法：\n\n- 必须要有一个无参构造\n- 属性必须私有化\n- 必须有对应的get/set方法；\n\n一般用来和数据库的字段做映射  ORM；\n\nORM ：对象关系映射\n\n- 表--->类\n- 字段-->属性\n- 行记录---->对象\n\n**people表**\n\n| id   | name    | age  | address |\n| ---- | ------- | ---- | ------- |\n| 1    | 秦疆1号 | 3    | 西安    |\n| 2    | 秦疆2号 | 18   | 西安    |\n| 3    | 秦疆3号 | 100  | 西安    |\n\n```java\nclass People{    private int id;    private String name;    private int id;    private String address;}class A{    new People(1,\"秦疆1号\",3，\"西安\");    new People(2,\"秦疆2号\",3，\"西安\");    new People(3,\"秦疆3号\",3，\"西安\");}\n```\n\n\n\n- 过滤器\n- 文件上传\n- 邮件发送\n- JDBC 复习 ： 如何使用JDBC ,  JDBC crud， jdbc 事务\n\n\n\n## 10、MVC三层架构\n\n什么是MVC：  Model     view     Controller  模型、视图、控制器\n\n### 10.1、早些年\n\n![1568423664332](/狂神web/1568423664332.png)\n\n用户直接访问控制层，控制层就可以直接操作数据库；\n\n```java\nservlet--CRUD-->数据库弊端：程序十分臃肿，不利于维护  servlet的代码中：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码架构：没有什么是加一层解决不了的！程序猿调用|JDBC|Mysql Oracle SqlServer ....\n```\n\n### 10.2、MVC三层架构\n\n![1568424227281](/狂神web/1568424227281.png)\n\n\n\nModel\n\n- 业务处理 ：业务逻辑（Service）\n- 数据持久层：CRUD   （Dao）\n\nView\n\n- 展示数据\n- 提供链接发起Servlet请求 （a，form，img…）\n\nController  （Servlet）\n\n- 接收用户的请求 ：（req：请求参数、Session信息….）\n\n- 交给业务层处理对应的代码 \n\n- 控制视图的跳转  \n\n  ```java\n  登录--->接收用户的登录请求--->处理用户的请求（获取用户登录的参数，username，password）---->交给业务层处理登录业务（判断用户名密码是否正确：事务）--->Dao层查询用户名和密码是否正确-->数据库\n  ```\n\n\n\n## 11、Filter （重点）\n\nFilter：过滤器 ，用来过滤网站的数据；\n\n- 处理中文乱码\n- 登录验证….\n\n![1568424858708](/狂神web/1568424858708.png)\n\nFilter开发步骤：\n\n1. 导包\n\n2. 编写过滤器\n\n   1. 导包不要错\n\n      ![1568425162525](/狂神web/1568425162525.png)\n\n      实现Filter接口，重写对应的方法即可\n\n      ```java\n      public class CharacterEncodingFilter implements Filter {    //初始化：web服务器启动，就以及初始化了，随时等待过滤对象出现！    public void init(FilterConfig filterConfig) throws ServletException {        System.out.println(\"CharacterEncodingFilter初始化\");    }    //Chain : 链    /*    1. 过滤中的所有代码，在过滤特定请求的时候都会执行    2. 必须要让过滤器继续同行        chain.doFilter(request,response);     */    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {        request.setCharacterEncoding(\"utf-8\");        response.setCharacterEncoding(\"utf-8\");        response.setContentType(\"text/html;charset=UTF-8\");        System.out.println(\"CharacterEncodingFilter执行前....\");        chain.doFilter(request,response); //让我们的请求继续走，如果不写，程序到这里就被拦截停止！        System.out.println(\"CharacterEncodingFilter执行后....\");    }    //销毁：web服务器关闭的时候，过滤会销毁    public void destroy() {        System.out.println(\"CharacterEncodingFilter销毁\");    }}\n      ```\n\n3. 在web.xml中配置 Filter\n\n   ```xml\n   <filter>    <filter-name>CharacterEncodingFilter</filter-name>    <filter-class>com.kuang.filter.CharacterEncodingFilter</filter-class></filter><filter-mapping>    <filter-name>CharacterEncodingFilter</filter-name>    <!--只要是 /servlet的任何请求，会经过这个过滤器-->    <url-pattern>/servlet/*</url-pattern>    <!--<url-pattern>/*</url-pattern>--></filter-mapping>\n   ```\n\n   \n\n## 12、监听器\n\n实现一个监听器的接口；（有N种）\n\n1. 编写一个监听器\n\n   实现监听器的接口…\n\n   ```java\n   //统计网站在线人数 ： 统计sessionpublic class OnlineCountListener implements HttpSessionListener {    //创建session监听： 看你的一举一动    //一旦创建Session就会触发一次这个事件！    public void sessionCreated(HttpSessionEvent se) {        ServletContext ctx = se.getSession().getServletContext();        System.out.println(se.getSession().getId());        Integer onlineCount = (Integer) ctx.getAttribute(\"OnlineCount\");        if (onlineCount==null){            onlineCount = new Integer(1);        }else {            int count = onlineCount.intValue();            onlineCount = new Integer(count+1);        }        ctx.setAttribute(\"OnlineCount\",onlineCount);    }    //销毁session监听    //一旦销毁Session就会触发一次这个事件！    public void sessionDestroyed(HttpSessionEvent se) {        ServletContext ctx = se.getSession().getServletContext();        Integer onlineCount = (Integer) ctx.getAttribute(\"OnlineCount\");        if (onlineCount==null){            onlineCount = new Integer(0);        }else {            int count = onlineCount.intValue();            onlineCount = new Integer(count-1);        }        ctx.setAttribute(\"OnlineCount\",onlineCount);    }    /*    Session销毁：    1. 手动销毁  getSession().invalidate();    2. 自动销毁     */}\n   ```\n\n2. web.xml中注册监听器\n\n   ```xml\n   <!--注册监听器--><listener>    <listener-class>com.kuang.listener.OnlineCountListener</listener-class></listener>\n   ```\n\n3. 看情况是否使用！\n\n\n\n## 13、过滤器、监听器常见应用\n\n**监听器：GUI编程中经常使用；**\n\n```java\npublic class TestPanel {\n    public static void main(String[] args) {\n        Frame frame = new Frame(\"中秋节快乐\");  //新建一个窗体\n        Panel panel = new Panel(null); //面板\n        frame.setLayout(null); //设置窗体的布局\n\n        frame.setBounds(300,300,500,500);\n        frame.setBackground(new Color(0,0,255)); //设置背景颜色\n\n        panel.setBounds(50,50,300,300);\n        panel.setBackground(new Color(0,255,0)); //设置背景颜色\n\n        frame.add(panel);\n\n        frame.setVisible(true);\n\n        //监听事件，监听关闭事件\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                super.windowClosing(e);\n            }\n        });\n\n\n    }\n}\n```\n\n\n\n用户登录之后才能进入主页！用户注销后就不能进入主页了！\n\n1. 用户登录之后，向Sesison中放入用户的数据\n\n2. 进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！\n\n   ```java\n   HttpServletRequest request = (HttpServletRequest) req;\n   HttpServletResponse response = (HttpServletResponse) resp;\n   \n   if (request.getSession().getAttribute(Constant.USER_SESSION)==null){\n       response.sendRedirect(\"/error.jsp\");\n   }\n   \n   chain.doFilter(request,response);\n   ```\n\n\n\n\n## 14、JDBC\n\n什么是JDBC ： Java连接数据库！\n\n![1568439601825](/狂神web/1568439601825.png)\n\n需要jar包的支持：\n\n- java.sql\n- javax.sql\n- mysql-conneter-java…  连接驱动（必须要导入）\n\n\n\n**实验环境搭建**\n\n```sql\nCREATE TABLE users(    id INT PRIMARY KEY,    `name` VARCHAR(40),    `password` VARCHAR(40),    email VARCHAR(60),    birthday DATE);INSERT INTO users(id,`name`,`password`,email,birthday)VALUES(1,'张三','123456','zs@qq.com','2000-01-01');INSERT INTO users(id,`name`,`password`,email,birthday)VALUES(2,'李四','123456','ls@qq.com','2000-01-01');INSERT INTO users(id,`name`,`password`,email,birthday)VALUES(3,'王五','123456','ww@qq.com','2000-01-01');SELECT\t* FROM users;\n```\n\n\n\n导入数据库依赖\n\n```xml\n<!--mysql的驱动--><dependency>    <groupId>mysql</groupId>    <artifactId>mysql-connector-java</artifactId>    <version>5.1.47</version></dependency>\n```\n\nIDEA中连接数据库：\n\n![1568440926845](/狂神web/1568440926845.png)\n\n\n\n**JDBC 固定步骤：**\n\n1. 加载驱动\n2. 连接数据库,代表数据库\n3. 向数据库发送SQL的对象Statement : CRUD\n4. 编写SQL （根据业务，不同的SQL）\n5. 执行SQL\n6. 关闭连接\n\n```java\npublic class TestJdbc {    public static void main(String[] args) throws ClassNotFoundException, SQLException {        //配置信息        //useUnicode=true&characterEncoding=utf-8 解决中文乱码        String url=\"jdbc:mysql://localhost:3306/jdbc?useUnicode=true&characterEncoding=utf-8\";        String username = \"root\";        String password = \"123456\";        //1.加载驱动        Class.forName(\"com.mysql.jdbc.Driver\");        //2.连接数据库,代表数据库        Connection connection = DriverManager.getConnection(url, username, password);        //3.向数据库发送SQL的对象Statement,PreparedStatement : CRUD        Statement statement = connection.createStatement();        //4.编写SQL        String sql = \"select * from users\";        //5.执行查询SQL，返回一个 ResultSet  ： 结果集        ResultSet rs = statement.executeQuery(sql);        while (rs.next()){            System.out.println(\"id=\"+rs.getObject(\"id\"));            System.out.println(\"name=\"+rs.getObject(\"name\"));            System.out.println(\"password=\"+rs.getObject(\"password\"));            System.out.println(\"email=\"+rs.getObject(\"email\"));            System.out.println(\"birthday=\"+rs.getObject(\"birthday\"));        }        //6.关闭连接，释放资源（一定要做） 先开后关        rs.close();        statement.close();        connection.close();    }}\n```\n\n\n\n**预编译SQL**\n\n```java\npublic class TestJDBC2 {    public static void main(String[] args) throws Exception {        //配置信息        //useUnicode=true&characterEncoding=utf-8 解决中文乱码        String url=\"jdbc:mysql://localhost:3306/jdbc?useUnicode=true&characterEncoding=utf-8\";        String username = \"root\";        String password = \"123456\";        //1.加载驱动        Class.forName(\"com.mysql.jdbc.Driver\");        //2.连接数据库,代表数据库        Connection connection = DriverManager.getConnection(url, username, password);        //3.编写SQL        String sql = \"insert into  users(id, name, password, email, birthday) values (?,?,?,?,?);\";        //4.预编译        PreparedStatement preparedStatement = connection.prepareStatement(sql);        preparedStatement.setInt(1,2);//给第一个占位符？ 的值赋值为1；        preparedStatement.setString(2,\"狂神说Java\");//给第二个占位符？ 的值赋值为狂神说Java；        preparedStatement.setString(3,\"123456\");//给第三个占位符？ 的值赋值为123456；        preparedStatement.setString(4,\"24736743@qq.com\");//给第四个占位符？ 的值赋值为1；        preparedStatement.setDate(5,new Date(new java.util.Date().getTime()));//给第五个占位符？ 的值赋值为new Date(new java.util.Date().getTime())；        //5.执行SQL        int i = preparedStatement.executeUpdate();        if (i>0){            System.out.println(\"插入成功@\");        }        //6.关闭连接，释放资源（一定要做） 先开后关        preparedStatement.close();        connection.close();    }}\n```\n\n\n\n**事务**\n\n要么都成功，要么都失败！\n\nACID原则：保证数据的安全。\n\n```java\n开启事务事务提交  commit()事务回滚  rollback()关闭事务转账：A:1000B:1000    A(900)   --100-->   B(1100) \n```\n\n\n\n**Junit单元测试**\n\n依赖\n\n```xml\n<!--单元测试--><dependency>    <groupId>junit</groupId>    <artifactId>junit</artifactId>    <version>4.12</version></dependency>\n```\n\n简单使用\n\n@Test注解只有在方法上有效，只要加了这个注解的方法，就可以直接运行！\n\n```java\n@Test\npublic void test(){\n    System.out.println(\"Hello\");\n}\n```\n\n![1568442261610](/狂神web/1568442261610.png)\n\n失败的时候是红色：\n\n![1568442289597](/狂神web/1568442289597.png)\n\n\n\n**搭建一个环境**\n\n```sql\nCREATE TABLE account(\n   id INT PRIMARY KEY AUTO_INCREMENT,\n   `name` VARCHAR(40),\n   money FLOAT\n);\n\nINSERT INTO account(`name`,money) VALUES('A',1000);\nINSERT INTO account(`name`,money) VALUES('B',1000);\nINSERT INTO account(`name`,money) VALUES('C',1000);\n```\n\n```java\n    @Test\n    public void test() {\n        //配置信息\n        //useUnicode=true&characterEncoding=utf-8 解决中文乱码\n        String url=\"jdbc:mysql://localhost:3306/jdbc?useUnicode=true&characterEncoding=utf-8\";\n        String username = \"root\";\n        String password = \"123456\";\n\n        Connection connection = null;\n\n        //1.加载驱动\n        try {\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            //2.连接数据库,代表数据库\n             connection = DriverManager.getConnection(url, username, password);\n\n            //3.通知数据库开启事务,false 开启\n            connection.setAutoCommit(false);\n\n            String sql = \"update account set money = money-100 where name = 'A'\";\n            connection.prepareStatement(sql).executeUpdate();\n\n            //制造错误\n            //int i = 1/0;\n\n            String sql2 = \"update account set money = money+100 where name = 'B'\";\n            connection.prepareStatement(sql2).executeUpdate();\n\n            connection.commit();//以上两条SQL都执行成功了，就提交事务！\n            System.out.println(\"success\");\n        } catch (Exception e) {\n            try {\n                //如果出现异常，就通知数据库回滚事务\n                connection.rollback();\n            } catch (SQLException e1) {\n                e1.printStackTrace();\n            }\n            e.printStackTrace();\n        }finally {\n            try {\n                connection.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n```\n","source":"_posts/javaWeb笔记.md","raw":"---\ntitle: javaWeb笔记\ndate: 2021-08-19 16:56:49\ntags: javaweb\ncategories: 笔记\ndescription: b站javaweb视频笔记\n---\n\n## 1、基本概念\n\n### 1.1、前言\n\nweb开发：\n\n- web，网页的意思  ， www.baidu.com\n- 静态web\n  - html，css\n  - 提供给所有人看的数据始终不会发生变化！\n- 动态web\n  - 淘宝，几乎是所有的网站；\n  - 提供给所有人看的数据始终会发生变化，每个人在不同的时间，不同的地点看到的信息各不相同！\n  - 技术栈：Servlet/JSP，ASP，PHP\n\n在Java中，动态web资源开发的技术统称为JavaWeb；\n\n### 1.2、web应用程序\n\nweb应用程序：可以提供浏览器访问的程序；\n\n- a.html、b.html......多个web资源，这些web资源可以被外界访问，对外界提供服务；\n- 你们能访问到的任何一个页面或者资源，都存在于这个世界的某一个角落的计算机上。\n- URL \n- 这个统一的web资源会被放在同一个文件夹下，web应用程序-->Tomcat：服务器\n- 一个web应用由多部分组成 （静态web，动态web）\n  - html，css，js\n  - jsp，servlet\n  - Java程序\n  - jar包\n  - 配置文件 （Properties）\n\nweb应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理；\n\n#### Web应用程序概述\n\n- Web应用程序是一种可以通过Web访问的应用程序，程序的最大好处是用户很容易访问应用程序，用户只需要有浏览器即可，不需要再安装其他软件。\n\n- 一个Web应用程序是由完成特定任务的各种Web组件（web components)构成的并通过Web将服务展示给外界。在实际应用中，Web应用程序是由多个Servlet、JSP页面、HTML文件以及图像文件等组成。所有这些组件相互协调为用户提供一组完整的服务。\n\n#### 应用程序模式\n\n- 应用程序有两种模式C/S、B/S。C/S是客户端/服务器端程序，也就是说这类程序一般独立运行。而B/S就是浏览器端/服务器端应用程序，这类应用程序一般借助IE、Firefox、Google等浏览器来运行。WEB应用程序一般是B/S模式。\n\n  <img src=\"/狂神web/clip_image001.jpg\" alt=\"12\" style=\"zoom:80%;\" />\n\n  <img src=\"/狂神web/clip_image001-1583293770740.jpg\" alt=\"11\" style=\"zoom:67%;\" />\n\n##### 1，C/S架构\n\n- C/S是Client/Server的缩写。\n- Server即服务器，通常采用高性能的PC或工作站，\n- Client即客户端，需要在客户电脑上安装专用的客户端软件。\n- 例如大家比较熟悉的腾讯QQ就是个典型的C/S结构的软件，用户要安装QQ客户端程序同服务器进行通讯。\n\n##### 2，B/S架构\n\n- B/S架构即==浏览器和服务器==架构模式。它是随着Internet技术的兴起，对C/S架构的一种变化或者改进的架构。\n\n- 在这种架构下，用户工作界面是通过==浏览器==来实现，极少部分事务逻辑在前端(Browser)实现，但是主要事务逻辑在服务器端(Server)实现，形成所谓三层结构。\n\n- 例如京东、淘宝、12306等都是B/S架构。\n\n- WEB应用程序一般是B/S模式。\n\n- B/S优点：\n\n  - 耦合度小，利于分工协作，提高开发效率\n\n  - 具有良好的可扩展性和可维护性\n\n  - 升级成本小\n  - 简化了客户端电脑载荷\n  - 减轻了系统维护与升级的成本和工作量\n  - 降低了用户的总体成本\n\n### 1.3、静态web\n\n- `*.htm, *.html`,这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。通络；\n\n![1567822802516](/狂神web/1567822802516.png)\n\n- 静态web存在的缺点\n  - Web页面无法动态更新，所有用户看到都是同一个页面\n    - 轮播图，点击特效：伪动态\n    - JavaScript [实际开发中，它用的最多]\n    - VBScript\n  - 它无法和数据库交互（数据无法持久化，用户无法交互）\n\n\n\n### 1.4、动态web\n\n页面会动态展示： “Web的页面展示的效果因人而异”；\n\n![1567823191289](/狂神web/1567823191289.png)\n\n缺点：\n\n- 加入服务器的动态web资源出现了错误，我们需要重新编写我们的**后台程序**,重新发布；\n  - 停机维护\n\n优点：\n\n- Web页面可以动态更新，所有用户看到都不是同一个页面\n- 它可以与数据库交互 （数据持久化：注册，商品信息，用户信息........）\n\n![1567823350584](/狂神web/1567823350584.png)\n\n#### 静态网页与动态网页\n\n- 静态网页没有数据库的支持，在网站制作和维护方面工作量较大，静态网页的交互性较差，在功能方面有较大的限制。\n\n- 动态网页是指在服务器端运行的程序或者网页，会根据不同客户、不同时间返回不同的网页。\n\n\n\n### 1.5、访问Web资源\n\n#### 什么是URL\n\n- URL是UniformResource Locator的缩写，意思是统一资源定位符，也被称为网页地址，是因特网上标准的资源地址(Address)。\n- 统一资源定位符(URL)适用于完整地描述Internet上网页和其他资源地址的一种标识方法。\n- 简单地说，URL就是Web地址，俗称“网址”。\n\n##### URL的组成\n\n- URL是唯一能够识别Internet上具体的计算机、目录或文件位置的命名约定。\n\n- 以这样一个URL:http://localhost:8080/FirstWeb/index.jsp为例来分析URL的组成。\n\n1. ==HTTP协议==：两台计算机可能因为系统不同、运行程序所用语言不通，要进行通信必须按照一个约定的规则进行，浏览器和服务器之间必须遵循共同的协议HTTP (HyperText Transfer Protocol ==超文本传输协议==)。HTTP是互联网上应用最为广泛的一种网络协议。\n\n2. ==服务器主机名或IP== :在这里localhost就是服务器的地址， 意思是本机上的服务器。当然也可以使用127.0.0.1或实际IP地址来代替。IP是网络之间互连的协议,是Internet Protocol的缩写,中文缩写为“==网协==”。\n\n3. ==端口号==： 端口号是网络程序和外部进行通信的通道，当从外部访问服务器时要通过指定端口号来访问。物理端口是指物理存在的端口；逻辑端口是指逻辑意义上用于区分服务的端口，如TCP/IP协议中的服务端口，端口号的范围从0到65535。\n\n4. ==路径==： 路径（包括请求的资源）由零个或多个 \"/\" 符号隔开的字符串， 一般用来表示主机上的一个目录或文件地址等。 而请求的资源指请求的文件的名称，可以是 一个HTML页面，也可以是 一个Servlet、 图片等服务器提供的资源。以FirstWeb/index.jsp为例，news代表的是Web应用对外发布的根路径名，而index.jsp代表了一个存放到FirstWeb根目录下的一个文件。\n\n- ==URL的组成:==\n  - 协议\n  - 主机（包括端口号）\n  - 路径\n\n## 2、web服务器\n\n- Web服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，可以向浏览器等Web客户端提供文档，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。\n- 下面介绍几种常用的WEB服务器。\n  - ==WebLogic==\n    - BEA WebLogic Server 在使应用服务器成为企业应用架构的基础方面继续处于领先地位。\n    - BEA WebLogic Server 为构建集成化的企业级应用提供了稳固的基础，\n    - 它们以 Internet 的==容量==和==速度==，在连网的企业之间共享信息、提交服务，实现协作自动化。\n  - ==Apache==\n    - Apache仍然是世界上用的最多的Web服务器，市场占有率达60%左右。\n    - 世界上很多著名的网站都是Apache的产物，\n    - 它的成功之处主要在于它的==源代码开放==、有一支开放的开发队伍、支持跨平台的应用（可以运行在几乎所有的Unix、Windows、Linux系统平台上）以及它的==可移植性==等方面。\n  - ==Tomcat==\n    - Tomcat是一个==开放源代码==、运行Servlet和JSP Web应用软件的基于Java的Web应用软件容器。\n    - 它是==Apache==软件基金会一个开源的==核心项目==，由Apache、Sun和其他一些公司及个人共同开发完成。\n    - Tomcat Server是根据Servlet和JSP规范进行执行的，因此我们就可以说Tomcat Server也实行了Apache-Jakarta规范且比绝大多数商业应用软件服务器要好。\n  - ==Jboss==\n    - 是一个基于==J2EE==的==开放源代码==的应用服务器。\n    - JBoss代码遵循LGPL许可，可以在任何商业应用中==免费==使用，而不用支付费用。\n    - JBoss是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3的规范。\n    - 但JBoss核心服务==不包括支持Servlet/JSP的WEB容器==，一般与Tomcat或Jetty绑定使用。\n\n### 2.1、技术讲解\n\n**ASP:**\n\n- 微软：国内最早流行的就是ASP；\n\n- 在HTML中嵌入了VB的脚本，  ASP + COM；\n\n- 在ASP开发中，基本一个页面都有几千行的业务代码，页面极其换乱\n\n- 维护成本高！\n\n- C# \n\n- IIS\n\n  ```html\n  <h1>\n      <h1><h1>\n          <h1>\n              <h1>\n                  <h1>\n          <h1>\n              <%\n              System.out.println(\"hello\")\n              %>\n              <h1>\n                  <h1>\n     <h1><h1>\n  <h1>\n  ```\n\n  \n\n**php：**\n\n- PHP开发速度很快，功能很强大，跨平台，代码很简单 （70% , WP）\n- 无法承载大访问量的情况（局限性）\n\n\n\n**JSP/Servlet : ** \n\nB/S：浏览和服务器\n\nC/S:  客户端和服务器\n\n- sun公司主推的B/S架构\n- 基于Java语言的 (所有的大公司，或者一些开源的组件，都是用Java写的)\n- 可以承载三高问题带来的影响；\n- 语法像ASP ， ASP-->JSP , 加强市场强度；\n\n### 2.2、web服务器\n\n服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息；\n\n**==IIS==**\n\n微软的； ASP...,Windows中自带的\n\n==**Tomcat**==\n\n![1567824446428](/狂神web/1567824446428.png)\n\n面向百度编程；\n\nTomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且**免费**，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。\n\nTomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用[服务器](https://baike.baidu.com/item/服务器)，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个Java初学web的人来说，它是最佳的选择\n\nTomcat 实际上运行JSP 页面和Servlet。Tomcat最新版本为**9.0。**\n\n**工作3-5年之后，可以尝试手写Tomcat服务器；**\n\n下载tomcat：\n\n1. 安装 or  解压\n2. 了解配置文件及目录结构\n3. 这个东西的作用\n\n\n\n## 3、Tomcat\n\n### 3.1、 安装tomcat\n\ntomcat官网：http://tomcat.apache.org/\n\n![1567825600842](/狂神web/1567825600842.png)\n\n![1567825627138](/狂神web/1567825627138.png)\n\n\n\n### 3.2、Tomcat启动和配置\n\n#### Tomcat目录作用描述\n\n| **目录**        | **说明**                                                  |\n| --------------- | --------------------------------------------------------- |\n| ==**bin**==     | 存放各平台下用于启动和停止Tomcat的脚本文件                |\n| ==**conf**==    | 存放Tomcat各种配置文件，其中最重要的是server.xml和web.xml |\n| ==**lib**==     | 存放tomcat服务器所需的jar文件                             |\n| ==**webapps**== | Web应用的发布目录                                         |\n| ==**work**==    | Jsp运行时生成的Servlet文件                                |\n| ==**logs**==    | 存放tomcat的日志文件                                      |\n| ==**temp**==    | Tomcat运行时存放临时文件                                  |\n\n文件夹作用：\n\n![1567825763180](/狂神web/1567825763180.png)\n\n**启动。关闭Tomcat**\n\n![1567825840657](/狂神web/1567825840657.png)\n\n访问测试：http://localhost:8080/\n\n可能遇到的问题：\n\n1. Java环境变量没有配置\n2. 闪退问题：需要配置兼容性\n3. 乱码问题：配置文件中设置\n\n### 3.3、配置\n\n![1567825967256](/狂神web/1567825967256.png)\n\n可以配置启动的端口号\n\n- tomcat的默认端口号为：8080\n- mysql：3306\n- http：80\n- https：443\n\n```xml\n<Connector port=\"8081\" protocol=\"HTTP/1.1\"\n           connectionTimeout=\"20000\"\n           redirectPort=\"8443\" />\n```\n\n可以配置主机的名称\n\n- 默认的主机名为：localhost->127.0.0.1\n- 默认网站应用存放的位置为：webapps\n\n```xml\n  <Host name=\"www.qinjiang.com\"  appBase=\"webapps\"\n        unpackWARs=\"true\" autoDeploy=\"true\">\n```\n\n#### 高难度面试题\n\n请你谈谈网站是如何进行访问的！\n\n1. 输入一个域名；回车\n\n2. 检查本机的 C:\\Windows\\System32\\drivers\\etc\\hosts配置文件下有没有这个域名映射；\n\n   1. 有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问\n\n      ```java\n      127.0.0.1       www.qinjiang.com\n      ```\n\n   2. 没有：去DNS服务器找，找到的话就返回，找不到就返回找不到；\n\n   <img src=\"/狂神web/1567827057913.png\" alt=\"1567827057913\" style=\"zoom: 67%;\" />\n\n3. 可以配置一下环境变量（可选性）\n\n### 3.4、发布一个web网站\n\n不会就先模仿\n\n- 将自己写的网站，放到服务器(Tomcat)中指定的web应用的文件夹（webapps）下，就可以访问了\n\n网站应该有的结构\n\n```java\n--webapps ：Tomcat服务器的web目录\n\t-ROOT\n\t-kuangstudy ：网站的目录名\n\t\t- WEB-INF\n\t\t\t-classes : java程序\n\t\t\t-lib：web应用所依赖的jar包\n\t\t\t-web.xml ：网站配置文件\n\t\t- index.html 默认的首页\n\t\t- static \n            -css\n            \t-style.css\n            -js\n            -img\n         -.....\n```\n\n\n\nHTTP协议 ： 面试\n\nMaven：构建工具\n\n- Maven安装包\n\nServlet 入门\n\n- HelloWorld！\n- Servlet配置\n- 原理\n\n\n\n## 4、Http\n\n### 4.1、什么是HTTP\n\nHTTP（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。\n\n- 文本：html，字符串，~ ….\n- 超文本：图片，音乐，视频，定位，地图…….\n- 80\n\nHttps：安全的\n\n- 443\n\n### 4.2、两个时代\n\n- http1.0\n\n  - HTTP/1.0：客户端可以与web服务器连接后，只能获得一个web资源，断开连接\n  - HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。\n\n- http2.0\n\n  - HTTP/1.1：客户端可以与web服务器连接后，可以获得多个web资源。\n\n- HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。\n\n  \n\n### 4.3、Http请求\n\n#####  HTTP请求方式\n\n- HTTP请求是指从客户端到服务器端的请求消息。\n- 包括：消息首行中，对资源的请求方法、资源的标识符及使用的协议。\n- 根据HTTP标准，HTTP请求可以使用多种请求方法。 \n\n- ==客户端---发请求（Request）---服务器==\n\n百度：\n\n```java\nRequest URL:https://www.baidu.com/   请求地址\nRequest Method:GET    get方法/post方法\nStatus Code:200 OK    状态码：200\nRemote（远程） Address:14.215.177.39:443\n```\n\n```java\nAccept:text/html  \nAccept-Encoding:gzip, deflate, br\nAccept-Language:zh-CN,zh;q=0.9    语言\nCache-Control:max-age=0\nConnection:keep-alive\n```\n\n#### 1、请求行\n\n- 请求行中的请求方式：GET\n\n- 请求方式：**Get，Post**，HEAD,DELETE,PUT,TRACT…\n\n  - get：\n\n    - 请求能够携带的参数比较少，大小==有限制==，会在浏览器的URL地址栏显示数据内容，==不安全，但高效==\n    - GET是最简单的HTTP方法，\n    - 其主要任务就是要求服务器获得一个资源并把资源发回来，\n    - 请求参数在请求行中用？号和URL区别开，所以所带的参数有限，显示在浏览器的地址栏中。\n    - GET请求网址http://localhost:8080/FirstWeb/test?userName=Jack&age=20\n    - GET 请求可被缓存\n    - GET 请求有长度限制\n\n  - post：\n\n    - 请求能够携带的参数没有限制，大小==没有限制==，不会在浏览器的URL地址栏显示数据内容，==安全，但不高效。==\n    - POST是一种更强大的请求，在请求的同时向服务器发送一些==表单==数据还有==二进制==数据，\n    - 请求参数放在请求体中，可以传输比较大的请求参数，例如图片、视频等，\n    - 浏览器的地址栏中不显示参数信息。\n    - POST请求网址 [http://localhost:8080/FirstWeb/test ](http://localhost:8080/FirstWeb/test)\n    - POST 请求不会被缓存\n    - POST 请求对数据长度没有要求\n\n    \n\n#### 2、消息头\n\n```java\nAccept：告诉浏览器，它所支持的数据类型\nAccept-Encoding：支持哪种编码格式  GBK   UTF-8   GB2312  ISO8859-1\nAccept-Language：告诉浏览器，它的语言环境\nCache-Control：缓存控制\nConnection：告诉浏览器，请求完成是断开还是保持连接\nHOST：主机..../.\n```\n\n### 4.4、Http响应\n\n- 服务器---响应-----客户端\n\n百度：\n\n```java\nCache-Control:private    缓存控制Connection:Keep-Alive    连接Content-Encoding:gzip    编码Content-Type:text/html   类型\n```\n\n#### 1.响应体\n\n```java\nAccept：告诉浏览器，它所支持的数据类型Accept-Encoding：支持哪种编码格式  GBK   UTF-8   GB2312  ISO8859-1Accept-Language：告诉浏览器，它的语言环境Cache-Control：缓存控制Connection：告诉浏览器，请求完成是断开还是保持连接HOST：主机..../.Refresh：告诉客户端，多久刷新一次；Location：让网页重新定位；\n```\n\n#### 2.响应状态码\n\n200：请求响应成功  200\n\n3xx：请求重定向 \n\n- 重定向：你重新到我给你新位置去；\n\n4xx：找不到资源   404\n\n- 资源不存在；\n\n5xx：服务器代码错误   500       502:网关错误\n\n#### 常见面试题\n\n当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？\n\n\n\n## 5、Maven\n\n**我为什么要学习这个技术？**\n\n1. 在Javaweb开发中，需要使用大量的jar包，我们手动去导入；\n\n2. 如何能够让一个东西自动帮我导入和配置这个jar包。\n\n   由此，Maven诞生了！\n\n\n\n### 5.1 Maven项目架构管理工具\n\n我们目前用来就是方便导入jar包的！\n\nMaven的核心思想：**约定大于配置**\n\n- 有约束，不要去违反。\n\nMaven会规定好你该如何去编写我们的Java代码，必须要按照这个规范来；\n\n### 5.2 下载安装Maven\n\n官网;https://maven.apache.org/\n\n![1567842350606](/狂神web/1567842350606.png)\n\n下载完成后，解压即可；\n\n小狂神友情建议：电脑上的所有环境都放在一个文件夹下，方便管理；\n\n\n\n### 5.3 配置环境变量\n\n在我们的系统环境变量中\n\n配置如下配置：\n\n- M2_HOME     maven目录下的bin目录\n- MAVEN_HOME      maven的目录\n- 在系统的path中配置  %MAVEN_HOME%\\bin\n\n![1567842882993](/狂神web/1567842882993.png)\n\n测试Maven是否安装成功，保证必须配置完毕！\n\n### 5.4 阿里云镜像\n\n![1567844609399](/狂神web/1567844609399.png)\n\n- 镜像：mirrors\n  - 作用：加速我们的下载\n- 国内建议使用阿里云的镜像\n\n```xml\n<mirror>    <id>nexus-aliyun</id>      <mirrorOf>*,!jeecg,!jeecg-snapshots</mirrorOf>      <name>Nexus aliyun</name>      <url>http://maven.aliyun.com/nexus/content/groups/public</url> </mirror>\n```\n\n### 5.5 本地仓库\n\n在本地的仓库，远程仓库；\n\n**建立一个本地仓库：**localRepository\n\n```xml\n<localRepository>D:\\Environment\\apache-maven-3.6.2\\maven-repo</localRepository>\n```\n\n### 5.6、在IDEA中使用Maven\n\n1. 启动IDEA\n\n2. 创建一个MavenWeb项目\n\n   ![1567844785602](/狂神web/1567844785602.png)\n\n   ![1567844841172](/狂神web/1567844841172.png)\n\n   ![1567844917185](/狂神web/1567844917185.png)\n\n   ![1567844956177](/狂神web/1567844956177.png)\n\n   ![1567845029864](/狂神web/1567845029864.png)\n\n3. 等待项目初始化完毕\n\n   ![1567845105970](/狂神web/1567845105970.png)\n\n   ![1567845137978](/狂神web/1567845137978.png)\n\n4. 观察maven仓库中多了什么东西？\n\n5. IDEA中的Maven设置\n\n   注意：IDEA项目创建成功后，看一眼Maven的配置\n\n   ![1567845341956](/狂神web/1567845341956.png)\n\n   ![1567845413672](/狂神web/1567845413672.png)\n\n6. 到这里，Maven在IDEA中的配置和使用就OK了!\n\n### 5.7、创建一个普通的Maven项目\n\n![1567845557744](/狂神web/1567845557744.png)\n\n![1567845717377](/狂神web/1567845717377.png)\n\n这个只有在Web应用下才会有！\n\n![1567845782034](/狂神web/1567845782034.png)\n\n### 5.8 标记文件夹功能\n\n![1567845910728](/狂神web/1567845910728.png)\n\n![1567845957139](/狂神web/1567845957139.png)\n\n![1567846034906](/狂神web/1567846034906.png)\n\n![1567846073511](/狂神web/1567846073511.png)\n\n### 5.9 在 IDEA中配置Tomcat\n\n![1567846140348](/狂神web/1567846140348.png)\n\n![1567846179573](/狂神web/1567846179573.png)\n\n![1567846234175](/狂神web/1567846234175.png)\n\n![1567846369751](/狂神web/1567846369751.png)\n\n解决警告问题\n\n必须要的配置：**为什么会有这个问题：我们访问一个网站，需要指定一个文件夹名字；**\n\n![1567846421963](/狂神web/1567846421963.png)\n\n![1567846546465](/狂神web/1567846546465.png)\n\n![1567846559111](/狂神web/1567846559111.png)\n\n![1567846640372](/狂神web/1567846640372.png)\n\n### 5.10 pom文件\n\npom.xml 是Maven的核心配置文件\n\n![1567846784849](/狂神web/1567846784849.png)\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--Maven版本和头文件-->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <!--这里就是我们刚才配置的GAV-->\n  <groupId>com.kuang</groupId>\n  <artifactId>javaweb-01-maven</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <!--Package：项目的打包方式\n  jar：java应用\n  war：JavaWeb应用\n  -->\n  <packaging>war</packaging>\n\n\n  <!--配置-->\n  <properties>\n    <!--项目的默认构建编码-->\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <!--编码版本-->\n    <maven.compiler.source>1.8</maven.compiler.source>\n    <maven.compiler.target>1.8</maven.compiler.target>\n  </properties>\n\n  <!--项目依赖-->\n  <dependencies>\n    <!--具体依赖的jar包配置文件-->\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.11</version>\n    </dependency>\n  </dependencies>\n\n  <!--项目构建用的东西-->\n  <build>\n    <finalName>javaweb-01-maven</finalName>\n    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->\n      <plugins>\n        <plugin>\n          <artifactId>maven-clean-plugin</artifactId>\n          <version>3.1.0</version>\n        </plugin>\n        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->\n        <plugin>\n          <artifactId>maven-resources-plugin</artifactId>\n          <version>3.0.2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>3.8.0</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-surefire-plugin</artifactId>\n          <version>2.22.1</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-war-plugin</artifactId>\n          <version>3.2.2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-install-plugin</artifactId>\n          <version>2.5.2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-deploy-plugin</artifactId>\n          <version>2.8.2</version>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n  </build>\n</project>\n\n```\n\n![1567847410771](/狂神web/1567847410771.png)\n\n\n\nmaven由于他的约定大于配置，我们之后可以能遇到我们写的配置文件，无法被导出或者生效的问题，解决方案：\n\n```xml\n<!--在build中配置resources，来防止我们资源导出失败的问题--><build>    <resources>        <resource>            <directory>src/main/resources</directory>            <includes>                <include>**/*.properties</include>                <include>**/*.xml</include>            </includes>            <filtering>true</filtering>        </resource>        <resource>            <directory>src/main/java</directory>            <includes>                <include>**/*.properties</include>                <include>**/*.xml</include>            </includes>            <filtering>true</filtering>        </resource>    </resources></build>\n```\n\n\n\n### 5.12 IDEA操作\n\n![1567847630808](/狂神web/1567847630808.png)\n\n\n\n![1567847662429](/狂神web/1567847662429.png)\n\n\n\n### 5.13 解决遇到的问题\n\n1. Maven 3.6.2\n\n   解决方法：降级为3.6.1\n\n   ![1567904721301](/狂神web/1567904721301.png)\n\n2. Tomcat闪退\n\n   \n\n3. IDEA中每次都要重复配置Maven\n   在IDEA中的全局默认配置中去配置\n\n   ![1567905247201](/狂神web/1567905247201.png)\n\n   ![1567905291002](/狂神web/1567905291002.png)\n\n4. Maven项目中Tomcat无法配置\n\n5. maven默认web项目中的web.xml版本问题\n\n   ![1567905537026](/狂神web/1567905537026.png)\n\n6. 替换为webapp4.0版本和tomcat一致\n\n   ```xml\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?><web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"         version=\"4.0\"         metadata-complete=\"true\"></web-app>\n   ```\n\n   \n\n7. Maven仓库的使用\n\n   地址：https://mvnrepository.com/\n\n   ![1567905870750](/狂神web/1567905870750.png)\n\n   ![1567905982979](/狂神web/1567905982979.png)\n\n   ![1567906017448](/狂神web/1567906017448.png)\n\n   ![1567906039469](/狂神web/1567906039469.png)\n\n\n\n## 6、Servlet\n\n### 6.1、Servlet简介\n\n- Servlet就是sun公司开发动态web的一门技术\n- Sun在这些API中提供一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤：\n  - 编写一个类，实现Servlet接口\n  - 把开发好的Java类部署到web服务器中。\n\n- **把实现了Servlet接口的Java程序叫做，Servlet**\n- \n\n### 6.2、HelloServlet\n\n#### 1 Servlet入门\n\n- Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器，用Java编写的服务器端程序，具有独立于平台和协议的特性，主要功能在于交互式地浏览和生成数据，生成动态Web内容。\n\n- 狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。Servlet运行于支持Java的应用服务器中。\n\n- Servlet 的主要功能在于交互式地浏览和修改数据，生成动态 Web 内容。\n\n- 这个==过程==为：\n\n  1、客户端发送请求至服务器端；\n\n  2、服务器将请求信息发送至 Servlet；\n\n  3、Servlet 生成响应内容并将其传给服务器。响应内容动态生成，通常取决于客户端的请求；\n\n  4、服务器将响应返回给客户端。\n\n- Serlvet接口Sun公司有两个默认的实现类：HttpServlet，GenericServlet\n\n- 配置web.xml\n\n```xml\n<!-- 注册一个Servlet --><servlet>   <!-- Servlet标识名 -->   <servlet-name>HelloServlet</servlet-name>   <!-- Servlet类的全限定名 -->   <servlet-class>com.aaa.servlet.HelloServlet</servlet-class></servlet><!-- 配置Servlet映射信息 --><servlet-mapping>   <!-- Servlet标识名和上面一致 -->   <servlet-name>HelloServlet</servlet-name>   <!-- 访问路径 -->   <url-pattern>/hello</url-pattern></servlet-mapping>\n```\n\n\n\n1. 构建一个普通的Maven项目，删掉里面的src目录，以后我们的学习就在这个项目里面建立Moudel；这个空的工程就是Maven主工程；\n\n2. 关于Maven父子工程的理解：\n\n   父项目中会有\n\n   ```xml\n       <modules>        <module>servlet-01</module>    </modules>\n   ```\n\n   子项目会有\n\n   ```xml\n       <parent>        <artifactId>javaweb-02-servlet</artifactId>        <groupId>com.kuang</groupId>        <version>1.0-SNAPSHOT</version>    </parent>\n   ```\n\n   父项目中的java子项目可以直接使用\n\n   ```java\n   son extends father\n   ```\n\n3. Maven环境优化\n\n   1. 修改web.xml为最新的\n   2. 将maven的结构搭建完整\n\n4. 编写一个Servlet程序\n\n   ![1567911804700](/狂神web/1567911804700.png)\n\n   1. 编写一个普通类\n\n   2. 实现Servlet接口，这里我们直接继承HttpServlet\n\n      ```java\n      public class HelloServlet extends HttpServlet {        //由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样；    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        //ServletOutputStream outputStream = resp.getOutputStream();        PrintWriter writer = resp.getWriter(); //响应流        writer.print(\"Hello,Serlvet\");    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        doGet(req, resp);    }}\n      ```\n\n5. 编写Servlet的映射\n\n   为什么需要映射：我们写的是JAVA程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要再web服务中注册我们写的Servlet，还需给他一个浏览器能够访问的路径；\n\n   ```xml\n       <!--注册Servlet-->\n       <servlet>\n           <servlet-name>hello</servlet-name>\n           <servlet-class>com.kuang.servlet.HelloServlet</servlet-class>\n       </servlet>\n       <!--Servlet的请求路径-->\n       <servlet-mapping>\n           <servlet-name>hello</servlet-name>\n           <url-pattern>/hello</url-pattern>\n       </servlet-mapping>\n   \n   ```\n\n6. 配置Tomcat\n\n   注意：配置项目发布的路径就可以了\n\n7. 启动测试，OK！\n\n\n\n#### 2 ServletAPI层次结构\n\n**核心技能部分**\n\n     ![222](/狂神web//clip_image001.png)\n    \n       ![Serv et  Servi  Serv IetCmf i g  -se rServIe 'Cca rex : O  HttpServ1et  service Cin EttpServletReque;t. ia  et (/狂神web//clip_image001-1583302830910.jpg) ](file:///C:/Users/YANKUN~1/AppData/Local/Temp/msohtmlclip1/01/clip_image001.jpg)  \n\n**Servlet原理**\n\n##### Servlet接口\n\n- Servlet接口定义了所有 Servlet需要实现的方法， 包括==init()，service()，destroy ()==方法， 以及getServletConfig()方法（返回ServletConfig对象，通过该对象可以得到Servlet的配置信息）。\n\n##### ServletConfig接口\n\n- 在Servlet初始化时，Servlet容器会使用ServletConfig对象向该Servlet传递信息。\n\n- **ServletConfig的常用方法**\n\n| **方法**                              | **功能说明**                          |\n| ------------------------------------- | ------------------------------------- |\n| String  getInitParameter(String name) | 获取web.xml中名称为name的初始化参数值 |\n| ServletContext  getServletContext()   | 返回Servlet上下文对象                 |\n\n##### GenericServlet类\n\n- 抽象类 GenericServlet实现了Servlet接口和ServletConfig接口，简单实现除 service()方法外的其它方法，它定义了通用的，不依赖于协议的Servlet规范。 GenericServlet类的常用方法如表2.2.3所示。\n\n- **GenericServlet类的常用方法**\n\n| **方法**                              | **功能说明**                 |\n| ------------------------------------- | ---------------------------- |\n| void  init(ServletConfig config)      | 初始化方法                   |\n| String  getInitParameter(String name) | 返回名称为name的初始化参数值 |\n| ServletContext  getServletCotext()    | 返回ServletContext对象       |\n\n##### HttpServlet类\n\n- 抽象类HttpServlet继承自GenericServlet类，专门用来处理HTTP请求，并提供了与HTTP相关的实现方法。根据HTTP协议的特点， HttpServlet分别提供了处理请求的相应方法，如表2.2.4所示。\n\n- **HttpServlet类的常用方法**\n\n| **方法**                                                     | **功能说明**                                                 |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| void ==service==  (ServletRequest reg, ServletResponse res)  | 接收客户端请求，然后把请求分发给相应的doXX方法，如果是GET请求就分发给doGet()方法，如果是POST请求就分发给doPost()方法。 |\n| void  ==doGet==(HttpServletRequest reg, HttpServletResponse res) | 处理GET请求                                                  |\n| void  ==doPost==(HttpServletRequest reg, HttpServletResponse res) | 处理POST请求                                                 |\n\n- 如果要自己要编写Servlet程序， 都是继承HttpServlet类， 然后重写其中的某些方法， 使用原则如下：\n\n  (1) 重写doGet方法来处理GET请求。\n\n  (2) 重写doPost方法来处理POST请求。\n\n  (3) 如果需要在Servlet实例化中进行初始化工作，可以重写init()方法。\n\n  (4) 如果需要在 Servlet被释放时进行资源清理的工作，可以重写destroy()方法。\n\n- **提示：**\n\n  - HTTP 请求主要就 get 和 post两种， 为了让 servlet两种请求都能处理，一般doGet ()和doPost()方法都重写，而处理代码只写在一个方法中，另外一个方法调用即可。\n\n##### HttpServletRequest接口\n\n- HttpServletRequest接口继承自ServletRequest接口，它代表客户的请求。\n- 容器在调用Servlet的doGet()和doPost()方法时，会创建一个HttpServletRequest接口的实例，作为参数传给doGet()或doPost()方法。\n\n- **HttpServleRequest 接口的常用方法**\n\n| **方法**                                         | **功能说明**                                                 |\n| ------------------------------------------------ | ------------------------------------------------------------ |\n| String  ==getParameter==(String name)            | 根据页面表单元素名称获取页面提交数据                         |\n| string[]  ==getPararneterValues== (String name)  | 获取页面有重名表单元素（比如复选框）的值                     |\n| void  ==setCharacterEncoding== (String name)     | 设置请求的编码，在调用getParameter()方法  前进行设置，此方法可以解决提供中文数据乱码问题。 |\n| void  ==setAttribute==(String name,Object value) | 设置请求的参数                                               |\n| ==getRequestDispatcher==(String  path)           | 返回一个RequestDispatcher对象，该对象的  forward方法可以把请求转发到指定资源 |\n\n##### HttpServletResponse接口\n\n- HttpServletResponse接口继承自ServletResponse接口，它代表向客户端发送的响应。\n- 容器在调用Servlet的doGet()和doPost()方法时，同样会创建一个 HttpServletResponse接口的实例，作为参数传给doGet()或doPost()方法。\n- Servlet利用HttpServletRequest对象获取客户端的请求数据，经过处理后由 HttpServletResponse对象发送响应数据。\n\n- **HttpServleRequest 接口的常用方法**\n\n| **方法**                                   | **功能说明**       |\n| ------------------------------------------ | ------------------ |\n| setContentType(\"text/html;charset=utf-8\"); | 设置响应的内容类型 |\n| PrintWriter  response.getWriter()          | 获得响应的输出流   |\n| response.sendRedirect(redirect)            | 重定向到指定的网址 |\n\n#####  转发与重定向\n\n**1 转发**\n\n- 转发属于**服务器跳转**。当使用转发时，JSP容器将使用一个内部的方法来调用目标页面，新的页面继续处理同一个请求，而浏览器将不会知道这个过程。\n\n- 整个过程都是在一个Web容器内完成，因而可以共享request范围内的数据。\n\n- 而对应到客户端，不管服务器内部如何处理，作为浏览器都只是提交了一个请求，因而客户端的URL地址不会发生改变。\n\n- 转发的作用：在多个页面交互过程中实现请求数据的共享。\n\n- 实现转发分为两个步骤：\n\n  1、 需要先获取RequestDispatcher实例\n\n  dispatcher=request.getRequestDispatcher(\"servlet2\");\n\n  2、 调用forward方法\n\n  dispatcher.forward(request, response);\n\n \n\n**2 重定向**\n\n- 重定向是**客户端跳转**。\n\n- 重定向方式的含义是第一个页面通知浏览器发送一个新的页面请求。\n\n- 因为，当你使用重定向时，浏览器中所显示的URL会变成新页面的URL。\n\n- 同时，由于重定向方式产生了一个新的请求，所以经过一次重定向后，request内的对象将无法使用。\n\n- 重定向需要使用HttpServletResponse对象的==sendRedirect==()方法实现\n\n  \n\n**3 转发与重定向的区别**\n\n- 转发是继续传递、处理==同一个请求==，在==服务器端==进行；\n  - 重定向在==客户端==运行，会产生==新请求==。\n\n- 转发时浏览器地址栏中显示的是==初次发出请求的地址==；\n  - 重定向时浏览器地址栏中==不再是初次==请求的地址，而是==最后响应==的那个地址。\n\n- 转发时最终的servlet中，request对象和中转的那个request对象是==同一个==；\n  - 重定向最终的servlet中，request对象和中转的那个request对象==不是同一个==。\n\n- 转发只能转发给==当前web应用==的资源； \n  - 重定可以重定向到==任何==资源。\n\n\n\n##### Servlet应用\n\n**使用Servlet处理客户端请求** \n\n前面学习了Servlet的主要作用就是接受客户端请求并返回响应，接下来就通过一个用户登陆功能示例， 学习使用Servlet处理客户端请求,\n\n**获得Servlet初始化参数**\n\n通过Servlet的doGet()和doPost()，可以处理客户端请求并获得表单提交的数据。当然我们也可以对Servlet进行初始化设置，在Servlet加载时就对参数进行初始化。设置初 始化参数首先要在web.xml中的<servlet>元素中使用<init-param>元素进行设置，\n\n**Servlet访问数据库**\n\n进一步完善登录代码，需要连接数据库进行用户名和密码的校验，我们需要建立BaseDao(之前所学)、实体类、Dao接口和Dao实现类。\n\n##### ==Servlet的生命周期==\n\nServlet部署在容器中，其生命周期由容器来管理，可以概括为以下5个阶段：\n\n1. 加载\n2. 实例化\n3. 初始化\n4. 服务\n5. 销毁\n\n### 6.3、Servlet原理\n\nServlet是由Web服务器调用，web服务器在收到浏览器请求之后，会：\n\n![1567913793252](/狂神web/1567913793252.png)\n\n### 6.4、Mapping问题\n\n1. 一个Servlet可以指定一个映射路径\n\n   ```xml\n       <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello</url-pattern>    </servlet-mapping>\n   ```\n\n2. 一个Servlet可以指定多个映射路径\n\n   ```xml\n       <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello</url-pattern>    </servlet-mapping>    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello2</url-pattern>    </servlet-mapping>    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello3</url-pattern>    </servlet-mapping>    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello4</url-pattern>    </servlet-mapping>    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello5</url-pattern>    </servlet-mapping>\n   ```\n\n3. 一个Servlet可以指定通用映射路径\n\n   ```xml\n       <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello/*</url-pattern>    </servlet-mapping>\n   ```\n\n4. 默认请求路径\n\n   ```xml\n       <!--默认请求路径-->    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/*</url-pattern>    </servlet-mapping>\n   ```\n\n5. 指定一些后缀或者前缀等等….\n\n   ```xml\n   <!--可以自定义后缀实现请求映射    注意点，*前面不能加项目映射的路径    hello/sajdlkajda.qinjiang    --><servlet-mapping>    <servlet-name>hello</servlet-name>    <url-pattern>*.qinjiang</url-pattern></servlet-mapping>\n   ```\n\n6. 优先级问题\n   指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；\n\n   ```xml\n   <!--404--><servlet>    <servlet-name>error</servlet-name>    <servlet-class>com.kuang.servlet.ErrorServlet</servlet-class></servlet><servlet-mapping>    <servlet-name>error</servlet-name>    <url-pattern>/*</url-pattern></servlet-mapping>\n   ```\n\n   \n\n### 6.5、ServletContext\n\nweb容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用；\n\n#### 1、共享数据\n\n我在这个Servlet中保存的数据，可以在另外一个servlet中拿到；\n\n```java\npublic class HelloServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {                //this.getInitParameter()   初始化参数        //this.getServletConfig()   Servlet配置        //this.getServletContext()  Servlet上下文        ServletContext context = this.getServletContext();        String username = \"秦疆\"; //数据        context.setAttribute(\"username\",username); //将一个数据保存在了ServletContext中，名字为：username 。值 username    }}\n```\n\n```java\npublic class GetServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        ServletContext context = this.getServletContext();        String username = (String) context.getAttribute(\"username\");        resp.setContentType(\"text/html\");        resp.setCharacterEncoding(\"utf-8\");        resp.getWriter().print(\"名字\"+username);    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        doGet(req, resp);    }}\n```\n\n```XML\n    <servlet>        <servlet-name>hello</servlet-name>        <servlet-class>com.kuang.servlet.HelloServlet</servlet-class>    </servlet>    <servlet-mapping>        <servlet-name>hello</servlet-name>        <url-pattern>/hello</url-pattern>    </servlet-mapping>    <servlet>        <servlet-name>getc</servlet-name>        <servlet-class>com.kuang.servlet.GetServlet</servlet-class>    </servlet>    <servlet-mapping>        <servlet-name>getc</servlet-name>        <url-pattern>/getc</url-pattern>    </servlet-mapping>\n```\n\n测试访问结果；\n\n\n\n#### 2、获取初始化参数\n\n```xml\n    <!--配置一些web应用初始化参数-->    <context-param>        <param-name>url</param-name>        <param-value>jdbc:mysql://localhost:3306/mybatis</param-value>    </context-param>\n```\n\n```java\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {    ServletContext context = this.getServletContext();    String url = context.getInitParameter(\"url\");    resp.getWriter().print(url);}\n```\n\n#### 3、请求转发\n\n```java\n@Overrideprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {    ServletContext context = this.getServletContext();    System.out.println(\"进入了ServletDemo04\");    //RequestDispatcher requestDispatcher = context.getRequestDispatcher(\"/gp\"); //转发的请求路径    //requestDispatcher.forward(req,resp); //调用forward实现请求转发；    context.getRequestDispatcher(\"/gp\").forward(req,resp);}\n```\n\n<img src=\"/狂神web/1567924457532.png\" alt=\"1567924457532\" style=\"zoom: 80%;\" />\n\n#### 4、读取资源文件\n\nProperties\n\n- 在java目录下新建properties\n- 在resources目录下新建properties\n\n发现：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath:\n\n思路：需要一个文件流；\n\n```properties\nusername=root12312password=zxczxczxc\n```\n\n```java\npublic class ServletDemo05 extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        InputStream is = this.getServletContext().getResourceAsStream(\"/WEB-INF/classes/com/kuang/servlet/aa.properties\");        Properties prop = new Properties();        prop.load(is);        String user = prop.getProperty(\"username\");        String pwd = prop.getProperty(\"password\");        resp.getWriter().print(user+\":\"+pwd);    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        doGet(req, resp);    }}\n```\n\n访问测试即可ok；\n\n### 6.6、HttpServletResponse\n\nweb服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；\n\n- 如果要获取客户端请求过来的参数：找HttpServletRequest\n- 如果要给客户端响应一些信息：找HttpServletResponse\n\n#### 1、简单分类\n\n负责向浏览器发送数据的方法\n\n```java\nServletOutputStream getOutputStream() throws IOException;PrintWriter getWriter() throws IOException;\n```\n\n负责向浏览器发送响应头的方法\n\n```java\n    void setCharacterEncoding(String var1);    void setContentLength(int var1);    void setContentLengthLong(long var1);    void setContentType(String var1);    void setDateHeader(String var1, long var2);    void addDateHeader(String var1, long var2);    void setHeader(String var1, String var2);    void addHeader(String var1, String var2);    void setIntHeader(String var1, int var2);    void addIntHeader(String var1, int var2);\n```\n\n响应的状态码\n\n```java\n    int SC_CONTINUE = 100;\n    int SC_SWITCHING_PROTOCOLS = 101;\n    int SC_OK = 200;\n    int SC_CREATED = 201;\n    int SC_ACCEPTED = 202;\n    int SC_NON_AUTHORITATIVE_INFORMATION = 203;\n    int SC_NO_CONTENT = 204;\n    int SC_RESET_CONTENT = 205;\n    int SC_PARTIAL_CONTENT = 206;\n    int SC_MULTIPLE_CHOICES = 300;\n    int SC_MOVED_PERMANENTLY = 301;\n    int SC_MOVED_TEMPORARILY = 302;\n    int SC_FOUND = 302;\n    int SC_SEE_OTHER = 303;\n    int SC_NOT_MODIFIED = 304;\n    int SC_USE_PROXY = 305;\n    int SC_TEMPORARY_REDIRECT = 307;\n    int SC_BAD_REQUEST = 400;\n    int SC_UNAUTHORIZED = 401;\n    int SC_PAYMENT_REQUIRED = 402;\n    int SC_FORBIDDEN = 403;\n    int SC_NOT_FOUND = 404;\n    int SC_METHOD_NOT_ALLOWED = 405;\n    int SC_NOT_ACCEPTABLE = 406;\n    int SC_PROXY_AUTHENTICATION_REQUIRED = 407;\n    int SC_REQUEST_TIMEOUT = 408;\n    int SC_CONFLICT = 409;\n    int SC_GONE = 410;\n    int SC_LENGTH_REQUIRED = 411;\n    int SC_PRECONDITION_FAILED = 412;\n    int SC_REQUEST_ENTITY_TOO_LARGE = 413;\n    int SC_REQUEST_URI_TOO_LONG = 414;\n    int SC_UNSUPPORTED_MEDIA_TYPE = 415;\n    int SC_REQUESTED_RANGE_NOT_SATISFIABLE = 416;\n    int SC_EXPECTATION_FAILED = 417;\n    int SC_INTERNAL_SERVER_ERROR = 500;\n    int SC_NOT_IMPLEMENTED = 501;\n    int SC_BAD_GATEWAY = 502;\n    int SC_SERVICE_UNAVAILABLE = 503;\n    int SC_GATEWAY_TIMEOUT = 504;\n    int SC_HTTP_VERSION_NOT_SUPPORTED = 505;\n```\n\n#### 2、下载文件\n\n1. 向浏览器输出消息 （一直在讲，就不说了）\n2. 下载文件\n   1. 要获取下载文件的路径\n   2. 下载的文件名是啥？\n   3. 设置想办法让浏览器能够支持下载我们需要的东西\n   4. 获取下载文件的输入流\n   5. 创建缓冲区\n   6. 获取OutputStream对象\n   7. 将FileOutputStream流写入到buffer缓冲区\n   8. 使用OutputStream将缓冲区中的数据输出到客户端！\n\n```java\n@Override\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    // 1. 要获取下载文件的路径\n    String realPath = \"F:\\\\班级管理\\\\西开【19525】\\\\2、代码\\\\JavaWeb\\\\javaweb-02-servlet\\\\response\\\\target\\\\classes\\\\秦疆.png\";\n    System.out.println(\"下载文件的路径：\"+realPath);\n    // 2. 下载的文件名是啥？\n    String fileName = realPath.substring(realPath.lastIndexOf(\"\\\\\") + 1);\n    // 3. 设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件名URLEncoder.encode编码，否则有可能乱码\n    resp.setHeader(\"Content-Disposition\",\"attachment;filename=\"+URLEncoder.encode(fileName,\"UTF-8\"));\n    // 4. 获取下载文件的输入流\n    FileInputStream in = new FileInputStream(realPath);\n    // 5. 创建缓冲区\n    int len = 0;\n    byte[] buffer = new byte[1024];\n    // 6. 获取OutputStream对象\n    ServletOutputStream out = resp.getOutputStream();\n    // 7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端！\n    while ((len=in.read(buffer))>0){\n        out.write(buffer,0,len);\n    }\n\n    in.close();\n    out.close();\n}\n```\n\n#### 3、验证码功能\n\n验证怎么来的？\n\n- 前端实现\n- 后端实现，需要用到 Java 的图片类，生产一个图片\n\n```java\npackage com.kuang.servlet;import javax.imageio.ImageIO;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.awt.*;import java.awt.image.BufferedImage;import java.io.IOException;import java.util.Random;public class ImageServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        //如何让浏览器3秒自动刷新一次;        resp.setHeader(\"refresh\",\"3\");                //在内存中创建一个图片        BufferedImage image = new BufferedImage(80,20,BufferedImage.TYPE_INT_RGB);        //得到图片        Graphics2D g = (Graphics2D) image.getGraphics(); //笔        //设置图片的背景颜色        g.setColor(Color.white);        g.fillRect(0,0,80,20);        //给图片写数据        g.setColor(Color.BLUE);        g.setFont(new Font(null,Font.BOLD,20));        g.drawString(makeNum(),0,20);        //告诉浏览器，这个请求用图片的方式打开        resp.setContentType(\"image/jpeg\");        //网站存在缓存，不让浏览器缓存        resp.setDateHeader(\"expires\",-1);        resp.setHeader(\"Cache-Control\",\"no-cache\");        resp.setHeader(\"Pragma\",\"no-cache\");        //把图片写给浏览器        ImageIO.write(image,\"jpg\", resp.getOutputStream());    }    //生成随机数    private String makeNum(){        Random random = new Random();        String num = random.nextInt(9999999) + \"\";        StringBuffer sb = new StringBuffer();        for (int i = 0; i < 7-num.length() ; i++) {            sb.append(\"0\");        }        num = sb.toString() + num;        return num;    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        doGet(req, resp);    }}\n```\n\n#### 4、实现重定向\n\n![1567931587955](/狂神web/1567931587955.png)\n\nB一个web资源收到客户端A请求后，B他会通知A客户端去访问另外一个web资源C，这个过程叫重定向\n\n常见场景：\n\n- 用户登录\n\n```java\nvoid sendRedirect(String var1) throws IOException;\n```\n\n测试：\n\n```java\n@Overrideprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {    /*        resp.setHeader(\"Location\",\"/r/img\");        resp.setStatus(302);         */    resp.sendRedirect(\"/r/img\");//重定向}\n```\n\n面试题：请你聊聊重定向和转发的区别？\n\n相同点\n\n- 页面都会实现跳转\n\n不同点\n\n- 请求转发的时候，url不会产生变化\n- 重定向时候，url地址栏会发生变化；\n\n![1567932163430](/狂神web/1567932163430.png)\n\n#### 5、简单实现登录重定向\n\n```jsp\n<%--这里提交的路径，需要寻找到项目的路径--%><%--${pageContext.request.contextPath}代表当前的项目--%><form action=\"${pageContext.request.contextPath}/login\" method=\"get\">    用户名：<input type=\"text\" name=\"username\"> <br>    密码：<input type=\"password\" name=\"password\"> <br>    <input type=\"submit\"></form>\n```\n\n```JAVA\n    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        //处理请求        String username = req.getParameter(\"username\");        String password = req.getParameter(\"password\");        System.out.println(username+\":\"+password);        //重定向时候一定要注意，路径问题，否则404；        resp.sendRedirect(\"/r/success.jsp\");    }\n```\n\n```xml\n  <servlet>    <servlet-name>requset</servlet-name>    <servlet-class>com.kuang.servlet.RequestTest</servlet-class>  </servlet>  <servlet-mapping>    <servlet-name>requset</servlet-name>    <url-pattern>/login</url-pattern>  </servlet-mapping>\n```\n\n```jsp\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %><html><head>    <title>Title</title></head><body><h1>Success</h1></body></html>\n```\n\n### 6.7、HttpServletRequest\n\nHttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息；\n\n![1567933996830](/狂神web/1567933996830.png)\n\n![1567934023106](/狂神web/1567934023106.png)\n\n#### 获取参数，请求转发\n\n![1567934110794](/狂神web/1567934110794.png)\n\n```java\n@Overrideprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {    req.setCharacterEncoding(\"utf-8\");    resp.setCharacterEncoding(\"utf-8\");    String username = req.getParameter(\"username\");    String password = req.getParameter(\"password\");    String[] hobbys = req.getParameterValues(\"hobbys\");    System.out.println(\"=============================\");    //后台接收中文乱码问题    System.out.println(username);    System.out.println(password);    System.out.println(Arrays.toString(hobbys));    System.out.println(\"=============================\");    System.out.println(req.getContextPath());    //通过请求转发    //这里的 / 代表当前的web应用    req.getRequestDispatcher(\"/success.jsp\").forward(req,resp);}\n```\n\n**面试题：请你聊聊重定向和转发的区别？**\n\n相同点\n\n- 页面都会实现跳转\n\n不同点\n\n- 请求转发的时候，url不会产生变化   307\n- 重定向时候，url地址栏会发生变化； 302\n\n### 6.8、处理中文乱码\n\n```xml\n注册<form action=\"show.jsp\" method=\"post\">  <input  type=\"text\" name=\"name\">  <input  type=\"submit\" value=\"注册\">  </form>     <%//脚本段   String name = request.getParameter(\"name\");    %>        name:<%=name %>   //表达式     This is my JSP page. <br>//处理中文乱码1.   <%   request.setCharacterEncoding(\"UTF-8\");   response.setContentType(\"text/html;charset=utf-8\");   String name = request.getParameter(\"name\");   %>2.    <%   response.setContentType(\"text/html;charset=utf-8\");   String name = request.getParameter(\"name\");      name = new String(name.getBytes(\"ISO-8859-1\"),\"utf-8\");    %>        name:<%=name %>\n```\n\n\n\n## 7、Cookie、Session\n\n### 7.1、会话\n\n**会话**：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；\n\n**有状态会话**：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；\n\n**你能怎么证明你是西开的学生？**\n\n你              西开\n\n1. 发票                西开给你发票\n2. 学校登记        西开标记你来过了\n\n**一个网站，怎么证明你来过？**\n\n客户端              服务端\n\n1. 服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了； cookie\n2. 服务器登记你来过了，下次你来的时候我来匹配你； seesion\n\n\n\n### 7.2、保存会话的两种技术\n\n**cookie**\n\n- 客户端技术   （响应，请求）\n\n**session**\n\n- 服务器技术，利用这个技术，可以保存用户的会话信息？ 我们可以把信息或者数据放在Session中！\n\n\n\n常见常见：网站登录之后，你下次不用再登录了，第二次访问直接就上去了！\n\n### 7.3、Cookie\n\n![1568344447291](/狂神web/1568344447291.png)\n\n1. 从请求中拿到cookie信息\n2. 服务器响应给客户端cookie\n\n```java\nCookie[] cookies = req.getCookies(); //获得Cookiecookie.getName(); //获得cookie中的keycookie.getValue(); //获得cookie中的vlauenew Cookie(\"lastLoginTime\", System.currentTimeMillis()+\"\"); //新建一个cookiecookie.setMaxAge(24*60*60); //设置cookie的有效期resp.addCookie(cookie); //响应给客户端一个cookie\n```\n\n**cookie：一般会保存在本地的 用户目录下 appdata；**\n\n\n\n一个网站cookie是否存在上限！**聊聊细节问题**\n\n- 一个Cookie只能保存一个信息；\n- 一个web站点可以给浏览器发送多个cookie，最多存放20个cookie；\n- Cookie大小有限制4kb；\n- 300个cookie浏览器上限\n\n\n\n**删除Cookie；**\n\n- 不设置有效期，关闭浏览器，自动失效；\n- 设置有效期时间为 0 ；\n\n\n\n**编码解码：**\n\n```java\nURLEncoder.encode(\"秦疆\",\"utf-8\")URLDecoder.decode(cookie.getValue(),\"UTF-8\")\n```\n\n\n\n### 7.4、Session（重点）\n\n![1568344560794](/狂神web/1568344560794.png)\n\n什么是Session：\n\n- 服务器会给每一个用户（浏览器）创建一个Seesion对象；\n- 一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在；\n- 用户登录之后，整个网站它都可以访问！--> 保存用户的信息；保存购物车的信息…..\n\n![1568342773861](/狂神web/1568342773861.png)\n\nSession和cookie的区别：\n\n- Cookie是把用户的数据写给用户的浏览器，浏览器保存 （可以保存多个）\n- Session把用户的数据写到用户独占Session中，服务器端保存  （保存重要的信息，减少服务器资源的浪费）\n- Session对象由服务创建；\n\n\n\n使用场景：\n\n- 保存一个登录用户的信息；\n- 购物车信息；\n- 在整个网站中经常会使用的数据，我们将它保存在Session中；\n\n\n\n使用Session：\n\n```java\npackage com.kuang.servlet;\n\nimport com.kuang.pojo.Person;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.*;\nimport java.io.IOException;\n\npublic class SessionDemo01 extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        \n        //解决乱码问题\n        req.setCharacterEncoding(\"UTF-8\");\n        resp.setCharacterEncoding(\"UTF-8\");\n        resp.setContentType(\"text/html;charset=utf-8\");\n        \n        //得到Session\n        HttpSession session = req.getSession();\n        //给Session中存东西\n        session.setAttribute(\"name\",new Person(\"秦疆\",1));\n        //获取Session的ID\n        String sessionId = session.getId();\n\n        //判断Session是不是新创建\n        if (session.isNew()){\n            resp.getWriter().write(\"session创建成功,ID:\"+sessionId);\n        }else {\n            resp.getWriter().write(\"session以及在服务器中存在了,ID:\"+sessionId);\n        }\n\n        //Session创建的时候做了什么事情；\n//        Cookie cookie = new Cookie(\"JSESSIONID\",sessionId);\n//        resp.addCookie(cookie);\n\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        doGet(req, resp);\n    }\n}\n\n//得到Session\nHttpSession session = req.getSession();\n\nPerson person = (Person) session.getAttribute(\"name\");\n\nSystem.out.println(person.toString());\n\nHttpSession session = req.getSession();\nsession.removeAttribute(\"name\");\n//手动注销Session\nsession.invalidate();\n```\n\n\n\n**会话自动过期：web.xml配置**\n\n```xml\n<!--设置Session默认的失效时间--><session-config>    <!--15分钟后Session自动失效，以分钟为单位-->    <session-timeout>15</session-timeout></session-config>\n```\n\n\n\n![1568344679763](/狂神web/1568344679763.png)\n\n\n\n## 8、JSP\n\n==**静态网页&动态网页**==\n\n|          | **静态网页** | **动态网页**                |\n| -------- | ------------ | --------------------------- |\n| 组成     | html+js+css  | jsp+html;asp+html;php+html; |\n| 交互     | 不可交互     | 可交互                      |\n| 运行方式 | 客户端运行   | 服务端生成，客户端运行      |\n| 数据库   | 无数据库连接 | 连接数据库                  |\n\n### 8.1、什么是JSP\n\n- Java Server Pages ： Java服务器端页面，也和Servlet一样，用于动态Web技术！\n- http://127.0.0.1:8080/login/index.jsp\n\n- 最大的特点：\n  - 写JSP就像在写HTML\n  - 区别：\n    - HTML只给用户提供静态的数据\n    - JSP页面中可以嵌入JAVA代码，为用户提供动态数据；\n\n- **工作原理**\n\n  - 客户端请求\n  - 把 *.jsp 翻译成 *.java \n  - 编译为 *.class\n  - 执行生成servlet\n  - 反馈结果给客户端显示\n        第二次访问 有改动 执行上述过程 \n        无改动 直接执行\n\n  - ![123](/狂神web/clip_image001-1583305097106.png)\n  - <img src=\"/狂神web/clip_image001-1583305111348.png\" alt=\"112\" style=\"zoom:80%;\" />\n  - ![44](/狂神web/clip_image001-1583305154041.png)\n  - ![54](/狂神web/clip_image001-1583305166669.png)\n\n### 8.2、JSP原理\n\n思路：JSP到底怎么执行的！\n\n- 代码层面没有任何问题\n\n- 服务器内部工作\n\n  tomcat中有一个work目录；\n\n  IDEA中使用Tomcat的会在IDEA的tomcat中生产一个work目录\n\n  ![1568345873736](/狂神web/1568345873736.png)\n\n  我电脑的地址：\n\n  ```java\n  C:\\Users\\Administrator\\.IntelliJIdea2018.1\\system\\tomcat\\Unnamed_javaweb-session-cookie\\work\\Catalina\\localhost\\ROOT\\org\\apache\\jsp\n  ```\n\n  发现页面转变成了Java程序！\n\n  ![1568345948307](/狂神web/1568345948307.png)\n\n\n\n**浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet！**\n\nJSP最终也会被转换成为一个Java类！\n\n**JSP 本质上就是一个Servlet**\n\n```java\n//初始化  public void _jspInit() {        }//销毁  public void _jspDestroy() {  }//JSPService  public void _jspService(.HttpServletRequest request,HttpServletResponse response)      \n```\n\n1. 判断请求\n\n2. 内置一些对象\n\n   ```java\n   final javax.servlet.jsp.PageContext pageContext;  //页面上下文javax.servlet.http.HttpSession session = null;    //sessionfinal javax.servlet.ServletContext application;   //applicationContextfinal javax.servlet.ServletConfig config;         //configjavax.servlet.jsp.JspWriter out = null;           //outfinal java.lang.Object page = this;               //page：当前HttpServletRequest request                        //请求HttpServletResponse response                      //响应\n   ```\n\n3. 输出页面前增加的代码\n\n   ```java\n   response.setContentType(\"text/html\");       //设置响应的页面类型pageContext = _jspxFactory.getPageContext(this, request, response,                                          null, true, 8192, true);_jspx_page_context = pageContext;application = pageContext.getServletContext();config = pageContext.getServletConfig();session = pageContext.getSession();out = pageContext.getOut();_jspx_out = out;\n   ```\n\n4. 以上的这些个对象我们可以在JSP页面中直接使用！\n\n![1568347078207](/狂神web/1568347078207.png)\n\n\n\n在JSP页面中；\n\n只要是 JAVA代码就会原封不动的输出；\n\n如果是HTML代码，就会被转换为：\n\n```java\nout.write(\"<html>\\r\\n\");\n```\n\n这样的格式，输出到前端！\n\n\n\n### 8.3、JSP基础语法\n\n任何语言都有自己的语法，JAVA中有,。 JSP 作为java技术的一种应用，它拥有一些自己扩充的语法（了解，知道即可！），Java所有语法都支持！\n\n#### JSP 的组成 [**JSP页面的构成**](https://www.cnblogs.com/yangyquin/p/5430231.html)\n\n <img src=\"/狂神web/clip_image001-1583305406375.png\" alt=\"54\" style=\"zoom:50%;\" />\n\n**==1 静态页面==**\n\n##### ==2 指令==\n\n```xml\n<%@ %><!--page--><%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"UTF-8\"  contentType=\"text/html; charset=UTF-8\" isErrorPage=\"true\"%><!--include--><%@ include file=\"foot.html\" %>   静态引入/静态包含<%@ include file=\"foot.jsp\" %>使用jsp要删除<% String path = request.getContextPath( );   String basePath = request.getScheme( )+\"://\"+request %><base href=\"<%=basePath%>\"><jsp:include page=\"foot.html\"></jsp:include>   动态引入/动态包含<jsp:include page=\"foot.jsp\"></jsp:include> (可使用html/jsp)    <!--taglib--><%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>     <!--======================================================================-->    <%@page args.... %><%@include file=\"\"%><%--@include会将两个页面合二为一--%><%@include file=\"common/header.jsp\"%><h1>网页主体</h1><%@include file=\"common/footer.jsp\"%><hr><%--jSP标签    jsp:include：拼接页面，本质还是三个    --%><jsp:include page=\"/common/header.jsp\"/><h1>网页主体</h1><jsp:include page=\"/common/footer.jsp\"/>\n```\n\n##### ==3 声明==\n\n- JSP声明：会被编译到JSP生成Java的类中！其他的，就会被生成到_jspService方法中！在JSP，嵌入Java代码即可！\n\n```xml\n在JSP页面中定义变量,方法或类  <%!  %><%!  String s = \"这是一个声明\" ;    public  int  add(int x,int y ){         return x+y;     } %>=========================================<%!static {  System.out.println(\"Loading Servlet!\");}private int globalVar = 0;public void kuang(){  System.out.println(\"进入了方法Kuang！\");}%>\n```\n\n##### ==4 表达式==\n\n```xml\n<%= 变量或表达式%> basePath:<%=basePath%><body>    <h1>当前时间： </h1>    <%= new Date() %></body>================================<%--JSP表达式作用：用来将程序的输出，输出到客户端<%= 变量或者表达式%>--%><%= new java.util.Date()%>\n```\n\n##### ==5 脚本段==（小脚本/代码块）\n\n```xml\n在JSP页面中执行的Java代码 语法： <% Java代码 %><%  System.out.println(\"这是一个代码块\");%>================================================== <%--jsp脚本片段--%><%int sum = 0;for (int i = 1; i <=100 ; i++) {  sum+=i;}out.println(\"<h1>Sum=\"+sum+\"</h1>\");%>\n```\n\n```xml\n<!--脚本片段的再实现--><%int x = 10;out.println(x);%><p>这是一个JSP文档</p><%int y = 2;out.println(y);%><hr><%--在代码嵌入HTML元素--%><%for (int i = 0; i < 5; i++) {%><h1>Hello,World  <%=i%> </h1><%}%>\n```\n\n##### ==6 标准动作==\n\n```xml\n<jsp:include page=\"foot.html\"></jsp:include>   动态引入/动态包含<jsp:forward page=\"encoding.jsp\"></jsp:forward>\n```\n\n##### ==7 注释==\n\n- JSP的注释，不会在客户端显示，HTML就会！\n\n\n```xml\n<!-- This is my JSP page. <br> --><%--  <% System.out.println(\"这是一个代码块\");%>--%>//System.out.println(\"这是一个代码块\"); /* System.out.println(\"这是一个代码块1\"); */\n```\n\n\n\n### 8.4、9大内置对象\n\n- PageContext    存东西\n- Request     存东西\n- Response\n- Session      存东西\n- Application   【SerlvetContext】   存东西\n- config    【SerlvetConfig】\n- out\n- page ，不用了解\n- exception\n\n```java\npageContext.setAttribute(\"name1\",\"秦疆1号\"); //保存的数据只在一个页面中有效request.setAttribute(\"name2\",\"秦疆2号\"); //保存的数据只在一次请求中有效，请求转发会携带这个数据session.setAttribute(\"name3\",\"秦疆3号\"); //保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器application.setAttribute(\"name4\",\"秦疆4号\");  //保存的数据只在服务器中有效，从打开服务器到关闭服务器\n```\n\nrequest：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！\n\nsession：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车；\n\napplication：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如：聊天数据；\n\n### 8.5、JSP标签、JSTL标签、EL表达式\n\n```xml\n<!-- JSTL表达式的依赖 --><dependency>    <groupId>javax.servlet.jsp.jstl</groupId>    <artifactId>jstl-api</artifactId>    <version>1.2</version></dependency><!-- standard标签库 --><dependency>    <groupId>taglibs</groupId>    <artifactId>standard</artifactId>    <version>1.1.2</version></dependency>\n```\n\nEL表达式：  ${ }\n\n- **获取数据**\n- **执行运算**\n- **获取web开发的常用对象**\n\n\n\n**JSP标签**\n\n```jsp\n<%--jsp:include--%><%--http://localhost:8080/jsptag.jsp?name=kuangshen&age=12--%><jsp:forward page=\"/jsptag2.jsp\">    <jsp:param name=\"name\" value=\"kuangshen\"></jsp:param>    <jsp:param name=\"age\" value=\"12\"></jsp:param></jsp:forward>\n```\n\n\n\n**JSTL表达式**\n\nJSTL标签库的使用就是为了弥补HTML标签的不足；它自定义许多标签，可以供我们使用，标签的功能和Java代码一样！\n\n**格式化标签**\n\n**SQL标签**\n\n**XML 标签**\n\n**核心标签** （掌握部分）\n\n![1568362473764](/狂神web/1568362473764.png)\n\n**JSTL标签库使用步骤**\n\n- 引入对应的 taglib\n- 使用其中的方法\n- **在Tomcat 也需要引入 jstl的包，否则会报错：JSTL解析错误**\n\nc：if\n\n```jsp\n<head>\n    <title>Title</title>\n</head>\n<body>\n\n\n<h4>if测试</h4>\n\n<hr>\n\n<form action=\"coreif.jsp\" method=\"get\">\n    <%--\n    EL表达式获取表单中的数据\n    ${param.参数名}\n    --%>\n    <input type=\"text\" name=\"username\" value=\"${param.username}\">\n    <input type=\"submit\" value=\"登录\">\n</form>\n\n<%--判断如果提交的用户名是管理员，则登录成功--%>\n<c:if test=\"${param.username=='admin'}\" var=\"isAdmin\">\n    <c:out value=\"管理员欢迎您！\"/>\n</c:if>\n\n<%--自闭合标签--%>\n<c:out value=\"${isAdmin}\"/>\n\n</body>\n```\n\nc:choose   c:when\n\n```jsp\n<body><%--定义一个变量score，值为85--%><c:set var=\"score\" value=\"55\"/><c:choose>    <c:when test=\"${score>=90}\">        你的成绩为优秀    </c:when>    <c:when test=\"${score>=80}\">        你的成绩为一般    </c:when>    <c:when test=\"${score>=70}\">        你的成绩为良好    </c:when>    <c:when test=\"${score<=60}\">        你的成绩为不及格    </c:when></c:choose></body>\n```\n\nc:forEach\n\n```jsp\n<%    ArrayList<String> people = new ArrayList<>();    people.add(0,\"张三\");    people.add(1,\"李四\");    people.add(2,\"王五\");    people.add(3,\"赵六\");    people.add(4,\"田六\");    request.setAttribute(\"list\",people);%><%--var , 每一次遍历出来的变量items, 要遍历的对象begin,   哪里开始end,     到哪里step,   步长--%><c:forEach var=\"people\" items=\"${list}\">    <c:out value=\"${people}\"/> <br></c:forEach><hr><c:forEach var=\"people\" items=\"${list}\" begin=\"1\" end=\"3\" step=\"1\" >    <c:out value=\"${people}\"/> <br></c:forEach>\n```\n\n## 9、JavaBean\n\n实体类\n\nJavaBean有特定的写法：\n\n- 必须要有一个无参构造\n- 属性必须私有化\n- 必须有对应的get/set方法；\n\n一般用来和数据库的字段做映射  ORM；\n\nORM ：对象关系映射\n\n- 表--->类\n- 字段-->属性\n- 行记录---->对象\n\n**people表**\n\n| id   | name    | age  | address |\n| ---- | ------- | ---- | ------- |\n| 1    | 秦疆1号 | 3    | 西安    |\n| 2    | 秦疆2号 | 18   | 西安    |\n| 3    | 秦疆3号 | 100  | 西安    |\n\n```java\nclass People{    private int id;    private String name;    private int id;    private String address;}class A{    new People(1,\"秦疆1号\",3，\"西安\");    new People(2,\"秦疆2号\",3，\"西安\");    new People(3,\"秦疆3号\",3，\"西安\");}\n```\n\n\n\n- 过滤器\n- 文件上传\n- 邮件发送\n- JDBC 复习 ： 如何使用JDBC ,  JDBC crud， jdbc 事务\n\n\n\n## 10、MVC三层架构\n\n什么是MVC：  Model     view     Controller  模型、视图、控制器\n\n### 10.1、早些年\n\n![1568423664332](/狂神web/1568423664332.png)\n\n用户直接访问控制层，控制层就可以直接操作数据库；\n\n```java\nservlet--CRUD-->数据库弊端：程序十分臃肿，不利于维护  servlet的代码中：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码架构：没有什么是加一层解决不了的！程序猿调用|JDBC|Mysql Oracle SqlServer ....\n```\n\n### 10.2、MVC三层架构\n\n![1568424227281](/狂神web/1568424227281.png)\n\n\n\nModel\n\n- 业务处理 ：业务逻辑（Service）\n- 数据持久层：CRUD   （Dao）\n\nView\n\n- 展示数据\n- 提供链接发起Servlet请求 （a，form，img…）\n\nController  （Servlet）\n\n- 接收用户的请求 ：（req：请求参数、Session信息….）\n\n- 交给业务层处理对应的代码 \n\n- 控制视图的跳转  \n\n  ```java\n  登录--->接收用户的登录请求--->处理用户的请求（获取用户登录的参数，username，password）---->交给业务层处理登录业务（判断用户名密码是否正确：事务）--->Dao层查询用户名和密码是否正确-->数据库\n  ```\n\n\n\n## 11、Filter （重点）\n\nFilter：过滤器 ，用来过滤网站的数据；\n\n- 处理中文乱码\n- 登录验证….\n\n![1568424858708](/狂神web/1568424858708.png)\n\nFilter开发步骤：\n\n1. 导包\n\n2. 编写过滤器\n\n   1. 导包不要错\n\n      ![1568425162525](/狂神web/1568425162525.png)\n\n      实现Filter接口，重写对应的方法即可\n\n      ```java\n      public class CharacterEncodingFilter implements Filter {    //初始化：web服务器启动，就以及初始化了，随时等待过滤对象出现！    public void init(FilterConfig filterConfig) throws ServletException {        System.out.println(\"CharacterEncodingFilter初始化\");    }    //Chain : 链    /*    1. 过滤中的所有代码，在过滤特定请求的时候都会执行    2. 必须要让过滤器继续同行        chain.doFilter(request,response);     */    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {        request.setCharacterEncoding(\"utf-8\");        response.setCharacterEncoding(\"utf-8\");        response.setContentType(\"text/html;charset=UTF-8\");        System.out.println(\"CharacterEncodingFilter执行前....\");        chain.doFilter(request,response); //让我们的请求继续走，如果不写，程序到这里就被拦截停止！        System.out.println(\"CharacterEncodingFilter执行后....\");    }    //销毁：web服务器关闭的时候，过滤会销毁    public void destroy() {        System.out.println(\"CharacterEncodingFilter销毁\");    }}\n      ```\n\n3. 在web.xml中配置 Filter\n\n   ```xml\n   <filter>    <filter-name>CharacterEncodingFilter</filter-name>    <filter-class>com.kuang.filter.CharacterEncodingFilter</filter-class></filter><filter-mapping>    <filter-name>CharacterEncodingFilter</filter-name>    <!--只要是 /servlet的任何请求，会经过这个过滤器-->    <url-pattern>/servlet/*</url-pattern>    <!--<url-pattern>/*</url-pattern>--></filter-mapping>\n   ```\n\n   \n\n## 12、监听器\n\n实现一个监听器的接口；（有N种）\n\n1. 编写一个监听器\n\n   实现监听器的接口…\n\n   ```java\n   //统计网站在线人数 ： 统计sessionpublic class OnlineCountListener implements HttpSessionListener {    //创建session监听： 看你的一举一动    //一旦创建Session就会触发一次这个事件！    public void sessionCreated(HttpSessionEvent se) {        ServletContext ctx = se.getSession().getServletContext();        System.out.println(se.getSession().getId());        Integer onlineCount = (Integer) ctx.getAttribute(\"OnlineCount\");        if (onlineCount==null){            onlineCount = new Integer(1);        }else {            int count = onlineCount.intValue();            onlineCount = new Integer(count+1);        }        ctx.setAttribute(\"OnlineCount\",onlineCount);    }    //销毁session监听    //一旦销毁Session就会触发一次这个事件！    public void sessionDestroyed(HttpSessionEvent se) {        ServletContext ctx = se.getSession().getServletContext();        Integer onlineCount = (Integer) ctx.getAttribute(\"OnlineCount\");        if (onlineCount==null){            onlineCount = new Integer(0);        }else {            int count = onlineCount.intValue();            onlineCount = new Integer(count-1);        }        ctx.setAttribute(\"OnlineCount\",onlineCount);    }    /*    Session销毁：    1. 手动销毁  getSession().invalidate();    2. 自动销毁     */}\n   ```\n\n2. web.xml中注册监听器\n\n   ```xml\n   <!--注册监听器--><listener>    <listener-class>com.kuang.listener.OnlineCountListener</listener-class></listener>\n   ```\n\n3. 看情况是否使用！\n\n\n\n## 13、过滤器、监听器常见应用\n\n**监听器：GUI编程中经常使用；**\n\n```java\npublic class TestPanel {\n    public static void main(String[] args) {\n        Frame frame = new Frame(\"中秋节快乐\");  //新建一个窗体\n        Panel panel = new Panel(null); //面板\n        frame.setLayout(null); //设置窗体的布局\n\n        frame.setBounds(300,300,500,500);\n        frame.setBackground(new Color(0,0,255)); //设置背景颜色\n\n        panel.setBounds(50,50,300,300);\n        panel.setBackground(new Color(0,255,0)); //设置背景颜色\n\n        frame.add(panel);\n\n        frame.setVisible(true);\n\n        //监听事件，监听关闭事件\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                super.windowClosing(e);\n            }\n        });\n\n\n    }\n}\n```\n\n\n\n用户登录之后才能进入主页！用户注销后就不能进入主页了！\n\n1. 用户登录之后，向Sesison中放入用户的数据\n\n2. 进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！\n\n   ```java\n   HttpServletRequest request = (HttpServletRequest) req;\n   HttpServletResponse response = (HttpServletResponse) resp;\n   \n   if (request.getSession().getAttribute(Constant.USER_SESSION)==null){\n       response.sendRedirect(\"/error.jsp\");\n   }\n   \n   chain.doFilter(request,response);\n   ```\n\n\n\n\n## 14、JDBC\n\n什么是JDBC ： Java连接数据库！\n\n![1568439601825](/狂神web/1568439601825.png)\n\n需要jar包的支持：\n\n- java.sql\n- javax.sql\n- mysql-conneter-java…  连接驱动（必须要导入）\n\n\n\n**实验环境搭建**\n\n```sql\nCREATE TABLE users(    id INT PRIMARY KEY,    `name` VARCHAR(40),    `password` VARCHAR(40),    email VARCHAR(60),    birthday DATE);INSERT INTO users(id,`name`,`password`,email,birthday)VALUES(1,'张三','123456','zs@qq.com','2000-01-01');INSERT INTO users(id,`name`,`password`,email,birthday)VALUES(2,'李四','123456','ls@qq.com','2000-01-01');INSERT INTO users(id,`name`,`password`,email,birthday)VALUES(3,'王五','123456','ww@qq.com','2000-01-01');SELECT\t* FROM users;\n```\n\n\n\n导入数据库依赖\n\n```xml\n<!--mysql的驱动--><dependency>    <groupId>mysql</groupId>    <artifactId>mysql-connector-java</artifactId>    <version>5.1.47</version></dependency>\n```\n\nIDEA中连接数据库：\n\n![1568440926845](/狂神web/1568440926845.png)\n\n\n\n**JDBC 固定步骤：**\n\n1. 加载驱动\n2. 连接数据库,代表数据库\n3. 向数据库发送SQL的对象Statement : CRUD\n4. 编写SQL （根据业务，不同的SQL）\n5. 执行SQL\n6. 关闭连接\n\n```java\npublic class TestJdbc {    public static void main(String[] args) throws ClassNotFoundException, SQLException {        //配置信息        //useUnicode=true&characterEncoding=utf-8 解决中文乱码        String url=\"jdbc:mysql://localhost:3306/jdbc?useUnicode=true&characterEncoding=utf-8\";        String username = \"root\";        String password = \"123456\";        //1.加载驱动        Class.forName(\"com.mysql.jdbc.Driver\");        //2.连接数据库,代表数据库        Connection connection = DriverManager.getConnection(url, username, password);        //3.向数据库发送SQL的对象Statement,PreparedStatement : CRUD        Statement statement = connection.createStatement();        //4.编写SQL        String sql = \"select * from users\";        //5.执行查询SQL，返回一个 ResultSet  ： 结果集        ResultSet rs = statement.executeQuery(sql);        while (rs.next()){            System.out.println(\"id=\"+rs.getObject(\"id\"));            System.out.println(\"name=\"+rs.getObject(\"name\"));            System.out.println(\"password=\"+rs.getObject(\"password\"));            System.out.println(\"email=\"+rs.getObject(\"email\"));            System.out.println(\"birthday=\"+rs.getObject(\"birthday\"));        }        //6.关闭连接，释放资源（一定要做） 先开后关        rs.close();        statement.close();        connection.close();    }}\n```\n\n\n\n**预编译SQL**\n\n```java\npublic class TestJDBC2 {    public static void main(String[] args) throws Exception {        //配置信息        //useUnicode=true&characterEncoding=utf-8 解决中文乱码        String url=\"jdbc:mysql://localhost:3306/jdbc?useUnicode=true&characterEncoding=utf-8\";        String username = \"root\";        String password = \"123456\";        //1.加载驱动        Class.forName(\"com.mysql.jdbc.Driver\");        //2.连接数据库,代表数据库        Connection connection = DriverManager.getConnection(url, username, password);        //3.编写SQL        String sql = \"insert into  users(id, name, password, email, birthday) values (?,?,?,?,?);\";        //4.预编译        PreparedStatement preparedStatement = connection.prepareStatement(sql);        preparedStatement.setInt(1,2);//给第一个占位符？ 的值赋值为1；        preparedStatement.setString(2,\"狂神说Java\");//给第二个占位符？ 的值赋值为狂神说Java；        preparedStatement.setString(3,\"123456\");//给第三个占位符？ 的值赋值为123456；        preparedStatement.setString(4,\"24736743@qq.com\");//给第四个占位符？ 的值赋值为1；        preparedStatement.setDate(5,new Date(new java.util.Date().getTime()));//给第五个占位符？ 的值赋值为new Date(new java.util.Date().getTime())；        //5.执行SQL        int i = preparedStatement.executeUpdate();        if (i>0){            System.out.println(\"插入成功@\");        }        //6.关闭连接，释放资源（一定要做） 先开后关        preparedStatement.close();        connection.close();    }}\n```\n\n\n\n**事务**\n\n要么都成功，要么都失败！\n\nACID原则：保证数据的安全。\n\n```java\n开启事务事务提交  commit()事务回滚  rollback()关闭事务转账：A:1000B:1000    A(900)   --100-->   B(1100) \n```\n\n\n\n**Junit单元测试**\n\n依赖\n\n```xml\n<!--单元测试--><dependency>    <groupId>junit</groupId>    <artifactId>junit</artifactId>    <version>4.12</version></dependency>\n```\n\n简单使用\n\n@Test注解只有在方法上有效，只要加了这个注解的方法，就可以直接运行！\n\n```java\n@Test\npublic void test(){\n    System.out.println(\"Hello\");\n}\n```\n\n![1568442261610](/狂神web/1568442261610.png)\n\n失败的时候是红色：\n\n![1568442289597](/狂神web/1568442289597.png)\n\n\n\n**搭建一个环境**\n\n```sql\nCREATE TABLE account(\n   id INT PRIMARY KEY AUTO_INCREMENT,\n   `name` VARCHAR(40),\n   money FLOAT\n);\n\nINSERT INTO account(`name`,money) VALUES('A',1000);\nINSERT INTO account(`name`,money) VALUES('B',1000);\nINSERT INTO account(`name`,money) VALUES('C',1000);\n```\n\n```java\n    @Test\n    public void test() {\n        //配置信息\n        //useUnicode=true&characterEncoding=utf-8 解决中文乱码\n        String url=\"jdbc:mysql://localhost:3306/jdbc?useUnicode=true&characterEncoding=utf-8\";\n        String username = \"root\";\n        String password = \"123456\";\n\n        Connection connection = null;\n\n        //1.加载驱动\n        try {\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            //2.连接数据库,代表数据库\n             connection = DriverManager.getConnection(url, username, password);\n\n            //3.通知数据库开启事务,false 开启\n            connection.setAutoCommit(false);\n\n            String sql = \"update account set money = money-100 where name = 'A'\";\n            connection.prepareStatement(sql).executeUpdate();\n\n            //制造错误\n            //int i = 1/0;\n\n            String sql2 = \"update account set money = money+100 where name = 'B'\";\n            connection.prepareStatement(sql2).executeUpdate();\n\n            connection.commit();//以上两条SQL都执行成功了，就提交事务！\n            System.out.println(\"success\");\n        } catch (Exception e) {\n            try {\n                //如果出现异常，就通知数据库回滚事务\n                connection.rollback();\n            } catch (SQLException e1) {\n                e1.printStackTrace();\n            }\n            e.printStackTrace();\n        }finally {\n            try {\n                connection.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n```\n","slug":"javaWeb笔记","published":1,"updated":"2021-08-29T13:46:35.731Z","_id":"cksx03kn2000m9cu9816keurt","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1、基本概念\"><a href=\"#1、基本概念\" class=\"headerlink\" title=\"1、基本概念\"></a>1、基本概念</h2><h3 id=\"1-1、前言\"><a href=\"#1-1、前言\" class=\"headerlink\" title=\"1.1、前言\"></a>1.1、前言</h3><p>web开发：</p>\n<ul>\n<li>web，网页的意思  ， <a href=\"http://www.baidu.com/\">www.baidu.com</a></li>\n<li>静态web<ul>\n<li>html，css</li>\n<li>提供给所有人看的数据始终不会发生变化！</li>\n</ul>\n</li>\n<li>动态web<ul>\n<li>淘宝，几乎是所有的网站；</li>\n<li>提供给所有人看的数据始终会发生变化，每个人在不同的时间，不同的地点看到的信息各不相同！</li>\n<li>技术栈：Servlet/JSP，ASP，PHP</li>\n</ul>\n</li>\n</ul>\n<p>在Java中，动态web资源开发的技术统称为JavaWeb；</p>\n<h3 id=\"1-2、web应用程序\"><a href=\"#1-2、web应用程序\" class=\"headerlink\" title=\"1.2、web应用程序\"></a>1.2、web应用程序</h3><p>web应用程序：可以提供浏览器访问的程序；</p>\n<ul>\n<li>a.html、b.html……多个web资源，这些web资源可以被外界访问，对外界提供服务；</li>\n<li>你们能访问到的任何一个页面或者资源，都存在于这个世界的某一个角落的计算机上。</li>\n<li>URL </li>\n<li>这个统一的web资源会被放在同一个文件夹下，web应用程序–&gt;Tomcat：服务器</li>\n<li>一个web应用由多部分组成 （静态web，动态web）<ul>\n<li>html，css，js</li>\n<li>jsp，servlet</li>\n<li>Java程序</li>\n<li>jar包</li>\n<li>配置文件 （Properties）</li>\n</ul>\n</li>\n</ul>\n<p>web应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理；</p>\n<h4 id=\"Web应用程序概述\"><a href=\"#Web应用程序概述\" class=\"headerlink\" title=\"Web应用程序概述\"></a>Web应用程序概述</h4><ul>\n<li><p>Web应用程序是一种可以通过Web访问的应用程序，程序的最大好处是用户很容易访问应用程序，用户只需要有浏览器即可，不需要再安装其他软件。</p>\n</li>\n<li><p>一个Web应用程序是由完成特定任务的各种Web组件（web components)构成的并通过Web将服务展示给外界。在实际应用中，Web应用程序是由多个Servlet、JSP页面、HTML文件以及图像文件等组成。所有这些组件相互协调为用户提供一组完整的服务。</p>\n</li>\n</ul>\n<h4 id=\"应用程序模式\"><a href=\"#应用程序模式\" class=\"headerlink\" title=\"应用程序模式\"></a>应用程序模式</h4><ul>\n<li><p>应用程序有两种模式C/S、B/S。C/S是客户端/服务器端程序，也就是说这类程序一般独立运行。而B/S就是浏览器端/服务器端应用程序，这类应用程序一般借助IE、Firefox、Google等浏览器来运行。WEB应用程序一般是B/S模式。</p>\n<img src=\"/狂神web/clip_image001.jpg\" alt=\"12\" style=\"zoom:80%;\" />\n\n<img src=\"/狂神web/clip_image001-1583293770740.jpg\" alt=\"11\" style=\"zoom:67%;\" /></li>\n</ul>\n<h5 id=\"1，C-S架构\"><a href=\"#1，C-S架构\" class=\"headerlink\" title=\"1，C/S架构\"></a>1，C/S架构</h5><ul>\n<li>C/S是Client/Server的缩写。</li>\n<li>Server即服务器，通常采用高性能的PC或工作站，</li>\n<li>Client即客户端，需要在客户电脑上安装专用的客户端软件。</li>\n<li>例如大家比较熟悉的腾讯QQ就是个典型的C/S结构的软件，用户要安装QQ客户端程序同服务器进行通讯。</li>\n</ul>\n<h5 id=\"2，B-S架构\"><a href=\"#2，B-S架构\" class=\"headerlink\" title=\"2，B/S架构\"></a>2，B/S架构</h5><ul>\n<li><p>B/S架构即==浏览器和服务器==架构模式。它是随着Internet技术的兴起，对C/S架构的一种变化或者改进的架构。</p>\n</li>\n<li><p>在这种架构下，用户工作界面是通过==浏览器==来实现，极少部分事务逻辑在前端(Browser)实现，但是主要事务逻辑在服务器端(Server)实现，形成所谓三层结构。</p>\n</li>\n<li><p>例如京东、淘宝、12306等都是B/S架构。</p>\n</li>\n<li><p>WEB应用程序一般是B/S模式。</p>\n</li>\n<li><p>B/S优点：</p>\n<ul>\n<li><p>耦合度小，利于分工协作，提高开发效率</p>\n</li>\n<li><p>具有良好的可扩展性和可维护性</p>\n</li>\n<li><p>升级成本小</p>\n</li>\n<li><p>简化了客户端电脑载荷</p>\n</li>\n<li><p>减轻了系统维护与升级的成本和工作量</p>\n</li>\n<li><p>降低了用户的总体成本</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3、静态web\"><a href=\"#1-3、静态web\" class=\"headerlink\" title=\"1.3、静态web\"></a>1.3、静态web</h3><ul>\n<li><code>*.htm, *.html</code>,这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。通络；</li>\n</ul>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567822802516.png\" alt=\"1567822802516\"></p>\n<ul>\n<li>静态web存在的缺点<ul>\n<li>Web页面无法动态更新，所有用户看到都是同一个页面<ul>\n<li>轮播图，点击特效：伪动态</li>\n<li>JavaScript [实际开发中，它用的最多]</li>\n<li>VBScript</li>\n</ul>\n</li>\n<li>它无法和数据库交互（数据无法持久化，用户无法交互）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4、动态web\"><a href=\"#1-4、动态web\" class=\"headerlink\" title=\"1.4、动态web\"></a>1.4、动态web</h3><p>页面会动态展示： “Web的页面展示的效果因人而异”；</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567823191289.png\" alt=\"1567823191289\"></p>\n<p>缺点：</p>\n<ul>\n<li>加入服务器的动态web资源出现了错误，我们需要重新编写我们的<strong>后台程序</strong>,重新发布；<ul>\n<li>停机维护</li>\n</ul>\n</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>Web页面可以动态更新，所有用户看到都不是同一个页面</li>\n<li>它可以与数据库交互 （数据持久化：注册，商品信息，用户信息……..）</li>\n</ul>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567823350584.png\" alt=\"1567823350584\"></p>\n<h4 id=\"静态网页与动态网页\"><a href=\"#静态网页与动态网页\" class=\"headerlink\" title=\"静态网页与动态网页\"></a>静态网页与动态网页</h4><ul>\n<li><p>静态网页没有数据库的支持，在网站制作和维护方面工作量较大，静态网页的交互性较差，在功能方面有较大的限制。</p>\n</li>\n<li><p>动态网页是指在服务器端运行的程序或者网页，会根据不同客户、不同时间返回不同的网页。</p>\n</li>\n</ul>\n<h3 id=\"1-5、访问Web资源\"><a href=\"#1-5、访问Web资源\" class=\"headerlink\" title=\"1.5、访问Web资源\"></a>1.5、访问Web资源</h3><h4 id=\"什么是URL\"><a href=\"#什么是URL\" class=\"headerlink\" title=\"什么是URL\"></a>什么是URL</h4><ul>\n<li>URL是UniformResource Locator的缩写，意思是统一资源定位符，也被称为网页地址，是因特网上标准的资源地址(Address)。</li>\n<li>统一资源定位符(URL)适用于完整地描述Internet上网页和其他资源地址的一种标识方法。</li>\n<li>简单地说，URL就是Web地址，俗称“网址”。</li>\n</ul>\n<h5 id=\"URL的组成\"><a href=\"#URL的组成\" class=\"headerlink\" title=\"URL的组成\"></a>URL的组成</h5><ul>\n<li><p>URL是唯一能够识别Internet上具体的计算机、目录或文件位置的命名约定。</p>\n</li>\n<li><p>以这样一个URL:<a href=\"http://localhost:8080/FirstWeb/index.jsp%E4%B8%BA%E4%BE%8B%E6%9D%A5%E5%88%86%E6%9E%90URL%E7%9A%84%E7%BB%84%E6%88%90%E3%80%82\">http://localhost:8080/FirstWeb/index.jsp为例来分析URL的组成。</a></p>\n</li>\n</ul>\n<ol>\n<li><p>==HTTP协议==：两台计算机可能因为系统不同、运行程序所用语言不通，要进行通信必须按照一个约定的规则进行，浏览器和服务器之间必须遵循共同的协议HTTP (HyperText Transfer Protocol ==超文本传输协议==)。HTTP是互联网上应用最为广泛的一种网络协议。</p>\n</li>\n<li><p>==服务器主机名或IP== :在这里localhost就是服务器的地址， 意思是本机上的服务器。当然也可以使用127.0.0.1或实际IP地址来代替。IP是网络之间互连的协议,是Internet Protocol的缩写,中文缩写为“==网协==”。</p>\n</li>\n<li><p>==端口号==： 端口号是网络程序和外部进行通信的通道，当从外部访问服务器时要通过指定端口号来访问。物理端口是指物理存在的端口；逻辑端口是指逻辑意义上用于区分服务的端口，如TCP/IP协议中的服务端口，端口号的范围从0到65535。</p>\n</li>\n<li><p>==路径==： 路径（包括请求的资源）由零个或多个 “/“ 符号隔开的字符串， 一般用来表示主机上的一个目录或文件地址等。 而请求的资源指请求的文件的名称，可以是 一个HTML页面，也可以是 一个Servlet、 图片等服务器提供的资源。以FirstWeb/index.jsp为例，news代表的是Web应用对外发布的根路径名，而index.jsp代表了一个存放到FirstWeb根目录下的一个文件。</p>\n</li>\n</ol>\n<ul>\n<li>==URL的组成:==<ul>\n<li>协议</li>\n<li>主机（包括端口号）</li>\n<li>路径</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2、web服务器\"><a href=\"#2、web服务器\" class=\"headerlink\" title=\"2、web服务器\"></a>2、web服务器</h2><ul>\n<li>Web服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，可以向浏览器等Web客户端提供文档，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。</li>\n<li>下面介绍几种常用的WEB服务器。<ul>\n<li>==WebLogic==<ul>\n<li>BEA WebLogic Server 在使应用服务器成为企业应用架构的基础方面继续处于领先地位。</li>\n<li>BEA WebLogic Server 为构建集成化的企业级应用提供了稳固的基础，</li>\n<li>它们以 Internet 的==容量==和==速度==，在连网的企业之间共享信息、提交服务，实现协作自动化。</li>\n</ul>\n</li>\n<li>==Apache==<ul>\n<li>Apache仍然是世界上用的最多的Web服务器，市场占有率达60%左右。</li>\n<li>世界上很多著名的网站都是Apache的产物，</li>\n<li>它的成功之处主要在于它的==源代码开放==、有一支开放的开发队伍、支持跨平台的应用（可以运行在几乎所有的Unix、Windows、Linux系统平台上）以及它的==可移植性==等方面。</li>\n</ul>\n</li>\n<li>==Tomcat==<ul>\n<li>Tomcat是一个==开放源代码==、运行Servlet和JSP Web应用软件的基于Java的Web应用软件容器。</li>\n<li>它是==Apache==软件基金会一个开源的==核心项目==，由Apache、Sun和其他一些公司及个人共同开发完成。</li>\n<li>Tomcat Server是根据Servlet和JSP规范进行执行的，因此我们就可以说Tomcat Server也实行了Apache-Jakarta规范且比绝大多数商业应用软件服务器要好。</li>\n</ul>\n</li>\n<li>==Jboss==<ul>\n<li>是一个基于==J2EE==的==开放源代码==的应用服务器。</li>\n<li>JBoss代码遵循LGPL许可，可以在任何商业应用中==免费==使用，而不用支付费用。</li>\n<li>JBoss是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3的规范。</li>\n<li>但JBoss核心服务==不包括支持Servlet/JSP的WEB容器==，一般与Tomcat或Jetty绑定使用。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-1、技术讲解\"><a href=\"#2-1、技术讲解\" class=\"headerlink\" title=\"2.1、技术讲解\"></a>2.1、技术讲解</h3><p><strong>ASP:</strong></p>\n<ul>\n<li><p>微软：国内最早流行的就是ASP；</p>\n</li>\n<li><p>在HTML中嵌入了VB的脚本，  ASP + COM；</p>\n</li>\n<li><p>在ASP开发中，基本一个页面都有几千行的业务代码，页面极其换乱</p>\n</li>\n<li><p>维护成本高！</p>\n</li>\n<li><p>C# </p>\n</li>\n<li><p>IIS</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">            &lt;%</span><br><span class=\"line\">            System.out.println(&quot;hello&quot;)</span><br><span class=\"line\">            %&gt;</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>php：</strong></p>\n<ul>\n<li>PHP开发速度很快，功能很强大，跨平台，代码很简单 （70% , WP）</li>\n<li>无法承载大访问量的情况（局限性）</li>\n</ul>\n<p>**JSP/Servlet : ** </p>\n<p>B/S：浏览和服务器</p>\n<p>C/S:  客户端和服务器</p>\n<ul>\n<li>sun公司主推的B/S架构</li>\n<li>基于Java语言的 (所有的大公司，或者一些开源的组件，都是用Java写的)</li>\n<li>可以承载三高问题带来的影响；</li>\n<li>语法像ASP ， ASP–&gt;JSP , 加强市场强度；</li>\n</ul>\n<h3 id=\"2-2、web服务器\"><a href=\"#2-2、web服务器\" class=\"headerlink\" title=\"2.2、web服务器\"></a>2.2、web服务器</h3><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息；</p>\n<p><strong>==IIS==</strong></p>\n<p>微软的； ASP…,Windows中自带的</p>\n<p>==<strong>Tomcat</strong>==</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567824446428.png\" alt=\"1567824446428\"></p>\n<p>面向百度编程；</p>\n<p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且<strong>免费</strong>，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p>\n<p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href=\"https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8\">服务器</a>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个Java初学web的人来说，它是最佳的选择</p>\n<p>Tomcat 实际上运行JSP 页面和Servlet。Tomcat最新版本为<strong>9.0。</strong></p>\n<p><strong>工作3-5年之后，可以尝试手写Tomcat服务器；</strong></p>\n<p>下载tomcat：</p>\n<ol>\n<li>安装 or  解压</li>\n<li>了解配置文件及目录结构</li>\n<li>这个东西的作用</li>\n</ol>\n<h2 id=\"3、Tomcat\"><a href=\"#3、Tomcat\" class=\"headerlink\" title=\"3、Tomcat\"></a>3、Tomcat</h2><h3 id=\"3-1、-安装tomcat\"><a href=\"#3-1、-安装tomcat\" class=\"headerlink\" title=\"3.1、 安装tomcat\"></a>3.1、 安装tomcat</h3><p>tomcat官网：<a href=\"http://tomcat.apache.org/\">http://tomcat.apache.org/</a></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567825600842.png\" alt=\"1567825600842\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567825627138.png\" alt=\"1567825627138\"></p>\n<h3 id=\"3-2、Tomcat启动和配置\"><a href=\"#3-2、Tomcat启动和配置\" class=\"headerlink\" title=\"3.2、Tomcat启动和配置\"></a>3.2、Tomcat启动和配置</h3><h4 id=\"Tomcat目录作用描述\"><a href=\"#Tomcat目录作用描述\" class=\"headerlink\" title=\"Tomcat目录作用描述\"></a>Tomcat目录作用描述</h4><table>\n<thead>\n<tr>\n<th><strong>目录</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>==<strong>bin</strong>==</td>\n<td>存放各平台下用于启动和停止Tomcat的脚本文件</td>\n</tr>\n<tr>\n<td>==<strong>conf</strong>==</td>\n<td>存放Tomcat各种配置文件，其中最重要的是server.xml和web.xml</td>\n</tr>\n<tr>\n<td>==<strong>lib</strong>==</td>\n<td>存放tomcat服务器所需的jar文件</td>\n</tr>\n<tr>\n<td>==<strong>webapps</strong>==</td>\n<td>Web应用的发布目录</td>\n</tr>\n<tr>\n<td>==<strong>work</strong>==</td>\n<td>Jsp运行时生成的Servlet文件</td>\n</tr>\n<tr>\n<td>==<strong>logs</strong>==</td>\n<td>存放tomcat的日志文件</td>\n</tr>\n<tr>\n<td>==<strong>temp</strong>==</td>\n<td>Tomcat运行时存放临时文件</td>\n</tr>\n</tbody></table>\n<p>文件夹作用：</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567825763180.png\" alt=\"1567825763180\"></p>\n<p><strong>启动。关闭Tomcat</strong></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567825840657.png\" alt=\"1567825840657\"></p>\n<p>访问测试：<a href=\"http://localhost:8080/\">http://localhost:8080/</a></p>\n<p>可能遇到的问题：</p>\n<ol>\n<li>Java环境变量没有配置</li>\n<li>闪退问题：需要配置兼容性</li>\n<li>乱码问题：配置文件中设置</li>\n</ol>\n<h3 id=\"3-3、配置\"><a href=\"#3-3、配置\" class=\"headerlink\" title=\"3.3、配置\"></a>3.3、配置</h3><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567825967256.png\" alt=\"1567825967256\"></p>\n<p>可以配置启动的端口号</p>\n<ul>\n<li>tomcat的默认端口号为：8080</li>\n<li>mysql：3306</li>\n<li>http：80</li>\n<li>https：443</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;8081&quot;</span> <span class=\"attr\">protocol</span>=<span class=\"string\">&quot;HTTP/1.1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">&quot;20000&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">redirectPort</span>=<span class=\"string\">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以配置主机的名称</p>\n<ul>\n<li>默认的主机名为：localhost-&gt;127.0.0.1</li>\n<li>默认网站应用存放的位置为：webapps</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Host</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;www.qinjiang.com&quot;</span>  <span class=\"attr\">appBase</span>=<span class=\"string\">&quot;webapps&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">unpackWARs</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">autoDeploy</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"高难度面试题\"><a href=\"#高难度面试题\" class=\"headerlink\" title=\"高难度面试题\"></a>高难度面试题</h4><p>请你谈谈网站是如何进行访问的！</p>\n<ol>\n<li><p>输入一个域名；回车</p>\n</li>\n<li><p>检查本机的 C:\\Windows\\System32\\drivers\\etc\\hosts配置文件下有没有这个域名映射；</p>\n<ol>\n<li><p>有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>       www.qinjiang.com</span><br></pre></td></tr></table></figure></li>\n<li><p>没有：去DNS服务器找，找到的话就返回，找不到就返回找不到；</p>\n</li>\n</ol>\n<img src=\"/狂神web/1567827057913.png\" alt=\"1567827057913\" style=\"zoom: 67%;\" /></li>\n<li><p>可以配置一下环境变量（可选性）</p>\n</li>\n</ol>\n<h3 id=\"3-4、发布一个web网站\"><a href=\"#3-4、发布一个web网站\" class=\"headerlink\" title=\"3.4、发布一个web网站\"></a>3.4、发布一个web网站</h3><p>不会就先模仿</p>\n<ul>\n<li>将自己写的网站，放到服务器(Tomcat)中指定的web应用的文件夹（webapps）下，就可以访问了</li>\n</ul>\n<p>网站应该有的结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--webapps ：Tomcat服务器的web目录</span><br><span class=\"line\">\t-ROOT</span><br><span class=\"line\">\t-kuangstudy ：网站的目录名</span><br><span class=\"line\">\t\t- WEB-INF</span><br><span class=\"line\">\t\t\t-classes : java程序</span><br><span class=\"line\">\t\t\t-lib：web应用所依赖的jar包</span><br><span class=\"line\">\t\t\t-web.xml ：网站配置文件</span><br><span class=\"line\">\t\t- index.html 默认的首页</span><br><span class=\"line\">\t\t- <span class=\"keyword\">static</span> </span><br><span class=\"line\">            -css</span><br><span class=\"line\">            \t-style.css</span><br><span class=\"line\">            -js</span><br><span class=\"line\">            -img</span><br><span class=\"line\">         -.....</span><br></pre></td></tr></table></figure>\n\n\n\n<p>HTTP协议 ： 面试</p>\n<p>Maven：构建工具</p>\n<ul>\n<li>Maven安装包</li>\n</ul>\n<p>Servlet 入门</p>\n<ul>\n<li>HelloWorld！</li>\n<li>Servlet配置</li>\n<li>原理</li>\n</ul>\n<h2 id=\"4、Http\"><a href=\"#4、Http\" class=\"headerlink\" title=\"4、Http\"></a>4、Http</h2><h3 id=\"4-1、什么是HTTP\"><a href=\"#4-1、什么是HTTP\" class=\"headerlink\" title=\"4.1、什么是HTTP\"></a>4.1、什么是HTTP</h3><p>HTTP（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。</p>\n<ul>\n<li>文本：html，字符串，~ ….</li>\n<li>超文本：图片，音乐，视频，定位，地图…….</li>\n<li>80</li>\n</ul>\n<p>Https：安全的</p>\n<ul>\n<li>443</li>\n</ul>\n<h3 id=\"4-2、两个时代\"><a href=\"#4-2、两个时代\" class=\"headerlink\" title=\"4.2、两个时代\"></a>4.2、两个时代</h3><ul>\n<li><p>http1.0</p>\n<ul>\n<li>HTTP/1.0：客户端可以与web服务器连接后，只能获得一个web资源，断开连接</li>\n<li>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。</li>\n</ul>\n</li>\n<li><p>http2.0</p>\n<ul>\n<li>HTTP/1.1：客户端可以与web服务器连接后，可以获得多个web资源。</li>\n</ul>\n</li>\n<li><p>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p>\n</li>\n</ul>\n<h3 id=\"4-3、Http请求\"><a href=\"#4-3、Http请求\" class=\"headerlink\" title=\"4.3、Http请求\"></a>4.3、Http请求</h3><h5 id=\"HTTP请求方式\"><a href=\"#HTTP请求方式\" class=\"headerlink\" title=\"HTTP请求方式\"></a>HTTP请求方式</h5><ul>\n<li><p>HTTP请求是指从客户端到服务器端的请求消息。</p>\n</li>\n<li><p>包括：消息首行中，对资源的请求方法、资源的标识符及使用的协议。</p>\n</li>\n<li><p>根据HTTP标准，HTTP请求可以使用多种请求方法。 </p>\n</li>\n<li><p>==客户端—发请求（Request）—服务器==</p>\n</li>\n</ul>\n<p>百度：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Request URL:https:<span class=\"comment\">//www.baidu.com/   请求地址</span></span><br><span class=\"line\">Request Method:GET    get方法/post方法</span><br><span class=\"line\">Status Code:<span class=\"number\">200</span> OK    状态码：<span class=\"number\">200</span></span><br><span class=\"line\">Remote（远程） Address:<span class=\"number\">14.215</span><span class=\"number\">.177</span><span class=\"number\">.39</span>:<span class=\"number\">443</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept:text/html  </span><br><span class=\"line\">Accept-Encoding:gzip, deflate, br</span><br><span class=\"line\">Accept-Language:zh-CN,zh;q=<span class=\"number\">0.9</span>    语言</span><br><span class=\"line\">Cache-Control:max-age=<span class=\"number\">0</span></span><br><span class=\"line\">Connection:keep-alive</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1、请求行\"><a href=\"#1、请求行\" class=\"headerlink\" title=\"1、请求行\"></a>1、请求行</h4><ul>\n<li><p>请求行中的请求方式：GET</p>\n</li>\n<li><p>请求方式：<strong>Get，Post</strong>，HEAD,DELETE,PUT,TRACT…</p>\n<ul>\n<li><p>get：</p>\n<ul>\n<li>请求能够携带的参数比较少，大小==有限制==，会在浏览器的URL地址栏显示数据内容，==不安全，但高效==</li>\n<li>GET是最简单的HTTP方法，</li>\n<li>其主要任务就是要求服务器获得一个资源并把资源发回来，</li>\n<li>请求参数在请求行中用？号和URL区别开，所以所带的参数有限，显示在浏览器的地址栏中。</li>\n<li>GET请求网址<a href=\"http://localhost:8080/FirstWeb/test?userName=Jack&amp;age=20\">http://localhost:8080/FirstWeb/test?userName=Jack&amp;age=20</a></li>\n<li>GET 请求可被缓存</li>\n<li>GET 请求有长度限制</li>\n</ul>\n</li>\n<li><p>post：</p>\n<ul>\n<li>请求能够携带的参数没有限制，大小==没有限制==，不会在浏览器的URL地址栏显示数据内容，==安全，但不高效。==</li>\n<li>POST是一种更强大的请求，在请求的同时向服务器发送一些==表单==数据还有==二进制==数据，</li>\n<li>请求参数放在请求体中，可以传输比较大的请求参数，例如图片、视频等，</li>\n<li>浏览器的地址栏中不显示参数信息。</li>\n<li>POST请求网址 <a href=\"http://localhost:8080/FirstWeb/test\">http://localhost:8080/FirstWeb/test </a></li>\n<li>POST 请求不会被缓存</li>\n<li>POST 请求对数据长度没有要求</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2、消息头\"><a href=\"#2、消息头\" class=\"headerlink\" title=\"2、消息头\"></a>2、消息头</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept：告诉浏览器，它所支持的数据类型</span><br><span class=\"line\">Accept-Encoding：支持哪种编码格式  GBK   UTF-<span class=\"number\">8</span>   GB2312  ISO8859-<span class=\"number\">1</span></span><br><span class=\"line\">Accept-Language：告诉浏览器，它的语言环境</span><br><span class=\"line\">Cache-Control：缓存控制</span><br><span class=\"line\">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class=\"line\">HOST：主机..../.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4、Http响应\"><a href=\"#4-4、Http响应\" class=\"headerlink\" title=\"4.4、Http响应\"></a>4.4、Http响应</h3><ul>\n<li>服务器—响应—–客户端</li>\n</ul>\n<p>百度：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache-Control:<span class=\"keyword\">private</span>    缓存控制Connection:Keep-Alive    连接Content-Encoding:gzip    编码Content-Type:text/html   类型</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-响应体\"><a href=\"#1-响应体\" class=\"headerlink\" title=\"1.响应体\"></a>1.响应体</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept：告诉浏览器，它所支持的数据类型Accept-Encoding：支持哪种编码格式  GBK   UTF-<span class=\"number\">8</span>   GB2312  ISO8859-1Accept-Language：告诉浏览器，它的语言环境Cache-Control：缓存控制Connection：告诉浏览器，请求完成是断开还是保持连接HOST：主机..../.Refresh：告诉客户端，多久刷新一次；Location：让网页重新定位；</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-响应状态码\"><a href=\"#2-响应状态码\" class=\"headerlink\" title=\"2.响应状态码\"></a>2.响应状态码</h4><p>200：请求响应成功  200</p>\n<p>3xx：请求重定向 </p>\n<ul>\n<li>重定向：你重新到我给你新位置去；</li>\n</ul>\n<p>4xx：找不到资源   404</p>\n<ul>\n<li>资源不存在；</li>\n</ul>\n<p>5xx：服务器代码错误   500       502:网关错误</p>\n<h4 id=\"常见面试题\"><a href=\"#常见面试题\" class=\"headerlink\" title=\"常见面试题\"></a>常见面试题</h4><p>当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</p>\n<h2 id=\"5、Maven\"><a href=\"#5、Maven\" class=\"headerlink\" title=\"5、Maven\"></a>5、Maven</h2><p><strong>我为什么要学习这个技术？</strong></p>\n<ol>\n<li><p>在Javaweb开发中，需要使用大量的jar包，我们手动去导入；</p>\n</li>\n<li><p>如何能够让一个东西自动帮我导入和配置这个jar包。</p>\n<p>由此，Maven诞生了！</p>\n</li>\n</ol>\n<h3 id=\"5-1-Maven项目架构管理工具\"><a href=\"#5-1-Maven项目架构管理工具\" class=\"headerlink\" title=\"5.1 Maven项目架构管理工具\"></a>5.1 Maven项目架构管理工具</h3><p>我们目前用来就是方便导入jar包的！</p>\n<p>Maven的核心思想：<strong>约定大于配置</strong></p>\n<ul>\n<li>有约束，不要去违反。</li>\n</ul>\n<p>Maven会规定好你该如何去编写我们的Java代码，必须要按照这个规范来；</p>\n<h3 id=\"5-2-下载安装Maven\"><a href=\"#5-2-下载安装Maven\" class=\"headerlink\" title=\"5.2 下载安装Maven\"></a>5.2 下载安装Maven</h3><p>官网;<a href=\"https://maven.apache.org/\">https://maven.apache.org/</a></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567842350606.png\" alt=\"1567842350606\"></p>\n<p>下载完成后，解压即可；</p>\n<p>小狂神友情建议：电脑上的所有环境都放在一个文件夹下，方便管理；</p>\n<h3 id=\"5-3-配置环境变量\"><a href=\"#5-3-配置环境变量\" class=\"headerlink\" title=\"5.3 配置环境变量\"></a>5.3 配置环境变量</h3><p>在我们的系统环境变量中</p>\n<p>配置如下配置：</p>\n<ul>\n<li>M2_HOME     maven目录下的bin目录</li>\n<li>MAVEN_HOME      maven的目录</li>\n<li>在系统的path中配置  %MAVEN_HOME%\\bin</li>\n</ul>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567842882993.png\" alt=\"1567842882993\"></p>\n<p>测试Maven是否安装成功，保证必须配置完毕！</p>\n<h3 id=\"5-4-阿里云镜像\"><a href=\"#5-4-阿里云镜像\" class=\"headerlink\" title=\"5.4 阿里云镜像\"></a>5.4 阿里云镜像</h3><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567844609399.png\" alt=\"1567844609399\"></p>\n<ul>\n<li>镜像：mirrors<ul>\n<li>作用：加速我们的下载</li>\n</ul>\n</li>\n<li>国内建议使用阿里云的镜像</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span>      <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span>      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus aliyun<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>      <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-5-本地仓库\"><a href=\"#5-5-本地仓库\" class=\"headerlink\" title=\"5.5 本地仓库\"></a>5.5 本地仓库</h3><p>在本地的仓库，远程仓库；</p>\n<p><strong>建立一个本地仓库：</strong>localRepository</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">localRepository</span>&gt;</span>D:\\Environment\\apache-maven-3.6.2\\maven-repo<span class=\"tag\">&lt;/<span class=\"name\">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-6、在IDEA中使用Maven\"><a href=\"#5-6、在IDEA中使用Maven\" class=\"headerlink\" title=\"5.6、在IDEA中使用Maven\"></a>5.6、在IDEA中使用Maven</h3><ol>\n<li><p>启动IDEA</p>\n</li>\n<li><p>创建一个MavenWeb项目</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567844785602.png\" alt=\"1567844785602\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567844841172.png\" alt=\"1567844841172\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567844917185.png\" alt=\"1567844917185\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567844956177.png\" alt=\"1567844956177\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567845029864.png\" alt=\"1567845029864\"></p>\n</li>\n<li><p>等待项目初始化完毕</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567845105970.png\" alt=\"1567845105970\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567845137978.png\" alt=\"1567845137978\"></p>\n</li>\n<li><p>观察maven仓库中多了什么东西？</p>\n</li>\n<li><p>IDEA中的Maven设置</p>\n<p>注意：IDEA项目创建成功后，看一眼Maven的配置</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567845341956.png\" alt=\"1567845341956\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567845413672.png\" alt=\"1567845413672\"></p>\n</li>\n<li><p>到这里，Maven在IDEA中的配置和使用就OK了!</p>\n</li>\n</ol>\n<h3 id=\"5-7、创建一个普通的Maven项目\"><a href=\"#5-7、创建一个普通的Maven项目\" class=\"headerlink\" title=\"5.7、创建一个普通的Maven项目\"></a>5.7、创建一个普通的Maven项目</h3><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567845557744.png\" alt=\"1567845557744\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567845717377.png\" alt=\"1567845717377\"></p>\n<p>这个只有在Web应用下才会有！</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567845782034.png\" alt=\"1567845782034\"></p>\n<h3 id=\"5-8-标记文件夹功能\"><a href=\"#5-8-标记文件夹功能\" class=\"headerlink\" title=\"5.8 标记文件夹功能\"></a>5.8 标记文件夹功能</h3><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567845910728.png\" alt=\"1567845910728\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567845957139.png\" alt=\"1567845957139\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567846034906.png\" alt=\"1567846034906\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567846073511.png\" alt=\"1567846073511\"></p>\n<h3 id=\"5-9-在-IDEA中配置Tomcat\"><a href=\"#5-9-在-IDEA中配置Tomcat\" class=\"headerlink\" title=\"5.9 在 IDEA中配置Tomcat\"></a>5.9 在 IDEA中配置Tomcat</h3><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567846140348.png\" alt=\"1567846140348\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567846179573.png\" alt=\"1567846179573\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567846234175.png\" alt=\"1567846234175\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567846369751.png\" alt=\"1567846369751\"></p>\n<p>解决警告问题</p>\n<p>必须要的配置：<strong>为什么会有这个问题：我们访问一个网站，需要指定一个文件夹名字；</strong></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567846421963.png\" alt=\"1567846421963\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567846546465.png\" alt=\"1567846546465\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567846559111.png\" alt=\"1567846559111\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567846640372.png\" alt=\"1567846640372\"></p>\n<h3 id=\"5-10-pom文件\"><a href=\"#5-10-pom文件\" class=\"headerlink\" title=\"5.10 pom文件\"></a>5.10 pom文件</h3><p>pom.xml 是Maven的核心配置文件</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567846784849.png\" alt=\"1567846784849\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--Maven版本和头文件--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--这里就是我们刚才配置的GAV--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.kuang<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javaweb-01-maven<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--Package：项目的打包方式</span></span><br><span class=\"line\"><span class=\"comment\">  jar：java应用</span></span><br><span class=\"line\"><span class=\"comment\">  war：JavaWeb应用</span></span><br><span class=\"line\"><span class=\"comment\">  --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--配置--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--项目的默认构建编码--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--编码版本--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--项目依赖--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--具体依赖的jar包配置文件--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--项目构建用的东西--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>javaweb-01-maven<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pluginManagement</span>&gt;</span><span class=\"comment\">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-clean-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-resources-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-surefire-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.22.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-war-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-install-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-deploy-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">pluginManagement</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567847410771.png\" alt=\"1567847410771\"></p>\n<p>maven由于他的约定大于配置，我们之后可以能遇到我们写的配置文件，无法被导出或者生效的问题，解决方案：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span>                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span>                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span>            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span>        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span>                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span>                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span>            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span>        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5-12-IDEA操作\"><a href=\"#5-12-IDEA操作\" class=\"headerlink\" title=\"5.12 IDEA操作\"></a>5.12 IDEA操作</h3><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567847630808.png\" alt=\"1567847630808\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567847662429.png\" alt=\"1567847662429\"></p>\n<h3 id=\"5-13-解决遇到的问题\"><a href=\"#5-13-解决遇到的问题\" class=\"headerlink\" title=\"5.13 解决遇到的问题\"></a>5.13 解决遇到的问题</h3><ol>\n<li><p>Maven 3.6.2</p>\n<p>解决方法：降级为3.6.1</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567904721301.png\" alt=\"1567904721301\"></p>\n</li>\n<li><p>Tomcat闪退</p>\n</li>\n<li><p>IDEA中每次都要重复配置Maven<br>在IDEA中的全局默认配置中去配置</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567905247201.png\" alt=\"1567905247201\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567905291002.png\" alt=\"1567905291002\"></p>\n</li>\n<li><p>Maven项目中Tomcat无法配置</p>\n</li>\n<li><p>maven默认web项目中的web.xml版本问题</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567905537026.png\" alt=\"1567905537026\"></p>\n</li>\n<li><p>替换为webapp4.0版本和tomcat一致</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span>         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span>         <span class=\"attr\">version</span>=<span class=\"string\">&quot;4.0&quot;</span>         <span class=\"attr\">metadata-complete</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>Maven仓库的使用</p>\n<p>地址：<a href=\"https://mvnrepository.com/\">https://mvnrepository.com/</a></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567905870750.png\" alt=\"1567905870750\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567905982979.png\" alt=\"1567905982979\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567906017448.png\" alt=\"1567906017448\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567906039469.png\" alt=\"1567906039469\"></p>\n</li>\n</ol>\n<h2 id=\"6、Servlet\"><a href=\"#6、Servlet\" class=\"headerlink\" title=\"6、Servlet\"></a>6、Servlet</h2><h3 id=\"6-1、Servlet简介\"><a href=\"#6-1、Servlet简介\" class=\"headerlink\" title=\"6.1、Servlet简介\"></a>6.1、Servlet简介</h3><ul>\n<li><p>Servlet就是sun公司开发动态web的一门技术</p>\n</li>\n<li><p>Sun在这些API中提供一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤：</p>\n<ul>\n<li>编写一个类，实现Servlet接口</li>\n<li>把开发好的Java类部署到web服务器中。</li>\n</ul>\n</li>\n<li><p><strong>把实现了Servlet接口的Java程序叫做，Servlet</strong></p>\n</li>\n<li></li>\n</ul>\n<h3 id=\"6-2、HelloServlet\"><a href=\"#6-2、HelloServlet\" class=\"headerlink\" title=\"6.2、HelloServlet\"></a>6.2、HelloServlet</h3><h4 id=\"1-Servlet入门\"><a href=\"#1-Servlet入门\" class=\"headerlink\" title=\"1 Servlet入门\"></a>1 Servlet入门</h4><ul>\n<li><p>Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器，用Java编写的服务器端程序，具有独立于平台和协议的特性，主要功能在于交互式地浏览和生成数据，生成动态Web内容。</p>\n</li>\n<li><p>狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。Servlet运行于支持Java的应用服务器中。</p>\n</li>\n<li><p>Servlet 的主要功能在于交互式地浏览和修改数据，生成动态 Web 内容。</p>\n</li>\n<li><p>这个==过程==为：</p>\n<p>1、客户端发送请求至服务器端；</p>\n<p>2、服务器将请求信息发送至 Servlet；</p>\n<p>3、Servlet 生成响应内容并将其传给服务器。响应内容动态生成，通常取决于客户端的请求；</p>\n<p>4、服务器将响应返回给客户端。</p>\n</li>\n<li><p>Serlvet接口Sun公司有两个默认的实现类：HttpServlet，GenericServlet</p>\n</li>\n<li><p>配置web.xml</p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注册一个Servlet --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span>   <span class=\"comment\">&lt;!-- Servlet标识名 --&gt;</span>   <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>   <span class=\"comment\">&lt;!-- Servlet类的全限定名 --&gt;</span>   <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.aaa.servlet.HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span><span class=\"comment\">&lt;!-- 配置Servlet映射信息 --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>   <span class=\"comment\">&lt;!-- Servlet标识名和上面一致 --&gt;</span>   <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>   <span class=\"comment\">&lt;!-- 访问路径 --&gt;</span>   <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li><p>构建一个普通的Maven项目，删掉里面的src目录，以后我们的学习就在这个项目里面建立Moudel；这个空的工程就是Maven主工程；</p>\n</li>\n<li><p>关于Maven父子工程的理解：</p>\n<p>父项目中会有</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>servlet-01<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>子项目会有</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javaweb-02-servlet<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.kuang<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>父项目中的java子项目可以直接使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">son extends father</span><br></pre></td></tr></table></figure></li>\n<li><p>Maven环境优化</p>\n<ol>\n<li>修改web.xml为最新的</li>\n<li>将maven的结构搭建完整</li>\n</ol>\n</li>\n<li><p>编写一个Servlet程序</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567911804700.png\" alt=\"1567911804700\"></p>\n<ol>\n<li><p>编写一个普通类</p>\n</li>\n<li><p>实现Servlet接口，这里我们直接继承HttpServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;        <span class=\"comment\">//由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样；    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        //ServletOutputStream outputStream = resp.getOutputStream();        PrintWriter writer = resp.getWriter(); //响应流        writer.print(&quot;Hello,Serlvet&quot;);    &#125;    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        doGet(req, resp);    &#125;&#125;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>编写Servlet的映射</p>\n<p>为什么需要映射：我们写的是JAVA程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要再web服务中注册我们写的Servlet，还需给他一个浏览器能够访问的路径；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--注册Servlet--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--Servlet的请求路径--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure></li>\n<li><p>配置Tomcat</p>\n<p>注意：配置项目发布的路径就可以了</p>\n</li>\n<li><p>启动测试，OK！</p>\n</li>\n</ol>\n<h4 id=\"2-ServletAPI层次结构\"><a href=\"#2-ServletAPI层次结构\" class=\"headerlink\" title=\"2 ServletAPI层次结构\"></a>2 ServletAPI层次结构</h4><p><strong>核心技能部分</strong></p>\n<pre><code> ![222](/狂神web//clip_image001.png)\n\n   ![Serv et  Servi  Serv IetCmf i g  -se rServIe &#39;Cca rex : O  HttpServ1et  service Cin EttpServletReque;t. ia  et (/狂神web//clip_image001-1583302830910.jpg) ](file:///C:/Users/YANKUN~1/AppData/Local/Temp/msohtmlclip1/01/clip_image001.jpg)  \n</code></pre>\n<p><strong>Servlet原理</strong></p>\n<h5 id=\"Servlet接口\"><a href=\"#Servlet接口\" class=\"headerlink\" title=\"Servlet接口\"></a>Servlet接口</h5><ul>\n<li>Servlet接口定义了所有 Servlet需要实现的方法， 包括==init()，service()，destroy ()==方法， 以及getServletConfig()方法（返回ServletConfig对象，通过该对象可以得到Servlet的配置信息）。</li>\n</ul>\n<h5 id=\"ServletConfig接口\"><a href=\"#ServletConfig接口\" class=\"headerlink\" title=\"ServletConfig接口\"></a>ServletConfig接口</h5><ul>\n<li><p>在Servlet初始化时，Servlet容器会使用ServletConfig对象向该Servlet传递信息。</p>\n</li>\n<li><p><strong>ServletConfig的常用方法</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>功能说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>String  getInitParameter(String name)</td>\n<td>获取web.xml中名称为name的初始化参数值</td>\n</tr>\n<tr>\n<td>ServletContext  getServletContext()</td>\n<td>返回Servlet上下文对象</td>\n</tr>\n</tbody></table>\n<h5 id=\"GenericServlet类\"><a href=\"#GenericServlet类\" class=\"headerlink\" title=\"GenericServlet类\"></a>GenericServlet类</h5><ul>\n<li><p>抽象类 GenericServlet实现了Servlet接口和ServletConfig接口，简单实现除 service()方法外的其它方法，它定义了通用的，不依赖于协议的Servlet规范。 GenericServlet类的常用方法如表2.2.3所示。</p>\n</li>\n<li><p><strong>GenericServlet类的常用方法</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>功能说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>void  init(ServletConfig config)</td>\n<td>初始化方法</td>\n</tr>\n<tr>\n<td>String  getInitParameter(String name)</td>\n<td>返回名称为name的初始化参数值</td>\n</tr>\n<tr>\n<td>ServletContext  getServletCotext()</td>\n<td>返回ServletContext对象</td>\n</tr>\n</tbody></table>\n<h5 id=\"HttpServlet类\"><a href=\"#HttpServlet类\" class=\"headerlink\" title=\"HttpServlet类\"></a>HttpServlet类</h5><ul>\n<li><p>抽象类HttpServlet继承自GenericServlet类，专门用来处理HTTP请求，并提供了与HTTP相关的实现方法。根据HTTP协议的特点， HttpServlet分别提供了处理请求的相应方法，如表2.2.4所示。</p>\n</li>\n<li><p><strong>HttpServlet类的常用方法</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>功能说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>void ==service==  (ServletRequest reg, ServletResponse res)</td>\n<td>接收客户端请求，然后把请求分发给相应的doXX方法，如果是GET请求就分发给doGet()方法，如果是POST请求就分发给doPost()方法。</td>\n</tr>\n<tr>\n<td>void  ==doGet==(HttpServletRequest reg, HttpServletResponse res)</td>\n<td>处理GET请求</td>\n</tr>\n<tr>\n<td>void  ==doPost==(HttpServletRequest reg, HttpServletResponse res)</td>\n<td>处理POST请求</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>如果要自己要编写Servlet程序， 都是继承HttpServlet类， 然后重写其中的某些方法， 使用原则如下：</p>\n<p>(1) 重写doGet方法来处理GET请求。</p>\n<p>(2) 重写doPost方法来处理POST请求。</p>\n<p>(3) 如果需要在Servlet实例化中进行初始化工作，可以重写init()方法。</p>\n<p>(4) 如果需要在 Servlet被释放时进行资源清理的工作，可以重写destroy()方法。</p>\n</li>\n<li><p><strong>提示：</strong></p>\n<ul>\n<li>HTTP 请求主要就 get 和 post两种， 为了让 servlet两种请求都能处理，一般doGet ()和doPost()方法都重写，而处理代码只写在一个方法中，另外一个方法调用即可。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"HttpServletRequest接口\"><a href=\"#HttpServletRequest接口\" class=\"headerlink\" title=\"HttpServletRequest接口\"></a>HttpServletRequest接口</h5><ul>\n<li><p>HttpServletRequest接口继承自ServletRequest接口，它代表客户的请求。</p>\n</li>\n<li><p>容器在调用Servlet的doGet()和doPost()方法时，会创建一个HttpServletRequest接口的实例，作为参数传给doGet()或doPost()方法。</p>\n</li>\n<li><p><strong>HttpServleRequest 接口的常用方法</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>功能说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>String  ==getParameter==(String name)</td>\n<td>根据页面表单元素名称获取页面提交数据</td>\n</tr>\n<tr>\n<td>string[]  ==getPararneterValues== (String name)</td>\n<td>获取页面有重名表单元素（比如复选框）的值</td>\n</tr>\n<tr>\n<td>void  ==setCharacterEncoding== (String name)</td>\n<td>设置请求的编码，在调用getParameter()方法  前进行设置，此方法可以解决提供中文数据乱码问题。</td>\n</tr>\n<tr>\n<td>void  ==setAttribute==(String name,Object value)</td>\n<td>设置请求的参数</td>\n</tr>\n<tr>\n<td>==getRequestDispatcher==(String  path)</td>\n<td>返回一个RequestDispatcher对象，该对象的  forward方法可以把请求转发到指定资源</td>\n</tr>\n</tbody></table>\n<h5 id=\"HttpServletResponse接口\"><a href=\"#HttpServletResponse接口\" class=\"headerlink\" title=\"HttpServletResponse接口\"></a>HttpServletResponse接口</h5><ul>\n<li><p>HttpServletResponse接口继承自ServletResponse接口，它代表向客户端发送的响应。</p>\n</li>\n<li><p>容器在调用Servlet的doGet()和doPost()方法时，同样会创建一个 HttpServletResponse接口的实例，作为参数传给doGet()或doPost()方法。</p>\n</li>\n<li><p>Servlet利用HttpServletRequest对象获取客户端的请求数据，经过处理后由 HttpServletResponse对象发送响应数据。</p>\n</li>\n<li><p><strong>HttpServleRequest 接口的常用方法</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>功能说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>setContentType(“text/html;charset=utf-8”);</td>\n<td>设置响应的内容类型</td>\n</tr>\n<tr>\n<td>PrintWriter  response.getWriter()</td>\n<td>获得响应的输出流</td>\n</tr>\n<tr>\n<td>response.sendRedirect(redirect)</td>\n<td>重定向到指定的网址</td>\n</tr>\n</tbody></table>\n<h5 id=\"转发与重定向\"><a href=\"#转发与重定向\" class=\"headerlink\" title=\"转发与重定向\"></a>转发与重定向</h5><p><strong>1 转发</strong></p>\n<ul>\n<li><p>转发属于<strong>服务器跳转</strong>。当使用转发时，JSP容器将使用一个内部的方法来调用目标页面，新的页面继续处理同一个请求，而浏览器将不会知道这个过程。</p>\n</li>\n<li><p>整个过程都是在一个Web容器内完成，因而可以共享request范围内的数据。</p>\n</li>\n<li><p>而对应到客户端，不管服务器内部如何处理，作为浏览器都只是提交了一个请求，因而客户端的URL地址不会发生改变。</p>\n</li>\n<li><p>转发的作用：在多个页面交互过程中实现请求数据的共享。</p>\n</li>\n<li><p>实现转发分为两个步骤：</p>\n<p>1、 需要先获取RequestDispatcher实例</p>\n<p>dispatcher=request.getRequestDispatcher(“servlet2”);</p>\n<p>2、 调用forward方法</p>\n<p>dispatcher.forward(request, response);</p>\n</li>\n</ul>\n<p><strong>2 重定向</strong></p>\n<ul>\n<li><p>重定向是<strong>客户端跳转</strong>。</p>\n</li>\n<li><p>重定向方式的含义是第一个页面通知浏览器发送一个新的页面请求。</p>\n</li>\n<li><p>因为，当你使用重定向时，浏览器中所显示的URL会变成新页面的URL。</p>\n</li>\n<li><p>同时，由于重定向方式产生了一个新的请求，所以经过一次重定向后，request内的对象将无法使用。</p>\n</li>\n<li><p>重定向需要使用HttpServletResponse对象的==sendRedirect==()方法实现</p>\n</li>\n</ul>\n<p><strong>3 转发与重定向的区别</strong></p>\n<ul>\n<li><p>转发是继续传递、处理==同一个请求==，在==服务器端==进行；</p>\n<ul>\n<li>重定向在==客户端==运行，会产生==新请求==。</li>\n</ul>\n</li>\n<li><p>转发时浏览器地址栏中显示的是==初次发出请求的地址==；</p>\n<ul>\n<li>重定向时浏览器地址栏中==不再是初次==请求的地址，而是==最后响应==的那个地址。</li>\n</ul>\n</li>\n<li><p>转发时最终的servlet中，request对象和中转的那个request对象是==同一个==；</p>\n<ul>\n<li>重定向最终的servlet中，request对象和中转的那个request对象==不是同一个==。</li>\n</ul>\n</li>\n<li><p>转发只能转发给==当前web应用==的资源； </p>\n<ul>\n<li>重定可以重定向到==任何==资源。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"Servlet应用\"><a href=\"#Servlet应用\" class=\"headerlink\" title=\"Servlet应用\"></a>Servlet应用</h5><p><strong>使用Servlet处理客户端请求</strong> </p>\n<p>前面学习了Servlet的主要作用就是接受客户端请求并返回响应，接下来就通过一个用户登陆功能示例， 学习使用Servlet处理客户端请求,</p>\n<p><strong>获得Servlet初始化参数</strong></p>\n<p>通过Servlet的doGet()和doPost()，可以处理客户端请求并获得表单提交的数据。当然我们也可以对Servlet进行初始化设置，在Servlet加载时就对参数进行初始化。设置初 始化参数首先要在web.xml中的<servlet>元素中使用<init-param>元素进行设置，</p>\n<p><strong>Servlet访问数据库</strong></p>\n<p>进一步完善登录代码，需要连接数据库进行用户名和密码的校验，我们需要建立BaseDao(之前所学)、实体类、Dao接口和Dao实现类。</p>\n<h5 id=\"Servlet的生命周期\"><a href=\"#Servlet的生命周期\" class=\"headerlink\" title=\"==Servlet的生命周期==\"></a>==Servlet的生命周期==</h5><p>Servlet部署在容器中，其生命周期由容器来管理，可以概括为以下5个阶段：</p>\n<ol>\n<li>加载</li>\n<li>实例化</li>\n<li>初始化</li>\n<li>服务</li>\n<li>销毁</li>\n</ol>\n<h3 id=\"6-3、Servlet原理\"><a href=\"#6-3、Servlet原理\" class=\"headerlink\" title=\"6.3、Servlet原理\"></a>6.3、Servlet原理</h3><p>Servlet是由Web服务器调用，web服务器在收到浏览器请求之后，会：</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567913793252.png\" alt=\"1567913793252\"></p>\n<h3 id=\"6-4、Mapping问题\"><a href=\"#6-4、Mapping问题\" class=\"headerlink\" title=\"6.4、Mapping问题\"></a>6.4、Mapping问题</h3><ol>\n<li><p>一个Servlet可以指定一个映射路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>一个Servlet可以指定多个映射路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello2<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello3<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello4<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello5<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>一个Servlet可以指定通用映射路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>默认请求路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--默认请求路径--&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>指定一些后缀或者前缀等等….</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--可以自定义后缀实现请求映射    注意点，*前面不能加项目映射的路径    hello/sajdlkajda.qinjiang    --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.qinjiang<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>优先级问题<br>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--404--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>error<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.kuang.servlet.ErrorServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>error<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"6-5、ServletContext\"><a href=\"#6-5、ServletContext\" class=\"headerlink\" title=\"6.5、ServletContext\"></a>6.5、ServletContext</h3><p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用；</p>\n<h4 id=\"1、共享数据\"><a href=\"#1、共享数据\" class=\"headerlink\" title=\"1、共享数据\"></a>1、共享数据</h4><p>我在这个Servlet中保存的数据，可以在另外一个servlet中拿到；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;                <span class=\"comment\">//this.getInitParameter()   初始化参数        //this.getServletConfig()   Servlet配置        //this.getServletContext()  Servlet上下文        ServletContext context = this.getServletContext();        String username = &quot;秦疆&quot;; //数据        context.setAttribute(&quot;username&quot;,username); //将一个数据保存在了ServletContext中，名字为：username 。值 username    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        ServletContext context = <span class=\"keyword\">this</span>.getServletContext();        String username = (String) context.getAttribute(<span class=\"string\">&quot;username&quot;</span>);        resp.setContentType(<span class=\"string\">&quot;text/html&quot;</span>);        resp.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);        resp.getWriter().print(<span class=\"string\">&quot;名字&quot;</span>+username);    &#125;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        doGet(req, resp);    &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>getc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.kuang.servlet.GetServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>getc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/getc<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>测试访问结果；</p>\n<h4 id=\"2、获取初始化参数\"><a href=\"#2、获取初始化参数\" class=\"headerlink\" title=\"2、获取初始化参数\"></a>2、获取初始化参数</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置一些web应用初始化参数--&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>url<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;    ServletContext context = <span class=\"keyword\">this</span>.getServletContext();    String url = context.getInitParameter(<span class=\"string\">&quot;url&quot;</span>);    resp.getWriter().print(url);&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、请求转发\"><a href=\"#3、请求转发\" class=\"headerlink\" title=\"3、请求转发\"></a>3、请求转发</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Overrideprotected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;    ServletContext context = <span class=\"keyword\">this</span>.getServletContext();    System.out.println(<span class=\"string\">&quot;进入了ServletDemo04&quot;</span>);    <span class=\"comment\">//RequestDispatcher requestDispatcher = context.getRequestDispatcher(&quot;/gp&quot;); //转发的请求路径    //requestDispatcher.forward(req,resp); //调用forward实现请求转发；    context.getRequestDispatcher(&quot;/gp&quot;).forward(req,resp);&#125;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/狂神web/1567924457532.png\" alt=\"1567924457532\" style=\"zoom: 80%;\" />\n\n<h4 id=\"4、读取资源文件\"><a href=\"#4、读取资源文件\" class=\"headerlink\" title=\"4、读取资源文件\"></a>4、读取资源文件</h4><p>Properties</p>\n<ul>\n<li>在java目录下新建properties</li>\n<li>在resources目录下新建properties</li>\n</ul>\n<p>发现：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath:</p>\n<p>思路：需要一个文件流；</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">username</span>=<span class=\"string\">root12312password=zxczxczxc</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletDemo05</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        InputStream is = <span class=\"keyword\">this</span>.getServletContext().getResourceAsStream(<span class=\"string\">&quot;/WEB-INF/classes/com/kuang/servlet/aa.properties&quot;</span>);        Properties prop = <span class=\"keyword\">new</span> Properties();        prop.load(is);        String user = prop.getProperty(<span class=\"string\">&quot;username&quot;</span>);        String pwd = prop.getProperty(<span class=\"string\">&quot;password&quot;</span>);        resp.getWriter().print(user+<span class=\"string\">&quot;:&quot;</span>+pwd);    &#125;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        doGet(req, resp);    &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>访问测试即可ok；</p>\n<h3 id=\"6-6、HttpServletResponse\"><a href=\"#6-6、HttpServletResponse\" class=\"headerlink\" title=\"6.6、HttpServletResponse\"></a>6.6、HttpServletResponse</h3><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；</p>\n<ul>\n<li>如果要获取客户端请求过来的参数：找HttpServletRequest</li>\n<li>如果要给客户端响应一些信息：找HttpServletResponse</li>\n</ul>\n<h4 id=\"1、简单分类\"><a href=\"#1、简单分类\" class=\"headerlink\" title=\"1、简单分类\"></a>1、简单分类</h4><p>负责向浏览器发送数据的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ServletOutputStream <span class=\"title\">getOutputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;<span class=\"function\">PrintWriter <span class=\"title\">getWriter</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>\n\n<p>负责向浏览器发送响应头的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setCharacterEncoding</span><span class=\"params\">(String var1)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setContentLength</span><span class=\"params\">(<span class=\"keyword\">int</span> var1)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setContentLengthLong</span><span class=\"params\">(<span class=\"keyword\">long</span> var1)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setContentType</span><span class=\"params\">(String var1)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDateHeader</span><span class=\"params\">(String var1, <span class=\"keyword\">long</span> var2)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addDateHeader</span><span class=\"params\">(String var1, <span class=\"keyword\">long</span> var2)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHeader</span><span class=\"params\">(String var1, String var2)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addHeader</span><span class=\"params\">(String var1, String var2)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setIntHeader</span><span class=\"params\">(String var1, <span class=\"keyword\">int</span> var2)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addIntHeader</span><span class=\"params\">(String var1, <span class=\"keyword\">int</span> var2)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>响应的状态码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> SC_CONTINUE = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_SWITCHING_PROTOCOLS = <span class=\"number\">101</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_OK = <span class=\"number\">200</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_CREATED = <span class=\"number\">201</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_ACCEPTED = <span class=\"number\">202</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NON_AUTHORITATIVE_INFORMATION = <span class=\"number\">203</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NO_CONTENT = <span class=\"number\">204</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_RESET_CONTENT = <span class=\"number\">205</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_PARTIAL_CONTENT = <span class=\"number\">206</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_MULTIPLE_CHOICES = <span class=\"number\">300</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_MOVED_PERMANENTLY = <span class=\"number\">301</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_MOVED_TEMPORARILY = <span class=\"number\">302</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_FOUND = <span class=\"number\">302</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_SEE_OTHER = <span class=\"number\">303</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NOT_MODIFIED = <span class=\"number\">304</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_USE_PROXY = <span class=\"number\">305</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_TEMPORARY_REDIRECT = <span class=\"number\">307</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_BAD_REQUEST = <span class=\"number\">400</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_UNAUTHORIZED = <span class=\"number\">401</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_PAYMENT_REQUIRED = <span class=\"number\">402</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_FORBIDDEN = <span class=\"number\">403</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NOT_FOUND = <span class=\"number\">404</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_METHOD_NOT_ALLOWED = <span class=\"number\">405</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NOT_ACCEPTABLE = <span class=\"number\">406</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_PROXY_AUTHENTICATION_REQUIRED = <span class=\"number\">407</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_REQUEST_TIMEOUT = <span class=\"number\">408</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_CONFLICT = <span class=\"number\">409</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_GONE = <span class=\"number\">410</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_LENGTH_REQUIRED = <span class=\"number\">411</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_PRECONDITION_FAILED = <span class=\"number\">412</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_REQUEST_ENTITY_TOO_LARGE = <span class=\"number\">413</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_REQUEST_URI_TOO_LONG = <span class=\"number\">414</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_UNSUPPORTED_MEDIA_TYPE = <span class=\"number\">415</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE = <span class=\"number\">416</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_EXPECTATION_FAILED = <span class=\"number\">417</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_INTERNAL_SERVER_ERROR = <span class=\"number\">500</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NOT_IMPLEMENTED = <span class=\"number\">501</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_BAD_GATEWAY = <span class=\"number\">502</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_SERVICE_UNAVAILABLE = <span class=\"number\">503</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_GATEWAY_TIMEOUT = <span class=\"number\">504</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_HTTP_VERSION_NOT_SUPPORTED = <span class=\"number\">505</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、下载文件\"><a href=\"#2、下载文件\" class=\"headerlink\" title=\"2、下载文件\"></a>2、下载文件</h4><ol>\n<li>向浏览器输出消息 （一直在讲，就不说了）</li>\n<li>下载文件<ol>\n<li>要获取下载文件的路径</li>\n<li>下载的文件名是啥？</li>\n<li>设置想办法让浏览器能够支持下载我们需要的东西</li>\n<li>获取下载文件的输入流</li>\n<li>创建缓冲区</li>\n<li>获取OutputStream对象</li>\n<li>将FileOutputStream流写入到buffer缓冲区</li>\n<li>使用OutputStream将缓冲区中的数据输出到客户端！</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 要获取下载文件的路径</span></span><br><span class=\"line\">    String realPath = <span class=\"string\">&quot;F:\\\\班级管理\\\\西开【19525】\\\\2、代码\\\\JavaWeb\\\\javaweb-02-servlet\\\\response\\\\target\\\\classes\\\\秦疆.png&quot;</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;下载文件的路径：&quot;</span>+realPath);</span><br><span class=\"line\">    <span class=\"comment\">// 2. 下载的文件名是啥？</span></span><br><span class=\"line\">    String fileName = realPath.substring(realPath.lastIndexOf(<span class=\"string\">&quot;\\\\&quot;</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 3. 设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件名URLEncoder.encode编码，否则有可能乱码</span></span><br><span class=\"line\">    resp.setHeader(<span class=\"string\">&quot;Content-Disposition&quot;</span>,<span class=\"string\">&quot;attachment;filename=&quot;</span>+URLEncoder.encode(fileName,<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 4. 获取下载文件的输入流</span></span><br><span class=\"line\">    FileInputStream in = <span class=\"keyword\">new</span> FileInputStream(realPath);</span><br><span class=\"line\">    <span class=\"comment\">// 5. 创建缓冲区</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 6. 获取OutputStream对象</span></span><br><span class=\"line\">    ServletOutputStream out = resp.getOutputStream();</span><br><span class=\"line\">    <span class=\"comment\">// 7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端！</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((len=in.read(buffer))&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        out.write(buffer,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    in.close();</span><br><span class=\"line\">    out.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、验证码功能\"><a href=\"#3、验证码功能\" class=\"headerlink\" title=\"3、验证码功能\"></a>3、验证码功能</h4><p>验证怎么来的？</p>\n<ul>\n<li>前端实现</li>\n<li>后端实现，需要用到 Java 的图片类，生产一个图片</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.kuang.servlet;<span class=\"keyword\">import</span> javax.imageio.ImageIO;<span class=\"keyword\">import</span> javax.servlet.ServletException;<span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;<span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;<span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;<span class=\"keyword\">import</span> java.awt.*;<span class=\"keyword\">import</span> java.awt.image.BufferedImage;<span class=\"keyword\">import</span> java.io.IOException;<span class=\"keyword\">import</span> java.util.Random;<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        <span class=\"comment\">//如何让浏览器3秒自动刷新一次;        resp.setHeader(&quot;refresh&quot;,&quot;3&quot;);                //在内存中创建一个图片        BufferedImage image = new BufferedImage(80,20,BufferedImage.TYPE_INT_RGB);        //得到图片        Graphics2D g = (Graphics2D) image.getGraphics(); //笔        //设置图片的背景颜色        g.setColor(Color.white);        g.fillRect(0,0,80,20);        //给图片写数据        g.setColor(Color.BLUE);        g.setFont(new Font(null,Font.BOLD,20));        g.drawString(makeNum(),0,20);        //告诉浏览器，这个请求用图片的方式打开        resp.setContentType(&quot;image/jpeg&quot;);        //网站存在缓存，不让浏览器缓存        resp.setDateHeader(&quot;expires&quot;,-1);        resp.setHeader(&quot;Cache-Control&quot;,&quot;no-cache&quot;);        resp.setHeader(&quot;Pragma&quot;,&quot;no-cache&quot;);        //把图片写给浏览器        ImageIO.write(image,&quot;jpg&quot;, resp.getOutputStream());    &#125;    //生成随机数    private String makeNum()&#123;        Random random = new Random();        String num = random.nextInt(9999999) + &quot;&quot;;        StringBuffer sb = new StringBuffer();        for (int i = 0; i &lt; 7-num.length() ; i++) &#123;            sb.append(&quot;0&quot;);        &#125;        num = sb.toString() + num;        return num;    &#125;    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        doGet(req, resp);    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、实现重定向\"><a href=\"#4、实现重定向\" class=\"headerlink\" title=\"4、实现重定向\"></a>4、实现重定向</h4><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567931587955.png\" alt=\"1567931587955\"></p>\n<p>B一个web资源收到客户端A请求后，B他会通知A客户端去访问另外一个web资源C，这个过程叫重定向</p>\n<p>常见场景：</p>\n<ul>\n<li>用户登录</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendRedirect</span><span class=\"params\">(String var1)</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Overrideprotected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;    <span class=\"comment\">/*        resp.setHeader(&quot;Location&quot;,&quot;/r/img&quot;);        resp.setStatus(302);         */</span>    resp.sendRedirect(<span class=\"string\">&quot;/r/img&quot;</span>);<span class=\"comment\">//重定向&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>面试题：请你聊聊重定向和转发的区别？</p>\n<p>相同点</p>\n<ul>\n<li>页面都会实现跳转</li>\n</ul>\n<p>不同点</p>\n<ul>\n<li>请求转发的时候，url不会产生变化</li>\n<li>重定向时候，url地址栏会发生变化；</li>\n</ul>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567932163430.png\" alt=\"1567932163430\"></p>\n<h4 id=\"5、简单实现登录重定向\"><a href=\"#5、简单实现登录重定向\" class=\"headerlink\" title=\"5、简单实现登录重定向\"></a>5、简单实现登录重定向</h4><figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%--这里提交的路径，需要寻找到项目的路径--%&gt;&lt;%--$&#123;pageContext.request.contextPath&#125;代表当前的项目--%&gt;&lt;form action=<span class=\"string\">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class=\"string\">&quot;get&quot;</span>&gt;    用户名：&lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;username&quot;</span>&gt; &lt;br&gt;    密码：&lt;input type=<span class=\"string\">&quot;password&quot;</span> name=<span class=\"string\">&quot;password&quot;</span>&gt; &lt;br&gt;    &lt;input type=<span class=\"string\">&quot;submit&quot;</span>&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        <span class=\"comment\">//处理请求        String username = req.getParameter(&quot;username&quot;);        String password = req.getParameter(&quot;password&quot;);        System.out.println(username+&quot;:&quot;+password);        //重定向时候一定要注意，路径问题，否则404；        resp.sendRedirect(&quot;/r/success.jsp&quot;);    &#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>requset<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.kuang.servlet.RequestTest<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span>  <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span>  <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>requset<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/login<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>  <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Success&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-7、HttpServletRequest\"><a href=\"#6-7、HttpServletRequest\" class=\"headerlink\" title=\"6.7、HttpServletRequest\"></a>6.7、HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息；</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567933996830.png\" alt=\"1567933996830\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567934023106.png\" alt=\"1567934023106\"></p>\n<h4 id=\"获取参数，请求转发\"><a href=\"#获取参数，请求转发\" class=\"headerlink\" title=\"获取参数，请求转发\"></a>获取参数，请求转发</h4><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567934110794.png\" alt=\"1567934110794\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Overrideprotected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;    req.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);    resp.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);    String username = req.getParameter(<span class=\"string\">&quot;username&quot;</span>);    String password = req.getParameter(<span class=\"string\">&quot;password&quot;</span>);    String[] hobbys = req.getParameterValues(<span class=\"string\">&quot;hobbys&quot;</span>);    System.out.println(<span class=\"string\">&quot;=============================&quot;</span>);    <span class=\"comment\">//后台接收中文乱码问题    System.out.println(username);    System.out.println(password);    System.out.println(Arrays.toString(hobbys));    System.out.println(&quot;=============================&quot;);    System.out.println(req.getContextPath());    //通过请求转发    //这里的 / 代表当前的web应用    req.getRequestDispatcher(&quot;/success.jsp&quot;).forward(req,resp);&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>面试题：请你聊聊重定向和转发的区别？</strong></p>\n<p>相同点</p>\n<ul>\n<li>页面都会实现跳转</li>\n</ul>\n<p>不同点</p>\n<ul>\n<li>请求转发的时候，url不会产生变化   307</li>\n<li>重定向时候，url地址栏会发生变化； 302</li>\n</ul>\n<h3 id=\"6-8、处理中文乱码\"><a href=\"#6-8、处理中文乱码\" class=\"headerlink\" title=\"6.8、处理中文乱码\"></a>6.8、处理中文乱码</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注册<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;show.jsp&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span>  <span class=\"tag\">&lt;<span class=\"name\">input</span>  <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>  <span class=\"tag\">&lt;<span class=\"name\">input</span>  <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;注册&quot;</span>&gt;</span>  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span>     &lt;%//脚本段   String name = request.getParameter(&quot;name&quot;);    %&gt;        name:&lt;%=name %&gt;   //表达式     This is my JSP page. <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>//处理中文乱码1.   &lt;%   request.setCharacterEncoding(&quot;UTF-8&quot;);   response.setContentType(&quot;text/html;charset=utf-8&quot;);   String name = request.getParameter(&quot;name&quot;);   %&gt;2.    &lt;%   response.setContentType(&quot;text/html;charset=utf-8&quot;);   String name = request.getParameter(&quot;name&quot;);      name = new String(name.getBytes(&quot;ISO-8859-1&quot;),&quot;utf-8&quot;);    %&gt;        name:&lt;%=name %&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"7、Cookie、Session\"><a href=\"#7、Cookie、Session\" class=\"headerlink\" title=\"7、Cookie、Session\"></a>7、Cookie、Session</h2><h3 id=\"7-1、会话\"><a href=\"#7-1、会话\" class=\"headerlink\" title=\"7.1、会话\"></a>7.1、会话</h3><p><strong>会话</strong>：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；</p>\n<p><strong>有状态会话</strong>：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；</p>\n<p><strong>你能怎么证明你是西开的学生？</strong></p>\n<p>你              西开</p>\n<ol>\n<li>发票                西开给你发票</li>\n<li>学校登记        西开标记你来过了</li>\n</ol>\n<p><strong>一个网站，怎么证明你来过？</strong></p>\n<p>客户端              服务端</p>\n<ol>\n<li>服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了； cookie</li>\n<li>服务器登记你来过了，下次你来的时候我来匹配你； seesion</li>\n</ol>\n<h3 id=\"7-2、保存会话的两种技术\"><a href=\"#7-2、保存会话的两种技术\" class=\"headerlink\" title=\"7.2、保存会话的两种技术\"></a>7.2、保存会话的两种技术</h3><p><strong>cookie</strong></p>\n<ul>\n<li>客户端技术   （响应，请求）</li>\n</ul>\n<p><strong>session</strong></p>\n<ul>\n<li>服务器技术，利用这个技术，可以保存用户的会话信息？ 我们可以把信息或者数据放在Session中！</li>\n</ul>\n<p>常见常见：网站登录之后，你下次不用再登录了，第二次访问直接就上去了！</p>\n<h3 id=\"7-3、Cookie\"><a href=\"#7-3、Cookie\" class=\"headerlink\" title=\"7.3、Cookie\"></a>7.3、Cookie</h3><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568344447291.png\" alt=\"1568344447291\"></p>\n<ol>\n<li>从请求中拿到cookie信息</li>\n<li>服务器响应给客户端cookie</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie[] cookies = req.getCookies(); <span class=\"comment\">//获得Cookiecookie.getName(); //获得cookie中的keycookie.getValue(); //获得cookie中的vlauenew Cookie(&quot;lastLoginTime&quot;, System.currentTimeMillis()+&quot;&quot;); //新建一个cookiecookie.setMaxAge(24*60*60); //设置cookie的有效期resp.addCookie(cookie); //响应给客户端一个cookie</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>cookie：一般会保存在本地的 用户目录下 appdata；</strong></p>\n<p>一个网站cookie是否存在上限！<strong>聊聊细节问题</strong></p>\n<ul>\n<li>一个Cookie只能保存一个信息；</li>\n<li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie；</li>\n<li>Cookie大小有限制4kb；</li>\n<li>300个cookie浏览器上限</li>\n</ul>\n<p><strong>删除Cookie；</strong></p>\n<ul>\n<li>不设置有效期，关闭浏览器，自动失效；</li>\n<li>设置有效期时间为 0 ；</li>\n</ul>\n<p><strong>编码解码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URLEncoder.encode(<span class=\"string\">&quot;秦疆&quot;</span>,<span class=\"string\">&quot;utf-8&quot;</span>)URLDecoder.decode(cookie.getValue(),<span class=\"string\">&quot;UTF-8&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"7-4、Session（重点）\"><a href=\"#7-4、Session（重点）\" class=\"headerlink\" title=\"7.4、Session（重点）\"></a>7.4、Session（重点）</h3><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568344560794.png\" alt=\"1568344560794\"></p>\n<p>什么是Session：</p>\n<ul>\n<li>服务器会给每一个用户（浏览器）创建一个Seesion对象；</li>\n<li>一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在；</li>\n<li>用户登录之后，整个网站它都可以访问！–&gt; 保存用户的信息；保存购物车的信息…..</li>\n</ul>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568342773861.png\" alt=\"1568342773861\"></p>\n<p>Session和cookie的区别：</p>\n<ul>\n<li>Cookie是把用户的数据写给用户的浏览器，浏览器保存 （可以保存多个）</li>\n<li>Session把用户的数据写到用户独占Session中，服务器端保存  （保存重要的信息，减少服务器资源的浪费）</li>\n<li>Session对象由服务创建；</li>\n</ul>\n<p>使用场景：</p>\n<ul>\n<li>保存一个登录用户的信息；</li>\n<li>购物车信息；</li>\n<li>在整个网站中经常会使用的数据，我们将它保存在Session中；</li>\n</ul>\n<p>使用Session：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.kuang.servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.kuang.pojo.Person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SessionDemo01</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//解决乱码问题</span></span><br><span class=\"line\">        req.setCharacterEncoding(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        resp.setCharacterEncoding(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        resp.setContentType(<span class=\"string\">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//得到Session</span></span><br><span class=\"line\">        HttpSession session = req.getSession();</span><br><span class=\"line\">        <span class=\"comment\">//给Session中存东西</span></span><br><span class=\"line\">        session.setAttribute(<span class=\"string\">&quot;name&quot;</span>,<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;秦疆&quot;</span>,<span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"comment\">//获取Session的ID</span></span><br><span class=\"line\">        String sessionId = session.getId();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断Session是不是新创建</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (session.isNew())&#123;</span><br><span class=\"line\">            resp.getWriter().write(<span class=\"string\">&quot;session创建成功,ID:&quot;</span>+sessionId);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resp.getWriter().write(<span class=\"string\">&quot;session以及在服务器中存在了,ID:&quot;</span>+sessionId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Session创建的时候做了什么事情；</span></span><br><span class=\"line\"><span class=\"comment\">//        Cookie cookie = new Cookie(&quot;JSESSIONID&quot;,sessionId);</span></span><br><span class=\"line\"><span class=\"comment\">//        resp.addCookie(cookie);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        doGet(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//得到Session</span></span><br><span class=\"line\">HttpSession session = req.getSession();</span><br><span class=\"line\"></span><br><span class=\"line\">Person person = (Person) session.getAttribute(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(person.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">HttpSession session = req.getSession();</span><br><span class=\"line\">session.removeAttribute(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//手动注销Session</span></span><br><span class=\"line\">session.invalidate();</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>会话自动过期：web.xml配置</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--设置Session默认的失效时间--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">session-config</span>&gt;</span>    <span class=\"comment\">&lt;!--15分钟后Session自动失效，以分钟为单位--&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">session-timeout</span>&gt;</span>15<span class=\"tag\">&lt;/<span class=\"name\">session-timeout</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568344679763.png\" alt=\"1568344679763\"></p>\n<h2 id=\"8、JSP\"><a href=\"#8、JSP\" class=\"headerlink\" title=\"8、JSP\"></a>8、JSP</h2><p>==<strong>静态网页&amp;动态网页</strong>==</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>静态网页</strong></th>\n<th><strong>动态网页</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>组成</td>\n<td>html+js+css</td>\n<td>jsp+html;asp+html;php+html;</td>\n</tr>\n<tr>\n<td>交互</td>\n<td>不可交互</td>\n<td>可交互</td>\n</tr>\n<tr>\n<td>运行方式</td>\n<td>客户端运行</td>\n<td>服务端生成，客户端运行</td>\n</tr>\n<tr>\n<td>数据库</td>\n<td>无数据库连接</td>\n<td>连接数据库</td>\n</tr>\n</tbody></table>\n<h3 id=\"8-1、什么是JSP\"><a href=\"#8-1、什么是JSP\" class=\"headerlink\" title=\"8.1、什么是JSP\"></a>8.1、什么是JSP</h3><ul>\n<li><p>Java Server Pages ： Java服务器端页面，也和Servlet一样，用于动态Web技术！</p>\n</li>\n<li><p><a href=\"http://127.0.0.1:8080/login/index.jsp\">http://127.0.0.1:8080/login/index.jsp</a></p>\n</li>\n<li><p>最大的特点：</p>\n<ul>\n<li>写JSP就像在写HTML</li>\n<li>区别：<ul>\n<li>HTML只给用户提供静态的数据</li>\n<li>JSP页面中可以嵌入JAVA代码，为用户提供动态数据；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>工作原理</strong></p>\n<ul>\n<li><p>客户端请求</p>\n</li>\n<li><p>把 *.jsp 翻译成 *.java </p>\n</li>\n<li><p>编译为 *.class</p>\n</li>\n<li><p>执行生成servlet</p>\n</li>\n<li><p>反馈结果给客户端显示</p>\n<pre><code>第二次访问 有改动 执行上述过程 \n无改动 直接执行\n</code></pre>\n</li>\n<li><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/clip_image001-1583305097106.png\" alt=\"123\"></p>\n</li>\n<li><img src=\"/狂神web/clip_image001-1583305111348.png\" alt=\"112\" style=\"zoom:80%;\" /></li>\n<li><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/clip_image001-1583305154041.png\" alt=\"44\"></p>\n</li>\n<li><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/clip_image001-1583305166669.png\" alt=\"54\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"8-2、JSP原理\"><a href=\"#8-2、JSP原理\" class=\"headerlink\" title=\"8.2、JSP原理\"></a>8.2、JSP原理</h3><p>思路：JSP到底怎么执行的！</p>\n<ul>\n<li><p>代码层面没有任何问题</p>\n</li>\n<li><p>服务器内部工作</p>\n<p>tomcat中有一个work目录；</p>\n<p>IDEA中使用Tomcat的会在IDEA的tomcat中生产一个work目录</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568345873736.png\" alt=\"1568345873736\"></p>\n<p>我电脑的地址：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Administrator\\.IntelliJIdea2018<span class=\"number\">.1</span>\\system\\tomcat\\Unnamed_javaweb-session-cookie\\work\\Catalina\\localhost\\ROOT\\org\\apache\\jsp</span><br></pre></td></tr></table></figure>\n\n<p>发现页面转变成了Java程序！</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568345948307.png\" alt=\"1568345948307\"></p>\n</li>\n</ul>\n<p><strong>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet！</strong></p>\n<p>JSP最终也会被转换成为一个Java类！</p>\n<p><strong>JSP 本质上就是一个Servlet</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化  public void _jspInit() &#123;        &#125;//销毁  public void _jspDestroy() &#123;  &#125;//JSPService  public void _jspService(.HttpServletRequest request,HttpServletResponse response)      </span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>判断请求</p>\n</li>\n<li><p>内置一些对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> javax.servlet.jsp.PageContext pageContext;  <span class=\"comment\">//页面上下文javax.servlet.http.HttpSession session = null;    //sessionfinal javax.servlet.ServletContext application;   //applicationContextfinal javax.servlet.ServletConfig config;         //configjavax.servlet.jsp.JspWriter out = null;           //outfinal java.lang.Object page = this;               //page：当前HttpServletRequest request                        //请求HttpServletResponse response                      //响应</span></span><br></pre></td></tr></table></figure></li>\n<li><p>输出页面前增加的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setContentType(<span class=\"string\">&quot;text/html&quot;</span>);       <span class=\"comment\">//设置响应的页面类型pageContext = _jspxFactory.getPageContext(this, request, response,                                          null, true, 8192, true);_jspx_page_context = pageContext;application = pageContext.getServletContext();config = pageContext.getServletConfig();session = pageContext.getSession();out = pageContext.getOut();_jspx_out = out;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>以上的这些个对象我们可以在JSP页面中直接使用！</p>\n</li>\n</ol>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568347078207.png\" alt=\"1568347078207\"></p>\n<p>在JSP页面中；</p>\n<p>只要是 JAVA代码就会原封不动的输出；</p>\n<p>如果是HTML代码，就会被转换为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out.write(<span class=\"string\">&quot;&lt;html&gt;\\r\\n&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这样的格式，输出到前端！</p>\n<h3 id=\"8-3、JSP基础语法\"><a href=\"#8-3、JSP基础语法\" class=\"headerlink\" title=\"8.3、JSP基础语法\"></a>8.3、JSP基础语法</h3><p>任何语言都有自己的语法，JAVA中有,。 JSP 作为java技术的一种应用，它拥有一些自己扩充的语法（了解，知道即可！），Java所有语法都支持！</p>\n<h4 id=\"JSP-的组成-JSP页面的构成\"><a href=\"#JSP-的组成-JSP页面的构成\" class=\"headerlink\" title=\"JSP 的组成 JSP页面的构成\"></a>JSP 的组成 <a href=\"https://www.cnblogs.com/yangyquin/p/5430231.html\"><strong>JSP页面的构成</strong></a></h4> <img src=\"/狂神web/clip_image001-1583305406375.png\" alt=\"54\" style=\"zoom:50%;\" />\n\n<p><strong>==1 静态页面==</strong></p>\n<h5 id=\"2-指令\"><a href=\"#2-指令\" class=\"headerlink\" title=\"==2 指令==\"></a>==2 指令==</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ %&gt;<span class=\"comment\">&lt;!--page--&gt;</span>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;  contentType=&quot;text/html; charset=UTF-8&quot; isErrorPage=&quot;true&quot;%&gt;<span class=\"comment\">&lt;!--include--&gt;</span>&lt;%@ include file=&quot;foot.html&quot; %&gt;   静态引入/静态包含&lt;%@ include file=&quot;foot.jsp&quot; %&gt;使用jsp要删除&lt;% String path = request.getContextPath( );   String basePath = request.getScheme( )+&quot;://&quot;+request %&gt;<span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">jsp:include</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;foot.html&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:include</span>&gt;</span>   动态引入/动态包含<span class=\"tag\">&lt;<span class=\"name\">jsp:include</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;foot.jsp&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:include</span>&gt;</span> (可使用html/jsp)    <span class=\"comment\">&lt;!--taglib--&gt;</span>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;     <span class=\"comment\">&lt;!--======================================================================--&gt;</span>    &lt;%@page args.... %&gt;&lt;%@include file=&quot;&quot;%&gt;&lt;%--@include会将两个页面合二为一--%&gt;&lt;%@include file=&quot;common/header.jsp&quot;%&gt;<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>网页主体<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>&lt;%@include file=&quot;common/footer.jsp&quot;%&gt;<span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span>&lt;%--jSP标签    jsp:include：拼接页面，本质还是三个    --%&gt;<span class=\"tag\">&lt;<span class=\"name\">jsp:include</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;/common/header.jsp&quot;</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>网页主体<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">jsp:include</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;/common/footer.jsp&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-声明\"><a href=\"#3-声明\" class=\"headerlink\" title=\"==3 声明==\"></a>==3 声明==</h5><ul>\n<li>JSP声明：会被编译到JSP生成Java的类中！其他的，就会被生成到_jspService方法中！在JSP，嵌入Java代码即可！</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在JSP页面中定义变量,方法或类  &lt;%!  %&gt;&lt;%!  String s = &quot;这是一个声明&quot; ;    public  int  add(int x,int y )&#123;         return x+y;     &#125; %&gt;=========================================&lt;%!static &#123;  System.out.println(&quot;Loading Servlet!&quot;);&#125;private int globalVar = 0;public void kuang()&#123;  System.out.println(&quot;进入了方法Kuang！&quot;);&#125;%&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-表达式\"><a href=\"#4-表达式\" class=\"headerlink\" title=\"==4 表达式==\"></a>==4 表达式==</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%= 变量或表达式%&gt; basePath:&lt;%=basePath%&gt;<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>当前时间： <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>    &lt;%= new Date() %&gt;<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span>================================&lt;%--JSP表达式作用：用来将程序的输出，输出到客户端&lt;%= 变量或者表达式%&gt;--%&gt;&lt;%= new java.util.Date()%&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-脚本段-（小脚本-代码块）\"><a href=\"#5-脚本段-（小脚本-代码块）\" class=\"headerlink\" title=\"==5 脚本段==（小脚本/代码块）\"></a>==5 脚本段==（小脚本/代码块）</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在JSP页面中执行的Java代码 语法： &lt;% Java代码 %&gt;&lt;%  System.out.println(&quot;这是一个代码块&quot;);%&gt;================================================== &lt;%--jsp脚本片段--%&gt;&lt;%int sum = 0;for (int i = 1; i &lt;=100 ; i++) &#123;  sum+=i;&#125;out.println(&quot;<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Sum=&quot;+sum+&quot;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>&quot;);%&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--脚本片段的再实现--&gt;</span>&lt;%int x = 10;out.println(x);%&gt;<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个JSP文档<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>&lt;%int y = 2;out.println(y);%&gt;<span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span>&lt;%--在代码嵌入HTML元素--%&gt;&lt;%for (int i = 0; i &lt; 5; i++) &#123;%&gt;<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello,World  &lt;%=i%&gt; <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>&lt;%&#125;%&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-标准动作\"><a href=\"#6-标准动作\" class=\"headerlink\" title=\"==6 标准动作==\"></a>==6 标准动作==</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jsp:include</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;foot.html&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:include</span>&gt;</span>   动态引入/动态包含<span class=\"tag\">&lt;<span class=\"name\">jsp:forward</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;encoding.jsp&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:forward</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7-注释\"><a href=\"#7-注释\" class=\"headerlink\" title=\"==7 注释==\"></a>==7 注释==</h5><ul>\n<li>JSP的注释，不会在客户端显示，HTML就会！</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- This is my JSP page. &lt;br&gt; --&gt;</span>&lt;%--  &lt;% System.out.println(&quot;这是一个代码块&quot;);%&gt;--%&gt;//System.out.println(&quot;这是一个代码块&quot;); /* System.out.println(&quot;这是一个代码块1&quot;); */</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"8-4、9大内置对象\"><a href=\"#8-4、9大内置对象\" class=\"headerlink\" title=\"8.4、9大内置对象\"></a>8.4、9大内置对象</h3><ul>\n<li>PageContext    存东西</li>\n<li>Request     存东西</li>\n<li>Response</li>\n<li>Session      存东西</li>\n<li>Application   【SerlvetContext】   存东西</li>\n<li>config    【SerlvetConfig】</li>\n<li>out</li>\n<li>page ，不用了解</li>\n<li>exception</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pageContext.setAttribute(<span class=\"string\">&quot;name1&quot;</span>,<span class=\"string\">&quot;秦疆1号&quot;</span>); <span class=\"comment\">//保存的数据只在一个页面中有效request.setAttribute(&quot;name2&quot;,&quot;秦疆2号&quot;); //保存的数据只在一次请求中有效，请求转发会携带这个数据session.setAttribute(&quot;name3&quot;,&quot;秦疆3号&quot;); //保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器application.setAttribute(&quot;name4&quot;,&quot;秦疆4号&quot;);  //保存的数据只在服务器中有效，从打开服务器到关闭服务器</span></span><br></pre></td></tr></table></figure>\n\n<p>request：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！</p>\n<p>session：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车；</p>\n<p>application：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如：聊天数据；</p>\n<h3 id=\"8-5、JSP标签、JSTL标签、EL表达式\"><a href=\"#8-5、JSP标签、JSTL标签、EL表达式\" class=\"headerlink\" title=\"8.5、JSP标签、JSTL标签、EL表达式\"></a>8.5、JSP标签、JSTL标签、EL表达式</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- JSTL表达式的依赖 --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span><span class=\"comment\">&lt;!-- standard标签库 --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>taglibs<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>standard<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>EL表达式：  ${ }</p>\n<ul>\n<li><strong>获取数据</strong></li>\n<li><strong>执行运算</strong></li>\n<li><strong>获取web开发的常用对象</strong></li>\n</ul>\n<p><strong>JSP标签</strong></p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%--jsp:include--%&gt;&lt;%--http:<span class=\"comment\">//localhost:8080/jsptag.jsp?name=kuangshen&amp;age=12--%&gt;&lt;jsp:forward page=&quot;/jsptag2.jsp&quot;&gt;    &lt;jsp:param name=&quot;name&quot; value=&quot;kuangshen&quot;&gt;&lt;/jsp:param&gt;    &lt;jsp:param name=&quot;age&quot; value=&quot;12&quot;&gt;&lt;/jsp:param&gt;&lt;/jsp:forward&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>JSTL表达式</strong></p>\n<p>JSTL标签库的使用就是为了弥补HTML标签的不足；它自定义许多标签，可以供我们使用，标签的功能和Java代码一样！</p>\n<p><strong>格式化标签</strong></p>\n<p><strong>SQL标签</strong></p>\n<p><strong>XML 标签</strong></p>\n<p><strong>核心标签</strong> （掌握部分）</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568362473764.png\" alt=\"1568362473764\"></p>\n<p><strong>JSTL标签库使用步骤</strong></p>\n<ul>\n<li>引入对应的 taglib</li>\n<li>使用其中的方法</li>\n<li><strong>在Tomcat 也需要引入 jstl的包，否则会报错：JSTL解析错误</strong></li>\n</ul>\n<p>c：if</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h4&gt;<span class=\"keyword\">if</span>测试&lt;/h4&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;hr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;form action=<span class=\"string\">&quot;coreif.jsp&quot;</span> method=<span class=\"string\">&quot;get&quot;</span>&gt;</span><br><span class=\"line\">    &lt;%--</span><br><span class=\"line\">    EL表达式获取表单中的数据</span><br><span class=\"line\">    $&#123;param.参数名&#125;</span><br><span class=\"line\">    --%&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;username&quot;</span> value=<span class=\"string\">&quot;$&#123;param.username&#125;&quot;</span>&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">&quot;submit&quot;</span> value=<span class=\"string\">&quot;登录&quot;</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%--判断如果提交的用户名是管理员，则登录成功--%&gt;</span><br><span class=\"line\">&lt;c:<span class=\"keyword\">if</span> test=<span class=\"string\">&quot;$&#123;param.username==&#x27;admin&#x27;&#125;&quot;</span> <span class=\"keyword\">var</span>=<span class=\"string\">&quot;isAdmin&quot;</span>&gt;</span><br><span class=\"line\">    &lt;c:out value=<span class=\"string\">&quot;管理员欢迎您！&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/c:<span class=\"keyword\">if</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%--自闭合标签--%&gt;</span><br><span class=\"line\">&lt;c:out value=<span class=\"string\">&quot;$&#123;isAdmin&#125;&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>c:choose   c:when</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;&lt;%--定义一个变量score，值为<span class=\"number\">85</span>--%&gt;&lt;c:set <span class=\"keyword\">var</span>=<span class=\"string\">&quot;score&quot;</span> value=<span class=\"string\">&quot;55&quot;</span>/&gt;&lt;c:choose&gt;    &lt;c:when test=<span class=\"string\">&quot;$&#123;score&gt;=90&#125;&quot;</span>&gt;        你的成绩为优秀    &lt;/c:when&gt;    &lt;c:when test=<span class=\"string\">&quot;$&#123;score&gt;=80&#125;&quot;</span>&gt;        你的成绩为一般    &lt;/c:when&gt;    &lt;c:when test=<span class=\"string\">&quot;$&#123;score&gt;=70&#125;&quot;</span>&gt;        你的成绩为良好    &lt;/c:when&gt;    &lt;c:when test=<span class=\"string\">&quot;$&#123;score&lt;=60&#125;&quot;</span>&gt;        你的成绩为不及格    &lt;/c:when&gt;&lt;/c:choose&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>c:forEach</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%    ArrayList&lt;String&gt; people = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();    people.add(<span class=\"number\">0</span>,<span class=\"string\">&quot;张三&quot;</span>);    people.add(<span class=\"number\">1</span>,<span class=\"string\">&quot;李四&quot;</span>);    people.add(<span class=\"number\">2</span>,<span class=\"string\">&quot;王五&quot;</span>);    people.add(<span class=\"number\">3</span>,<span class=\"string\">&quot;赵六&quot;</span>);    people.add(<span class=\"number\">4</span>,<span class=\"string\">&quot;田六&quot;</span>);    request.setAttribute(<span class=\"string\">&quot;list&quot;</span>,people);%&gt;&lt;%--<span class=\"keyword\">var</span> , 每一次遍历出来的变量items, 要遍历的对象begin,   哪里开始end,     到哪里step,   步长--%&gt;&lt;c:forEach <span class=\"keyword\">var</span>=<span class=\"string\">&quot;people&quot;</span> items=<span class=\"string\">&quot;$&#123;list&#125;&quot;</span>&gt;    &lt;c:out value=<span class=\"string\">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;&lt;/c:forEach&gt;&lt;hr&gt;&lt;c:forEach <span class=\"keyword\">var</span>=<span class=\"string\">&quot;people&quot;</span> items=<span class=\"string\">&quot;$&#123;list&#125;&quot;</span> begin=<span class=\"string\">&quot;1&quot;</span> end=<span class=\"string\">&quot;3&quot;</span> step=<span class=\"string\">&quot;1&quot;</span> &gt;    &lt;c:out value=<span class=\"string\">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9、JavaBean\"><a href=\"#9、JavaBean\" class=\"headerlink\" title=\"9、JavaBean\"></a>9、JavaBean</h2><p>实体类</p>\n<p>JavaBean有特定的写法：</p>\n<ul>\n<li>必须要有一个无参构造</li>\n<li>属性必须私有化</li>\n<li>必须有对应的get/set方法；</li>\n</ul>\n<p>一般用来和数据库的字段做映射  ORM；</p>\n<p>ORM ：对象关系映射</p>\n<ul>\n<li>表—&gt;类</li>\n<li>字段–&gt;属性</li>\n<li>行记录—-&gt;对象</li>\n</ul>\n<p><strong>people表</strong></p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>age</th>\n<th>address</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>秦疆1号</td>\n<td>3</td>\n<td>西安</td>\n</tr>\n<tr>\n<td>2</td>\n<td>秦疆2号</td>\n<td>18</td>\n<td>西安</td>\n</tr>\n<tr>\n<td>3</td>\n<td>秦疆3号</td>\n<td>100</td>\n<td>西安</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span></span>&#123;    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;    <span class=\"keyword\">private</span> String name;    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;    <span class=\"keyword\">private</span> String address;&#125;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;    <span class=\"keyword\">new</span> People(<span class=\"number\">1</span>,<span class=\"string\">&quot;秦疆1号&quot;</span>,<span class=\"number\">3</span>，<span class=\"string\">&quot;西安&quot;</span>);    <span class=\"keyword\">new</span> People(<span class=\"number\">2</span>,<span class=\"string\">&quot;秦疆2号&quot;</span>,<span class=\"number\">3</span>，<span class=\"string\">&quot;西安&quot;</span>);    <span class=\"keyword\">new</span> People(<span class=\"number\">3</span>,<span class=\"string\">&quot;秦疆3号&quot;</span>,<span class=\"number\">3</span>，<span class=\"string\">&quot;西安&quot;</span>);&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>过滤器</li>\n<li>文件上传</li>\n<li>邮件发送</li>\n<li>JDBC 复习 ： 如何使用JDBC ,  JDBC crud， jdbc 事务</li>\n</ul>\n<h2 id=\"10、MVC三层架构\"><a href=\"#10、MVC三层架构\" class=\"headerlink\" title=\"10、MVC三层架构\"></a>10、MVC三层架构</h2><p>什么是MVC：  Model     view     Controller  模型、视图、控制器</p>\n<h3 id=\"10-1、早些年\"><a href=\"#10-1、早些年\" class=\"headerlink\" title=\"10.1、早些年\"></a>10.1、早些年</h3><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568423664332.png\" alt=\"1568423664332\"></p>\n<p>用户直接访问控制层，控制层就可以直接操作数据库；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">servlet--CRUD--&gt;数据库弊端：程序十分臃肿，不利于维护  servlet的代码中：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码架构：没有什么是加一层解决不了的！程序猿调用|JDBC|Mysql Oracle SqlServer ....</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-2、MVC三层架构\"><a href=\"#10-2、MVC三层架构\" class=\"headerlink\" title=\"10.2、MVC三层架构\"></a>10.2、MVC三层架构</h3><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568424227281.png\" alt=\"1568424227281\"></p>\n<p>Model</p>\n<ul>\n<li>业务处理 ：业务逻辑（Service）</li>\n<li>数据持久层：CRUD   （Dao）</li>\n</ul>\n<p>View</p>\n<ul>\n<li>展示数据</li>\n<li>提供链接发起Servlet请求 （a，form，img…）</li>\n</ul>\n<p>Controller  （Servlet）</p>\n<ul>\n<li><p>接收用户的请求 ：（req：请求参数、Session信息….）</p>\n</li>\n<li><p>交给业务层处理对应的代码 </p>\n</li>\n<li><p>控制视图的跳转  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">登录---&gt;接收用户的登录请求---&gt;处理用户的请求（获取用户登录的参数，username，password）----&gt;交给业务层处理登录业务（判断用户名密码是否正确：事务）---&gt;Dao层查询用户名和密码是否正确--&gt;数据库</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"11、Filter-（重点）\"><a href=\"#11、Filter-（重点）\" class=\"headerlink\" title=\"11、Filter （重点）\"></a>11、Filter （重点）</h2><p>Filter：过滤器 ，用来过滤网站的数据；</p>\n<ul>\n<li>处理中文乱码</li>\n<li>登录验证….</li>\n</ul>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568424858708.png\" alt=\"1568424858708\"></p>\n<p>Filter开发步骤：</p>\n<ol>\n<li><p>导包</p>\n</li>\n<li><p>编写过滤器</p>\n<ol>\n<li><p>导包不要错</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568425162525.png\" alt=\"1568425162525\"></p>\n<p>实现Filter接口，重写对应的方法即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CharacterEncodingFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;    <span class=\"comment\">//初始化：web服务器启动，就以及初始化了，随时等待过滤对象出现！    public void init(FilterConfig filterConfig) throws ServletException &#123;        System.out.println(&quot;CharacterEncodingFilter初始化&quot;);    &#125;    //Chain : 链    /*    1. 过滤中的所有代码，在过滤特定请求的时候都会执行    2. 必须要让过滤器继续同行        chain.doFilter(request,response);     */    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;        request.setCharacterEncoding(&quot;utf-8&quot;);        response.setCharacterEncoding(&quot;utf-8&quot;);        response.setContentType(&quot;text/html;charset=UTF-8&quot;);        System.out.println(&quot;CharacterEncodingFilter执行前....&quot;);        chain.doFilter(request,response); //让我们的请求继续走，如果不写，程序到这里就被拦截停止！        System.out.println(&quot;CharacterEncodingFilter执行后....&quot;);    &#125;    //销毁：web服务器关闭的时候，过滤会销毁    public void destroy() &#123;        System.out.println(&quot;CharacterEncodingFilter销毁&quot;);    &#125;&#125;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>在web.xml中配置 Filter</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>com.kuang.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span>    <span class=\"comment\">&lt;!--只要是 /servlet的任何请求，会经过这个过滤器--&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/servlet/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"comment\">&lt;!--&lt;url-pattern&gt;/*&lt;/url-pattern&gt;--&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"12、监听器\"><a href=\"#12、监听器\" class=\"headerlink\" title=\"12、监听器\"></a>12、监听器</h2><p>实现一个监听器的接口；（有N种）</p>\n<ol>\n<li><p>编写一个监听器</p>\n<p>实现监听器的接口…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//统计网站在线人数 ： 统计sessionpublic class OnlineCountListener implements HttpSessionListener &#123;    //创建session监听： 看你的一举一动    //一旦创建Session就会触发一次这个事件！    public void sessionCreated(HttpSessionEvent se) &#123;        ServletContext ctx = se.getSession().getServletContext();        System.out.println(se.getSession().getId());        Integer onlineCount = (Integer) ctx.getAttribute(&quot;OnlineCount&quot;);        if (onlineCount==null)&#123;            onlineCount = new Integer(1);        &#125;else &#123;            int count = onlineCount.intValue();            onlineCount = new Integer(count+1);        &#125;        ctx.setAttribute(&quot;OnlineCount&quot;,onlineCount);    &#125;    //销毁session监听    //一旦销毁Session就会触发一次这个事件！    public void sessionDestroyed(HttpSessionEvent se) &#123;        ServletContext ctx = se.getSession().getServletContext();        Integer onlineCount = (Integer) ctx.getAttribute(&quot;OnlineCount&quot;);        if (onlineCount==null)&#123;            onlineCount = new Integer(0);        &#125;else &#123;            int count = onlineCount.intValue();            onlineCount = new Integer(count-1);        &#125;        ctx.setAttribute(&quot;OnlineCount&quot;,onlineCount);    &#125;    /*    Session销毁：    1. 手动销毁  getSession().invalidate();    2. 自动销毁     */&#125;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>web.xml中注册监听器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--注册监听器--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>com.kuang.listener.OnlineCountListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>看情况是否使用！</p>\n</li>\n</ol>\n<h2 id=\"13、过滤器、监听器常见应用\"><a href=\"#13、过滤器、监听器常见应用\" class=\"headerlink\" title=\"13、过滤器、监听器常见应用\"></a>13、过滤器、监听器常见应用</h2><p><strong>监听器：GUI编程中经常使用；</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPanel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Frame frame = <span class=\"keyword\">new</span> Frame(<span class=\"string\">&quot;中秋节快乐&quot;</span>);  <span class=\"comment\">//新建一个窗体</span></span><br><span class=\"line\">        Panel panel = <span class=\"keyword\">new</span> Panel(<span class=\"keyword\">null</span>); <span class=\"comment\">//面板</span></span><br><span class=\"line\">        frame.setLayout(<span class=\"keyword\">null</span>); <span class=\"comment\">//设置窗体的布局</span></span><br><span class=\"line\"></span><br><span class=\"line\">        frame.setBounds(<span class=\"number\">300</span>,<span class=\"number\">300</span>,<span class=\"number\">500</span>,<span class=\"number\">500</span>);</span><br><span class=\"line\">        frame.setBackground(<span class=\"keyword\">new</span> Color(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>)); <span class=\"comment\">//设置背景颜色</span></span><br><span class=\"line\"></span><br><span class=\"line\">        panel.setBounds(<span class=\"number\">50</span>,<span class=\"number\">50</span>,<span class=\"number\">300</span>,<span class=\"number\">300</span>);</span><br><span class=\"line\">        panel.setBackground(<span class=\"keyword\">new</span> Color(<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>)); <span class=\"comment\">//设置背景颜色</span></span><br><span class=\"line\"></span><br><span class=\"line\">        frame.add(panel);</span><br><span class=\"line\"></span><br><span class=\"line\">        frame.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//监听事件，监听关闭事件</span></span><br><span class=\"line\">        frame.addWindowListener(<span class=\"keyword\">new</span> WindowAdapter() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">windowClosing</span><span class=\"params\">(WindowEvent e)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">super</span>.windowClosing(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用户登录之后才能进入主页！用户注销后就不能进入主页了！</p>\n<ol>\n<li><p>用户登录之后，向Sesison中放入用户的数据</p>\n</li>\n<li><p>进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpServletRequest request = (HttpServletRequest) req;</span><br><span class=\"line\">HttpServletResponse response = (HttpServletResponse) resp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (request.getSession().getAttribute(Constant.USER_SESSION)==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    response.sendRedirect(<span class=\"string\">&quot;/error.jsp&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">chain.doFilter(request,response);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"14、JDBC\"><a href=\"#14、JDBC\" class=\"headerlink\" title=\"14、JDBC\"></a>14、JDBC</h2><p>什么是JDBC ： Java连接数据库！</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568439601825.png\" alt=\"1568439601825\"></p>\n<p>需要jar包的支持：</p>\n<ul>\n<li>java.sql</li>\n<li>javax.sql</li>\n<li>mysql-conneter-java…  连接驱动（必须要导入）</li>\n</ul>\n<p><strong>实验环境搭建</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> users(    id <span class=\"type\">INT</span> <span class=\"keyword\">PRIMARY</span> KEY,    `name` <span class=\"type\">VARCHAR</span>(<span class=\"number\">40</span>),    `password` <span class=\"type\">VARCHAR</span>(<span class=\"number\">40</span>),    email <span class=\"type\">VARCHAR</span>(<span class=\"number\">60</span>),    birthday <span class=\"type\">DATE</span>);<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> users(id,`name`,`password`,email,birthday)<span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>,<span class=\"string\">&#x27;张三&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>,<span class=\"string\">&#x27;zs@qq.com&#x27;</span>,<span class=\"string\">&#x27;2000-01-01&#x27;</span>);<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> users(id,`name`,`password`,email,birthday)<span class=\"keyword\">VALUES</span>(<span class=\"number\">2</span>,<span class=\"string\">&#x27;李四&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>,<span class=\"string\">&#x27;ls@qq.com&#x27;</span>,<span class=\"string\">&#x27;2000-01-01&#x27;</span>);<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> users(id,`name`,`password`,email,birthday)<span class=\"keyword\">VALUES</span>(<span class=\"number\">3</span>,<span class=\"string\">&#x27;王五&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>,<span class=\"string\">&#x27;ww@qq.com&#x27;</span>,<span class=\"string\">&#x27;2000-01-01&#x27;</span>);<span class=\"keyword\">SELECT</span>\t<span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>导入数据库依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--mysql的驱动--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.47<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>IDEA中连接数据库：</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568440926845.png\" alt=\"1568440926845\"></p>\n<p><strong>JDBC 固定步骤：</strong></p>\n<ol>\n<li>加载驱动</li>\n<li>连接数据库,代表数据库</li>\n<li>向数据库发送SQL的对象Statement : CRUD</li>\n<li>编写SQL （根据业务，不同的SQL）</li>\n<li>执行SQL</li>\n<li>关闭连接</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestJdbc</span> </span>&#123;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, SQLException </span>&#123;        <span class=\"comment\">//配置信息        //useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码        String url=&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;;        String username = &quot;root&quot;;        String password = &quot;123456&quot;;        //1.加载驱动        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);        //2.连接数据库,代表数据库        Connection connection = DriverManager.getConnection(url, username, password);        //3.向数据库发送SQL的对象Statement,PreparedStatement : CRUD        Statement statement = connection.createStatement();        //4.编写SQL        String sql = &quot;select * from users&quot;;        //5.执行查询SQL，返回一个 ResultSet  ： 结果集        ResultSet rs = statement.executeQuery(sql);        while (rs.next())&#123;            System.out.println(&quot;id=&quot;+rs.getObject(&quot;id&quot;));            System.out.println(&quot;name=&quot;+rs.getObject(&quot;name&quot;));            System.out.println(&quot;password=&quot;+rs.getObject(&quot;password&quot;));            System.out.println(&quot;email=&quot;+rs.getObject(&quot;email&quot;));            System.out.println(&quot;birthday=&quot;+rs.getObject(&quot;birthday&quot;));        &#125;        //6.关闭连接，释放资源（一定要做） 先开后关        rs.close();        statement.close();        connection.close();    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>预编译SQL</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestJDBC2</span> </span>&#123;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;        <span class=\"comment\">//配置信息        //useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码        String url=&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;;        String username = &quot;root&quot;;        String password = &quot;123456&quot;;        //1.加载驱动        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);        //2.连接数据库,代表数据库        Connection connection = DriverManager.getConnection(url, username, password);        //3.编写SQL        String sql = &quot;insert into  users(id, name, password, email, birthday) values (?,?,?,?,?);&quot;;        //4.预编译        PreparedStatement preparedStatement = connection.prepareStatement(sql);        preparedStatement.setInt(1,2);//给第一个占位符？ 的值赋值为1；        preparedStatement.setString(2,&quot;狂神说Java&quot;);//给第二个占位符？ 的值赋值为狂神说Java；        preparedStatement.setString(3,&quot;123456&quot;);//给第三个占位符？ 的值赋值为123456；        preparedStatement.setString(4,&quot;24736743@qq.com&quot;);//给第四个占位符？ 的值赋值为1；        preparedStatement.setDate(5,new Date(new java.util.Date().getTime()));//给第五个占位符？ 的值赋值为new Date(new java.util.Date().getTime())；        //5.执行SQL        int i = preparedStatement.executeUpdate();        if (i&gt;0)&#123;            System.out.println(&quot;插入成功@&quot;);        &#125;        //6.关闭连接，释放资源（一定要做） 先开后关        preparedStatement.close();        connection.close();    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>事务</strong></p>\n<p>要么都成功，要么都失败！</p>\n<p>ACID原则：保证数据的安全。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开启事务事务提交  commit()事务回滚  rollback()关闭事务转账：A:1000B:<span class=\"number\">1000</span>    A(<span class=\"number\">900</span>)   --<span class=\"number\">100</span>--&gt;   B(<span class=\"number\">1100</span>) </span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>Junit单元测试</strong></p>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--单元测试--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>简单使用</p>\n<p>@Test注解只有在方法上有效，只要加了这个注解的方法，就可以直接运行！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568442261610.png\" alt=\"1568442261610\"></p>\n<p>失败的时候是红色：</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568442289597.png\" alt=\"1568442289597\"></p>\n<p><strong>搭建一个环境</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> account(</span><br><span class=\"line\">   id <span class=\"type\">INT</span> <span class=\"keyword\">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class=\"line\">   `name` <span class=\"type\">VARCHAR</span>(<span class=\"number\">40</span>),</span><br><span class=\"line\">   money <span class=\"type\">FLOAT</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> account(`name`,money) <span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> account(`name`,money) <span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> account(`name`,money) <span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;C&#x27;</span>,<span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//配置信息</span></span><br><span class=\"line\">    <span class=\"comment\">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class=\"line\">    String url=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class=\"line\">    String username = <span class=\"string\">&quot;root&quot;</span>;</span><br><span class=\"line\">    String password = <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Connection connection = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1.加载驱动</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2.连接数据库,代表数据库</span></span><br><span class=\"line\">         connection = DriverManager.getConnection(url, username, password);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.通知数据库开启事务,false 开启</span></span><br><span class=\"line\">        connection.setAutoCommit(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        String sql = <span class=\"string\">&quot;update account set money = money-100 where name = &#x27;A&#x27;&quot;</span>;</span><br><span class=\"line\">        connection.prepareStatement(sql).executeUpdate();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//制造错误</span></span><br><span class=\"line\">        <span class=\"comment\">//int i = 1/0;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String sql2 = <span class=\"string\">&quot;update account set money = money+100 where name = &#x27;B&#x27;&quot;</span>;</span><br><span class=\"line\">        connection.prepareStatement(sql2).executeUpdate();</span><br><span class=\"line\"></span><br><span class=\"line\">        connection.commit();<span class=\"comment\">//以上两条SQL都执行成功了，就提交事务！</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果出现异常，就通知数据库回滚事务</span></span><br><span class=\"line\">            connection.rollback();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e1) &#123;</span><br><span class=\"line\">            e1.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h2 id=\"1、基本概念\"><a href=\"#1、基本概念\" class=\"headerlink\" title=\"1、基本概念\"></a>1、基本概念</h2><h3 id=\"1-1、前言\"><a href=\"#1-1、前言\" class=\"headerlink\" title=\"1.1、前言\"></a>1.1、前言</h3><p>web开发：</p>\n<ul>\n<li>web，网页的意思  ， <a href=\"http://www.baidu.com/\">www.baidu.com</a></li>\n<li>静态web<ul>\n<li>html，css</li>\n<li>提供给所有人看的数据始终不会发生变化！</li>\n</ul>\n</li>\n<li>动态web<ul>\n<li>淘宝，几乎是所有的网站；</li>\n<li>提供给所有人看的数据始终会发生变化，每个人在不同的时间，不同的地点看到的信息各不相同！</li>\n<li>技术栈：Servlet/JSP，ASP，PHP</li>\n</ul>\n</li>\n</ul>\n<p>在Java中，动态web资源开发的技术统称为JavaWeb；</p>\n<h3 id=\"1-2、web应用程序\"><a href=\"#1-2、web应用程序\" class=\"headerlink\" title=\"1.2、web应用程序\"></a>1.2、web应用程序</h3><p>web应用程序：可以提供浏览器访问的程序；</p>\n<ul>\n<li>a.html、b.html……多个web资源，这些web资源可以被外界访问，对外界提供服务；</li>\n<li>你们能访问到的任何一个页面或者资源，都存在于这个世界的某一个角落的计算机上。</li>\n<li>URL </li>\n<li>这个统一的web资源会被放在同一个文件夹下，web应用程序–&gt;Tomcat：服务器</li>\n<li>一个web应用由多部分组成 （静态web，动态web）<ul>\n<li>html，css，js</li>\n<li>jsp，servlet</li>\n<li>Java程序</li>\n<li>jar包</li>\n<li>配置文件 （Properties）</li>\n</ul>\n</li>\n</ul>\n<p>web应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理；</p>\n<h4 id=\"Web应用程序概述\"><a href=\"#Web应用程序概述\" class=\"headerlink\" title=\"Web应用程序概述\"></a>Web应用程序概述</h4><ul>\n<li><p>Web应用程序是一种可以通过Web访问的应用程序，程序的最大好处是用户很容易访问应用程序，用户只需要有浏览器即可，不需要再安装其他软件。</p>\n</li>\n<li><p>一个Web应用程序是由完成特定任务的各种Web组件（web components)构成的并通过Web将服务展示给外界。在实际应用中，Web应用程序是由多个Servlet、JSP页面、HTML文件以及图像文件等组成。所有这些组件相互协调为用户提供一组完整的服务。</p>\n</li>\n</ul>\n<h4 id=\"应用程序模式\"><a href=\"#应用程序模式\" class=\"headerlink\" title=\"应用程序模式\"></a>应用程序模式</h4><ul>\n<li><p>应用程序有两种模式C/S、B/S。C/S是客户端/服务器端程序，也就是说这类程序一般独立运行。而B/S就是浏览器端/服务器端应用程序，这类应用程序一般借助IE、Firefox、Google等浏览器来运行。WEB应用程序一般是B/S模式。</p>\n<img src=\"/狂神web/clip_image001.jpg\" alt=\"12\" style=\"zoom:80%;\" />\n\n<img src=\"/狂神web/clip_image001-1583293770740.jpg\" alt=\"11\" style=\"zoom:67%;\" /></li>\n</ul>\n<h5 id=\"1，C-S架构\"><a href=\"#1，C-S架构\" class=\"headerlink\" title=\"1，C/S架构\"></a>1，C/S架构</h5><ul>\n<li>C/S是Client/Server的缩写。</li>\n<li>Server即服务器，通常采用高性能的PC或工作站，</li>\n<li>Client即客户端，需要在客户电脑上安装专用的客户端软件。</li>\n<li>例如大家比较熟悉的腾讯QQ就是个典型的C/S结构的软件，用户要安装QQ客户端程序同服务器进行通讯。</li>\n</ul>\n<h5 id=\"2，B-S架构\"><a href=\"#2，B-S架构\" class=\"headerlink\" title=\"2，B/S架构\"></a>2，B/S架构</h5><ul>\n<li><p>B/S架构即==浏览器和服务器==架构模式。它是随着Internet技术的兴起，对C/S架构的一种变化或者改进的架构。</p>\n</li>\n<li><p>在这种架构下，用户工作界面是通过==浏览器==来实现，极少部分事务逻辑在前端(Browser)实现，但是主要事务逻辑在服务器端(Server)实现，形成所谓三层结构。</p>\n</li>\n<li><p>例如京东、淘宝、12306等都是B/S架构。</p>\n</li>\n<li><p>WEB应用程序一般是B/S模式。</p>\n</li>\n<li><p>B/S优点：</p>\n<ul>\n<li><p>耦合度小，利于分工协作，提高开发效率</p>\n</li>\n<li><p>具有良好的可扩展性和可维护性</p>\n</li>\n<li><p>升级成本小</p>\n</li>\n<li><p>简化了客户端电脑载荷</p>\n</li>\n<li><p>减轻了系统维护与升级的成本和工作量</p>\n</li>\n<li><p>降低了用户的总体成本</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3、静态web\"><a href=\"#1-3、静态web\" class=\"headerlink\" title=\"1.3、静态web\"></a>1.3、静态web</h3><ul>\n<li><code>*.htm, *.html</code>,这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。通络；</li>\n</ul>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567822802516.png\" alt=\"1567822802516\"></p>\n<ul>\n<li>静态web存在的缺点<ul>\n<li>Web页面无法动态更新，所有用户看到都是同一个页面<ul>\n<li>轮播图，点击特效：伪动态</li>\n<li>JavaScript [实际开发中，它用的最多]</li>\n<li>VBScript</li>\n</ul>\n</li>\n<li>它无法和数据库交互（数据无法持久化，用户无法交互）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4、动态web\"><a href=\"#1-4、动态web\" class=\"headerlink\" title=\"1.4、动态web\"></a>1.4、动态web</h3><p>页面会动态展示： “Web的页面展示的效果因人而异”；</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567823191289.png\" alt=\"1567823191289\"></p>\n<p>缺点：</p>\n<ul>\n<li>加入服务器的动态web资源出现了错误，我们需要重新编写我们的<strong>后台程序</strong>,重新发布；<ul>\n<li>停机维护</li>\n</ul>\n</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>Web页面可以动态更新，所有用户看到都不是同一个页面</li>\n<li>它可以与数据库交互 （数据持久化：注册，商品信息，用户信息……..）</li>\n</ul>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567823350584.png\" alt=\"1567823350584\"></p>\n<h4 id=\"静态网页与动态网页\"><a href=\"#静态网页与动态网页\" class=\"headerlink\" title=\"静态网页与动态网页\"></a>静态网页与动态网页</h4><ul>\n<li><p>静态网页没有数据库的支持，在网站制作和维护方面工作量较大，静态网页的交互性较差，在功能方面有较大的限制。</p>\n</li>\n<li><p>动态网页是指在服务器端运行的程序或者网页，会根据不同客户、不同时间返回不同的网页。</p>\n</li>\n</ul>\n<h3 id=\"1-5、访问Web资源\"><a href=\"#1-5、访问Web资源\" class=\"headerlink\" title=\"1.5、访问Web资源\"></a>1.5、访问Web资源</h3><h4 id=\"什么是URL\"><a href=\"#什么是URL\" class=\"headerlink\" title=\"什么是URL\"></a>什么是URL</h4><ul>\n<li>URL是UniformResource Locator的缩写，意思是统一资源定位符，也被称为网页地址，是因特网上标准的资源地址(Address)。</li>\n<li>统一资源定位符(URL)适用于完整地描述Internet上网页和其他资源地址的一种标识方法。</li>\n<li>简单地说，URL就是Web地址，俗称“网址”。</li>\n</ul>\n<h5 id=\"URL的组成\"><a href=\"#URL的组成\" class=\"headerlink\" title=\"URL的组成\"></a>URL的组成</h5><ul>\n<li><p>URL是唯一能够识别Internet上具体的计算机、目录或文件位置的命名约定。</p>\n</li>\n<li><p>以这样一个URL:<a href=\"http://localhost:8080/FirstWeb/index.jsp%E4%B8%BA%E4%BE%8B%E6%9D%A5%E5%88%86%E6%9E%90URL%E7%9A%84%E7%BB%84%E6%88%90%E3%80%82\">http://localhost:8080/FirstWeb/index.jsp为例来分析URL的组成。</a></p>\n</li>\n</ul>\n<ol>\n<li><p>==HTTP协议==：两台计算机可能因为系统不同、运行程序所用语言不通，要进行通信必须按照一个约定的规则进行，浏览器和服务器之间必须遵循共同的协议HTTP (HyperText Transfer Protocol ==超文本传输协议==)。HTTP是互联网上应用最为广泛的一种网络协议。</p>\n</li>\n<li><p>==服务器主机名或IP== :在这里localhost就是服务器的地址， 意思是本机上的服务器。当然也可以使用127.0.0.1或实际IP地址来代替。IP是网络之间互连的协议,是Internet Protocol的缩写,中文缩写为“==网协==”。</p>\n</li>\n<li><p>==端口号==： 端口号是网络程序和外部进行通信的通道，当从外部访问服务器时要通过指定端口号来访问。物理端口是指物理存在的端口；逻辑端口是指逻辑意义上用于区分服务的端口，如TCP/IP协议中的服务端口，端口号的范围从0到65535。</p>\n</li>\n<li><p>==路径==： 路径（包括请求的资源）由零个或多个 “/“ 符号隔开的字符串， 一般用来表示主机上的一个目录或文件地址等。 而请求的资源指请求的文件的名称，可以是 一个HTML页面，也可以是 一个Servlet、 图片等服务器提供的资源。以FirstWeb/index.jsp为例，news代表的是Web应用对外发布的根路径名，而index.jsp代表了一个存放到FirstWeb根目录下的一个文件。</p>\n</li>\n</ol>\n<ul>\n<li>==URL的组成:==<ul>\n<li>协议</li>\n<li>主机（包括端口号）</li>\n<li>路径</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2、web服务器\"><a href=\"#2、web服务器\" class=\"headerlink\" title=\"2、web服务器\"></a>2、web服务器</h2><ul>\n<li>Web服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，可以向浏览器等Web客户端提供文档，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。</li>\n<li>下面介绍几种常用的WEB服务器。<ul>\n<li>==WebLogic==<ul>\n<li>BEA WebLogic Server 在使应用服务器成为企业应用架构的基础方面继续处于领先地位。</li>\n<li>BEA WebLogic Server 为构建集成化的企业级应用提供了稳固的基础，</li>\n<li>它们以 Internet 的==容量==和==速度==，在连网的企业之间共享信息、提交服务，实现协作自动化。</li>\n</ul>\n</li>\n<li>==Apache==<ul>\n<li>Apache仍然是世界上用的最多的Web服务器，市场占有率达60%左右。</li>\n<li>世界上很多著名的网站都是Apache的产物，</li>\n<li>它的成功之处主要在于它的==源代码开放==、有一支开放的开发队伍、支持跨平台的应用（可以运行在几乎所有的Unix、Windows、Linux系统平台上）以及它的==可移植性==等方面。</li>\n</ul>\n</li>\n<li>==Tomcat==<ul>\n<li>Tomcat是一个==开放源代码==、运行Servlet和JSP Web应用软件的基于Java的Web应用软件容器。</li>\n<li>它是==Apache==软件基金会一个开源的==核心项目==，由Apache、Sun和其他一些公司及个人共同开发完成。</li>\n<li>Tomcat Server是根据Servlet和JSP规范进行执行的，因此我们就可以说Tomcat Server也实行了Apache-Jakarta规范且比绝大多数商业应用软件服务器要好。</li>\n</ul>\n</li>\n<li>==Jboss==<ul>\n<li>是一个基于==J2EE==的==开放源代码==的应用服务器。</li>\n<li>JBoss代码遵循LGPL许可，可以在任何商业应用中==免费==使用，而不用支付费用。</li>\n<li>JBoss是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3的规范。</li>\n<li>但JBoss核心服务==不包括支持Servlet/JSP的WEB容器==，一般与Tomcat或Jetty绑定使用。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-1、技术讲解\"><a href=\"#2-1、技术讲解\" class=\"headerlink\" title=\"2.1、技术讲解\"></a>2.1、技术讲解</h3><p><strong>ASP:</strong></p>\n<ul>\n<li><p>微软：国内最早流行的就是ASP；</p>\n</li>\n<li><p>在HTML中嵌入了VB的脚本，  ASP + COM；</p>\n</li>\n<li><p>在ASP开发中，基本一个页面都有几千行的业务代码，页面极其换乱</p>\n</li>\n<li><p>维护成本高！</p>\n</li>\n<li><p>C# </p>\n</li>\n<li><p>IIS</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">            &lt;%</span><br><span class=\"line\">            System.out.println(&quot;hello&quot;)</span><br><span class=\"line\">            %&gt;</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>php：</strong></p>\n<ul>\n<li>PHP开发速度很快，功能很强大，跨平台，代码很简单 （70% , WP）</li>\n<li>无法承载大访问量的情况（局限性）</li>\n</ul>\n<p>**JSP/Servlet : ** </p>\n<p>B/S：浏览和服务器</p>\n<p>C/S:  客户端和服务器</p>\n<ul>\n<li>sun公司主推的B/S架构</li>\n<li>基于Java语言的 (所有的大公司，或者一些开源的组件，都是用Java写的)</li>\n<li>可以承载三高问题带来的影响；</li>\n<li>语法像ASP ， ASP–&gt;JSP , 加强市场强度；</li>\n</ul>\n<h3 id=\"2-2、web服务器\"><a href=\"#2-2、web服务器\" class=\"headerlink\" title=\"2.2、web服务器\"></a>2.2、web服务器</h3><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息；</p>\n<p><strong>==IIS==</strong></p>\n<p>微软的； ASP…,Windows中自带的</p>\n<p>==<strong>Tomcat</strong>==</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567824446428.png\" alt=\"1567824446428\"></p>\n<p>面向百度编程；</p>\n<p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且<strong>免费</strong>，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p>\n<p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href=\"https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8\">服务器</a>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个Java初学web的人来说，它是最佳的选择</p>\n<p>Tomcat 实际上运行JSP 页面和Servlet。Tomcat最新版本为<strong>9.0。</strong></p>\n<p><strong>工作3-5年之后，可以尝试手写Tomcat服务器；</strong></p>\n<p>下载tomcat：</p>\n<ol>\n<li>安装 or  解压</li>\n<li>了解配置文件及目录结构</li>\n<li>这个东西的作用</li>\n</ol>\n<h2 id=\"3、Tomcat\"><a href=\"#3、Tomcat\" class=\"headerlink\" title=\"3、Tomcat\"></a>3、Tomcat</h2><h3 id=\"3-1、-安装tomcat\"><a href=\"#3-1、-安装tomcat\" class=\"headerlink\" title=\"3.1、 安装tomcat\"></a>3.1、 安装tomcat</h3><p>tomcat官网：<a href=\"http://tomcat.apache.org/\">http://tomcat.apache.org/</a></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567825600842.png\" alt=\"1567825600842\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567825627138.png\" alt=\"1567825627138\"></p>\n<h3 id=\"3-2、Tomcat启动和配置\"><a href=\"#3-2、Tomcat启动和配置\" class=\"headerlink\" title=\"3.2、Tomcat启动和配置\"></a>3.2、Tomcat启动和配置</h3><h4 id=\"Tomcat目录作用描述\"><a href=\"#Tomcat目录作用描述\" class=\"headerlink\" title=\"Tomcat目录作用描述\"></a>Tomcat目录作用描述</h4><table>\n<thead>\n<tr>\n<th><strong>目录</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>==<strong>bin</strong>==</td>\n<td>存放各平台下用于启动和停止Tomcat的脚本文件</td>\n</tr>\n<tr>\n<td>==<strong>conf</strong>==</td>\n<td>存放Tomcat各种配置文件，其中最重要的是server.xml和web.xml</td>\n</tr>\n<tr>\n<td>==<strong>lib</strong>==</td>\n<td>存放tomcat服务器所需的jar文件</td>\n</tr>\n<tr>\n<td>==<strong>webapps</strong>==</td>\n<td>Web应用的发布目录</td>\n</tr>\n<tr>\n<td>==<strong>work</strong>==</td>\n<td>Jsp运行时生成的Servlet文件</td>\n</tr>\n<tr>\n<td>==<strong>logs</strong>==</td>\n<td>存放tomcat的日志文件</td>\n</tr>\n<tr>\n<td>==<strong>temp</strong>==</td>\n<td>Tomcat运行时存放临时文件</td>\n</tr>\n</tbody></table>\n<p>文件夹作用：</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567825763180.png\" alt=\"1567825763180\"></p>\n<p><strong>启动。关闭Tomcat</strong></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567825840657.png\" alt=\"1567825840657\"></p>\n<p>访问测试：<a href=\"http://localhost:8080/\">http://localhost:8080/</a></p>\n<p>可能遇到的问题：</p>\n<ol>\n<li>Java环境变量没有配置</li>\n<li>闪退问题：需要配置兼容性</li>\n<li>乱码问题：配置文件中设置</li>\n</ol>\n<h3 id=\"3-3、配置\"><a href=\"#3-3、配置\" class=\"headerlink\" title=\"3.3、配置\"></a>3.3、配置</h3><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567825967256.png\" alt=\"1567825967256\"></p>\n<p>可以配置启动的端口号</p>\n<ul>\n<li>tomcat的默认端口号为：8080</li>\n<li>mysql：3306</li>\n<li>http：80</li>\n<li>https：443</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;8081&quot;</span> <span class=\"attr\">protocol</span>=<span class=\"string\">&quot;HTTP/1.1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">&quot;20000&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">redirectPort</span>=<span class=\"string\">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以配置主机的名称</p>\n<ul>\n<li>默认的主机名为：localhost-&gt;127.0.0.1</li>\n<li>默认网站应用存放的位置为：webapps</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Host</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;www.qinjiang.com&quot;</span>  <span class=\"attr\">appBase</span>=<span class=\"string\">&quot;webapps&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">unpackWARs</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">autoDeploy</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"高难度面试题\"><a href=\"#高难度面试题\" class=\"headerlink\" title=\"高难度面试题\"></a>高难度面试题</h4><p>请你谈谈网站是如何进行访问的！</p>\n<ol>\n<li><p>输入一个域名；回车</p>\n</li>\n<li><p>检查本机的 C:\\Windows\\System32\\drivers\\etc\\hosts配置文件下有没有这个域名映射；</p>\n<ol>\n<li><p>有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>       www.qinjiang.com</span><br></pre></td></tr></table></figure></li>\n<li><p>没有：去DNS服务器找，找到的话就返回，找不到就返回找不到；</p>\n</li>\n</ol>\n<img src=\"/狂神web/1567827057913.png\" alt=\"1567827057913\" style=\"zoom: 67%;\" /></li>\n<li><p>可以配置一下环境变量（可选性）</p>\n</li>\n</ol>\n<h3 id=\"3-4、发布一个web网站\"><a href=\"#3-4、发布一个web网站\" class=\"headerlink\" title=\"3.4、发布一个web网站\"></a>3.4、发布一个web网站</h3><p>不会就先模仿</p>\n<ul>\n<li>将自己写的网站，放到服务器(Tomcat)中指定的web应用的文件夹（webapps）下，就可以访问了</li>\n</ul>\n<p>网站应该有的结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--webapps ：Tomcat服务器的web目录</span><br><span class=\"line\">\t-ROOT</span><br><span class=\"line\">\t-kuangstudy ：网站的目录名</span><br><span class=\"line\">\t\t- WEB-INF</span><br><span class=\"line\">\t\t\t-classes : java程序</span><br><span class=\"line\">\t\t\t-lib：web应用所依赖的jar包</span><br><span class=\"line\">\t\t\t-web.xml ：网站配置文件</span><br><span class=\"line\">\t\t- index.html 默认的首页</span><br><span class=\"line\">\t\t- <span class=\"keyword\">static</span> </span><br><span class=\"line\">            -css</span><br><span class=\"line\">            \t-style.css</span><br><span class=\"line\">            -js</span><br><span class=\"line\">            -img</span><br><span class=\"line\">         -.....</span><br></pre></td></tr></table></figure>\n\n\n\n<p>HTTP协议 ： 面试</p>\n<p>Maven：构建工具</p>\n<ul>\n<li>Maven安装包</li>\n</ul>\n<p>Servlet 入门</p>\n<ul>\n<li>HelloWorld！</li>\n<li>Servlet配置</li>\n<li>原理</li>\n</ul>\n<h2 id=\"4、Http\"><a href=\"#4、Http\" class=\"headerlink\" title=\"4、Http\"></a>4、Http</h2><h3 id=\"4-1、什么是HTTP\"><a href=\"#4-1、什么是HTTP\" class=\"headerlink\" title=\"4.1、什么是HTTP\"></a>4.1、什么是HTTP</h3><p>HTTP（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。</p>\n<ul>\n<li>文本：html，字符串，~ ….</li>\n<li>超文本：图片，音乐，视频，定位，地图…….</li>\n<li>80</li>\n</ul>\n<p>Https：安全的</p>\n<ul>\n<li>443</li>\n</ul>\n<h3 id=\"4-2、两个时代\"><a href=\"#4-2、两个时代\" class=\"headerlink\" title=\"4.2、两个时代\"></a>4.2、两个时代</h3><ul>\n<li><p>http1.0</p>\n<ul>\n<li>HTTP/1.0：客户端可以与web服务器连接后，只能获得一个web资源，断开连接</li>\n<li>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。</li>\n</ul>\n</li>\n<li><p>http2.0</p>\n<ul>\n<li>HTTP/1.1：客户端可以与web服务器连接后，可以获得多个web资源。</li>\n</ul>\n</li>\n<li><p>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p>\n</li>\n</ul>\n<h3 id=\"4-3、Http请求\"><a href=\"#4-3、Http请求\" class=\"headerlink\" title=\"4.3、Http请求\"></a>4.3、Http请求</h3><h5 id=\"HTTP请求方式\"><a href=\"#HTTP请求方式\" class=\"headerlink\" title=\"HTTP请求方式\"></a>HTTP请求方式</h5><ul>\n<li><p>HTTP请求是指从客户端到服务器端的请求消息。</p>\n</li>\n<li><p>包括：消息首行中，对资源的请求方法、资源的标识符及使用的协议。</p>\n</li>\n<li><p>根据HTTP标准，HTTP请求可以使用多种请求方法。 </p>\n</li>\n<li><p>==客户端—发请求（Request）—服务器==</p>\n</li>\n</ul>\n<p>百度：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Request URL:https:<span class=\"comment\">//www.baidu.com/   请求地址</span></span><br><span class=\"line\">Request Method:GET    get方法/post方法</span><br><span class=\"line\">Status Code:<span class=\"number\">200</span> OK    状态码：<span class=\"number\">200</span></span><br><span class=\"line\">Remote（远程） Address:<span class=\"number\">14.215</span><span class=\"number\">.177</span><span class=\"number\">.39</span>:<span class=\"number\">443</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept:text/html  </span><br><span class=\"line\">Accept-Encoding:gzip, deflate, br</span><br><span class=\"line\">Accept-Language:zh-CN,zh;q=<span class=\"number\">0.9</span>    语言</span><br><span class=\"line\">Cache-Control:max-age=<span class=\"number\">0</span></span><br><span class=\"line\">Connection:keep-alive</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1、请求行\"><a href=\"#1、请求行\" class=\"headerlink\" title=\"1、请求行\"></a>1、请求行</h4><ul>\n<li><p>请求行中的请求方式：GET</p>\n</li>\n<li><p>请求方式：<strong>Get，Post</strong>，HEAD,DELETE,PUT,TRACT…</p>\n<ul>\n<li><p>get：</p>\n<ul>\n<li>请求能够携带的参数比较少，大小==有限制==，会在浏览器的URL地址栏显示数据内容，==不安全，但高效==</li>\n<li>GET是最简单的HTTP方法，</li>\n<li>其主要任务就是要求服务器获得一个资源并把资源发回来，</li>\n<li>请求参数在请求行中用？号和URL区别开，所以所带的参数有限，显示在浏览器的地址栏中。</li>\n<li>GET请求网址<a href=\"http://localhost:8080/FirstWeb/test?userName=Jack&amp;age=20\">http://localhost:8080/FirstWeb/test?userName=Jack&amp;age=20</a></li>\n<li>GET 请求可被缓存</li>\n<li>GET 请求有长度限制</li>\n</ul>\n</li>\n<li><p>post：</p>\n<ul>\n<li>请求能够携带的参数没有限制，大小==没有限制==，不会在浏览器的URL地址栏显示数据内容，==安全，但不高效。==</li>\n<li>POST是一种更强大的请求，在请求的同时向服务器发送一些==表单==数据还有==二进制==数据，</li>\n<li>请求参数放在请求体中，可以传输比较大的请求参数，例如图片、视频等，</li>\n<li>浏览器的地址栏中不显示参数信息。</li>\n<li>POST请求网址 <a href=\"http://localhost:8080/FirstWeb/test\">http://localhost:8080/FirstWeb/test </a></li>\n<li>POST 请求不会被缓存</li>\n<li>POST 请求对数据长度没有要求</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2、消息头\"><a href=\"#2、消息头\" class=\"headerlink\" title=\"2、消息头\"></a>2、消息头</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept：告诉浏览器，它所支持的数据类型</span><br><span class=\"line\">Accept-Encoding：支持哪种编码格式  GBK   UTF-<span class=\"number\">8</span>   GB2312  ISO8859-<span class=\"number\">1</span></span><br><span class=\"line\">Accept-Language：告诉浏览器，它的语言环境</span><br><span class=\"line\">Cache-Control：缓存控制</span><br><span class=\"line\">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class=\"line\">HOST：主机..../.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4、Http响应\"><a href=\"#4-4、Http响应\" class=\"headerlink\" title=\"4.4、Http响应\"></a>4.4、Http响应</h3><ul>\n<li>服务器—响应—–客户端</li>\n</ul>\n<p>百度：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache-Control:<span class=\"keyword\">private</span>    缓存控制Connection:Keep-Alive    连接Content-Encoding:gzip    编码Content-Type:text/html   类型</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-响应体\"><a href=\"#1-响应体\" class=\"headerlink\" title=\"1.响应体\"></a>1.响应体</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept：告诉浏览器，它所支持的数据类型Accept-Encoding：支持哪种编码格式  GBK   UTF-<span class=\"number\">8</span>   GB2312  ISO8859-1Accept-Language：告诉浏览器，它的语言环境Cache-Control：缓存控制Connection：告诉浏览器，请求完成是断开还是保持连接HOST：主机..../.Refresh：告诉客户端，多久刷新一次；Location：让网页重新定位；</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-响应状态码\"><a href=\"#2-响应状态码\" class=\"headerlink\" title=\"2.响应状态码\"></a>2.响应状态码</h4><p>200：请求响应成功  200</p>\n<p>3xx：请求重定向 </p>\n<ul>\n<li>重定向：你重新到我给你新位置去；</li>\n</ul>\n<p>4xx：找不到资源   404</p>\n<ul>\n<li>资源不存在；</li>\n</ul>\n<p>5xx：服务器代码错误   500       502:网关错误</p>\n<h4 id=\"常见面试题\"><a href=\"#常见面试题\" class=\"headerlink\" title=\"常见面试题\"></a>常见面试题</h4><p>当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</p>\n<h2 id=\"5、Maven\"><a href=\"#5、Maven\" class=\"headerlink\" title=\"5、Maven\"></a>5、Maven</h2><p><strong>我为什么要学习这个技术？</strong></p>\n<ol>\n<li><p>在Javaweb开发中，需要使用大量的jar包，我们手动去导入；</p>\n</li>\n<li><p>如何能够让一个东西自动帮我导入和配置这个jar包。</p>\n<p>由此，Maven诞生了！</p>\n</li>\n</ol>\n<h3 id=\"5-1-Maven项目架构管理工具\"><a href=\"#5-1-Maven项目架构管理工具\" class=\"headerlink\" title=\"5.1 Maven项目架构管理工具\"></a>5.1 Maven项目架构管理工具</h3><p>我们目前用来就是方便导入jar包的！</p>\n<p>Maven的核心思想：<strong>约定大于配置</strong></p>\n<ul>\n<li>有约束，不要去违反。</li>\n</ul>\n<p>Maven会规定好你该如何去编写我们的Java代码，必须要按照这个规范来；</p>\n<h3 id=\"5-2-下载安装Maven\"><a href=\"#5-2-下载安装Maven\" class=\"headerlink\" title=\"5.2 下载安装Maven\"></a>5.2 下载安装Maven</h3><p>官网;<a href=\"https://maven.apache.org/\">https://maven.apache.org/</a></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567842350606.png\" alt=\"1567842350606\"></p>\n<p>下载完成后，解压即可；</p>\n<p>小狂神友情建议：电脑上的所有环境都放在一个文件夹下，方便管理；</p>\n<h3 id=\"5-3-配置环境变量\"><a href=\"#5-3-配置环境变量\" class=\"headerlink\" title=\"5.3 配置环境变量\"></a>5.3 配置环境变量</h3><p>在我们的系统环境变量中</p>\n<p>配置如下配置：</p>\n<ul>\n<li>M2_HOME     maven目录下的bin目录</li>\n<li>MAVEN_HOME      maven的目录</li>\n<li>在系统的path中配置  %MAVEN_HOME%\\bin</li>\n</ul>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567842882993.png\" alt=\"1567842882993\"></p>\n<p>测试Maven是否安装成功，保证必须配置完毕！</p>\n<h3 id=\"5-4-阿里云镜像\"><a href=\"#5-4-阿里云镜像\" class=\"headerlink\" title=\"5.4 阿里云镜像\"></a>5.4 阿里云镜像</h3><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567844609399.png\" alt=\"1567844609399\"></p>\n<ul>\n<li>镜像：mirrors<ul>\n<li>作用：加速我们的下载</li>\n</ul>\n</li>\n<li>国内建议使用阿里云的镜像</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span>      <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span>      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus aliyun<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>      <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-5-本地仓库\"><a href=\"#5-5-本地仓库\" class=\"headerlink\" title=\"5.5 本地仓库\"></a>5.5 本地仓库</h3><p>在本地的仓库，远程仓库；</p>\n<p><strong>建立一个本地仓库：</strong>localRepository</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">localRepository</span>&gt;</span>D:\\Environment\\apache-maven-3.6.2\\maven-repo<span class=\"tag\">&lt;/<span class=\"name\">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-6、在IDEA中使用Maven\"><a href=\"#5-6、在IDEA中使用Maven\" class=\"headerlink\" title=\"5.6、在IDEA中使用Maven\"></a>5.6、在IDEA中使用Maven</h3><ol>\n<li><p>启动IDEA</p>\n</li>\n<li><p>创建一个MavenWeb项目</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567844785602.png\" alt=\"1567844785602\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567844841172.png\" alt=\"1567844841172\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567844917185.png\" alt=\"1567844917185\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567844956177.png\" alt=\"1567844956177\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567845029864.png\" alt=\"1567845029864\"></p>\n</li>\n<li><p>等待项目初始化完毕</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567845105970.png\" alt=\"1567845105970\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567845137978.png\" alt=\"1567845137978\"></p>\n</li>\n<li><p>观察maven仓库中多了什么东西？</p>\n</li>\n<li><p>IDEA中的Maven设置</p>\n<p>注意：IDEA项目创建成功后，看一眼Maven的配置</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567845341956.png\" alt=\"1567845341956\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567845413672.png\" alt=\"1567845413672\"></p>\n</li>\n<li><p>到这里，Maven在IDEA中的配置和使用就OK了!</p>\n</li>\n</ol>\n<h3 id=\"5-7、创建一个普通的Maven项目\"><a href=\"#5-7、创建一个普通的Maven项目\" class=\"headerlink\" title=\"5.7、创建一个普通的Maven项目\"></a>5.7、创建一个普通的Maven项目</h3><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567845557744.png\" alt=\"1567845557744\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567845717377.png\" alt=\"1567845717377\"></p>\n<p>这个只有在Web应用下才会有！</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567845782034.png\" alt=\"1567845782034\"></p>\n<h3 id=\"5-8-标记文件夹功能\"><a href=\"#5-8-标记文件夹功能\" class=\"headerlink\" title=\"5.8 标记文件夹功能\"></a>5.8 标记文件夹功能</h3><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567845910728.png\" alt=\"1567845910728\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567845957139.png\" alt=\"1567845957139\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567846034906.png\" alt=\"1567846034906\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567846073511.png\" alt=\"1567846073511\"></p>\n<h3 id=\"5-9-在-IDEA中配置Tomcat\"><a href=\"#5-9-在-IDEA中配置Tomcat\" class=\"headerlink\" title=\"5.9 在 IDEA中配置Tomcat\"></a>5.9 在 IDEA中配置Tomcat</h3><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567846140348.png\" alt=\"1567846140348\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567846179573.png\" alt=\"1567846179573\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567846234175.png\" alt=\"1567846234175\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567846369751.png\" alt=\"1567846369751\"></p>\n<p>解决警告问题</p>\n<p>必须要的配置：<strong>为什么会有这个问题：我们访问一个网站，需要指定一个文件夹名字；</strong></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567846421963.png\" alt=\"1567846421963\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567846546465.png\" alt=\"1567846546465\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567846559111.png\" alt=\"1567846559111\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567846640372.png\" alt=\"1567846640372\"></p>\n<h3 id=\"5-10-pom文件\"><a href=\"#5-10-pom文件\" class=\"headerlink\" title=\"5.10 pom文件\"></a>5.10 pom文件</h3><p>pom.xml 是Maven的核心配置文件</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567846784849.png\" alt=\"1567846784849\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--Maven版本和头文件--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--这里就是我们刚才配置的GAV--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.kuang<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javaweb-01-maven<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--Package：项目的打包方式</span></span><br><span class=\"line\"><span class=\"comment\">  jar：java应用</span></span><br><span class=\"line\"><span class=\"comment\">  war：JavaWeb应用</span></span><br><span class=\"line\"><span class=\"comment\">  --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--配置--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--项目的默认构建编码--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--编码版本--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--项目依赖--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--具体依赖的jar包配置文件--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--项目构建用的东西--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>javaweb-01-maven<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pluginManagement</span>&gt;</span><span class=\"comment\">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-clean-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-resources-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-surefire-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.22.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-war-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-install-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-deploy-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">pluginManagement</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567847410771.png\" alt=\"1567847410771\"></p>\n<p>maven由于他的约定大于配置，我们之后可以能遇到我们写的配置文件，无法被导出或者生效的问题，解决方案：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span>                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span>                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span>            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span>        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span>                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span>                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span>            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span>        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5-12-IDEA操作\"><a href=\"#5-12-IDEA操作\" class=\"headerlink\" title=\"5.12 IDEA操作\"></a>5.12 IDEA操作</h3><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567847630808.png\" alt=\"1567847630808\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567847662429.png\" alt=\"1567847662429\"></p>\n<h3 id=\"5-13-解决遇到的问题\"><a href=\"#5-13-解决遇到的问题\" class=\"headerlink\" title=\"5.13 解决遇到的问题\"></a>5.13 解决遇到的问题</h3><ol>\n<li><p>Maven 3.6.2</p>\n<p>解决方法：降级为3.6.1</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567904721301.png\" alt=\"1567904721301\"></p>\n</li>\n<li><p>Tomcat闪退</p>\n</li>\n<li><p>IDEA中每次都要重复配置Maven<br>在IDEA中的全局默认配置中去配置</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567905247201.png\" alt=\"1567905247201\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567905291002.png\" alt=\"1567905291002\"></p>\n</li>\n<li><p>Maven项目中Tomcat无法配置</p>\n</li>\n<li><p>maven默认web项目中的web.xml版本问题</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567905537026.png\" alt=\"1567905537026\"></p>\n</li>\n<li><p>替换为webapp4.0版本和tomcat一致</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span>         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span>         <span class=\"attr\">version</span>=<span class=\"string\">&quot;4.0&quot;</span>         <span class=\"attr\">metadata-complete</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>Maven仓库的使用</p>\n<p>地址：<a href=\"https://mvnrepository.com/\">https://mvnrepository.com/</a></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567905870750.png\" alt=\"1567905870750\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567905982979.png\" alt=\"1567905982979\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567906017448.png\" alt=\"1567906017448\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567906039469.png\" alt=\"1567906039469\"></p>\n</li>\n</ol>\n<h2 id=\"6、Servlet\"><a href=\"#6、Servlet\" class=\"headerlink\" title=\"6、Servlet\"></a>6、Servlet</h2><h3 id=\"6-1、Servlet简介\"><a href=\"#6-1、Servlet简介\" class=\"headerlink\" title=\"6.1、Servlet简介\"></a>6.1、Servlet简介</h3><ul>\n<li><p>Servlet就是sun公司开发动态web的一门技术</p>\n</li>\n<li><p>Sun在这些API中提供一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤：</p>\n<ul>\n<li>编写一个类，实现Servlet接口</li>\n<li>把开发好的Java类部署到web服务器中。</li>\n</ul>\n</li>\n<li><p><strong>把实现了Servlet接口的Java程序叫做，Servlet</strong></p>\n</li>\n<li></li>\n</ul>\n<h3 id=\"6-2、HelloServlet\"><a href=\"#6-2、HelloServlet\" class=\"headerlink\" title=\"6.2、HelloServlet\"></a>6.2、HelloServlet</h3><h4 id=\"1-Servlet入门\"><a href=\"#1-Servlet入门\" class=\"headerlink\" title=\"1 Servlet入门\"></a>1 Servlet入门</h4><ul>\n<li><p>Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器，用Java编写的服务器端程序，具有独立于平台和协议的特性，主要功能在于交互式地浏览和生成数据，生成动态Web内容。</p>\n</li>\n<li><p>狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。Servlet运行于支持Java的应用服务器中。</p>\n</li>\n<li><p>Servlet 的主要功能在于交互式地浏览和修改数据，生成动态 Web 内容。</p>\n</li>\n<li><p>这个==过程==为：</p>\n<p>1、客户端发送请求至服务器端；</p>\n<p>2、服务器将请求信息发送至 Servlet；</p>\n<p>3、Servlet 生成响应内容并将其传给服务器。响应内容动态生成，通常取决于客户端的请求；</p>\n<p>4、服务器将响应返回给客户端。</p>\n</li>\n<li><p>Serlvet接口Sun公司有两个默认的实现类：HttpServlet，GenericServlet</p>\n</li>\n<li><p>配置web.xml</p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注册一个Servlet --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span>   <span class=\"comment\">&lt;!-- Servlet标识名 --&gt;</span>   <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>   <span class=\"comment\">&lt;!-- Servlet类的全限定名 --&gt;</span>   <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.aaa.servlet.HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span><span class=\"comment\">&lt;!-- 配置Servlet映射信息 --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>   <span class=\"comment\">&lt;!-- Servlet标识名和上面一致 --&gt;</span>   <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>   <span class=\"comment\">&lt;!-- 访问路径 --&gt;</span>   <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li><p>构建一个普通的Maven项目，删掉里面的src目录，以后我们的学习就在这个项目里面建立Moudel；这个空的工程就是Maven主工程；</p>\n</li>\n<li><p>关于Maven父子工程的理解：</p>\n<p>父项目中会有</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>servlet-01<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>子项目会有</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javaweb-02-servlet<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.kuang<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>父项目中的java子项目可以直接使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">son extends father</span><br></pre></td></tr></table></figure></li>\n<li><p>Maven环境优化</p>\n<ol>\n<li>修改web.xml为最新的</li>\n<li>将maven的结构搭建完整</li>\n</ol>\n</li>\n<li><p>编写一个Servlet程序</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567911804700.png\" alt=\"1567911804700\"></p>\n<ol>\n<li><p>编写一个普通类</p>\n</li>\n<li><p>实现Servlet接口，这里我们直接继承HttpServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;        <span class=\"comment\">//由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样；    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        //ServletOutputStream outputStream = resp.getOutputStream();        PrintWriter writer = resp.getWriter(); //响应流        writer.print(&quot;Hello,Serlvet&quot;);    &#125;    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        doGet(req, resp);    &#125;&#125;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>编写Servlet的映射</p>\n<p>为什么需要映射：我们写的是JAVA程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要再web服务中注册我们写的Servlet，还需给他一个浏览器能够访问的路径；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--注册Servlet--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--Servlet的请求路径--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure></li>\n<li><p>配置Tomcat</p>\n<p>注意：配置项目发布的路径就可以了</p>\n</li>\n<li><p>启动测试，OK！</p>\n</li>\n</ol>\n<h4 id=\"2-ServletAPI层次结构\"><a href=\"#2-ServletAPI层次结构\" class=\"headerlink\" title=\"2 ServletAPI层次结构\"></a>2 ServletAPI层次结构</h4><p><strong>核心技能部分</strong></p>\n<pre><code> ![222](/狂神web//clip_image001.png)\n\n   ![Serv et  Servi  Serv IetCmf i g  -se rServIe &#39;Cca rex : O  HttpServ1et  service Cin EttpServletReque;t. ia  et (/狂神web//clip_image001-1583302830910.jpg) ](file:///C:/Users/YANKUN~1/AppData/Local/Temp/msohtmlclip1/01/clip_image001.jpg)  \n</code></pre>\n<p><strong>Servlet原理</strong></p>\n<h5 id=\"Servlet接口\"><a href=\"#Servlet接口\" class=\"headerlink\" title=\"Servlet接口\"></a>Servlet接口</h5><ul>\n<li>Servlet接口定义了所有 Servlet需要实现的方法， 包括==init()，service()，destroy ()==方法， 以及getServletConfig()方法（返回ServletConfig对象，通过该对象可以得到Servlet的配置信息）。</li>\n</ul>\n<h5 id=\"ServletConfig接口\"><a href=\"#ServletConfig接口\" class=\"headerlink\" title=\"ServletConfig接口\"></a>ServletConfig接口</h5><ul>\n<li><p>在Servlet初始化时，Servlet容器会使用ServletConfig对象向该Servlet传递信息。</p>\n</li>\n<li><p><strong>ServletConfig的常用方法</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>功能说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>String  getInitParameter(String name)</td>\n<td>获取web.xml中名称为name的初始化参数值</td>\n</tr>\n<tr>\n<td>ServletContext  getServletContext()</td>\n<td>返回Servlet上下文对象</td>\n</tr>\n</tbody></table>\n<h5 id=\"GenericServlet类\"><a href=\"#GenericServlet类\" class=\"headerlink\" title=\"GenericServlet类\"></a>GenericServlet类</h5><ul>\n<li><p>抽象类 GenericServlet实现了Servlet接口和ServletConfig接口，简单实现除 service()方法外的其它方法，它定义了通用的，不依赖于协议的Servlet规范。 GenericServlet类的常用方法如表2.2.3所示。</p>\n</li>\n<li><p><strong>GenericServlet类的常用方法</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>功能说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>void  init(ServletConfig config)</td>\n<td>初始化方法</td>\n</tr>\n<tr>\n<td>String  getInitParameter(String name)</td>\n<td>返回名称为name的初始化参数值</td>\n</tr>\n<tr>\n<td>ServletContext  getServletCotext()</td>\n<td>返回ServletContext对象</td>\n</tr>\n</tbody></table>\n<h5 id=\"HttpServlet类\"><a href=\"#HttpServlet类\" class=\"headerlink\" title=\"HttpServlet类\"></a>HttpServlet类</h5><ul>\n<li><p>抽象类HttpServlet继承自GenericServlet类，专门用来处理HTTP请求，并提供了与HTTP相关的实现方法。根据HTTP协议的特点， HttpServlet分别提供了处理请求的相应方法，如表2.2.4所示。</p>\n</li>\n<li><p><strong>HttpServlet类的常用方法</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>功能说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>void ==service==  (ServletRequest reg, ServletResponse res)</td>\n<td>接收客户端请求，然后把请求分发给相应的doXX方法，如果是GET请求就分发给doGet()方法，如果是POST请求就分发给doPost()方法。</td>\n</tr>\n<tr>\n<td>void  ==doGet==(HttpServletRequest reg, HttpServletResponse res)</td>\n<td>处理GET请求</td>\n</tr>\n<tr>\n<td>void  ==doPost==(HttpServletRequest reg, HttpServletResponse res)</td>\n<td>处理POST请求</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>如果要自己要编写Servlet程序， 都是继承HttpServlet类， 然后重写其中的某些方法， 使用原则如下：</p>\n<p>(1) 重写doGet方法来处理GET请求。</p>\n<p>(2) 重写doPost方法来处理POST请求。</p>\n<p>(3) 如果需要在Servlet实例化中进行初始化工作，可以重写init()方法。</p>\n<p>(4) 如果需要在 Servlet被释放时进行资源清理的工作，可以重写destroy()方法。</p>\n</li>\n<li><p><strong>提示：</strong></p>\n<ul>\n<li>HTTP 请求主要就 get 和 post两种， 为了让 servlet两种请求都能处理，一般doGet ()和doPost()方法都重写，而处理代码只写在一个方法中，另外一个方法调用即可。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"HttpServletRequest接口\"><a href=\"#HttpServletRequest接口\" class=\"headerlink\" title=\"HttpServletRequest接口\"></a>HttpServletRequest接口</h5><ul>\n<li><p>HttpServletRequest接口继承自ServletRequest接口，它代表客户的请求。</p>\n</li>\n<li><p>容器在调用Servlet的doGet()和doPost()方法时，会创建一个HttpServletRequest接口的实例，作为参数传给doGet()或doPost()方法。</p>\n</li>\n<li><p><strong>HttpServleRequest 接口的常用方法</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>功能说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>String  ==getParameter==(String name)</td>\n<td>根据页面表单元素名称获取页面提交数据</td>\n</tr>\n<tr>\n<td>string[]  ==getPararneterValues== (String name)</td>\n<td>获取页面有重名表单元素（比如复选框）的值</td>\n</tr>\n<tr>\n<td>void  ==setCharacterEncoding== (String name)</td>\n<td>设置请求的编码，在调用getParameter()方法  前进行设置，此方法可以解决提供中文数据乱码问题。</td>\n</tr>\n<tr>\n<td>void  ==setAttribute==(String name,Object value)</td>\n<td>设置请求的参数</td>\n</tr>\n<tr>\n<td>==getRequestDispatcher==(String  path)</td>\n<td>返回一个RequestDispatcher对象，该对象的  forward方法可以把请求转发到指定资源</td>\n</tr>\n</tbody></table>\n<h5 id=\"HttpServletResponse接口\"><a href=\"#HttpServletResponse接口\" class=\"headerlink\" title=\"HttpServletResponse接口\"></a>HttpServletResponse接口</h5><ul>\n<li><p>HttpServletResponse接口继承自ServletResponse接口，它代表向客户端发送的响应。</p>\n</li>\n<li><p>容器在调用Servlet的doGet()和doPost()方法时，同样会创建一个 HttpServletResponse接口的实例，作为参数传给doGet()或doPost()方法。</p>\n</li>\n<li><p>Servlet利用HttpServletRequest对象获取客户端的请求数据，经过处理后由 HttpServletResponse对象发送响应数据。</p>\n</li>\n<li><p><strong>HttpServleRequest 接口的常用方法</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>功能说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>setContentType(“text/html;charset=utf-8”);</td>\n<td>设置响应的内容类型</td>\n</tr>\n<tr>\n<td>PrintWriter  response.getWriter()</td>\n<td>获得响应的输出流</td>\n</tr>\n<tr>\n<td>response.sendRedirect(redirect)</td>\n<td>重定向到指定的网址</td>\n</tr>\n</tbody></table>\n<h5 id=\"转发与重定向\"><a href=\"#转发与重定向\" class=\"headerlink\" title=\"转发与重定向\"></a>转发与重定向</h5><p><strong>1 转发</strong></p>\n<ul>\n<li><p>转发属于<strong>服务器跳转</strong>。当使用转发时，JSP容器将使用一个内部的方法来调用目标页面，新的页面继续处理同一个请求，而浏览器将不会知道这个过程。</p>\n</li>\n<li><p>整个过程都是在一个Web容器内完成，因而可以共享request范围内的数据。</p>\n</li>\n<li><p>而对应到客户端，不管服务器内部如何处理，作为浏览器都只是提交了一个请求，因而客户端的URL地址不会发生改变。</p>\n</li>\n<li><p>转发的作用：在多个页面交互过程中实现请求数据的共享。</p>\n</li>\n<li><p>实现转发分为两个步骤：</p>\n<p>1、 需要先获取RequestDispatcher实例</p>\n<p>dispatcher=request.getRequestDispatcher(“servlet2”);</p>\n<p>2、 调用forward方法</p>\n<p>dispatcher.forward(request, response);</p>\n</li>\n</ul>\n<p><strong>2 重定向</strong></p>\n<ul>\n<li><p>重定向是<strong>客户端跳转</strong>。</p>\n</li>\n<li><p>重定向方式的含义是第一个页面通知浏览器发送一个新的页面请求。</p>\n</li>\n<li><p>因为，当你使用重定向时，浏览器中所显示的URL会变成新页面的URL。</p>\n</li>\n<li><p>同时，由于重定向方式产生了一个新的请求，所以经过一次重定向后，request内的对象将无法使用。</p>\n</li>\n<li><p>重定向需要使用HttpServletResponse对象的==sendRedirect==()方法实现</p>\n</li>\n</ul>\n<p><strong>3 转发与重定向的区别</strong></p>\n<ul>\n<li><p>转发是继续传递、处理==同一个请求==，在==服务器端==进行；</p>\n<ul>\n<li>重定向在==客户端==运行，会产生==新请求==。</li>\n</ul>\n</li>\n<li><p>转发时浏览器地址栏中显示的是==初次发出请求的地址==；</p>\n<ul>\n<li>重定向时浏览器地址栏中==不再是初次==请求的地址，而是==最后响应==的那个地址。</li>\n</ul>\n</li>\n<li><p>转发时最终的servlet中，request对象和中转的那个request对象是==同一个==；</p>\n<ul>\n<li>重定向最终的servlet中，request对象和中转的那个request对象==不是同一个==。</li>\n</ul>\n</li>\n<li><p>转发只能转发给==当前web应用==的资源； </p>\n<ul>\n<li>重定可以重定向到==任何==资源。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"Servlet应用\"><a href=\"#Servlet应用\" class=\"headerlink\" title=\"Servlet应用\"></a>Servlet应用</h5><p><strong>使用Servlet处理客户端请求</strong> </p>\n<p>前面学习了Servlet的主要作用就是接受客户端请求并返回响应，接下来就通过一个用户登陆功能示例， 学习使用Servlet处理客户端请求,</p>\n<p><strong>获得Servlet初始化参数</strong></p>\n<p>通过Servlet的doGet()和doPost()，可以处理客户端请求并获得表单提交的数据。当然我们也可以对Servlet进行初始化设置，在Servlet加载时就对参数进行初始化。设置初 始化参数首先要在web.xml中的<servlet>元素中使用<init-param>元素进行设置，</p>\n<p><strong>Servlet访问数据库</strong></p>\n<p>进一步完善登录代码，需要连接数据库进行用户名和密码的校验，我们需要建立BaseDao(之前所学)、实体类、Dao接口和Dao实现类。</p>\n<h5 id=\"Servlet的生命周期\"><a href=\"#Servlet的生命周期\" class=\"headerlink\" title=\"==Servlet的生命周期==\"></a>==Servlet的生命周期==</h5><p>Servlet部署在容器中，其生命周期由容器来管理，可以概括为以下5个阶段：</p>\n<ol>\n<li>加载</li>\n<li>实例化</li>\n<li>初始化</li>\n<li>服务</li>\n<li>销毁</li>\n</ol>\n<h3 id=\"6-3、Servlet原理\"><a href=\"#6-3、Servlet原理\" class=\"headerlink\" title=\"6.3、Servlet原理\"></a>6.3、Servlet原理</h3><p>Servlet是由Web服务器调用，web服务器在收到浏览器请求之后，会：</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567913793252.png\" alt=\"1567913793252\"></p>\n<h3 id=\"6-4、Mapping问题\"><a href=\"#6-4、Mapping问题\" class=\"headerlink\" title=\"6.4、Mapping问题\"></a>6.4、Mapping问题</h3><ol>\n<li><p>一个Servlet可以指定一个映射路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>一个Servlet可以指定多个映射路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello2<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello3<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello4<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello5<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>一个Servlet可以指定通用映射路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>默认请求路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--默认请求路径--&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>指定一些后缀或者前缀等等….</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--可以自定义后缀实现请求映射    注意点，*前面不能加项目映射的路径    hello/sajdlkajda.qinjiang    --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.qinjiang<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>优先级问题<br>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--404--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>error<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.kuang.servlet.ErrorServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>error<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"6-5、ServletContext\"><a href=\"#6-5、ServletContext\" class=\"headerlink\" title=\"6.5、ServletContext\"></a>6.5、ServletContext</h3><p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用；</p>\n<h4 id=\"1、共享数据\"><a href=\"#1、共享数据\" class=\"headerlink\" title=\"1、共享数据\"></a>1、共享数据</h4><p>我在这个Servlet中保存的数据，可以在另外一个servlet中拿到；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;                <span class=\"comment\">//this.getInitParameter()   初始化参数        //this.getServletConfig()   Servlet配置        //this.getServletContext()  Servlet上下文        ServletContext context = this.getServletContext();        String username = &quot;秦疆&quot;; //数据        context.setAttribute(&quot;username&quot;,username); //将一个数据保存在了ServletContext中，名字为：username 。值 username    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        ServletContext context = <span class=\"keyword\">this</span>.getServletContext();        String username = (String) context.getAttribute(<span class=\"string\">&quot;username&quot;</span>);        resp.setContentType(<span class=\"string\">&quot;text/html&quot;</span>);        resp.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);        resp.getWriter().print(<span class=\"string\">&quot;名字&quot;</span>+username);    &#125;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        doGet(req, resp);    &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>getc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.kuang.servlet.GetServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>getc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/getc<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>测试访问结果；</p>\n<h4 id=\"2、获取初始化参数\"><a href=\"#2、获取初始化参数\" class=\"headerlink\" title=\"2、获取初始化参数\"></a>2、获取初始化参数</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置一些web应用初始化参数--&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>url<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;    ServletContext context = <span class=\"keyword\">this</span>.getServletContext();    String url = context.getInitParameter(<span class=\"string\">&quot;url&quot;</span>);    resp.getWriter().print(url);&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、请求转发\"><a href=\"#3、请求转发\" class=\"headerlink\" title=\"3、请求转发\"></a>3、请求转发</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Overrideprotected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;    ServletContext context = <span class=\"keyword\">this</span>.getServletContext();    System.out.println(<span class=\"string\">&quot;进入了ServletDemo04&quot;</span>);    <span class=\"comment\">//RequestDispatcher requestDispatcher = context.getRequestDispatcher(&quot;/gp&quot;); //转发的请求路径    //requestDispatcher.forward(req,resp); //调用forward实现请求转发；    context.getRequestDispatcher(&quot;/gp&quot;).forward(req,resp);&#125;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/狂神web/1567924457532.png\" alt=\"1567924457532\" style=\"zoom: 80%;\" />\n\n<h4 id=\"4、读取资源文件\"><a href=\"#4、读取资源文件\" class=\"headerlink\" title=\"4、读取资源文件\"></a>4、读取资源文件</h4><p>Properties</p>\n<ul>\n<li>在java目录下新建properties</li>\n<li>在resources目录下新建properties</li>\n</ul>\n<p>发现：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath:</p>\n<p>思路：需要一个文件流；</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">username</span>=<span class=\"string\">root12312password=zxczxczxc</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletDemo05</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        InputStream is = <span class=\"keyword\">this</span>.getServletContext().getResourceAsStream(<span class=\"string\">&quot;/WEB-INF/classes/com/kuang/servlet/aa.properties&quot;</span>);        Properties prop = <span class=\"keyword\">new</span> Properties();        prop.load(is);        String user = prop.getProperty(<span class=\"string\">&quot;username&quot;</span>);        String pwd = prop.getProperty(<span class=\"string\">&quot;password&quot;</span>);        resp.getWriter().print(user+<span class=\"string\">&quot;:&quot;</span>+pwd);    &#125;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        doGet(req, resp);    &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>访问测试即可ok；</p>\n<h3 id=\"6-6、HttpServletResponse\"><a href=\"#6-6、HttpServletResponse\" class=\"headerlink\" title=\"6.6、HttpServletResponse\"></a>6.6、HttpServletResponse</h3><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；</p>\n<ul>\n<li>如果要获取客户端请求过来的参数：找HttpServletRequest</li>\n<li>如果要给客户端响应一些信息：找HttpServletResponse</li>\n</ul>\n<h4 id=\"1、简单分类\"><a href=\"#1、简单分类\" class=\"headerlink\" title=\"1、简单分类\"></a>1、简单分类</h4><p>负责向浏览器发送数据的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ServletOutputStream <span class=\"title\">getOutputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;<span class=\"function\">PrintWriter <span class=\"title\">getWriter</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>\n\n<p>负责向浏览器发送响应头的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setCharacterEncoding</span><span class=\"params\">(String var1)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setContentLength</span><span class=\"params\">(<span class=\"keyword\">int</span> var1)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setContentLengthLong</span><span class=\"params\">(<span class=\"keyword\">long</span> var1)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setContentType</span><span class=\"params\">(String var1)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDateHeader</span><span class=\"params\">(String var1, <span class=\"keyword\">long</span> var2)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addDateHeader</span><span class=\"params\">(String var1, <span class=\"keyword\">long</span> var2)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHeader</span><span class=\"params\">(String var1, String var2)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addHeader</span><span class=\"params\">(String var1, String var2)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setIntHeader</span><span class=\"params\">(String var1, <span class=\"keyword\">int</span> var2)</span></span>;    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addIntHeader</span><span class=\"params\">(String var1, <span class=\"keyword\">int</span> var2)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>响应的状态码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> SC_CONTINUE = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_SWITCHING_PROTOCOLS = <span class=\"number\">101</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_OK = <span class=\"number\">200</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_CREATED = <span class=\"number\">201</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_ACCEPTED = <span class=\"number\">202</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NON_AUTHORITATIVE_INFORMATION = <span class=\"number\">203</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NO_CONTENT = <span class=\"number\">204</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_RESET_CONTENT = <span class=\"number\">205</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_PARTIAL_CONTENT = <span class=\"number\">206</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_MULTIPLE_CHOICES = <span class=\"number\">300</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_MOVED_PERMANENTLY = <span class=\"number\">301</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_MOVED_TEMPORARILY = <span class=\"number\">302</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_FOUND = <span class=\"number\">302</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_SEE_OTHER = <span class=\"number\">303</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NOT_MODIFIED = <span class=\"number\">304</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_USE_PROXY = <span class=\"number\">305</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_TEMPORARY_REDIRECT = <span class=\"number\">307</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_BAD_REQUEST = <span class=\"number\">400</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_UNAUTHORIZED = <span class=\"number\">401</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_PAYMENT_REQUIRED = <span class=\"number\">402</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_FORBIDDEN = <span class=\"number\">403</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NOT_FOUND = <span class=\"number\">404</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_METHOD_NOT_ALLOWED = <span class=\"number\">405</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NOT_ACCEPTABLE = <span class=\"number\">406</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_PROXY_AUTHENTICATION_REQUIRED = <span class=\"number\">407</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_REQUEST_TIMEOUT = <span class=\"number\">408</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_CONFLICT = <span class=\"number\">409</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_GONE = <span class=\"number\">410</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_LENGTH_REQUIRED = <span class=\"number\">411</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_PRECONDITION_FAILED = <span class=\"number\">412</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_REQUEST_ENTITY_TOO_LARGE = <span class=\"number\">413</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_REQUEST_URI_TOO_LONG = <span class=\"number\">414</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_UNSUPPORTED_MEDIA_TYPE = <span class=\"number\">415</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE = <span class=\"number\">416</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_EXPECTATION_FAILED = <span class=\"number\">417</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_INTERNAL_SERVER_ERROR = <span class=\"number\">500</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_NOT_IMPLEMENTED = <span class=\"number\">501</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_BAD_GATEWAY = <span class=\"number\">502</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_SERVICE_UNAVAILABLE = <span class=\"number\">503</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_GATEWAY_TIMEOUT = <span class=\"number\">504</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SC_HTTP_VERSION_NOT_SUPPORTED = <span class=\"number\">505</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、下载文件\"><a href=\"#2、下载文件\" class=\"headerlink\" title=\"2、下载文件\"></a>2、下载文件</h4><ol>\n<li>向浏览器输出消息 （一直在讲，就不说了）</li>\n<li>下载文件<ol>\n<li>要获取下载文件的路径</li>\n<li>下载的文件名是啥？</li>\n<li>设置想办法让浏览器能够支持下载我们需要的东西</li>\n<li>获取下载文件的输入流</li>\n<li>创建缓冲区</li>\n<li>获取OutputStream对象</li>\n<li>将FileOutputStream流写入到buffer缓冲区</li>\n<li>使用OutputStream将缓冲区中的数据输出到客户端！</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 要获取下载文件的路径</span></span><br><span class=\"line\">    String realPath = <span class=\"string\">&quot;F:\\\\班级管理\\\\西开【19525】\\\\2、代码\\\\JavaWeb\\\\javaweb-02-servlet\\\\response\\\\target\\\\classes\\\\秦疆.png&quot;</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;下载文件的路径：&quot;</span>+realPath);</span><br><span class=\"line\">    <span class=\"comment\">// 2. 下载的文件名是啥？</span></span><br><span class=\"line\">    String fileName = realPath.substring(realPath.lastIndexOf(<span class=\"string\">&quot;\\\\&quot;</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 3. 设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件名URLEncoder.encode编码，否则有可能乱码</span></span><br><span class=\"line\">    resp.setHeader(<span class=\"string\">&quot;Content-Disposition&quot;</span>,<span class=\"string\">&quot;attachment;filename=&quot;</span>+URLEncoder.encode(fileName,<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 4. 获取下载文件的输入流</span></span><br><span class=\"line\">    FileInputStream in = <span class=\"keyword\">new</span> FileInputStream(realPath);</span><br><span class=\"line\">    <span class=\"comment\">// 5. 创建缓冲区</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 6. 获取OutputStream对象</span></span><br><span class=\"line\">    ServletOutputStream out = resp.getOutputStream();</span><br><span class=\"line\">    <span class=\"comment\">// 7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端！</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((len=in.read(buffer))&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        out.write(buffer,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    in.close();</span><br><span class=\"line\">    out.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、验证码功能\"><a href=\"#3、验证码功能\" class=\"headerlink\" title=\"3、验证码功能\"></a>3、验证码功能</h4><p>验证怎么来的？</p>\n<ul>\n<li>前端实现</li>\n<li>后端实现，需要用到 Java 的图片类，生产一个图片</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.kuang.servlet;<span class=\"keyword\">import</span> javax.imageio.ImageIO;<span class=\"keyword\">import</span> javax.servlet.ServletException;<span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;<span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;<span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;<span class=\"keyword\">import</span> java.awt.*;<span class=\"keyword\">import</span> java.awt.image.BufferedImage;<span class=\"keyword\">import</span> java.io.IOException;<span class=\"keyword\">import</span> java.util.Random;<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;    <span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        <span class=\"comment\">//如何让浏览器3秒自动刷新一次;        resp.setHeader(&quot;refresh&quot;,&quot;3&quot;);                //在内存中创建一个图片        BufferedImage image = new BufferedImage(80,20,BufferedImage.TYPE_INT_RGB);        //得到图片        Graphics2D g = (Graphics2D) image.getGraphics(); //笔        //设置图片的背景颜色        g.setColor(Color.white);        g.fillRect(0,0,80,20);        //给图片写数据        g.setColor(Color.BLUE);        g.setFont(new Font(null,Font.BOLD,20));        g.drawString(makeNum(),0,20);        //告诉浏览器，这个请求用图片的方式打开        resp.setContentType(&quot;image/jpeg&quot;);        //网站存在缓存，不让浏览器缓存        resp.setDateHeader(&quot;expires&quot;,-1);        resp.setHeader(&quot;Cache-Control&quot;,&quot;no-cache&quot;);        resp.setHeader(&quot;Pragma&quot;,&quot;no-cache&quot;);        //把图片写给浏览器        ImageIO.write(image,&quot;jpg&quot;, resp.getOutputStream());    &#125;    //生成随机数    private String makeNum()&#123;        Random random = new Random();        String num = random.nextInt(9999999) + &quot;&quot;;        StringBuffer sb = new StringBuffer();        for (int i = 0; i &lt; 7-num.length() ; i++) &#123;            sb.append(&quot;0&quot;);        &#125;        num = sb.toString() + num;        return num;    &#125;    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        doGet(req, resp);    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、实现重定向\"><a href=\"#4、实现重定向\" class=\"headerlink\" title=\"4、实现重定向\"></a>4、实现重定向</h4><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567931587955.png\" alt=\"1567931587955\"></p>\n<p>B一个web资源收到客户端A请求后，B他会通知A客户端去访问另外一个web资源C，这个过程叫重定向</p>\n<p>常见场景：</p>\n<ul>\n<li>用户登录</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendRedirect</span><span class=\"params\">(String var1)</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Overrideprotected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;    <span class=\"comment\">/*        resp.setHeader(&quot;Location&quot;,&quot;/r/img&quot;);        resp.setStatus(302);         */</span>    resp.sendRedirect(<span class=\"string\">&quot;/r/img&quot;</span>);<span class=\"comment\">//重定向&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>面试题：请你聊聊重定向和转发的区别？</p>\n<p>相同点</p>\n<ul>\n<li>页面都会实现跳转</li>\n</ul>\n<p>不同点</p>\n<ul>\n<li>请求转发的时候，url不会产生变化</li>\n<li>重定向时候，url地址栏会发生变化；</li>\n</ul>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567932163430.png\" alt=\"1567932163430\"></p>\n<h4 id=\"5、简单实现登录重定向\"><a href=\"#5、简单实现登录重定向\" class=\"headerlink\" title=\"5、简单实现登录重定向\"></a>5、简单实现登录重定向</h4><figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%--这里提交的路径，需要寻找到项目的路径--%&gt;&lt;%--$&#123;pageContext.request.contextPath&#125;代表当前的项目--%&gt;&lt;form action=<span class=\"string\">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class=\"string\">&quot;get&quot;</span>&gt;    用户名：&lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;username&quot;</span>&gt; &lt;br&gt;    密码：&lt;input type=<span class=\"string\">&quot;password&quot;</span> name=<span class=\"string\">&quot;password&quot;</span>&gt; &lt;br&gt;    &lt;input type=<span class=\"string\">&quot;submit&quot;</span>&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span>    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;        <span class=\"comment\">//处理请求        String username = req.getParameter(&quot;username&quot;);        String password = req.getParameter(&quot;password&quot;);        System.out.println(username+&quot;:&quot;+password);        //重定向时候一定要注意，路径问题，否则404；        resp.sendRedirect(&quot;/r/success.jsp&quot;);    &#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>requset<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.kuang.servlet.RequestTest<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span>  <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span>  <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>requset<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/login<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>  <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Success&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-7、HttpServletRequest\"><a href=\"#6-7、HttpServletRequest\" class=\"headerlink\" title=\"6.7、HttpServletRequest\"></a>6.7、HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息；</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567933996830.png\" alt=\"1567933996830\"></p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567934023106.png\" alt=\"1567934023106\"></p>\n<h4 id=\"获取参数，请求转发\"><a href=\"#获取参数，请求转发\" class=\"headerlink\" title=\"获取参数，请求转发\"></a>获取参数，请求转发</h4><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1567934110794.png\" alt=\"1567934110794\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Overrideprotected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;    req.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);    resp.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);    String username = req.getParameter(<span class=\"string\">&quot;username&quot;</span>);    String password = req.getParameter(<span class=\"string\">&quot;password&quot;</span>);    String[] hobbys = req.getParameterValues(<span class=\"string\">&quot;hobbys&quot;</span>);    System.out.println(<span class=\"string\">&quot;=============================&quot;</span>);    <span class=\"comment\">//后台接收中文乱码问题    System.out.println(username);    System.out.println(password);    System.out.println(Arrays.toString(hobbys));    System.out.println(&quot;=============================&quot;);    System.out.println(req.getContextPath());    //通过请求转发    //这里的 / 代表当前的web应用    req.getRequestDispatcher(&quot;/success.jsp&quot;).forward(req,resp);&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>面试题：请你聊聊重定向和转发的区别？</strong></p>\n<p>相同点</p>\n<ul>\n<li>页面都会实现跳转</li>\n</ul>\n<p>不同点</p>\n<ul>\n<li>请求转发的时候，url不会产生变化   307</li>\n<li>重定向时候，url地址栏会发生变化； 302</li>\n</ul>\n<h3 id=\"6-8、处理中文乱码\"><a href=\"#6-8、处理中文乱码\" class=\"headerlink\" title=\"6.8、处理中文乱码\"></a>6.8、处理中文乱码</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注册<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;show.jsp&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span>  <span class=\"tag\">&lt;<span class=\"name\">input</span>  <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>  <span class=\"tag\">&lt;<span class=\"name\">input</span>  <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;注册&quot;</span>&gt;</span>  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span>     &lt;%//脚本段   String name = request.getParameter(&quot;name&quot;);    %&gt;        name:&lt;%=name %&gt;   //表达式     This is my JSP page. <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>//处理中文乱码1.   &lt;%   request.setCharacterEncoding(&quot;UTF-8&quot;);   response.setContentType(&quot;text/html;charset=utf-8&quot;);   String name = request.getParameter(&quot;name&quot;);   %&gt;2.    &lt;%   response.setContentType(&quot;text/html;charset=utf-8&quot;);   String name = request.getParameter(&quot;name&quot;);      name = new String(name.getBytes(&quot;ISO-8859-1&quot;),&quot;utf-8&quot;);    %&gt;        name:&lt;%=name %&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"7、Cookie、Session\"><a href=\"#7、Cookie、Session\" class=\"headerlink\" title=\"7、Cookie、Session\"></a>7、Cookie、Session</h2><h3 id=\"7-1、会话\"><a href=\"#7-1、会话\" class=\"headerlink\" title=\"7.1、会话\"></a>7.1、会话</h3><p><strong>会话</strong>：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；</p>\n<p><strong>有状态会话</strong>：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；</p>\n<p><strong>你能怎么证明你是西开的学生？</strong></p>\n<p>你              西开</p>\n<ol>\n<li>发票                西开给你发票</li>\n<li>学校登记        西开标记你来过了</li>\n</ol>\n<p><strong>一个网站，怎么证明你来过？</strong></p>\n<p>客户端              服务端</p>\n<ol>\n<li>服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了； cookie</li>\n<li>服务器登记你来过了，下次你来的时候我来匹配你； seesion</li>\n</ol>\n<h3 id=\"7-2、保存会话的两种技术\"><a href=\"#7-2、保存会话的两种技术\" class=\"headerlink\" title=\"7.2、保存会话的两种技术\"></a>7.2、保存会话的两种技术</h3><p><strong>cookie</strong></p>\n<ul>\n<li>客户端技术   （响应，请求）</li>\n</ul>\n<p><strong>session</strong></p>\n<ul>\n<li>服务器技术，利用这个技术，可以保存用户的会话信息？ 我们可以把信息或者数据放在Session中！</li>\n</ul>\n<p>常见常见：网站登录之后，你下次不用再登录了，第二次访问直接就上去了！</p>\n<h3 id=\"7-3、Cookie\"><a href=\"#7-3、Cookie\" class=\"headerlink\" title=\"7.3、Cookie\"></a>7.3、Cookie</h3><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568344447291.png\" alt=\"1568344447291\"></p>\n<ol>\n<li>从请求中拿到cookie信息</li>\n<li>服务器响应给客户端cookie</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie[] cookies = req.getCookies(); <span class=\"comment\">//获得Cookiecookie.getName(); //获得cookie中的keycookie.getValue(); //获得cookie中的vlauenew Cookie(&quot;lastLoginTime&quot;, System.currentTimeMillis()+&quot;&quot;); //新建一个cookiecookie.setMaxAge(24*60*60); //设置cookie的有效期resp.addCookie(cookie); //响应给客户端一个cookie</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>cookie：一般会保存在本地的 用户目录下 appdata；</strong></p>\n<p>一个网站cookie是否存在上限！<strong>聊聊细节问题</strong></p>\n<ul>\n<li>一个Cookie只能保存一个信息；</li>\n<li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie；</li>\n<li>Cookie大小有限制4kb；</li>\n<li>300个cookie浏览器上限</li>\n</ul>\n<p><strong>删除Cookie；</strong></p>\n<ul>\n<li>不设置有效期，关闭浏览器，自动失效；</li>\n<li>设置有效期时间为 0 ；</li>\n</ul>\n<p><strong>编码解码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URLEncoder.encode(<span class=\"string\">&quot;秦疆&quot;</span>,<span class=\"string\">&quot;utf-8&quot;</span>)URLDecoder.decode(cookie.getValue(),<span class=\"string\">&quot;UTF-8&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"7-4、Session（重点）\"><a href=\"#7-4、Session（重点）\" class=\"headerlink\" title=\"7.4、Session（重点）\"></a>7.4、Session（重点）</h3><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568344560794.png\" alt=\"1568344560794\"></p>\n<p>什么是Session：</p>\n<ul>\n<li>服务器会给每一个用户（浏览器）创建一个Seesion对象；</li>\n<li>一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在；</li>\n<li>用户登录之后，整个网站它都可以访问！–&gt; 保存用户的信息；保存购物车的信息…..</li>\n</ul>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568342773861.png\" alt=\"1568342773861\"></p>\n<p>Session和cookie的区别：</p>\n<ul>\n<li>Cookie是把用户的数据写给用户的浏览器，浏览器保存 （可以保存多个）</li>\n<li>Session把用户的数据写到用户独占Session中，服务器端保存  （保存重要的信息，减少服务器资源的浪费）</li>\n<li>Session对象由服务创建；</li>\n</ul>\n<p>使用场景：</p>\n<ul>\n<li>保存一个登录用户的信息；</li>\n<li>购物车信息；</li>\n<li>在整个网站中经常会使用的数据，我们将它保存在Session中；</li>\n</ul>\n<p>使用Session：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.kuang.servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.kuang.pojo.Person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SessionDemo01</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//解决乱码问题</span></span><br><span class=\"line\">        req.setCharacterEncoding(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        resp.setCharacterEncoding(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        resp.setContentType(<span class=\"string\">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//得到Session</span></span><br><span class=\"line\">        HttpSession session = req.getSession();</span><br><span class=\"line\">        <span class=\"comment\">//给Session中存东西</span></span><br><span class=\"line\">        session.setAttribute(<span class=\"string\">&quot;name&quot;</span>,<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;秦疆&quot;</span>,<span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"comment\">//获取Session的ID</span></span><br><span class=\"line\">        String sessionId = session.getId();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断Session是不是新创建</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (session.isNew())&#123;</span><br><span class=\"line\">            resp.getWriter().write(<span class=\"string\">&quot;session创建成功,ID:&quot;</span>+sessionId);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resp.getWriter().write(<span class=\"string\">&quot;session以及在服务器中存在了,ID:&quot;</span>+sessionId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Session创建的时候做了什么事情；</span></span><br><span class=\"line\"><span class=\"comment\">//        Cookie cookie = new Cookie(&quot;JSESSIONID&quot;,sessionId);</span></span><br><span class=\"line\"><span class=\"comment\">//        resp.addCookie(cookie);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        doGet(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//得到Session</span></span><br><span class=\"line\">HttpSession session = req.getSession();</span><br><span class=\"line\"></span><br><span class=\"line\">Person person = (Person) session.getAttribute(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(person.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">HttpSession session = req.getSession();</span><br><span class=\"line\">session.removeAttribute(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//手动注销Session</span></span><br><span class=\"line\">session.invalidate();</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>会话自动过期：web.xml配置</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--设置Session默认的失效时间--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">session-config</span>&gt;</span>    <span class=\"comment\">&lt;!--15分钟后Session自动失效，以分钟为单位--&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">session-timeout</span>&gt;</span>15<span class=\"tag\">&lt;/<span class=\"name\">session-timeout</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568344679763.png\" alt=\"1568344679763\"></p>\n<h2 id=\"8、JSP\"><a href=\"#8、JSP\" class=\"headerlink\" title=\"8、JSP\"></a>8、JSP</h2><p>==<strong>静态网页&amp;动态网页</strong>==</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>静态网页</strong></th>\n<th><strong>动态网页</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>组成</td>\n<td>html+js+css</td>\n<td>jsp+html;asp+html;php+html;</td>\n</tr>\n<tr>\n<td>交互</td>\n<td>不可交互</td>\n<td>可交互</td>\n</tr>\n<tr>\n<td>运行方式</td>\n<td>客户端运行</td>\n<td>服务端生成，客户端运行</td>\n</tr>\n<tr>\n<td>数据库</td>\n<td>无数据库连接</td>\n<td>连接数据库</td>\n</tr>\n</tbody></table>\n<h3 id=\"8-1、什么是JSP\"><a href=\"#8-1、什么是JSP\" class=\"headerlink\" title=\"8.1、什么是JSP\"></a>8.1、什么是JSP</h3><ul>\n<li><p>Java Server Pages ： Java服务器端页面，也和Servlet一样，用于动态Web技术！</p>\n</li>\n<li><p><a href=\"http://127.0.0.1:8080/login/index.jsp\">http://127.0.0.1:8080/login/index.jsp</a></p>\n</li>\n<li><p>最大的特点：</p>\n<ul>\n<li>写JSP就像在写HTML</li>\n<li>区别：<ul>\n<li>HTML只给用户提供静态的数据</li>\n<li>JSP页面中可以嵌入JAVA代码，为用户提供动态数据；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>工作原理</strong></p>\n<ul>\n<li><p>客户端请求</p>\n</li>\n<li><p>把 *.jsp 翻译成 *.java </p>\n</li>\n<li><p>编译为 *.class</p>\n</li>\n<li><p>执行生成servlet</p>\n</li>\n<li><p>反馈结果给客户端显示</p>\n<pre><code>第二次访问 有改动 执行上述过程 \n无改动 直接执行\n</code></pre>\n</li>\n<li><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/clip_image001-1583305097106.png\" alt=\"123\"></p>\n</li>\n<li><img src=\"/狂神web/clip_image001-1583305111348.png\" alt=\"112\" style=\"zoom:80%;\" /></li>\n<li><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/clip_image001-1583305154041.png\" alt=\"44\"></p>\n</li>\n<li><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/clip_image001-1583305166669.png\" alt=\"54\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"8-2、JSP原理\"><a href=\"#8-2、JSP原理\" class=\"headerlink\" title=\"8.2、JSP原理\"></a>8.2、JSP原理</h3><p>思路：JSP到底怎么执行的！</p>\n<ul>\n<li><p>代码层面没有任何问题</p>\n</li>\n<li><p>服务器内部工作</p>\n<p>tomcat中有一个work目录；</p>\n<p>IDEA中使用Tomcat的会在IDEA的tomcat中生产一个work目录</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568345873736.png\" alt=\"1568345873736\"></p>\n<p>我电脑的地址：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Administrator\\.IntelliJIdea2018<span class=\"number\">.1</span>\\system\\tomcat\\Unnamed_javaweb-session-cookie\\work\\Catalina\\localhost\\ROOT\\org\\apache\\jsp</span><br></pre></td></tr></table></figure>\n\n<p>发现页面转变成了Java程序！</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568345948307.png\" alt=\"1568345948307\"></p>\n</li>\n</ul>\n<p><strong>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet！</strong></p>\n<p>JSP最终也会被转换成为一个Java类！</p>\n<p><strong>JSP 本质上就是一个Servlet</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化  public void _jspInit() &#123;        &#125;//销毁  public void _jspDestroy() &#123;  &#125;//JSPService  public void _jspService(.HttpServletRequest request,HttpServletResponse response)      </span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>判断请求</p>\n</li>\n<li><p>内置一些对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> javax.servlet.jsp.PageContext pageContext;  <span class=\"comment\">//页面上下文javax.servlet.http.HttpSession session = null;    //sessionfinal javax.servlet.ServletContext application;   //applicationContextfinal javax.servlet.ServletConfig config;         //configjavax.servlet.jsp.JspWriter out = null;           //outfinal java.lang.Object page = this;               //page：当前HttpServletRequest request                        //请求HttpServletResponse response                      //响应</span></span><br></pre></td></tr></table></figure></li>\n<li><p>输出页面前增加的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setContentType(<span class=\"string\">&quot;text/html&quot;</span>);       <span class=\"comment\">//设置响应的页面类型pageContext = _jspxFactory.getPageContext(this, request, response,                                          null, true, 8192, true);_jspx_page_context = pageContext;application = pageContext.getServletContext();config = pageContext.getServletConfig();session = pageContext.getSession();out = pageContext.getOut();_jspx_out = out;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>以上的这些个对象我们可以在JSP页面中直接使用！</p>\n</li>\n</ol>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568347078207.png\" alt=\"1568347078207\"></p>\n<p>在JSP页面中；</p>\n<p>只要是 JAVA代码就会原封不动的输出；</p>\n<p>如果是HTML代码，就会被转换为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out.write(<span class=\"string\">&quot;&lt;html&gt;\\r\\n&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这样的格式，输出到前端！</p>\n<h3 id=\"8-3、JSP基础语法\"><a href=\"#8-3、JSP基础语法\" class=\"headerlink\" title=\"8.3、JSP基础语法\"></a>8.3、JSP基础语法</h3><p>任何语言都有自己的语法，JAVA中有,。 JSP 作为java技术的一种应用，它拥有一些自己扩充的语法（了解，知道即可！），Java所有语法都支持！</p>\n<h4 id=\"JSP-的组成-JSP页面的构成\"><a href=\"#JSP-的组成-JSP页面的构成\" class=\"headerlink\" title=\"JSP 的组成 JSP页面的构成\"></a>JSP 的组成 <a href=\"https://www.cnblogs.com/yangyquin/p/5430231.html\"><strong>JSP页面的构成</strong></a></h4> <img src=\"/狂神web/clip_image001-1583305406375.png\" alt=\"54\" style=\"zoom:50%;\" />\n\n<p><strong>==1 静态页面==</strong></p>\n<h5 id=\"2-指令\"><a href=\"#2-指令\" class=\"headerlink\" title=\"==2 指令==\"></a>==2 指令==</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ %&gt;<span class=\"comment\">&lt;!--page--&gt;</span>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;  contentType=&quot;text/html; charset=UTF-8&quot; isErrorPage=&quot;true&quot;%&gt;<span class=\"comment\">&lt;!--include--&gt;</span>&lt;%@ include file=&quot;foot.html&quot; %&gt;   静态引入/静态包含&lt;%@ include file=&quot;foot.jsp&quot; %&gt;使用jsp要删除&lt;% String path = request.getContextPath( );   String basePath = request.getScheme( )+&quot;://&quot;+request %&gt;<span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">jsp:include</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;foot.html&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:include</span>&gt;</span>   动态引入/动态包含<span class=\"tag\">&lt;<span class=\"name\">jsp:include</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;foot.jsp&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:include</span>&gt;</span> (可使用html/jsp)    <span class=\"comment\">&lt;!--taglib--&gt;</span>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;     <span class=\"comment\">&lt;!--======================================================================--&gt;</span>    &lt;%@page args.... %&gt;&lt;%@include file=&quot;&quot;%&gt;&lt;%--@include会将两个页面合二为一--%&gt;&lt;%@include file=&quot;common/header.jsp&quot;%&gt;<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>网页主体<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>&lt;%@include file=&quot;common/footer.jsp&quot;%&gt;<span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span>&lt;%--jSP标签    jsp:include：拼接页面，本质还是三个    --%&gt;<span class=\"tag\">&lt;<span class=\"name\">jsp:include</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;/common/header.jsp&quot;</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>网页主体<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">jsp:include</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;/common/footer.jsp&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-声明\"><a href=\"#3-声明\" class=\"headerlink\" title=\"==3 声明==\"></a>==3 声明==</h5><ul>\n<li>JSP声明：会被编译到JSP生成Java的类中！其他的，就会被生成到_jspService方法中！在JSP，嵌入Java代码即可！</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在JSP页面中定义变量,方法或类  &lt;%!  %&gt;&lt;%!  String s = &quot;这是一个声明&quot; ;    public  int  add(int x,int y )&#123;         return x+y;     &#125; %&gt;=========================================&lt;%!static &#123;  System.out.println(&quot;Loading Servlet!&quot;);&#125;private int globalVar = 0;public void kuang()&#123;  System.out.println(&quot;进入了方法Kuang！&quot;);&#125;%&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-表达式\"><a href=\"#4-表达式\" class=\"headerlink\" title=\"==4 表达式==\"></a>==4 表达式==</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%= 变量或表达式%&gt; basePath:&lt;%=basePath%&gt;<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>当前时间： <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>    &lt;%= new Date() %&gt;<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span>================================&lt;%--JSP表达式作用：用来将程序的输出，输出到客户端&lt;%= 变量或者表达式%&gt;--%&gt;&lt;%= new java.util.Date()%&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-脚本段-（小脚本-代码块）\"><a href=\"#5-脚本段-（小脚本-代码块）\" class=\"headerlink\" title=\"==5 脚本段==（小脚本/代码块）\"></a>==5 脚本段==（小脚本/代码块）</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在JSP页面中执行的Java代码 语法： &lt;% Java代码 %&gt;&lt;%  System.out.println(&quot;这是一个代码块&quot;);%&gt;================================================== &lt;%--jsp脚本片段--%&gt;&lt;%int sum = 0;for (int i = 1; i &lt;=100 ; i++) &#123;  sum+=i;&#125;out.println(&quot;<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Sum=&quot;+sum+&quot;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>&quot;);%&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--脚本片段的再实现--&gt;</span>&lt;%int x = 10;out.println(x);%&gt;<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个JSP文档<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>&lt;%int y = 2;out.println(y);%&gt;<span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span>&lt;%--在代码嵌入HTML元素--%&gt;&lt;%for (int i = 0; i &lt; 5; i++) &#123;%&gt;<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello,World  &lt;%=i%&gt; <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>&lt;%&#125;%&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-标准动作\"><a href=\"#6-标准动作\" class=\"headerlink\" title=\"==6 标准动作==\"></a>==6 标准动作==</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jsp:include</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;foot.html&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:include</span>&gt;</span>   动态引入/动态包含<span class=\"tag\">&lt;<span class=\"name\">jsp:forward</span> <span class=\"attr\">page</span>=<span class=\"string\">&quot;encoding.jsp&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:forward</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7-注释\"><a href=\"#7-注释\" class=\"headerlink\" title=\"==7 注释==\"></a>==7 注释==</h5><ul>\n<li>JSP的注释，不会在客户端显示，HTML就会！</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- This is my JSP page. &lt;br&gt; --&gt;</span>&lt;%--  &lt;% System.out.println(&quot;这是一个代码块&quot;);%&gt;--%&gt;//System.out.println(&quot;这是一个代码块&quot;); /* System.out.println(&quot;这是一个代码块1&quot;); */</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"8-4、9大内置对象\"><a href=\"#8-4、9大内置对象\" class=\"headerlink\" title=\"8.4、9大内置对象\"></a>8.4、9大内置对象</h3><ul>\n<li>PageContext    存东西</li>\n<li>Request     存东西</li>\n<li>Response</li>\n<li>Session      存东西</li>\n<li>Application   【SerlvetContext】   存东西</li>\n<li>config    【SerlvetConfig】</li>\n<li>out</li>\n<li>page ，不用了解</li>\n<li>exception</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pageContext.setAttribute(<span class=\"string\">&quot;name1&quot;</span>,<span class=\"string\">&quot;秦疆1号&quot;</span>); <span class=\"comment\">//保存的数据只在一个页面中有效request.setAttribute(&quot;name2&quot;,&quot;秦疆2号&quot;); //保存的数据只在一次请求中有效，请求转发会携带这个数据session.setAttribute(&quot;name3&quot;,&quot;秦疆3号&quot;); //保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器application.setAttribute(&quot;name4&quot;,&quot;秦疆4号&quot;);  //保存的数据只在服务器中有效，从打开服务器到关闭服务器</span></span><br></pre></td></tr></table></figure>\n\n<p>request：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！</p>\n<p>session：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车；</p>\n<p>application：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如：聊天数据；</p>\n<h3 id=\"8-5、JSP标签、JSTL标签、EL表达式\"><a href=\"#8-5、JSP标签、JSTL标签、EL表达式\" class=\"headerlink\" title=\"8.5、JSP标签、JSTL标签、EL表达式\"></a>8.5、JSP标签、JSTL标签、EL表达式</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- JSTL表达式的依赖 --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span><span class=\"comment\">&lt;!-- standard标签库 --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>taglibs<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>standard<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>EL表达式：  ${ }</p>\n<ul>\n<li><strong>获取数据</strong></li>\n<li><strong>执行运算</strong></li>\n<li><strong>获取web开发的常用对象</strong></li>\n</ul>\n<p><strong>JSP标签</strong></p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%--jsp:include--%&gt;&lt;%--http:<span class=\"comment\">//localhost:8080/jsptag.jsp?name=kuangshen&amp;age=12--%&gt;&lt;jsp:forward page=&quot;/jsptag2.jsp&quot;&gt;    &lt;jsp:param name=&quot;name&quot; value=&quot;kuangshen&quot;&gt;&lt;/jsp:param&gt;    &lt;jsp:param name=&quot;age&quot; value=&quot;12&quot;&gt;&lt;/jsp:param&gt;&lt;/jsp:forward&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>JSTL表达式</strong></p>\n<p>JSTL标签库的使用就是为了弥补HTML标签的不足；它自定义许多标签，可以供我们使用，标签的功能和Java代码一样！</p>\n<p><strong>格式化标签</strong></p>\n<p><strong>SQL标签</strong></p>\n<p><strong>XML 标签</strong></p>\n<p><strong>核心标签</strong> （掌握部分）</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568362473764.png\" alt=\"1568362473764\"></p>\n<p><strong>JSTL标签库使用步骤</strong></p>\n<ul>\n<li>引入对应的 taglib</li>\n<li>使用其中的方法</li>\n<li><strong>在Tomcat 也需要引入 jstl的包，否则会报错：JSTL解析错误</strong></li>\n</ul>\n<p>c：if</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h4&gt;<span class=\"keyword\">if</span>测试&lt;/h4&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;hr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;form action=<span class=\"string\">&quot;coreif.jsp&quot;</span> method=<span class=\"string\">&quot;get&quot;</span>&gt;</span><br><span class=\"line\">    &lt;%--</span><br><span class=\"line\">    EL表达式获取表单中的数据</span><br><span class=\"line\">    $&#123;param.参数名&#125;</span><br><span class=\"line\">    --%&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;username&quot;</span> value=<span class=\"string\">&quot;$&#123;param.username&#125;&quot;</span>&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">&quot;submit&quot;</span> value=<span class=\"string\">&quot;登录&quot;</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%--判断如果提交的用户名是管理员，则登录成功--%&gt;</span><br><span class=\"line\">&lt;c:<span class=\"keyword\">if</span> test=<span class=\"string\">&quot;$&#123;param.username==&#x27;admin&#x27;&#125;&quot;</span> <span class=\"keyword\">var</span>=<span class=\"string\">&quot;isAdmin&quot;</span>&gt;</span><br><span class=\"line\">    &lt;c:out value=<span class=\"string\">&quot;管理员欢迎您！&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/c:<span class=\"keyword\">if</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%--自闭合标签--%&gt;</span><br><span class=\"line\">&lt;c:out value=<span class=\"string\">&quot;$&#123;isAdmin&#125;&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>c:choose   c:when</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;&lt;%--定义一个变量score，值为<span class=\"number\">85</span>--%&gt;&lt;c:set <span class=\"keyword\">var</span>=<span class=\"string\">&quot;score&quot;</span> value=<span class=\"string\">&quot;55&quot;</span>/&gt;&lt;c:choose&gt;    &lt;c:when test=<span class=\"string\">&quot;$&#123;score&gt;=90&#125;&quot;</span>&gt;        你的成绩为优秀    &lt;/c:when&gt;    &lt;c:when test=<span class=\"string\">&quot;$&#123;score&gt;=80&#125;&quot;</span>&gt;        你的成绩为一般    &lt;/c:when&gt;    &lt;c:when test=<span class=\"string\">&quot;$&#123;score&gt;=70&#125;&quot;</span>&gt;        你的成绩为良好    &lt;/c:when&gt;    &lt;c:when test=<span class=\"string\">&quot;$&#123;score&lt;=60&#125;&quot;</span>&gt;        你的成绩为不及格    &lt;/c:when&gt;&lt;/c:choose&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>c:forEach</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%    ArrayList&lt;String&gt; people = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();    people.add(<span class=\"number\">0</span>,<span class=\"string\">&quot;张三&quot;</span>);    people.add(<span class=\"number\">1</span>,<span class=\"string\">&quot;李四&quot;</span>);    people.add(<span class=\"number\">2</span>,<span class=\"string\">&quot;王五&quot;</span>);    people.add(<span class=\"number\">3</span>,<span class=\"string\">&quot;赵六&quot;</span>);    people.add(<span class=\"number\">4</span>,<span class=\"string\">&quot;田六&quot;</span>);    request.setAttribute(<span class=\"string\">&quot;list&quot;</span>,people);%&gt;&lt;%--<span class=\"keyword\">var</span> , 每一次遍历出来的变量items, 要遍历的对象begin,   哪里开始end,     到哪里step,   步长--%&gt;&lt;c:forEach <span class=\"keyword\">var</span>=<span class=\"string\">&quot;people&quot;</span> items=<span class=\"string\">&quot;$&#123;list&#125;&quot;</span>&gt;    &lt;c:out value=<span class=\"string\">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;&lt;/c:forEach&gt;&lt;hr&gt;&lt;c:forEach <span class=\"keyword\">var</span>=<span class=\"string\">&quot;people&quot;</span> items=<span class=\"string\">&quot;$&#123;list&#125;&quot;</span> begin=<span class=\"string\">&quot;1&quot;</span> end=<span class=\"string\">&quot;3&quot;</span> step=<span class=\"string\">&quot;1&quot;</span> &gt;    &lt;c:out value=<span class=\"string\">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9、JavaBean\"><a href=\"#9、JavaBean\" class=\"headerlink\" title=\"9、JavaBean\"></a>9、JavaBean</h2><p>实体类</p>\n<p>JavaBean有特定的写法：</p>\n<ul>\n<li>必须要有一个无参构造</li>\n<li>属性必须私有化</li>\n<li>必须有对应的get/set方法；</li>\n</ul>\n<p>一般用来和数据库的字段做映射  ORM；</p>\n<p>ORM ：对象关系映射</p>\n<ul>\n<li>表—&gt;类</li>\n<li>字段–&gt;属性</li>\n<li>行记录—-&gt;对象</li>\n</ul>\n<p><strong>people表</strong></p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>age</th>\n<th>address</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>秦疆1号</td>\n<td>3</td>\n<td>西安</td>\n</tr>\n<tr>\n<td>2</td>\n<td>秦疆2号</td>\n<td>18</td>\n<td>西安</td>\n</tr>\n<tr>\n<td>3</td>\n<td>秦疆3号</td>\n<td>100</td>\n<td>西安</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span></span>&#123;    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;    <span class=\"keyword\">private</span> String name;    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;    <span class=\"keyword\">private</span> String address;&#125;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;    <span class=\"keyword\">new</span> People(<span class=\"number\">1</span>,<span class=\"string\">&quot;秦疆1号&quot;</span>,<span class=\"number\">3</span>，<span class=\"string\">&quot;西安&quot;</span>);    <span class=\"keyword\">new</span> People(<span class=\"number\">2</span>,<span class=\"string\">&quot;秦疆2号&quot;</span>,<span class=\"number\">3</span>，<span class=\"string\">&quot;西安&quot;</span>);    <span class=\"keyword\">new</span> People(<span class=\"number\">3</span>,<span class=\"string\">&quot;秦疆3号&quot;</span>,<span class=\"number\">3</span>，<span class=\"string\">&quot;西安&quot;</span>);&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>过滤器</li>\n<li>文件上传</li>\n<li>邮件发送</li>\n<li>JDBC 复习 ： 如何使用JDBC ,  JDBC crud， jdbc 事务</li>\n</ul>\n<h2 id=\"10、MVC三层架构\"><a href=\"#10、MVC三层架构\" class=\"headerlink\" title=\"10、MVC三层架构\"></a>10、MVC三层架构</h2><p>什么是MVC：  Model     view     Controller  模型、视图、控制器</p>\n<h3 id=\"10-1、早些年\"><a href=\"#10-1、早些年\" class=\"headerlink\" title=\"10.1、早些年\"></a>10.1、早些年</h3><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568423664332.png\" alt=\"1568423664332\"></p>\n<p>用户直接访问控制层，控制层就可以直接操作数据库；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">servlet--CRUD--&gt;数据库弊端：程序十分臃肿，不利于维护  servlet的代码中：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码架构：没有什么是加一层解决不了的！程序猿调用|JDBC|Mysql Oracle SqlServer ....</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-2、MVC三层架构\"><a href=\"#10-2、MVC三层架构\" class=\"headerlink\" title=\"10.2、MVC三层架构\"></a>10.2、MVC三层架构</h3><p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568424227281.png\" alt=\"1568424227281\"></p>\n<p>Model</p>\n<ul>\n<li>业务处理 ：业务逻辑（Service）</li>\n<li>数据持久层：CRUD   （Dao）</li>\n</ul>\n<p>View</p>\n<ul>\n<li>展示数据</li>\n<li>提供链接发起Servlet请求 （a，form，img…）</li>\n</ul>\n<p>Controller  （Servlet）</p>\n<ul>\n<li><p>接收用户的请求 ：（req：请求参数、Session信息….）</p>\n</li>\n<li><p>交给业务层处理对应的代码 </p>\n</li>\n<li><p>控制视图的跳转  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">登录---&gt;接收用户的登录请求---&gt;处理用户的请求（获取用户登录的参数，username，password）----&gt;交给业务层处理登录业务（判断用户名密码是否正确：事务）---&gt;Dao层查询用户名和密码是否正确--&gt;数据库</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"11、Filter-（重点）\"><a href=\"#11、Filter-（重点）\" class=\"headerlink\" title=\"11、Filter （重点）\"></a>11、Filter （重点）</h2><p>Filter：过滤器 ，用来过滤网站的数据；</p>\n<ul>\n<li>处理中文乱码</li>\n<li>登录验证….</li>\n</ul>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568424858708.png\" alt=\"1568424858708\"></p>\n<p>Filter开发步骤：</p>\n<ol>\n<li><p>导包</p>\n</li>\n<li><p>编写过滤器</p>\n<ol>\n<li><p>导包不要错</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568425162525.png\" alt=\"1568425162525\"></p>\n<p>实现Filter接口，重写对应的方法即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CharacterEncodingFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;    <span class=\"comment\">//初始化：web服务器启动，就以及初始化了，随时等待过滤对象出现！    public void init(FilterConfig filterConfig) throws ServletException &#123;        System.out.println(&quot;CharacterEncodingFilter初始化&quot;);    &#125;    //Chain : 链    /*    1. 过滤中的所有代码，在过滤特定请求的时候都会执行    2. 必须要让过滤器继续同行        chain.doFilter(request,response);     */    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;        request.setCharacterEncoding(&quot;utf-8&quot;);        response.setCharacterEncoding(&quot;utf-8&quot;);        response.setContentType(&quot;text/html;charset=UTF-8&quot;);        System.out.println(&quot;CharacterEncodingFilter执行前....&quot;);        chain.doFilter(request,response); //让我们的请求继续走，如果不写，程序到这里就被拦截停止！        System.out.println(&quot;CharacterEncodingFilter执行后....&quot;);    &#125;    //销毁：web服务器关闭的时候，过滤会销毁    public void destroy() &#123;        System.out.println(&quot;CharacterEncodingFilter销毁&quot;);    &#125;&#125;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>在web.xml中配置 Filter</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>com.kuang.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span>    <span class=\"comment\">&lt;!--只要是 /servlet的任何请求，会经过这个过滤器--&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/servlet/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>    <span class=\"comment\">&lt;!--&lt;url-pattern&gt;/*&lt;/url-pattern&gt;--&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"12、监听器\"><a href=\"#12、监听器\" class=\"headerlink\" title=\"12、监听器\"></a>12、监听器</h2><p>实现一个监听器的接口；（有N种）</p>\n<ol>\n<li><p>编写一个监听器</p>\n<p>实现监听器的接口…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//统计网站在线人数 ： 统计sessionpublic class OnlineCountListener implements HttpSessionListener &#123;    //创建session监听： 看你的一举一动    //一旦创建Session就会触发一次这个事件！    public void sessionCreated(HttpSessionEvent se) &#123;        ServletContext ctx = se.getSession().getServletContext();        System.out.println(se.getSession().getId());        Integer onlineCount = (Integer) ctx.getAttribute(&quot;OnlineCount&quot;);        if (onlineCount==null)&#123;            onlineCount = new Integer(1);        &#125;else &#123;            int count = onlineCount.intValue();            onlineCount = new Integer(count+1);        &#125;        ctx.setAttribute(&quot;OnlineCount&quot;,onlineCount);    &#125;    //销毁session监听    //一旦销毁Session就会触发一次这个事件！    public void sessionDestroyed(HttpSessionEvent se) &#123;        ServletContext ctx = se.getSession().getServletContext();        Integer onlineCount = (Integer) ctx.getAttribute(&quot;OnlineCount&quot;);        if (onlineCount==null)&#123;            onlineCount = new Integer(0);        &#125;else &#123;            int count = onlineCount.intValue();            onlineCount = new Integer(count-1);        &#125;        ctx.setAttribute(&quot;OnlineCount&quot;,onlineCount);    &#125;    /*    Session销毁：    1. 手动销毁  getSession().invalidate();    2. 自动销毁     */&#125;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>web.xml中注册监听器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--注册监听器--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>com.kuang.listener.OnlineCountListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>看情况是否使用！</p>\n</li>\n</ol>\n<h2 id=\"13、过滤器、监听器常见应用\"><a href=\"#13、过滤器、监听器常见应用\" class=\"headerlink\" title=\"13、过滤器、监听器常见应用\"></a>13、过滤器、监听器常见应用</h2><p><strong>监听器：GUI编程中经常使用；</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPanel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Frame frame = <span class=\"keyword\">new</span> Frame(<span class=\"string\">&quot;中秋节快乐&quot;</span>);  <span class=\"comment\">//新建一个窗体</span></span><br><span class=\"line\">        Panel panel = <span class=\"keyword\">new</span> Panel(<span class=\"keyword\">null</span>); <span class=\"comment\">//面板</span></span><br><span class=\"line\">        frame.setLayout(<span class=\"keyword\">null</span>); <span class=\"comment\">//设置窗体的布局</span></span><br><span class=\"line\"></span><br><span class=\"line\">        frame.setBounds(<span class=\"number\">300</span>,<span class=\"number\">300</span>,<span class=\"number\">500</span>,<span class=\"number\">500</span>);</span><br><span class=\"line\">        frame.setBackground(<span class=\"keyword\">new</span> Color(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>)); <span class=\"comment\">//设置背景颜色</span></span><br><span class=\"line\"></span><br><span class=\"line\">        panel.setBounds(<span class=\"number\">50</span>,<span class=\"number\">50</span>,<span class=\"number\">300</span>,<span class=\"number\">300</span>);</span><br><span class=\"line\">        panel.setBackground(<span class=\"keyword\">new</span> Color(<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>)); <span class=\"comment\">//设置背景颜色</span></span><br><span class=\"line\"></span><br><span class=\"line\">        frame.add(panel);</span><br><span class=\"line\"></span><br><span class=\"line\">        frame.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//监听事件，监听关闭事件</span></span><br><span class=\"line\">        frame.addWindowListener(<span class=\"keyword\">new</span> WindowAdapter() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">windowClosing</span><span class=\"params\">(WindowEvent e)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">super</span>.windowClosing(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用户登录之后才能进入主页！用户注销后就不能进入主页了！</p>\n<ol>\n<li><p>用户登录之后，向Sesison中放入用户的数据</p>\n</li>\n<li><p>进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpServletRequest request = (HttpServletRequest) req;</span><br><span class=\"line\">HttpServletResponse response = (HttpServletResponse) resp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (request.getSession().getAttribute(Constant.USER_SESSION)==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    response.sendRedirect(<span class=\"string\">&quot;/error.jsp&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">chain.doFilter(request,response);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"14、JDBC\"><a href=\"#14、JDBC\" class=\"headerlink\" title=\"14、JDBC\"></a>14、JDBC</h2><p>什么是JDBC ： Java连接数据库！</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568439601825.png\" alt=\"1568439601825\"></p>\n<p>需要jar包的支持：</p>\n<ul>\n<li>java.sql</li>\n<li>javax.sql</li>\n<li>mysql-conneter-java…  连接驱动（必须要导入）</li>\n</ul>\n<p><strong>实验环境搭建</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> users(    id <span class=\"type\">INT</span> <span class=\"keyword\">PRIMARY</span> KEY,    `name` <span class=\"type\">VARCHAR</span>(<span class=\"number\">40</span>),    `password` <span class=\"type\">VARCHAR</span>(<span class=\"number\">40</span>),    email <span class=\"type\">VARCHAR</span>(<span class=\"number\">60</span>),    birthday <span class=\"type\">DATE</span>);<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> users(id,`name`,`password`,email,birthday)<span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>,<span class=\"string\">&#x27;张三&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>,<span class=\"string\">&#x27;zs@qq.com&#x27;</span>,<span class=\"string\">&#x27;2000-01-01&#x27;</span>);<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> users(id,`name`,`password`,email,birthday)<span class=\"keyword\">VALUES</span>(<span class=\"number\">2</span>,<span class=\"string\">&#x27;李四&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>,<span class=\"string\">&#x27;ls@qq.com&#x27;</span>,<span class=\"string\">&#x27;2000-01-01&#x27;</span>);<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> users(id,`name`,`password`,email,birthday)<span class=\"keyword\">VALUES</span>(<span class=\"number\">3</span>,<span class=\"string\">&#x27;王五&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>,<span class=\"string\">&#x27;ww@qq.com&#x27;</span>,<span class=\"string\">&#x27;2000-01-01&#x27;</span>);<span class=\"keyword\">SELECT</span>\t<span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>导入数据库依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--mysql的驱动--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.47<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>IDEA中连接数据库：</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568440926845.png\" alt=\"1568440926845\"></p>\n<p><strong>JDBC 固定步骤：</strong></p>\n<ol>\n<li>加载驱动</li>\n<li>连接数据库,代表数据库</li>\n<li>向数据库发送SQL的对象Statement : CRUD</li>\n<li>编写SQL （根据业务，不同的SQL）</li>\n<li>执行SQL</li>\n<li>关闭连接</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestJdbc</span> </span>&#123;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, SQLException </span>&#123;        <span class=\"comment\">//配置信息        //useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码        String url=&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;;        String username = &quot;root&quot;;        String password = &quot;123456&quot;;        //1.加载驱动        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);        //2.连接数据库,代表数据库        Connection connection = DriverManager.getConnection(url, username, password);        //3.向数据库发送SQL的对象Statement,PreparedStatement : CRUD        Statement statement = connection.createStatement();        //4.编写SQL        String sql = &quot;select * from users&quot;;        //5.执行查询SQL，返回一个 ResultSet  ： 结果集        ResultSet rs = statement.executeQuery(sql);        while (rs.next())&#123;            System.out.println(&quot;id=&quot;+rs.getObject(&quot;id&quot;));            System.out.println(&quot;name=&quot;+rs.getObject(&quot;name&quot;));            System.out.println(&quot;password=&quot;+rs.getObject(&quot;password&quot;));            System.out.println(&quot;email=&quot;+rs.getObject(&quot;email&quot;));            System.out.println(&quot;birthday=&quot;+rs.getObject(&quot;birthday&quot;));        &#125;        //6.关闭连接，释放资源（一定要做） 先开后关        rs.close();        statement.close();        connection.close();    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>预编译SQL</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestJDBC2</span> </span>&#123;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;        <span class=\"comment\">//配置信息        //useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码        String url=&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;;        String username = &quot;root&quot;;        String password = &quot;123456&quot;;        //1.加载驱动        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);        //2.连接数据库,代表数据库        Connection connection = DriverManager.getConnection(url, username, password);        //3.编写SQL        String sql = &quot;insert into  users(id, name, password, email, birthday) values (?,?,?,?,?);&quot;;        //4.预编译        PreparedStatement preparedStatement = connection.prepareStatement(sql);        preparedStatement.setInt(1,2);//给第一个占位符？ 的值赋值为1；        preparedStatement.setString(2,&quot;狂神说Java&quot;);//给第二个占位符？ 的值赋值为狂神说Java；        preparedStatement.setString(3,&quot;123456&quot;);//给第三个占位符？ 的值赋值为123456；        preparedStatement.setString(4,&quot;24736743@qq.com&quot;);//给第四个占位符？ 的值赋值为1；        preparedStatement.setDate(5,new Date(new java.util.Date().getTime()));//给第五个占位符？ 的值赋值为new Date(new java.util.Date().getTime())；        //5.执行SQL        int i = preparedStatement.executeUpdate();        if (i&gt;0)&#123;            System.out.println(&quot;插入成功@&quot;);        &#125;        //6.关闭连接，释放资源（一定要做） 先开后关        preparedStatement.close();        connection.close();    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>事务</strong></p>\n<p>要么都成功，要么都失败！</p>\n<p>ACID原则：保证数据的安全。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开启事务事务提交  commit()事务回滚  rollback()关闭事务转账：A:1000B:<span class=\"number\">1000</span>    A(<span class=\"number\">900</span>)   --<span class=\"number\">100</span>--&gt;   B(<span class=\"number\">1100</span>) </span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>Junit单元测试</strong></p>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--单元测试--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>简单使用</p>\n<p>@Test注解只有在方法上有效，只要加了这个注解的方法，就可以直接运行！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568442261610.png\" alt=\"1568442261610\"></p>\n<p>失败的时候是红色：</p>\n<p><img src=\"/%E7%8B%82%E7%A5%9Eweb/1568442289597.png\" alt=\"1568442289597\"></p>\n<p><strong>搭建一个环境</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> account(</span><br><span class=\"line\">   id <span class=\"type\">INT</span> <span class=\"keyword\">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class=\"line\">   `name` <span class=\"type\">VARCHAR</span>(<span class=\"number\">40</span>),</span><br><span class=\"line\">   money <span class=\"type\">FLOAT</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> account(`name`,money) <span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> account(`name`,money) <span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> account(`name`,money) <span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;C&#x27;</span>,<span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//配置信息</span></span><br><span class=\"line\">    <span class=\"comment\">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class=\"line\">    String url=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class=\"line\">    String username = <span class=\"string\">&quot;root&quot;</span>;</span><br><span class=\"line\">    String password = <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Connection connection = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1.加载驱动</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2.连接数据库,代表数据库</span></span><br><span class=\"line\">         connection = DriverManager.getConnection(url, username, password);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.通知数据库开启事务,false 开启</span></span><br><span class=\"line\">        connection.setAutoCommit(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        String sql = <span class=\"string\">&quot;update account set money = money-100 where name = &#x27;A&#x27;&quot;</span>;</span><br><span class=\"line\">        connection.prepareStatement(sql).executeUpdate();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//制造错误</span></span><br><span class=\"line\">        <span class=\"comment\">//int i = 1/0;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String sql2 = <span class=\"string\">&quot;update account set money = money+100 where name = &#x27;B&#x27;&quot;</span>;</span><br><span class=\"line\">        connection.prepareStatement(sql2).executeUpdate();</span><br><span class=\"line\"></span><br><span class=\"line\">        connection.commit();<span class=\"comment\">//以上两条SQL都执行成功了，就提交事务！</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果出现异常，就通知数据库回滚事务</span></span><br><span class=\"line\">            connection.rollback();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e1) &#123;</span><br><span class=\"line\">            e1.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"c++阶段三第一讲","date":"2021-08-31T08:18:28.000Z","description":"c++阶段三第三讲--引用与结构体","top_img":"https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png","cover":"https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png","_content":"\n\n\n# 第一讲\n\n## 引用\n\n通过指针能够直接对变量的内存空间进行操作，如果我不用指针，想让两个变量共用同一个内存空间可以吗？  答案是可以，那就是使用引用。以此引出对引用的使用。  \n\n引用：\n\n**引用变量是其他对象的别名，对其的任何操作和对原来的对象具有相同作用，有点像为原来的对象取的别名。且一个引用被初始化后，就无法再去引用另一个对象。**\n\n创建公式：\n\n`数据类型& 引用名`\n\n> 程序中的引用在程序运行结束前必须被初始化，否则会报错。\n\n创建一个函数，他接收两个引用，用于交换两个变量的值。\n\n```c++\n#include <iostream>\nusing namespace std;\nvoid swap(int & a,int & b)\n{\nint tmp;\ntmp=a;\na=b;\nb=tmp;\n}\nint main()\n{\nint x,y;\ncout << \"请输入x\" << endl;\ncin >> x;\ncout << \"请输入y\" << endl;\ncin >> y;\ncout<<\"ͨ使用引用交换y和x的值\"<<endl;\nswap(x,y);\ncout << \"x=\" << x <<endl;\ncout << \"y=\" << y <<endl;\n}\n```\n\n## 结构体\n\n结构体：\n\n**结构体是由多个不同类型的数据组合而成的数据集合。**\n\n创建公式：\n\n```c++\nstruct 结构体名{\n   成员数据类型1 成员名1;\n   …\n   成员数据类型n 成员名n;\n}；\n```\n\n如：\n\n```c++\nstruct Person\n{\nint index;\nchar name[30];\nshort age;\n};\n```\n\n创建好了之后就可以使用了！\n\n使用结构体的方法：\n\n**就如同创建一个变量一样，只不过需要将原来的`int`,`double`这些数据类型换为结构体的名字。**\n\n如：`Person p;`\n\n接下来就可以通过这个`p`去访问到结构体中的成员`index`,`name`,`age`。\n\n如：`p.index`\n\n并且还可以给它赋值：`p.index = 1`\n\n代码案例：\n\n```c++\nstruct Person\n{\nint index;\nstring name;\nshort age;\n};\nint main(){\n    Person p;\n    p.index = 1;\n    p.name = \"张三\";\n    p.age = 15;\n}\n```\n\n创建一个学生结构体，这个结构体里有`学号`，`姓名`，`年龄`，`性别`。\n\n```c++\nstruct Student\n{\n\tint number;\n\tstring name;\n\tshort age;\n    bool sex;\n};\n```\n\n在主函数里添加三个学生的信息，并显示出来。\n\n```c++\n#include <iostream>\nusing namespace std;\n\nstruct Student\n{\n\tint number;\n\tstring name;\n\tshort age;\n\tbool sex;\n};\nint main() {\n\tStudent s1;\n\tStudent s2;\n\tStudent s3;\n\ts1.number = 01;\n\ts2.number = 02;\n\ts3.number = 03;\n\ts1.name = \"001\";\n\ts2.name = \"002\";\n\ts3.name = \"003\";\n\ts1.age = 14;\n\ts2.age = 15;\n\ts3.age = 16;\n\ts1.sex = true;\n\ts2.sex = false;\n\ts3.sex = true;\n\tcout << s1.number << \" \" << s1.name << \" \" << s1.age << \" \" << s1.sex << endl;\n\tcout << s2.number << \" \" << s2.name << \" \" << s2.age << \" \" << s2.sex << endl;\n\tcout << s3.number << \" \" << s3.name << \" \" << s3.age << \" \" << s3.sex<<endl;\n}\n```\n\n创建结构体还有一种方式：\n\n在创建结构体的同时，将对应变量也一起创建。\n\n```c++\nstruct Person\n{\n\tint index;\n\tstring name;\n\tshort age;\n}s1;\n// 也可以创建多个变量\nstruct Person\n{\n\tint index;\n\tstring name;\n\tshort age;\n}s1,s2;\n```\n\n也可以同时给其成员赋值：\n\n```c++\nstruct Person\n{\n\tint index;\n\tstring name;\n\tshort age;\n}s1 = {1,\"01\",10};\n```\n\n结构体还可以嵌套?\n\n结构体的嵌套：**在定义结构体时可以声明其他已经创建好的结构体变量，也可以在创建一个结构体时创建子结构体。**\n\n```c++\n#include <iostream>\nusing namespace std;\nint main()\n{\n\tstruct PersonInfo\n\t{\n\t\tint index;\n\t\tchar name[30];\n\t\tshort age;\n\t\tstruct WorkPlace\n\t\t{\n\t\t\tchar Address[150];\n\t\t\tchar PostCode[30];\n\t\t\tchar GateCode[50];\n\t\t\tchar Street[100];\n\t\t\tchar Area[50];\n\t\t} WP;\n\t};\n\tPersonInfo pInfo;\n\tstrcpy(pInfo.WP.Address, \"House\");\n\tstrcpy(pInfo.WP.PostCode, \"10000\");\n\tstrcpy(pInfo.WP.GateCode, \"302\");\n\tstrcpy(pInfo.WP.Street, \"Lan Tian\");\n\tstrcpy(pInfo.WP.Area, \"china\");\n\tcout << pInfo.WP.Address << endl;\n\tcout << pInfo.WP.PostCode << endl;\n\tcout << pInfo.WP.GateCode << endl;\n\tcout << pInfo.WP.Street << endl;\n\tcout << pInfo.WP.Area << endl;\n}\n```\n\n## 练习\n\n设计一个小汽车的结构体，在这个结构体中还有一个表示发动机的结构体。\n\n```c++\n#include <iostream>\nusing namespace std;\nint main(int argc, char* argv[])\n{\n\tstruct Car {\n\t\tstruct _Engine {\n\t\t\tint height;\n\t\t\tint width;\n\t\t} engine;\n\t\tchar color[30];\n\t} a_car;\n\ta_car.engine.width = 40;\n\ta_car.engine.height = 60;\n\tstrcpy(a_car.color, \"黑色\");\n\treturn 0;\n}\n```\n\n","source":"_posts/c++阶段三第一讲.md","raw":"---\ntitle: c++阶段三第一讲\ndate: 2021-08-31 16:18:28\ntags: [教材,阶段三]\ncategories: c++\ndescription: c++阶段三第三讲--引用与结构体\ntop_img: https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png\ncover: https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png\n---\n\n\n\n# 第一讲\n\n## 引用\n\n通过指针能够直接对变量的内存空间进行操作，如果我不用指针，想让两个变量共用同一个内存空间可以吗？  答案是可以，那就是使用引用。以此引出对引用的使用。  \n\n引用：\n\n**引用变量是其他对象的别名，对其的任何操作和对原来的对象具有相同作用，有点像为原来的对象取的别名。且一个引用被初始化后，就无法再去引用另一个对象。**\n\n创建公式：\n\n`数据类型& 引用名`\n\n> 程序中的引用在程序运行结束前必须被初始化，否则会报错。\n\n创建一个函数，他接收两个引用，用于交换两个变量的值。\n\n```c++\n#include <iostream>\nusing namespace std;\nvoid swap(int & a,int & b)\n{\nint tmp;\ntmp=a;\na=b;\nb=tmp;\n}\nint main()\n{\nint x,y;\ncout << \"请输入x\" << endl;\ncin >> x;\ncout << \"请输入y\" << endl;\ncin >> y;\ncout<<\"ͨ使用引用交换y和x的值\"<<endl;\nswap(x,y);\ncout << \"x=\" << x <<endl;\ncout << \"y=\" << y <<endl;\n}\n```\n\n## 结构体\n\n结构体：\n\n**结构体是由多个不同类型的数据组合而成的数据集合。**\n\n创建公式：\n\n```c++\nstruct 结构体名{\n   成员数据类型1 成员名1;\n   …\n   成员数据类型n 成员名n;\n}；\n```\n\n如：\n\n```c++\nstruct Person\n{\nint index;\nchar name[30];\nshort age;\n};\n```\n\n创建好了之后就可以使用了！\n\n使用结构体的方法：\n\n**就如同创建一个变量一样，只不过需要将原来的`int`,`double`这些数据类型换为结构体的名字。**\n\n如：`Person p;`\n\n接下来就可以通过这个`p`去访问到结构体中的成员`index`,`name`,`age`。\n\n如：`p.index`\n\n并且还可以给它赋值：`p.index = 1`\n\n代码案例：\n\n```c++\nstruct Person\n{\nint index;\nstring name;\nshort age;\n};\nint main(){\n    Person p;\n    p.index = 1;\n    p.name = \"张三\";\n    p.age = 15;\n}\n```\n\n创建一个学生结构体，这个结构体里有`学号`，`姓名`，`年龄`，`性别`。\n\n```c++\nstruct Student\n{\n\tint number;\n\tstring name;\n\tshort age;\n    bool sex;\n};\n```\n\n在主函数里添加三个学生的信息，并显示出来。\n\n```c++\n#include <iostream>\nusing namespace std;\n\nstruct Student\n{\n\tint number;\n\tstring name;\n\tshort age;\n\tbool sex;\n};\nint main() {\n\tStudent s1;\n\tStudent s2;\n\tStudent s3;\n\ts1.number = 01;\n\ts2.number = 02;\n\ts3.number = 03;\n\ts1.name = \"001\";\n\ts2.name = \"002\";\n\ts3.name = \"003\";\n\ts1.age = 14;\n\ts2.age = 15;\n\ts3.age = 16;\n\ts1.sex = true;\n\ts2.sex = false;\n\ts3.sex = true;\n\tcout << s1.number << \" \" << s1.name << \" \" << s1.age << \" \" << s1.sex << endl;\n\tcout << s2.number << \" \" << s2.name << \" \" << s2.age << \" \" << s2.sex << endl;\n\tcout << s3.number << \" \" << s3.name << \" \" << s3.age << \" \" << s3.sex<<endl;\n}\n```\n\n创建结构体还有一种方式：\n\n在创建结构体的同时，将对应变量也一起创建。\n\n```c++\nstruct Person\n{\n\tint index;\n\tstring name;\n\tshort age;\n}s1;\n// 也可以创建多个变量\nstruct Person\n{\n\tint index;\n\tstring name;\n\tshort age;\n}s1,s2;\n```\n\n也可以同时给其成员赋值：\n\n```c++\nstruct Person\n{\n\tint index;\n\tstring name;\n\tshort age;\n}s1 = {1,\"01\",10};\n```\n\n结构体还可以嵌套?\n\n结构体的嵌套：**在定义结构体时可以声明其他已经创建好的结构体变量，也可以在创建一个结构体时创建子结构体。**\n\n```c++\n#include <iostream>\nusing namespace std;\nint main()\n{\n\tstruct PersonInfo\n\t{\n\t\tint index;\n\t\tchar name[30];\n\t\tshort age;\n\t\tstruct WorkPlace\n\t\t{\n\t\t\tchar Address[150];\n\t\t\tchar PostCode[30];\n\t\t\tchar GateCode[50];\n\t\t\tchar Street[100];\n\t\t\tchar Area[50];\n\t\t} WP;\n\t};\n\tPersonInfo pInfo;\n\tstrcpy(pInfo.WP.Address, \"House\");\n\tstrcpy(pInfo.WP.PostCode, \"10000\");\n\tstrcpy(pInfo.WP.GateCode, \"302\");\n\tstrcpy(pInfo.WP.Street, \"Lan Tian\");\n\tstrcpy(pInfo.WP.Area, \"china\");\n\tcout << pInfo.WP.Address << endl;\n\tcout << pInfo.WP.PostCode << endl;\n\tcout << pInfo.WP.GateCode << endl;\n\tcout << pInfo.WP.Street << endl;\n\tcout << pInfo.WP.Area << endl;\n}\n```\n\n## 练习\n\n设计一个小汽车的结构体，在这个结构体中还有一个表示发动机的结构体。\n\n```c++\n#include <iostream>\nusing namespace std;\nint main(int argc, char* argv[])\n{\n\tstruct Car {\n\t\tstruct _Engine {\n\t\t\tint height;\n\t\t\tint width;\n\t\t} engine;\n\t\tchar color[30];\n\t} a_car;\n\ta_car.engine.width = 40;\n\ta_car.engine.height = 60;\n\tstrcpy(a_car.color, \"黑色\");\n\treturn 0;\n}\n```\n\n","slug":"c++阶段三第一讲","published":1,"updated":"2021-09-09T01:17:20.466Z","_id":"ckt0vl5f80000ocu9e9p059zw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"第一讲\"><a href=\"#第一讲\" class=\"headerlink\" title=\"第一讲\"></a>第一讲</h1><h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>通过指针能够直接对变量的内存空间进行操作，如果我不用指针，想让两个变量共用同一个内存空间可以吗？  答案是可以，那就是使用引用。以此引出对引用的使用。  </p>\n<p>引用：</p>\n<p><strong>引用变量是其他对象的别名，对其的任何操作和对原来的对象具有相同作用，有点像为原来的对象取的别名。且一个引用被初始化后，就无法再去引用另一个对象。</strong></p>\n<p>创建公式：</p>\n<p><code>数据类型&amp; 引用名</code></p>\n<blockquote>\n<p>程序中的引用在程序运行结束前必须被初始化，否则会报错。</p>\n</blockquote>\n<p>创建一个函数，他接收两个引用，用于交换两个变量的值。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp; a,<span class=\"keyword\">int</span> &amp; b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">tmp=a;</span><br><span class=\"line\">a=b;</span><br><span class=\"line\">b=tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;请输入x&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">cin &gt;&gt; x;</span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;请输入y&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">cin &gt;&gt; y;</span><br><span class=\"line\">cout&lt;&lt;<span class=\"string\">&quot;ͨ使用引用交换y和x的值&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\"><span class=\"built_in\">swap</span>(x,y);</span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;x=&quot;</span> &lt;&lt; x &lt;&lt;endl;</span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;y=&quot;</span> &lt;&lt; y &lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2><p>结构体：</p>\n<p><strong>结构体是由多个不同类型的数据组合而成的数据集合。</strong></p>\n<p>创建公式：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 结构体名&#123;</span></span><br><span class=\"line\">   成员数据类型<span class=\"number\">1</span> 成员名<span class=\"number\">1</span>;</span><br><span class=\"line\">   …</span><br><span class=\"line\">   成员数据类型n 成员名n;</span><br><span class=\"line\">&#125;；</span><br></pre></td></tr></table></figure>\n\n<p>如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> index;</span><br><span class=\"line\"><span class=\"keyword\">char</span> name[<span class=\"number\">30</span>];</span><br><span class=\"line\"><span class=\"keyword\">short</span> age;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>创建好了之后就可以使用了！</p>\n<p>使用结构体的方法：</p>\n<p><strong>就如同创建一个变量一样，只不过需要将原来的<code>int</code>,<code>double</code>这些数据类型换为结构体的名字。</strong></p>\n<p>如：<code>Person p;</code></p>\n<p>接下来就可以通过这个<code>p</code>去访问到结构体中的成员<code>index</code>,<code>name</code>,<code>age</code>。</p>\n<p>如：<code>p.index</code></p>\n<p>并且还可以给它赋值：<code>p.index = 1</code></p>\n<p>代码案例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> index;</span><br><span class=\"line\">string name;</span><br><span class=\"line\"><span class=\"keyword\">short</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Person p;</span><br><span class=\"line\">    p.index = <span class=\"number\">1</span>;</span><br><span class=\"line\">    p.name = <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\">    p.age = <span class=\"number\">15</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个学生结构体，这个结构体里有<code>学号</code>，<code>姓名</code>，<code>年龄</code>，<code>性别</code>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> number;</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\t<span class=\"keyword\">short</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> sex;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在主函数里添加三个学生的信息，并显示出来。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> number;</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\t<span class=\"keyword\">short</span> age;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> sex;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tStudent s1;</span><br><span class=\"line\">\tStudent s2;</span><br><span class=\"line\">\tStudent s3;</span><br><span class=\"line\">\ts1.number = <span class=\"number\">01</span>;</span><br><span class=\"line\">\ts2.number = <span class=\"number\">02</span>;</span><br><span class=\"line\">\ts3.number = <span class=\"number\">03</span>;</span><br><span class=\"line\">\ts1.name = <span class=\"string\">&quot;001&quot;</span>;</span><br><span class=\"line\">\ts2.name = <span class=\"string\">&quot;002&quot;</span>;</span><br><span class=\"line\">\ts3.name = <span class=\"string\">&quot;003&quot;</span>;</span><br><span class=\"line\">\ts1.age = <span class=\"number\">14</span>;</span><br><span class=\"line\">\ts2.age = <span class=\"number\">15</span>;</span><br><span class=\"line\">\ts3.age = <span class=\"number\">16</span>;</span><br><span class=\"line\">\ts1.sex = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\ts2.sex = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\ts3.sex = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\tcout &lt;&lt; s1.number &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; s1.name &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; s1.age &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; s1.sex &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; s2.number &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; s2.name &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; s2.age &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; s2.sex &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; s3.number &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; s3.name &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; s3.age &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; s3.sex&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建结构体还有一种方式：</p>\n<p>在创建结构体的同时，将对应变量也一起创建。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index;</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\t<span class=\"keyword\">short</span> age;</span><br><span class=\"line\">&#125;s1;</span><br><span class=\"line\"><span class=\"comment\">// 也可以创建多个变量</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index;</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\t<span class=\"keyword\">short</span> age;</span><br><span class=\"line\">&#125;s1,s2;</span><br></pre></td></tr></table></figure>\n\n<p>也可以同时给其成员赋值：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index;</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\t<span class=\"keyword\">short</span> age;</span><br><span class=\"line\">&#125;s1 = &#123;<span class=\"number\">1</span>,<span class=\"string\">&quot;01&quot;</span>,<span class=\"number\">10</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>结构体还可以嵌套?</p>\n<p>结构体的嵌套：<strong>在定义结构体时可以声明其他已经创建好的结构体变量，也可以在创建一个结构体时创建子结构体。</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PersonInfo</span></span></span><br><span class=\"line\"><span class=\"class\">\t&#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> name[<span class=\"number\">30</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">short</span> age;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">WorkPlace</span></span></span><br><span class=\"line\"><span class=\"class\">\t\t&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span> Address[<span class=\"number\">150</span>];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span> PostCode[<span class=\"number\">30</span>];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span> GateCode[<span class=\"number\">50</span>];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span> Street[<span class=\"number\">100</span>];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span> Area[<span class=\"number\">50</span>];</span><br><span class=\"line\">\t\t&#125; WP;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tPersonInfo pInfo;</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(pInfo.WP.Address, <span class=\"string\">&quot;House&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(pInfo.WP.PostCode, <span class=\"string\">&quot;10000&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(pInfo.WP.GateCode, <span class=\"string\">&quot;302&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(pInfo.WP.Street, <span class=\"string\">&quot;Lan Tian&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(pInfo.WP.Area, <span class=\"string\">&quot;china&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; pInfo.WP.Address &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; pInfo.WP.PostCode &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; pInfo.WP.GateCode &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; pInfo.WP.Street &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; pInfo.WP.Area &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p>设计一个小汽车的结构体，在这个结构体中还有一个表示发动机的结构体。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Car</span> &#123;</span></span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">Engine</span> &#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> height;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> width;</span><br><span class=\"line\">\t\t&#125; engine;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> color[<span class=\"number\">30</span>];</span><br><span class=\"line\">\t&#125; a_car;</span><br><span class=\"line\">\ta_car.engine.width = <span class=\"number\">40</span>;</span><br><span class=\"line\">\ta_car.engine.height = <span class=\"number\">60</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(a_car.color, <span class=\"string\">&quot;黑色&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"excerpt":"","more":"<h1 id=\"第一讲\"><a href=\"#第一讲\" class=\"headerlink\" title=\"第一讲\"></a>第一讲</h1><h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>通过指针能够直接对变量的内存空间进行操作，如果我不用指针，想让两个变量共用同一个内存空间可以吗？  答案是可以，那就是使用引用。以此引出对引用的使用。  </p>\n<p>引用：</p>\n<p><strong>引用变量是其他对象的别名，对其的任何操作和对原来的对象具有相同作用，有点像为原来的对象取的别名。且一个引用被初始化后，就无法再去引用另一个对象。</strong></p>\n<p>创建公式：</p>\n<p><code>数据类型&amp; 引用名</code></p>\n<blockquote>\n<p>程序中的引用在程序运行结束前必须被初始化，否则会报错。</p>\n</blockquote>\n<p>创建一个函数，他接收两个引用，用于交换两个变量的值。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp; a,<span class=\"keyword\">int</span> &amp; b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">tmp=a;</span><br><span class=\"line\">a=b;</span><br><span class=\"line\">b=tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;请输入x&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">cin &gt;&gt; x;</span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;请输入y&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">cin &gt;&gt; y;</span><br><span class=\"line\">cout&lt;&lt;<span class=\"string\">&quot;ͨ使用引用交换y和x的值&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\"><span class=\"built_in\">swap</span>(x,y);</span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;x=&quot;</span> &lt;&lt; x &lt;&lt;endl;</span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;y=&quot;</span> &lt;&lt; y &lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2><p>结构体：</p>\n<p><strong>结构体是由多个不同类型的数据组合而成的数据集合。</strong></p>\n<p>创建公式：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 结构体名&#123;</span></span><br><span class=\"line\">   成员数据类型<span class=\"number\">1</span> 成员名<span class=\"number\">1</span>;</span><br><span class=\"line\">   …</span><br><span class=\"line\">   成员数据类型n 成员名n;</span><br><span class=\"line\">&#125;；</span><br></pre></td></tr></table></figure>\n\n<p>如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> index;</span><br><span class=\"line\"><span class=\"keyword\">char</span> name[<span class=\"number\">30</span>];</span><br><span class=\"line\"><span class=\"keyword\">short</span> age;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>创建好了之后就可以使用了！</p>\n<p>使用结构体的方法：</p>\n<p><strong>就如同创建一个变量一样，只不过需要将原来的<code>int</code>,<code>double</code>这些数据类型换为结构体的名字。</strong></p>\n<p>如：<code>Person p;</code></p>\n<p>接下来就可以通过这个<code>p</code>去访问到结构体中的成员<code>index</code>,<code>name</code>,<code>age</code>。</p>\n<p>如：<code>p.index</code></p>\n<p>并且还可以给它赋值：<code>p.index = 1</code></p>\n<p>代码案例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> index;</span><br><span class=\"line\">string name;</span><br><span class=\"line\"><span class=\"keyword\">short</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Person p;</span><br><span class=\"line\">    p.index = <span class=\"number\">1</span>;</span><br><span class=\"line\">    p.name = <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\">    p.age = <span class=\"number\">15</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个学生结构体，这个结构体里有<code>学号</code>，<code>姓名</code>，<code>年龄</code>，<code>性别</code>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> number;</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\t<span class=\"keyword\">short</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> sex;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在主函数里添加三个学生的信息，并显示出来。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> number;</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\t<span class=\"keyword\">short</span> age;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> sex;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tStudent s1;</span><br><span class=\"line\">\tStudent s2;</span><br><span class=\"line\">\tStudent s3;</span><br><span class=\"line\">\ts1.number = <span class=\"number\">01</span>;</span><br><span class=\"line\">\ts2.number = <span class=\"number\">02</span>;</span><br><span class=\"line\">\ts3.number = <span class=\"number\">03</span>;</span><br><span class=\"line\">\ts1.name = <span class=\"string\">&quot;001&quot;</span>;</span><br><span class=\"line\">\ts2.name = <span class=\"string\">&quot;002&quot;</span>;</span><br><span class=\"line\">\ts3.name = <span class=\"string\">&quot;003&quot;</span>;</span><br><span class=\"line\">\ts1.age = <span class=\"number\">14</span>;</span><br><span class=\"line\">\ts2.age = <span class=\"number\">15</span>;</span><br><span class=\"line\">\ts3.age = <span class=\"number\">16</span>;</span><br><span class=\"line\">\ts1.sex = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\ts2.sex = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\ts3.sex = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\tcout &lt;&lt; s1.number &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; s1.name &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; s1.age &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; s1.sex &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; s2.number &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; s2.name &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; s2.age &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; s2.sex &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; s3.number &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; s3.name &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; s3.age &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; s3.sex&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建结构体还有一种方式：</p>\n<p>在创建结构体的同时，将对应变量也一起创建。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index;</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\t<span class=\"keyword\">short</span> age;</span><br><span class=\"line\">&#125;s1;</span><br><span class=\"line\"><span class=\"comment\">// 也可以创建多个变量</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index;</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\t<span class=\"keyword\">short</span> age;</span><br><span class=\"line\">&#125;s1,s2;</span><br></pre></td></tr></table></figure>\n\n<p>也可以同时给其成员赋值：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index;</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\t<span class=\"keyword\">short</span> age;</span><br><span class=\"line\">&#125;s1 = &#123;<span class=\"number\">1</span>,<span class=\"string\">&quot;01&quot;</span>,<span class=\"number\">10</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>结构体还可以嵌套?</p>\n<p>结构体的嵌套：<strong>在定义结构体时可以声明其他已经创建好的结构体变量，也可以在创建一个结构体时创建子结构体。</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PersonInfo</span></span></span><br><span class=\"line\"><span class=\"class\">\t&#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> name[<span class=\"number\">30</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">short</span> age;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">WorkPlace</span></span></span><br><span class=\"line\"><span class=\"class\">\t\t&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span> Address[<span class=\"number\">150</span>];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span> PostCode[<span class=\"number\">30</span>];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span> GateCode[<span class=\"number\">50</span>];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span> Street[<span class=\"number\">100</span>];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span> Area[<span class=\"number\">50</span>];</span><br><span class=\"line\">\t\t&#125; WP;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tPersonInfo pInfo;</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(pInfo.WP.Address, <span class=\"string\">&quot;House&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(pInfo.WP.PostCode, <span class=\"string\">&quot;10000&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(pInfo.WP.GateCode, <span class=\"string\">&quot;302&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(pInfo.WP.Street, <span class=\"string\">&quot;Lan Tian&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(pInfo.WP.Area, <span class=\"string\">&quot;china&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; pInfo.WP.Address &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; pInfo.WP.PostCode &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; pInfo.WP.GateCode &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; pInfo.WP.Street &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; pInfo.WP.Area &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p>设计一个小汽车的结构体，在这个结构体中还有一个表示发动机的结构体。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Car</span> &#123;</span></span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">Engine</span> &#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> height;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> width;</span><br><span class=\"line\">\t\t&#125; engine;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> color[<span class=\"number\">30</span>];</span><br><span class=\"line\">\t&#125; a_car;</span><br><span class=\"line\">\ta_car.engine.width = <span class=\"number\">40</span>;</span><br><span class=\"line\">\ta_car.engine.height = <span class=\"number\">60</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(a_car.color, <span class=\"string\">&quot;黑色&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"c++阶段一第一讲","date":"2021-08-31T03:30:39.000Z","description":"c++阶段一第一讲--初始c++","top_img":"https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png","cover":"https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png","_content":"\n# 初始c++\n\n## 课堂笔记\n\n### 什么是编程？\n\n编程就是人与计算机交流的过程！\n\n### 计算机语言的发展过程\n\n#### 机器语言\n\n由0和1组成的低级语言，因为计算机只能识别有和无两种状态。\n\n优点：执行速度块，因为计算机可以直接看得懂。\n\n缺点：编写难度较大，出错率高且不易查找。\n\n#### 汇编语言\n\n由少量的人类语言组成，比如AX、BX等等。\n\n优点：能被一部分人掌握，出错率这些都比机器语言好。\n\n缺点：计算机不能直接看懂需要进行编译成机器码，所以执行速度没有机器语言快。\n\n#### 高级语言\n\n由大量的人类语言组成，比如if、else等等。\n\n优点：能够被大部分人掌握，各方面都比前面的机器语言和汇编语言强。\n\n缺点：计算机也不能直接看懂需要进行编译成机器码。\n\n### 打开Visual Studio\n\n![](https://i.loli.net/2021/08/31/EXfvesn97aoBV8U.png)\n\n## 创建项目1\n\n![](https://i.loli.net/2021/08/31/PX5RWoSzacQhEnv.png)\n\n## 创建项目2\n\n![](https://i.loli.net/2021/08/31/EQ2DFfX4op1lb7y.png)\n\n## 创建项目3\n\n![](https://i.loli.net/2021/08/31/dqPsmWXbuiKHwNr.png)\n\n## 创建项目4\n\n![](https://i.loli.net/2021/08/31/cxIE8FGh3zKT6Pt.png)\n\n## 散掉注释行\n\n![](https://i.loli.net/2021/08/31/lWiH9uPsfwDZ8Mp.png)\n\n## 散掉空白行\n\n![](https://i.loli.net/2021/08/31/kEGXKiPwg1U6QRL.png)\n\n### c++：Hello,World!\n\n```c++\n// c++的第一个程序\n#include <iostream>\nint main(){\n    std::cout<<\"Hello,World!\\n\";\n}\n```\n\n+ //\n\n  注释，计算机不会运行，主要用作解释或标注某一行或多行代码的意思。\n\n+ \\#\n\n  预处理符，在程序运行之前提前处理。\n\n+ include\n\n  调用某一个东西。\n\n+ iostream\n\n  输入、输出库文件。\n\n+ main()\n\n  主函数，程序的入口。\n\n+ {}\n\n  函数的范围。\n\n  + 左 { \n\n    就表示这个函数从这里开始\n\n  + 右 } \n\n    就表示这个函数从这里结束\n\n+ std::\n\n  命名空间，他里面包含了很多命令。\n\n+ cout\n\n  向控制台输出，存在与std这个命令空间里。\n\n+ << \n\n  插入符，将右边的东西交给左边去执行。\n\n+ ;\n\n  结束符，表示我们这一句命令结束了。\n\n+ \\n\n\n  换行符，相当于我们在某一个地方按了一下回车，必须写在\"\"之中。\n\n> 注意：除\"\"里的字符意外其他的都需要是英文状态下的输入法输入才行!\n\n## 课堂练习\n\n+ 在控制台中打印自己的名字\n+ 在控制台中将自己的名字竖着显示出来\n+ 在控制台显示出一首古诗【格式按照语文课本】\n\n```c++\n#include<iostream\nint main()\n{\n    // 打印自己的名字\n    std::cout << \"高老师\";\n    // 打印一首古诗\n    std::cout << \"  静夜思\\n\";\n    std::cout << \"床前明月光，\\n\";\n    std::cout << \"疑是地上霜。\\n\";\n    std::cout << \"举头望明月，\\n\";\n    std::cout << \"低头思故乡。\\n\";\n}\n```\n\n","source":"_posts/c++阶段一第一讲.md","raw":"---\ntitle: c++阶段一第一讲\ndate: 2021-08-31 11:30:39\ntags: [教材,阶段一]\ncategories: c++\ndescription: c++阶段一第一讲--初始c++\ntop_img: https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png\ncover: https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png\n---\n\n# 初始c++\n\n## 课堂笔记\n\n### 什么是编程？\n\n编程就是人与计算机交流的过程！\n\n### 计算机语言的发展过程\n\n#### 机器语言\n\n由0和1组成的低级语言，因为计算机只能识别有和无两种状态。\n\n优点：执行速度块，因为计算机可以直接看得懂。\n\n缺点：编写难度较大，出错率高且不易查找。\n\n#### 汇编语言\n\n由少量的人类语言组成，比如AX、BX等等。\n\n优点：能被一部分人掌握，出错率这些都比机器语言好。\n\n缺点：计算机不能直接看懂需要进行编译成机器码，所以执行速度没有机器语言快。\n\n#### 高级语言\n\n由大量的人类语言组成，比如if、else等等。\n\n优点：能够被大部分人掌握，各方面都比前面的机器语言和汇编语言强。\n\n缺点：计算机也不能直接看懂需要进行编译成机器码。\n\n### 打开Visual Studio\n\n![](https://i.loli.net/2021/08/31/EXfvesn97aoBV8U.png)\n\n## 创建项目1\n\n![](https://i.loli.net/2021/08/31/PX5RWoSzacQhEnv.png)\n\n## 创建项目2\n\n![](https://i.loli.net/2021/08/31/EQ2DFfX4op1lb7y.png)\n\n## 创建项目3\n\n![](https://i.loli.net/2021/08/31/dqPsmWXbuiKHwNr.png)\n\n## 创建项目4\n\n![](https://i.loli.net/2021/08/31/cxIE8FGh3zKT6Pt.png)\n\n## 散掉注释行\n\n![](https://i.loli.net/2021/08/31/lWiH9uPsfwDZ8Mp.png)\n\n## 散掉空白行\n\n![](https://i.loli.net/2021/08/31/kEGXKiPwg1U6QRL.png)\n\n### c++：Hello,World!\n\n```c++\n// c++的第一个程序\n#include <iostream>\nint main(){\n    std::cout<<\"Hello,World!\\n\";\n}\n```\n\n+ //\n\n  注释，计算机不会运行，主要用作解释或标注某一行或多行代码的意思。\n\n+ \\#\n\n  预处理符，在程序运行之前提前处理。\n\n+ include\n\n  调用某一个东西。\n\n+ iostream\n\n  输入、输出库文件。\n\n+ main()\n\n  主函数，程序的入口。\n\n+ {}\n\n  函数的范围。\n\n  + 左 { \n\n    就表示这个函数从这里开始\n\n  + 右 } \n\n    就表示这个函数从这里结束\n\n+ std::\n\n  命名空间，他里面包含了很多命令。\n\n+ cout\n\n  向控制台输出，存在与std这个命令空间里。\n\n+ << \n\n  插入符，将右边的东西交给左边去执行。\n\n+ ;\n\n  结束符，表示我们这一句命令结束了。\n\n+ \\n\n\n  换行符，相当于我们在某一个地方按了一下回车，必须写在\"\"之中。\n\n> 注意：除\"\"里的字符意外其他的都需要是英文状态下的输入法输入才行!\n\n## 课堂练习\n\n+ 在控制台中打印自己的名字\n+ 在控制台中将自己的名字竖着显示出来\n+ 在控制台显示出一首古诗【格式按照语文课本】\n\n```c++\n#include<iostream\nint main()\n{\n    // 打印自己的名字\n    std::cout << \"高老师\";\n    // 打印一首古诗\n    std::cout << \"  静夜思\\n\";\n    std::cout << \"床前明月光，\\n\";\n    std::cout << \"疑是地上霜。\\n\";\n    std::cout << \"举头望明月，\\n\";\n    std::cout << \"低头思故乡。\\n\";\n}\n```\n\n","slug":"c++阶段一第一讲","published":1,"updated":"2021-09-15T07:12:38.337Z","_id":"ckt0vl5fo0001ocu9hm4s6q2a","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"初始c\"><a href=\"#初始c\" class=\"headerlink\" title=\"初始c++\"></a>初始c++</h1><h2 id=\"课堂笔记\"><a href=\"#课堂笔记\" class=\"headerlink\" title=\"课堂笔记\"></a>课堂笔记</h2><h3 id=\"什么是编程？\"><a href=\"#什么是编程？\" class=\"headerlink\" title=\"什么是编程？\"></a>什么是编程？</h3><p>编程就是人与计算机交流的过程！</p>\n<h3 id=\"计算机语言的发展过程\"><a href=\"#计算机语言的发展过程\" class=\"headerlink\" title=\"计算机语言的发展过程\"></a>计算机语言的发展过程</h3><h4 id=\"机器语言\"><a href=\"#机器语言\" class=\"headerlink\" title=\"机器语言\"></a>机器语言</h4><p>由0和1组成的低级语言，因为计算机只能识别有和无两种状态。</p>\n<p>优点：执行速度块，因为计算机可以直接看得懂。</p>\n<p>缺点：编写难度较大，出错率高且不易查找。</p>\n<h4 id=\"汇编语言\"><a href=\"#汇编语言\" class=\"headerlink\" title=\"汇编语言\"></a>汇编语言</h4><p>由少量的人类语言组成，比如AX、BX等等。</p>\n<p>优点：能被一部分人掌握，出错率这些都比机器语言好。</p>\n<p>缺点：计算机不能直接看懂需要进行编译成机器码，所以执行速度没有机器语言快。</p>\n<h4 id=\"高级语言\"><a href=\"#高级语言\" class=\"headerlink\" title=\"高级语言\"></a>高级语言</h4><p>由大量的人类语言组成，比如if、else等等。</p>\n<p>优点：能够被大部分人掌握，各方面都比前面的机器语言和汇编语言强。</p>\n<p>缺点：计算机也不能直接看懂需要进行编译成机器码。</p>\n<h3 id=\"打开Visual-Studio\"><a href=\"#打开Visual-Studio\" class=\"headerlink\" title=\"打开Visual Studio\"></a>打开Visual Studio</h3><p><img src=\"https://i.loli.net/2021/08/31/EXfvesn97aoBV8U.png\"></p>\n<h2 id=\"创建项目1\"><a href=\"#创建项目1\" class=\"headerlink\" title=\"创建项目1\"></a>创建项目1</h2><p><img src=\"https://i.loli.net/2021/08/31/PX5RWoSzacQhEnv.png\"></p>\n<h2 id=\"创建项目2\"><a href=\"#创建项目2\" class=\"headerlink\" title=\"创建项目2\"></a>创建项目2</h2><p><img src=\"https://i.loli.net/2021/08/31/EQ2DFfX4op1lb7y.png\"></p>\n<h2 id=\"创建项目3\"><a href=\"#创建项目3\" class=\"headerlink\" title=\"创建项目3\"></a>创建项目3</h2><p><img src=\"https://i.loli.net/2021/08/31/dqPsmWXbuiKHwNr.png\"></p>\n<h2 id=\"创建项目4\"><a href=\"#创建项目4\" class=\"headerlink\" title=\"创建项目4\"></a>创建项目4</h2><p><img src=\"https://i.loli.net/2021/08/31/cxIE8FGh3zKT6Pt.png\"></p>\n<h2 id=\"散掉注释行\"><a href=\"#散掉注释行\" class=\"headerlink\" title=\"散掉注释行\"></a>散掉注释行</h2><p><img src=\"https://i.loli.net/2021/08/31/lWiH9uPsfwDZ8Mp.png\"></p>\n<h2 id=\"散掉空白行\"><a href=\"#散掉空白行\" class=\"headerlink\" title=\"散掉空白行\"></a>散掉空白行</h2><p><img src=\"https://i.loli.net/2021/08/31/kEGXKiPwg1U6QRL.png\"></p>\n<h3 id=\"c-：Hello-World\"><a href=\"#c-：Hello-World\" class=\"headerlink\" title=\"c++：Hello,World!\"></a>c++：Hello,World!</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// c++的第一个程序</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    std::cout&lt;&lt;<span class=\"string\">&quot;Hello,World!\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>//</p>\n<p>注释，计算机不会运行，主要用作解释或标注某一行或多行代码的意思。</p>\n</li>\n<li><p>#</p>\n<p>预处理符，在程序运行之前提前处理。</p>\n</li>\n<li><p>include</p>\n<p>调用某一个东西。</p>\n</li>\n<li><p>iostream</p>\n<p>输入、输出库文件。</p>\n</li>\n<li><p>main()</p>\n<p>主函数，程序的入口。</p>\n</li>\n<li><p>{}</p>\n<p>函数的范围。</p>\n<ul>\n<li><p>左 { </p>\n<p>就表示这个函数从这里开始</p>\n</li>\n<li><p>右 } </p>\n<p>就表示这个函数从这里结束</p>\n</li>\n</ul>\n</li>\n<li><p>std::</p>\n<p>命名空间，他里面包含了很多命令。</p>\n</li>\n<li><p>cout</p>\n<p>向控制台输出，存在与std这个命令空间里。</p>\n</li>\n<li><p>&lt;&lt; </p>\n<p>插入符，将右边的东西交给左边去执行。</p>\n</li>\n<li><p>;</p>\n<p>结束符，表示我们这一句命令结束了。</p>\n</li>\n<li><p>\\n</p>\n<p>换行符，相当于我们在某一个地方按了一下回车，必须写在””之中。</p>\n</li>\n</ul>\n<blockquote>\n<p>注意：除””里的字符意外其他的都需要是英文状态下的输入法输入才行!</p>\n</blockquote>\n<h2 id=\"课堂练习\"><a href=\"#课堂练习\" class=\"headerlink\" title=\"课堂练习\"></a>课堂练习</h2><ul>\n<li>在控制台中打印自己的名字</li>\n<li>在控制台中将自己的名字竖着显示出来</li>\n<li>在控制台显示出一首古诗【格式按照语文课本】</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&lt;iostream</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打印自己的名字</span></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;高老师&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 打印一首古诗</span></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;  静夜思\\n&quot;</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;床前明月光，\\n&quot;</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;疑是地上霜。\\n&quot;</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;举头望明月，\\n&quot;</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;低头思故乡。\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"excerpt":"","more":"<h1 id=\"初始c\"><a href=\"#初始c\" class=\"headerlink\" title=\"初始c++\"></a>初始c++</h1><h2 id=\"课堂笔记\"><a href=\"#课堂笔记\" class=\"headerlink\" title=\"课堂笔记\"></a>课堂笔记</h2><h3 id=\"什么是编程？\"><a href=\"#什么是编程？\" class=\"headerlink\" title=\"什么是编程？\"></a>什么是编程？</h3><p>编程就是人与计算机交流的过程！</p>\n<h3 id=\"计算机语言的发展过程\"><a href=\"#计算机语言的发展过程\" class=\"headerlink\" title=\"计算机语言的发展过程\"></a>计算机语言的发展过程</h3><h4 id=\"机器语言\"><a href=\"#机器语言\" class=\"headerlink\" title=\"机器语言\"></a>机器语言</h4><p>由0和1组成的低级语言，因为计算机只能识别有和无两种状态。</p>\n<p>优点：执行速度块，因为计算机可以直接看得懂。</p>\n<p>缺点：编写难度较大，出错率高且不易查找。</p>\n<h4 id=\"汇编语言\"><a href=\"#汇编语言\" class=\"headerlink\" title=\"汇编语言\"></a>汇编语言</h4><p>由少量的人类语言组成，比如AX、BX等等。</p>\n<p>优点：能被一部分人掌握，出错率这些都比机器语言好。</p>\n<p>缺点：计算机不能直接看懂需要进行编译成机器码，所以执行速度没有机器语言快。</p>\n<h4 id=\"高级语言\"><a href=\"#高级语言\" class=\"headerlink\" title=\"高级语言\"></a>高级语言</h4><p>由大量的人类语言组成，比如if、else等等。</p>\n<p>优点：能够被大部分人掌握，各方面都比前面的机器语言和汇编语言强。</p>\n<p>缺点：计算机也不能直接看懂需要进行编译成机器码。</p>\n<h3 id=\"打开Visual-Studio\"><a href=\"#打开Visual-Studio\" class=\"headerlink\" title=\"打开Visual Studio\"></a>打开Visual Studio</h3><p><img src=\"https://i.loli.net/2021/08/31/EXfvesn97aoBV8U.png\"></p>\n<h2 id=\"创建项目1\"><a href=\"#创建项目1\" class=\"headerlink\" title=\"创建项目1\"></a>创建项目1</h2><p><img src=\"https://i.loli.net/2021/08/31/PX5RWoSzacQhEnv.png\"></p>\n<h2 id=\"创建项目2\"><a href=\"#创建项目2\" class=\"headerlink\" title=\"创建项目2\"></a>创建项目2</h2><p><img src=\"https://i.loli.net/2021/08/31/EQ2DFfX4op1lb7y.png\"></p>\n<h2 id=\"创建项目3\"><a href=\"#创建项目3\" class=\"headerlink\" title=\"创建项目3\"></a>创建项目3</h2><p><img src=\"https://i.loli.net/2021/08/31/dqPsmWXbuiKHwNr.png\"></p>\n<h2 id=\"创建项目4\"><a href=\"#创建项目4\" class=\"headerlink\" title=\"创建项目4\"></a>创建项目4</h2><p><img src=\"https://i.loli.net/2021/08/31/cxIE8FGh3zKT6Pt.png\"></p>\n<h2 id=\"散掉注释行\"><a href=\"#散掉注释行\" class=\"headerlink\" title=\"散掉注释行\"></a>散掉注释行</h2><p><img src=\"https://i.loli.net/2021/08/31/lWiH9uPsfwDZ8Mp.png\"></p>\n<h2 id=\"散掉空白行\"><a href=\"#散掉空白行\" class=\"headerlink\" title=\"散掉空白行\"></a>散掉空白行</h2><p><img src=\"https://i.loli.net/2021/08/31/kEGXKiPwg1U6QRL.png\"></p>\n<h3 id=\"c-：Hello-World\"><a href=\"#c-：Hello-World\" class=\"headerlink\" title=\"c++：Hello,World!\"></a>c++：Hello,World!</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// c++的第一个程序</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    std::cout&lt;&lt;<span class=\"string\">&quot;Hello,World!\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>//</p>\n<p>注释，计算机不会运行，主要用作解释或标注某一行或多行代码的意思。</p>\n</li>\n<li><p>#</p>\n<p>预处理符，在程序运行之前提前处理。</p>\n</li>\n<li><p>include</p>\n<p>调用某一个东西。</p>\n</li>\n<li><p>iostream</p>\n<p>输入、输出库文件。</p>\n</li>\n<li><p>main()</p>\n<p>主函数，程序的入口。</p>\n</li>\n<li><p>{}</p>\n<p>函数的范围。</p>\n<ul>\n<li><p>左 { </p>\n<p>就表示这个函数从这里开始</p>\n</li>\n<li><p>右 } </p>\n<p>就表示这个函数从这里结束</p>\n</li>\n</ul>\n</li>\n<li><p>std::</p>\n<p>命名空间，他里面包含了很多命令。</p>\n</li>\n<li><p>cout</p>\n<p>向控制台输出，存在与std这个命令空间里。</p>\n</li>\n<li><p>&lt;&lt; </p>\n<p>插入符，将右边的东西交给左边去执行。</p>\n</li>\n<li><p>;</p>\n<p>结束符，表示我们这一句命令结束了。</p>\n</li>\n<li><p>\\n</p>\n<p>换行符，相当于我们在某一个地方按了一下回车，必须写在””之中。</p>\n</li>\n</ul>\n<blockquote>\n<p>注意：除””里的字符意外其他的都需要是英文状态下的输入法输入才行!</p>\n</blockquote>\n<h2 id=\"课堂练习\"><a href=\"#课堂练习\" class=\"headerlink\" title=\"课堂练习\"></a>课堂练习</h2><ul>\n<li>在控制台中打印自己的名字</li>\n<li>在控制台中将自己的名字竖着显示出来</li>\n<li>在控制台显示出一首古诗【格式按照语文课本】</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&lt;iostream</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打印自己的名字</span></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;高老师&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 打印一首古诗</span></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;  静夜思\\n&quot;</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;床前明月光，\\n&quot;</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;疑是地上霜。\\n&quot;</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;举头望明月，\\n&quot;</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;低头思故乡。\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"c++阶段二第一讲","date":"2021-08-31T03:47:42.000Z","description":"c++阶段二第一讲--初始函数","top_img":"https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png","cover":"https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png","_content":"\n# 初始函数\n\n## 思考\n\n函数是什么？或者说你们觉得它有什么用？\n\n数学上的函数：\n\n两个一直在变化的量，一个量的改变会影响到另一个量的改变。\n\n<img src=\"https://i.loli.net/2021/08/31/3HOrUMQptT7kwSm.png\" style=\"zoom:200%;\" />\n\n我们使用过的函数：\n\n+ printf()\n\n  \n\n+ scanf()\n\n> 通过**按住`ctrl`+鼠标左键**可以查看这个函数是在哪儿定义的\n\n## 函数\n\n函数的主要作用：\n\n**函数是指一段代码可以直接被另一段代码引用的代码。也叫做子程序。**一个较大的程序一般应分为若干个程序块，每一个模块用来实现一个特定的功能。所有的高级语言中都有子程序这个概念，用子程序实现模块的功能。在C++语言中，子程序的作用是由一个主函数和若干个函数构成。**由主函数调用其他函数，其他函数也可以互相调用。同一个函数可以被一个或多个函数调用任意多次。**\n\n函数的必备要素：\n\n```c++\n// 完整的函数\nvoid print(string a) {\n\tcout << a;\n}\n```\n\n+ void\n\n  这个位置是规定当前函数在运行之后需要有一个什么类型的结果，void表示没有结果，如果需要int类型的结果那就写int\n\n+ print\n\n  这个位置是函数的名字，和变量名类似\n\n+ ()\n\n  括号里写入这个函数在调用时需要的参数，称为形参\n\n+ {}\n\n  大括号里写入函数需要完成的逻辑代码\n\n调用函数的方法：\n\n调用函数有三种方式：\n\n1. 没有返回值类型，也不需要参数\n\n   `fun();`\n\n2. 没有返回值类型，需要参数\n\n   `fun(1);`\n\n3. 有返回值，也需要参数\n\n   `int a = fun(1);`\n\n> 注：调用函数传入的参数称为这个函数的实参\n\n### 自定义函数\n\n```c++\n// 打印一个字符串\nvoid print(string a) {\n\tcout << a;\n}\n// 两个数相加\nint add(int a,int b){\n\treturn a + b;\n}\n```\n\n这两个函数写在`mian`函数外面的上方\n\n```c++\n#include<iostream>\n#include<windows.h>\nusing namespace std;\n//打印一个字符串\nvoid print(string a) {\n\tcout << a<<endl;\n}\n// 两个数相加\nint add(int a,int b){\n\treturn a + b;\n}\nint  main()\n{\n\tprint(\"123\");\n\tcout << add(1, 2);\n}\n```\n\n> 同学们动手敲敲这段代码，体会一些函数的作用。\n\n## 练习\n\n完成两个数相加，相减，相乘，相除。\n","source":"_posts/c++阶段二第一讲.md","raw":"---\ntitle: c++阶段二第一讲\ndate: 2021-08-31 11:47:42\ntags: [教材,阶段二]\ncategories: c++\ndescription: c++阶段二第一讲--初始函数\ntop_img: https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png\ncover: https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png\n---\n\n# 初始函数\n\n## 思考\n\n函数是什么？或者说你们觉得它有什么用？\n\n数学上的函数：\n\n两个一直在变化的量，一个量的改变会影响到另一个量的改变。\n\n<img src=\"https://i.loli.net/2021/08/31/3HOrUMQptT7kwSm.png\" style=\"zoom:200%;\" />\n\n我们使用过的函数：\n\n+ printf()\n\n  \n\n+ scanf()\n\n> 通过**按住`ctrl`+鼠标左键**可以查看这个函数是在哪儿定义的\n\n## 函数\n\n函数的主要作用：\n\n**函数是指一段代码可以直接被另一段代码引用的代码。也叫做子程序。**一个较大的程序一般应分为若干个程序块，每一个模块用来实现一个特定的功能。所有的高级语言中都有子程序这个概念，用子程序实现模块的功能。在C++语言中，子程序的作用是由一个主函数和若干个函数构成。**由主函数调用其他函数，其他函数也可以互相调用。同一个函数可以被一个或多个函数调用任意多次。**\n\n函数的必备要素：\n\n```c++\n// 完整的函数\nvoid print(string a) {\n\tcout << a;\n}\n```\n\n+ void\n\n  这个位置是规定当前函数在运行之后需要有一个什么类型的结果，void表示没有结果，如果需要int类型的结果那就写int\n\n+ print\n\n  这个位置是函数的名字，和变量名类似\n\n+ ()\n\n  括号里写入这个函数在调用时需要的参数，称为形参\n\n+ {}\n\n  大括号里写入函数需要完成的逻辑代码\n\n调用函数的方法：\n\n调用函数有三种方式：\n\n1. 没有返回值类型，也不需要参数\n\n   `fun();`\n\n2. 没有返回值类型，需要参数\n\n   `fun(1);`\n\n3. 有返回值，也需要参数\n\n   `int a = fun(1);`\n\n> 注：调用函数传入的参数称为这个函数的实参\n\n### 自定义函数\n\n```c++\n// 打印一个字符串\nvoid print(string a) {\n\tcout << a;\n}\n// 两个数相加\nint add(int a,int b){\n\treturn a + b;\n}\n```\n\n这两个函数写在`mian`函数外面的上方\n\n```c++\n#include<iostream>\n#include<windows.h>\nusing namespace std;\n//打印一个字符串\nvoid print(string a) {\n\tcout << a<<endl;\n}\n// 两个数相加\nint add(int a,int b){\n\treturn a + b;\n}\nint  main()\n{\n\tprint(\"123\");\n\tcout << add(1, 2);\n}\n```\n\n> 同学们动手敲敲这段代码，体会一些函数的作用。\n\n## 练习\n\n完成两个数相加，相减，相乘，相除。\n","slug":"c++阶段二第一讲","published":1,"updated":"2021-09-09T01:17:20.466Z","_id":"ckt0vl5ft0004ocu930b8boff","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"初始函数\"><a href=\"#初始函数\" class=\"headerlink\" title=\"初始函数\"></a>初始函数</h1><h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>函数是什么？或者说你们觉得它有什么用？</p>\n<p>数学上的函数：</p>\n<p>两个一直在变化的量，一个量的改变会影响到另一个量的改变。</p>\n<img src=\"https://i.loli.net/2021/08/31/3HOrUMQptT7kwSm.png\" style=\"zoom:200%;\" />\n\n<p>我们使用过的函数：</p>\n<ul>\n<li><p>printf()</p>\n</li>\n<li><p>scanf()</p>\n</li>\n</ul>\n<blockquote>\n<p>通过<strong>按住<code>ctrl</code>+鼠标左键</strong>可以查看这个函数是在哪儿定义的</p>\n</blockquote>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>函数的主要作用：</p>\n<p><strong>函数是指一段代码可以直接被另一段代码引用的代码。也叫做子程序。</strong>一个较大的程序一般应分为若干个程序块，每一个模块用来实现一个特定的功能。所有的高级语言中都有子程序这个概念，用子程序实现模块的功能。在C++语言中，子程序的作用是由一个主函数和若干个函数构成。<strong>由主函数调用其他函数，其他函数也可以互相调用。同一个函数可以被一个或多个函数调用任意多次。</strong></p>\n<p>函数的必备要素：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 完整的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(string a)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>void</p>\n<p>这个位置是规定当前函数在运行之后需要有一个什么类型的结果，void表示没有结果，如果需要int类型的结果那就写int</p>\n</li>\n<li><p>print</p>\n<p>这个位置是函数的名字，和变量名类似</p>\n</li>\n<li><p>()</p>\n<p>括号里写入这个函数在调用时需要的参数，称为形参</p>\n</li>\n<li><p>{}</p>\n<p>大括号里写入函数需要完成的逻辑代码</p>\n</li>\n</ul>\n<p>调用函数的方法：</p>\n<p>调用函数有三种方式：</p>\n<ol>\n<li><p>没有返回值类型，也不需要参数</p>\n<p><code>fun();</code></p>\n</li>\n<li><p>没有返回值类型，需要参数</p>\n<p><code>fun(1);</code></p>\n</li>\n<li><p>有返回值，也需要参数</p>\n<p><code>int a = fun(1);</code></p>\n</li>\n</ol>\n<blockquote>\n<p>注：调用函数传入的参数称为这个函数的实参</p>\n</blockquote>\n<h3 id=\"自定义函数\"><a href=\"#自定义函数\" class=\"headerlink\" title=\"自定义函数\"></a>自定义函数</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 打印一个字符串</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(string a)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 两个数相加</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这两个函数写在<code>mian</code>函数外面的上方</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"comment\">//打印一个字符串</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(string a)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; a&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 两个数相加</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>同学们动手敲敲这段代码，体会一些函数的作用。</p>\n</blockquote>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p>完成两个数相加，相减，相乘，相除。</p>\n","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"excerpt":"","more":"<h1 id=\"初始函数\"><a href=\"#初始函数\" class=\"headerlink\" title=\"初始函数\"></a>初始函数</h1><h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>函数是什么？或者说你们觉得它有什么用？</p>\n<p>数学上的函数：</p>\n<p>两个一直在变化的量，一个量的改变会影响到另一个量的改变。</p>\n<img src=\"https://i.loli.net/2021/08/31/3HOrUMQptT7kwSm.png\" style=\"zoom:200%;\" />\n\n<p>我们使用过的函数：</p>\n<ul>\n<li><p>printf()</p>\n</li>\n<li><p>scanf()</p>\n</li>\n</ul>\n<blockquote>\n<p>通过<strong>按住<code>ctrl</code>+鼠标左键</strong>可以查看这个函数是在哪儿定义的</p>\n</blockquote>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>函数的主要作用：</p>\n<p><strong>函数是指一段代码可以直接被另一段代码引用的代码。也叫做子程序。</strong>一个较大的程序一般应分为若干个程序块，每一个模块用来实现一个特定的功能。所有的高级语言中都有子程序这个概念，用子程序实现模块的功能。在C++语言中，子程序的作用是由一个主函数和若干个函数构成。<strong>由主函数调用其他函数，其他函数也可以互相调用。同一个函数可以被一个或多个函数调用任意多次。</strong></p>\n<p>函数的必备要素：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 完整的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(string a)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>void</p>\n<p>这个位置是规定当前函数在运行之后需要有一个什么类型的结果，void表示没有结果，如果需要int类型的结果那就写int</p>\n</li>\n<li><p>print</p>\n<p>这个位置是函数的名字，和变量名类似</p>\n</li>\n<li><p>()</p>\n<p>括号里写入这个函数在调用时需要的参数，称为形参</p>\n</li>\n<li><p>{}</p>\n<p>大括号里写入函数需要完成的逻辑代码</p>\n</li>\n</ul>\n<p>调用函数的方法：</p>\n<p>调用函数有三种方式：</p>\n<ol>\n<li><p>没有返回值类型，也不需要参数</p>\n<p><code>fun();</code></p>\n</li>\n<li><p>没有返回值类型，需要参数</p>\n<p><code>fun(1);</code></p>\n</li>\n<li><p>有返回值，也需要参数</p>\n<p><code>int a = fun(1);</code></p>\n</li>\n</ol>\n<blockquote>\n<p>注：调用函数传入的参数称为这个函数的实参</p>\n</blockquote>\n<h3 id=\"自定义函数\"><a href=\"#自定义函数\" class=\"headerlink\" title=\"自定义函数\"></a>自定义函数</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 打印一个字符串</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(string a)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 两个数相加</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这两个函数写在<code>mian</code>函数外面的上方</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"comment\">//打印一个字符串</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(string a)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; a&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 两个数相加</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>同学们动手敲敲这段代码，体会一些函数的作用。</p>\n</blockquote>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p>完成两个数相加，相减，相乘，相除。</p>\n"},{"title":"c++阶段一第三讲","date":"2021-09-15T01:13:44.000Z","description":"c++阶段一第三讲","top_img":"https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png","cover":"https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png","_content":"\n# 第三讲\n\n## 常量\n\n常量：是指其值一旦确定，就不会发生改变的量。\n\n创建常量的公式：\n\n+ `#define 常量名 常量值;`\n\n  > 写在头文件的下边\n\n  ```c++\n  #include <iostream>\n  #define a 1;\n  int main()\n  {\n  \tstd::cout << a;\n  }\n  ```\n\n+ `const 数据类型 常量名 = 常量值;`\n\n  > 写在头文件的下边\n\n  ```c++\n  #include <iostream>\n  const int a = 1;\n  int main()\n  {\n  \tstd::cout << a;\n  }\n  ```\n\n练习：尝试去修改常量的值\n\n```c++\n#include <iostream>\nconst int a = 10;\nint main()\n{\n\ta = 20;\n\tstd::cout << a;\n}\n```\n\n## 单目运算符\n\n`++`：自增1\n\n`--`：自减1\n\n前置`++`：先自增，再参与其他运算。\n\n后置`++`：先参与其他运算，再自增。\n\n前置`--`：先自减，再参与其他运算。\n\n后置`--`：先参与其他运算，再自减。\n\n练习：\n\na的值是多少 \n\n```c++\nint a = 5;\nstd::cout<<a++;\n```\n\n```c++\nint a = 5;\nstd::cout<<++a;\n```\n\n```c++\nint a = 5;\nstd::cout<<a--;\n```\n\n```c++\nint a = 5;\nstd::cout<<--a;\n```\n\na和b的值是多少\n\n```c++\nint a = 5;\nint b = a++;\nstd::cout<<a<<\" \"<<b;\n```\n\n```c++\nint a = 5;\nint b = ++a;\nstd::cout<<a<<\" \"<<b;\n```\n\n```c++\nint a = 5;\nint b = a--;\nstd::cout<<a<<\" \"<<b;\n```\n\n```c++\nint a = 5;\nint b = --a;\nstd::cout<<a<<\" \"<<b;\n```\n\n控制台会显示出什么样的结果\n\n```c++\n#include <iostream>\nint main()\n{\n\tint a = 5, b = 5;\n\tstd::cout << a++ << \" \" << ++b << \"\\n\";\n\tstd::cout << --a << \" \" << b-- << \"\\n\";\n\tstd::cout << ++a << \" \" << b++ << \"\\n\";\n\tstd::cout << a-- << \" \" << --b << \"\\n\";\n}\n```\n\n## 类型转换\n\n下面这段程序运行后有什么样的结果\n\n```c++\n#include <iostream>\nint main()\n{\n\tint a = 5.1;\n\tstd::cout<<a;\n}\n```\n\n![](https://gitee.com/gaoxianglong/picgo/raw/master/img/20210915112324.png)\n\n自动数据类型转换的规则：\n\n1. 横向红色的箭头表示的是无条件转换，float类型数据运算时，将其转换为double类型进行运算，运算结果再转换为float；short和char类型数据在做运算时，首先转换为int，再将运算结果转换为short、char类型。\n2. 纵向的蓝色箭头，当不同数据类型之间进行运算时，位于箭头下方的数据类型会转换为箭头上方的数据类型。\n\n## 强制类型转换\n\n公式：\n\n`(数据类型) 表达式`\n\n如：\n\n```c++\nint s=(int)5.3;\nstd::cout<<s;\n//或者\ndouble t=5.3;\nint s=(int)t;\nstd::cout<<s;\n```\n\n整数转小数时，直接加上 .0\n\n小数转整数时，小数点后的数据全部舍弃（精度丢失）\n\n整数转字符时，根据ASCII码表转换\n\n字符转整数时，根据ASCll码表转换\n\n练习：\n\n分别找出a、z、A、Z这几个字符再ASCII码表里的整数是多少\n\n","source":"_posts/c++阶段一第三讲.md","raw":"---\ntitle: c++阶段一第三讲\ndate: 2021-09-15 09:13:44\ntags: [教材,阶段一]\ncategories: c++\ndescription: c++阶段一第三讲\ntop_img: https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png\ncover: https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png\n---\n\n# 第三讲\n\n## 常量\n\n常量：是指其值一旦确定，就不会发生改变的量。\n\n创建常量的公式：\n\n+ `#define 常量名 常量值;`\n\n  > 写在头文件的下边\n\n  ```c++\n  #include <iostream>\n  #define a 1;\n  int main()\n  {\n  \tstd::cout << a;\n  }\n  ```\n\n+ `const 数据类型 常量名 = 常量值;`\n\n  > 写在头文件的下边\n\n  ```c++\n  #include <iostream>\n  const int a = 1;\n  int main()\n  {\n  \tstd::cout << a;\n  }\n  ```\n\n练习：尝试去修改常量的值\n\n```c++\n#include <iostream>\nconst int a = 10;\nint main()\n{\n\ta = 20;\n\tstd::cout << a;\n}\n```\n\n## 单目运算符\n\n`++`：自增1\n\n`--`：自减1\n\n前置`++`：先自增，再参与其他运算。\n\n后置`++`：先参与其他运算，再自增。\n\n前置`--`：先自减，再参与其他运算。\n\n后置`--`：先参与其他运算，再自减。\n\n练习：\n\na的值是多少 \n\n```c++\nint a = 5;\nstd::cout<<a++;\n```\n\n```c++\nint a = 5;\nstd::cout<<++a;\n```\n\n```c++\nint a = 5;\nstd::cout<<a--;\n```\n\n```c++\nint a = 5;\nstd::cout<<--a;\n```\n\na和b的值是多少\n\n```c++\nint a = 5;\nint b = a++;\nstd::cout<<a<<\" \"<<b;\n```\n\n```c++\nint a = 5;\nint b = ++a;\nstd::cout<<a<<\" \"<<b;\n```\n\n```c++\nint a = 5;\nint b = a--;\nstd::cout<<a<<\" \"<<b;\n```\n\n```c++\nint a = 5;\nint b = --a;\nstd::cout<<a<<\" \"<<b;\n```\n\n控制台会显示出什么样的结果\n\n```c++\n#include <iostream>\nint main()\n{\n\tint a = 5, b = 5;\n\tstd::cout << a++ << \" \" << ++b << \"\\n\";\n\tstd::cout << --a << \" \" << b-- << \"\\n\";\n\tstd::cout << ++a << \" \" << b++ << \"\\n\";\n\tstd::cout << a-- << \" \" << --b << \"\\n\";\n}\n```\n\n## 类型转换\n\n下面这段程序运行后有什么样的结果\n\n```c++\n#include <iostream>\nint main()\n{\n\tint a = 5.1;\n\tstd::cout<<a;\n}\n```\n\n![](https://gitee.com/gaoxianglong/picgo/raw/master/img/20210915112324.png)\n\n自动数据类型转换的规则：\n\n1. 横向红色的箭头表示的是无条件转换，float类型数据运算时，将其转换为double类型进行运算，运算结果再转换为float；short和char类型数据在做运算时，首先转换为int，再将运算结果转换为short、char类型。\n2. 纵向的蓝色箭头，当不同数据类型之间进行运算时，位于箭头下方的数据类型会转换为箭头上方的数据类型。\n\n## 强制类型转换\n\n公式：\n\n`(数据类型) 表达式`\n\n如：\n\n```c++\nint s=(int)5.3;\nstd::cout<<s;\n//或者\ndouble t=5.3;\nint s=(int)t;\nstd::cout<<s;\n```\n\n整数转小数时，直接加上 .0\n\n小数转整数时，小数点后的数据全部舍弃（精度丢失）\n\n整数转字符时，根据ASCII码表转换\n\n字符转整数时，根据ASCll码表转换\n\n练习：\n\n分别找出a、z、A、Z这几个字符再ASCII码表里的整数是多少\n\n","slug":"c++阶段一第三讲","published":1,"updated":"2021-09-15T03:29:07.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktnr5v000000k0uxa4hxcex5","content":"<h1 id=\"第三讲\"><a href=\"#第三讲\" class=\"headerlink\" title=\"第三讲\"></a>第三讲</h1><h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><p>常量：是指其值一旦确定，就不会发生改变的量。</p>\n<p>创建常量的公式：</p>\n<ul>\n<li><p><code>#define 常量名 常量值;</code></p>\n<blockquote>\n<p>写在头文件的下边</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> a 1;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::cout &lt;&lt; a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><code>const 数据类型 常量名 = 常量值;</code></p>\n<blockquote>\n<p>写在头文件的下边</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::cout &lt;&lt; a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>练习：尝试去修改常量的值</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\ta = <span class=\"number\">20</span>;</span><br><span class=\"line\">\tstd::cout &lt;&lt; a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"单目运算符\"><a href=\"#单目运算符\" class=\"headerlink\" title=\"单目运算符\"></a>单目运算符</h2><p><code>++</code>：自增1</p>\n<p><code>--</code>：自减1</p>\n<p>前置<code>++</code>：先自增，再参与其他运算。</p>\n<p>后置<code>++</code>：先参与其他运算，再自增。</p>\n<p>前置<code>--</code>：先自减，再参与其他运算。</p>\n<p>后置<code>--</code>：先参与其他运算，再自减。</p>\n<p>练习：</p>\n<p>a的值是多少 </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\">std::cout&lt;&lt;a++;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\">std::cout&lt;&lt;++a;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\">std::cout&lt;&lt;a--;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\">std::cout&lt;&lt;--a;</span><br></pre></td></tr></table></figure>\n\n<p>a和b的值是多少</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = a++;</span><br><span class=\"line\">std::cout&lt;&lt;a&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;b;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = ++a;</span><br><span class=\"line\">std::cout&lt;&lt;a&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;b;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = a--;</span><br><span class=\"line\">std::cout&lt;&lt;a&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;b;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = --a;</span><br><span class=\"line\">std::cout&lt;&lt;a&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;b;</span><br></pre></td></tr></table></figure>\n\n<p>控制台会显示出什么样的结果</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">5</span>, b = <span class=\"number\">5</span>;</span><br><span class=\"line\">\tstd::cout &lt;&lt; a++ &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; ++b &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tstd::cout &lt;&lt; --a &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; b-- &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tstd::cout &lt;&lt; ++a &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; b++ &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tstd::cout &lt;&lt; a-- &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; --b &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><p>下面这段程序运行后有什么样的结果</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">5.1</span>;</span><br><span class=\"line\">\tstd::cout&lt;&lt;a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/20210915112324.png\"></p>\n<p>自动数据类型转换的规则：</p>\n<ol>\n<li>横向红色的箭头表示的是无条件转换，float类型数据运算时，将其转换为double类型进行运算，运算结果再转换为float；short和char类型数据在做运算时，首先转换为int，再将运算结果转换为short、char类型。</li>\n<li>纵向的蓝色箭头，当不同数据类型之间进行运算时，位于箭头下方的数据类型会转换为箭头上方的数据类型。</li>\n</ol>\n<h2 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h2><p>公式：</p>\n<p><code>(数据类型) 表达式</code></p>\n<p>如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> s=(<span class=\"keyword\">int</span>)<span class=\"number\">5.3</span>;</span><br><span class=\"line\">std::cout&lt;&lt;s;</span><br><span class=\"line\"><span class=\"comment\">//或者</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> t=<span class=\"number\">5.3</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> s=(<span class=\"keyword\">int</span>)t;</span><br><span class=\"line\">std::cout&lt;&lt;s;</span><br></pre></td></tr></table></figure>\n\n<p>整数转小数时，直接加上 .0</p>\n<p>小数转整数时，小数点后的数据全部舍弃（精度丢失）</p>\n<p>整数转字符时，根据ASCII码表转换</p>\n<p>字符转整数时，根据ASCll码表转换</p>\n<p>练习：</p>\n<p>分别找出a、z、A、Z这几个字符再ASCII码表里的整数是多少</p>\n","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"excerpt":"","more":"<h1 id=\"第三讲\"><a href=\"#第三讲\" class=\"headerlink\" title=\"第三讲\"></a>第三讲</h1><h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><p>常量：是指其值一旦确定，就不会发生改变的量。</p>\n<p>创建常量的公式：</p>\n<ul>\n<li><p><code>#define 常量名 常量值;</code></p>\n<blockquote>\n<p>写在头文件的下边</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> a 1;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::cout &lt;&lt; a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><code>const 数据类型 常量名 = 常量值;</code></p>\n<blockquote>\n<p>写在头文件的下边</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::cout &lt;&lt; a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>练习：尝试去修改常量的值</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\ta = <span class=\"number\">20</span>;</span><br><span class=\"line\">\tstd::cout &lt;&lt; a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"单目运算符\"><a href=\"#单目运算符\" class=\"headerlink\" title=\"单目运算符\"></a>单目运算符</h2><p><code>++</code>：自增1</p>\n<p><code>--</code>：自减1</p>\n<p>前置<code>++</code>：先自增，再参与其他运算。</p>\n<p>后置<code>++</code>：先参与其他运算，再自增。</p>\n<p>前置<code>--</code>：先自减，再参与其他运算。</p>\n<p>后置<code>--</code>：先参与其他运算，再自减。</p>\n<p>练习：</p>\n<p>a的值是多少 </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\">std::cout&lt;&lt;a++;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\">std::cout&lt;&lt;++a;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\">std::cout&lt;&lt;a--;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\">std::cout&lt;&lt;--a;</span><br></pre></td></tr></table></figure>\n\n<p>a和b的值是多少</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = a++;</span><br><span class=\"line\">std::cout&lt;&lt;a&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;b;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = ++a;</span><br><span class=\"line\">std::cout&lt;&lt;a&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;b;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = a--;</span><br><span class=\"line\">std::cout&lt;&lt;a&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;b;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = --a;</span><br><span class=\"line\">std::cout&lt;&lt;a&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;b;</span><br></pre></td></tr></table></figure>\n\n<p>控制台会显示出什么样的结果</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">5</span>, b = <span class=\"number\">5</span>;</span><br><span class=\"line\">\tstd::cout &lt;&lt; a++ &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; ++b &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tstd::cout &lt;&lt; --a &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; b-- &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tstd::cout &lt;&lt; ++a &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; b++ &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\tstd::cout &lt;&lt; a-- &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; --b &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><p>下面这段程序运行后有什么样的结果</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">5.1</span>;</span><br><span class=\"line\">\tstd::cout&lt;&lt;a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/20210915112324.png\"></p>\n<p>自动数据类型转换的规则：</p>\n<ol>\n<li>横向红色的箭头表示的是无条件转换，float类型数据运算时，将其转换为double类型进行运算，运算结果再转换为float；short和char类型数据在做运算时，首先转换为int，再将运算结果转换为short、char类型。</li>\n<li>纵向的蓝色箭头，当不同数据类型之间进行运算时，位于箭头下方的数据类型会转换为箭头上方的数据类型。</li>\n</ol>\n<h2 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h2><p>公式：</p>\n<p><code>(数据类型) 表达式</code></p>\n<p>如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> s=(<span class=\"keyword\">int</span>)<span class=\"number\">5.3</span>;</span><br><span class=\"line\">std::cout&lt;&lt;s;</span><br><span class=\"line\"><span class=\"comment\">//或者</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> t=<span class=\"number\">5.3</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> s=(<span class=\"keyword\">int</span>)t;</span><br><span class=\"line\">std::cout&lt;&lt;s;</span><br></pre></td></tr></table></figure>\n\n<p>整数转小数时，直接加上 .0</p>\n<p>小数转整数时，小数点后的数据全部舍弃（精度丢失）</p>\n<p>整数转字符时，根据ASCII码表转换</p>\n<p>字符转整数时，根据ASCll码表转换</p>\n<p>练习：</p>\n<p>分别找出a、z、A、Z这几个字符再ASCII码表里的整数是多少</p>\n"},{"title":"c++阶段一第二讲","date":"2021-09-09T01:24:16.000Z","description":"c++阶段一第二讲","top_img":"https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png","cover":"https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png","_content":"\n# 第二讲\n\n## 数据类型\n\nc++常用的基本数据类型：\n\n* 整形：\n\n  * short(短整型):\n\n    \n\n  * int(整形):\n\n    \n\n  * long(长整形):\n\n    \n\n* 浮点型\n\n  * float(单精度小数):\n\n    \n\n  * double(双精度小数):\n\n    \n\n* 字符\n\n  * char(字符)\n    * 字符使用单引号`'`包裹起来，并且只能保存单个非中文字符。\n\n* 字符串\n\n  * string(字符串)\n    * 字符串使用双引号`\"`包裹起来，并且可以保持多个字符，及中文。\n\n## 变量\n\n变量：指其值在确定之后还可以通过**赋值符**进行修改的量就是变量。\n\n赋值符：`=`,可以将右边的值交给左边。\n\n创建变量的公式:\n\n`数据类型 变量名 = 值;`\n\n数据类型：如`int`、`double`这一类的关键字，后续还会有我们自定义的数据类型。\n\n变量名：不能使用数字开头，也不能使用中文。\n\n值：必须要去数据类型相对应。\n\n> 注：在创建变量的时候还可以这样操作\n>\n> `数据类型 变量名;`  **这样的方式叫做创建了一个变量但是未赋初始值。**\n\n## 算数运算\n\n变量与变量之间可以进行一些算数运算\n\n### 加\n\n两个变量进行相加操作\n\n```c++\nint main(){\n    int a = 1;\n    int b = 2;\n    int c = a+b;\n}\n```\n\n### 减\n\n两个变量进行相减操作\n\n```c++\nint main(){\n    int a = 1;\n    int b = 2;\n    int c = a-b;\n}\n```\n\n### 乘\n\n两个变量进行相乘操作\n\n```c++\nint main(){\n    int a = 1;\n    int b = 2;\n    int c = a*b;\n}\n```\n\n### 除\n\n两个变量进行相除操作\n\n```c++\nint main(){\n    int a = 1;\n    int b = 2;\n    int c = b/2;\n}\n```\n\n### 取余\n\n两个变量进行取余数操作\n\n```c++\nint main(){\n    int a = 1;\n    int b = 2;\n    int c = a%b;\n}\n```\n\n## 练习\n\n两个字符串可以相加吗？\n\n通过此问题，引出一下练习：\n\n1：创建三个字符串变量\n\n2：将前两个字符串变量加起来并通过赋值符，赋给第三个字符串变量\n\n3：输出第三个字符串两次","source":"_posts/c++阶段一第二讲.md","raw":"---\ntitle: c++阶段一第二讲\ndate: 2021-09-09 09:24:16\ntags: [教材,阶段一]\ncategories: c++\ndescription: c++阶段一第二讲\ntop_img: https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png\ncover: https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png\n---\n\n# 第二讲\n\n## 数据类型\n\nc++常用的基本数据类型：\n\n* 整形：\n\n  * short(短整型):\n\n    \n\n  * int(整形):\n\n    \n\n  * long(长整形):\n\n    \n\n* 浮点型\n\n  * float(单精度小数):\n\n    \n\n  * double(双精度小数):\n\n    \n\n* 字符\n\n  * char(字符)\n    * 字符使用单引号`'`包裹起来，并且只能保存单个非中文字符。\n\n* 字符串\n\n  * string(字符串)\n    * 字符串使用双引号`\"`包裹起来，并且可以保持多个字符，及中文。\n\n## 变量\n\n变量：指其值在确定之后还可以通过**赋值符**进行修改的量就是变量。\n\n赋值符：`=`,可以将右边的值交给左边。\n\n创建变量的公式:\n\n`数据类型 变量名 = 值;`\n\n数据类型：如`int`、`double`这一类的关键字，后续还会有我们自定义的数据类型。\n\n变量名：不能使用数字开头，也不能使用中文。\n\n值：必须要去数据类型相对应。\n\n> 注：在创建变量的时候还可以这样操作\n>\n> `数据类型 变量名;`  **这样的方式叫做创建了一个变量但是未赋初始值。**\n\n## 算数运算\n\n变量与变量之间可以进行一些算数运算\n\n### 加\n\n两个变量进行相加操作\n\n```c++\nint main(){\n    int a = 1;\n    int b = 2;\n    int c = a+b;\n}\n```\n\n### 减\n\n两个变量进行相减操作\n\n```c++\nint main(){\n    int a = 1;\n    int b = 2;\n    int c = a-b;\n}\n```\n\n### 乘\n\n两个变量进行相乘操作\n\n```c++\nint main(){\n    int a = 1;\n    int b = 2;\n    int c = a*b;\n}\n```\n\n### 除\n\n两个变量进行相除操作\n\n```c++\nint main(){\n    int a = 1;\n    int b = 2;\n    int c = b/2;\n}\n```\n\n### 取余\n\n两个变量进行取余数操作\n\n```c++\nint main(){\n    int a = 1;\n    int b = 2;\n    int c = a%b;\n}\n```\n\n## 练习\n\n两个字符串可以相加吗？\n\n通过此问题，引出一下练习：\n\n1：创建三个字符串变量\n\n2：将前两个字符串变量加起来并通过赋值符，赋给第三个字符串变量\n\n3：输出第三个字符串两次","slug":"c++阶段一第二讲","published":1,"updated":"2021-09-18T07:24:41.219Z","_id":"cktnr5v040001k0ux1e4a7pla","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"第二讲\"><a href=\"#第二讲\" class=\"headerlink\" title=\"第二讲\"></a>第二讲</h1><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>c++常用的基本数据类型：</p>\n<ul>\n<li><p>整形：</p>\n<ul>\n<li><p>short(短整型):</p>\n</li>\n<li><p>int(整形):</p>\n</li>\n<li><p>long(长整形):</p>\n</li>\n</ul>\n</li>\n<li><p>浮点型</p>\n<ul>\n<li><p>float(单精度小数):</p>\n</li>\n<li><p>double(双精度小数):</p>\n</li>\n</ul>\n</li>\n<li><p>字符</p>\n<ul>\n<li>char(字符)<ul>\n<li>字符使用单引号<code>&#39;</code>包裹起来，并且只能保存单个非中文字符。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>字符串</p>\n<ul>\n<li>string(字符串)<ul>\n<li>字符串使用双引号<code>&quot;</code>包裹起来，并且可以保持多个字符，及中文。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>变量：指其值在确定之后还可以通过<strong>赋值符</strong>进行修改的量就是变量。</p>\n<p>赋值符：<code>=</code>,可以将右边的值交给左边。</p>\n<p>创建变量的公式:</p>\n<p><code>数据类型 变量名 = 值;</code></p>\n<p>数据类型：如<code>int</code>、<code>double</code>这一类的关键字，后续还会有我们自定义的数据类型。</p>\n<p>变量名：不能使用数字开头，也不能使用中文。</p>\n<p>值：必须要去数据类型相对应。</p>\n<blockquote>\n<p>注：在创建变量的时候还可以这样操作</p>\n<p><code>数据类型 变量名;</code>  <strong>这样的方式叫做创建了一个变量但是未赋初始值。</strong></p>\n</blockquote>\n<h2 id=\"算数运算\"><a href=\"#算数运算\" class=\"headerlink\" title=\"算数运算\"></a>算数运算</h2><p>变量与变量之间可以进行一些算数运算</p>\n<h3 id=\"加\"><a href=\"#加\" class=\"headerlink\" title=\"加\"></a>加</h3><p>两个变量进行相加操作</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = a+b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"减\"><a href=\"#减\" class=\"headerlink\" title=\"减\"></a>减</h3><p>两个变量进行相减操作</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = a-b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"乘\"><a href=\"#乘\" class=\"headerlink\" title=\"乘\"></a>乘</h3><p>两个变量进行相乘操作</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = a*b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"除\"><a href=\"#除\" class=\"headerlink\" title=\"除\"></a>除</h3><p>两个变量进行相除操作</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = b/<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"取余\"><a href=\"#取余\" class=\"headerlink\" title=\"取余\"></a>取余</h3><p>两个变量进行取余数操作</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = a%b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p>两个字符串可以相加吗？</p>\n<p>通过此问题，引出一下练习：</p>\n<p>1：创建三个字符串变量</p>\n<p>2：将前两个字符串变量加起来并通过赋值符，赋给第三个字符串变量</p>\n<p>3：输出第三个字符串两次</p>\n","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"excerpt":"","more":"<h1 id=\"第二讲\"><a href=\"#第二讲\" class=\"headerlink\" title=\"第二讲\"></a>第二讲</h1><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>c++常用的基本数据类型：</p>\n<ul>\n<li><p>整形：</p>\n<ul>\n<li><p>short(短整型):</p>\n</li>\n<li><p>int(整形):</p>\n</li>\n<li><p>long(长整形):</p>\n</li>\n</ul>\n</li>\n<li><p>浮点型</p>\n<ul>\n<li><p>float(单精度小数):</p>\n</li>\n<li><p>double(双精度小数):</p>\n</li>\n</ul>\n</li>\n<li><p>字符</p>\n<ul>\n<li>char(字符)<ul>\n<li>字符使用单引号<code>&#39;</code>包裹起来，并且只能保存单个非中文字符。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>字符串</p>\n<ul>\n<li>string(字符串)<ul>\n<li>字符串使用双引号<code>&quot;</code>包裹起来，并且可以保持多个字符，及中文。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>变量：指其值在确定之后还可以通过<strong>赋值符</strong>进行修改的量就是变量。</p>\n<p>赋值符：<code>=</code>,可以将右边的值交给左边。</p>\n<p>创建变量的公式:</p>\n<p><code>数据类型 变量名 = 值;</code></p>\n<p>数据类型：如<code>int</code>、<code>double</code>这一类的关键字，后续还会有我们自定义的数据类型。</p>\n<p>变量名：不能使用数字开头，也不能使用中文。</p>\n<p>值：必须要去数据类型相对应。</p>\n<blockquote>\n<p>注：在创建变量的时候还可以这样操作</p>\n<p><code>数据类型 变量名;</code>  <strong>这样的方式叫做创建了一个变量但是未赋初始值。</strong></p>\n</blockquote>\n<h2 id=\"算数运算\"><a href=\"#算数运算\" class=\"headerlink\" title=\"算数运算\"></a>算数运算</h2><p>变量与变量之间可以进行一些算数运算</p>\n<h3 id=\"加\"><a href=\"#加\" class=\"headerlink\" title=\"加\"></a>加</h3><p>两个变量进行相加操作</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = a+b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"减\"><a href=\"#减\" class=\"headerlink\" title=\"减\"></a>减</h3><p>两个变量进行相减操作</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = a-b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"乘\"><a href=\"#乘\" class=\"headerlink\" title=\"乘\"></a>乘</h3><p>两个变量进行相乘操作</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = a*b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"除\"><a href=\"#除\" class=\"headerlink\" title=\"除\"></a>除</h3><p>两个变量进行相除操作</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = b/<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"取余\"><a href=\"#取余\" class=\"headerlink\" title=\"取余\"></a>取余</h3><p>两个变量进行取余数操作</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = a%b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p>两个字符串可以相加吗？</p>\n<p>通过此问题，引出一下练习：</p>\n<p>1：创建三个字符串变量</p>\n<p>2：将前两个字符串变量加起来并通过赋值符，赋给第三个字符串变量</p>\n<p>3：输出第三个字符串两次</p>\n"},{"title":"c++阶段三第三讲","date":"2021-09-15T06:31:08.000Z","description":"c++阶段三第三讲","top_img":"https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png","cover":"https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png","_content":"\n# 第三讲\n\n## 面向对象\n\n面向对象中的对象，指的是客观世界中存在的对象，这个对象具有唯一性，对象之间各不相同，各有各的特点，每一个对象都有自己的运动规律和内部状态，对象和对象之间又可以互相联系、互相作用，面向对象技术是一种从组织结构上模拟客观世界的方法。\n\n客观世界中任何一个事物都可以看作一个对象，每个对象都具有属性和行为两个要素，属性是对象内部状态及自身的特点，行为就是改变自身状态的动作。\n\n面向过程编程的主要思想是先做什么后做什么，十分符合计算机的思维方式。而面向对象更符合人类的思维方式。\n\n面向对象中的对象需要通过类来创建，而类是一个新的数据类型，这个新的数据类型包含属性和行为，也就是各种数据类型的集合和各种函数的集合。\n\n## 类\n\n创建类的公式：\n\n```c++\nclass 类名{\n权限修饰词：\n\t数据成员1;\n\t数据成员2;\n    ...\n\t数据成员n;\n\n\t函数成员1;\n\t函数成员2;\n\t...\n\t函数成员n;\n};\n```\n\n小练习：\n\n创建一个动物(Animal)的类，这个动物是空中的还是陆地还是水里，这个动物的名字，这个动物的叫声。\n\n## 创建类的对象\n\n公式：\n\n`类名 对象名;`\n\n类名：我们要创建对象的类名。\n\n对象名：和变量名类似，做到见名知意。\n\n**通过对象名去访问成员属性：**\n\n`对象名.成员变量名`\n\n**通过对象名去访问成员函数:**\n\n`对象名.成员函数名`\n\n小练习：\n\n给我们刚刚创建的动物类去创建一个对象，并且给属性赋值，并调用对应函数。\n\n## 权限修饰词\n\npublic 公共的：外部可以调用，内部可调用。\n\nPrivate 私有的:外部不能调用，内部可调用。\n\nProtected 受保护的:外部不能调用，内部可调用，派生类可调用。\n\n类的各种成员如果没有加作用域修饰词则默认都是private\n\n## 练习\n\n创建一个学生类，该类里的属性有，`学号`，`姓名`，`爱好`，`家庭地址`，`语文成绩`，`数学成绩`，`英语成绩`，函数有两个，一个是自我介绍的函数，另一个是成绩单的打印。\n","source":"_posts/c++阶段三第三讲.md","raw":"---\ntitle: c++阶段三第三讲\ndate: 2021-09-15 14:31:08\ntags: [教材,阶段三]\ncategories: c++\ndescription: c++阶段三第三讲\ntop_img: https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png\ncover: https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png\n---\n\n# 第三讲\n\n## 面向对象\n\n面向对象中的对象，指的是客观世界中存在的对象，这个对象具有唯一性，对象之间各不相同，各有各的特点，每一个对象都有自己的运动规律和内部状态，对象和对象之间又可以互相联系、互相作用，面向对象技术是一种从组织结构上模拟客观世界的方法。\n\n客观世界中任何一个事物都可以看作一个对象，每个对象都具有属性和行为两个要素，属性是对象内部状态及自身的特点，行为就是改变自身状态的动作。\n\n面向过程编程的主要思想是先做什么后做什么，十分符合计算机的思维方式。而面向对象更符合人类的思维方式。\n\n面向对象中的对象需要通过类来创建，而类是一个新的数据类型，这个新的数据类型包含属性和行为，也就是各种数据类型的集合和各种函数的集合。\n\n## 类\n\n创建类的公式：\n\n```c++\nclass 类名{\n权限修饰词：\n\t数据成员1;\n\t数据成员2;\n    ...\n\t数据成员n;\n\n\t函数成员1;\n\t函数成员2;\n\t...\n\t函数成员n;\n};\n```\n\n小练习：\n\n创建一个动物(Animal)的类，这个动物是空中的还是陆地还是水里，这个动物的名字，这个动物的叫声。\n\n## 创建类的对象\n\n公式：\n\n`类名 对象名;`\n\n类名：我们要创建对象的类名。\n\n对象名：和变量名类似，做到见名知意。\n\n**通过对象名去访问成员属性：**\n\n`对象名.成员变量名`\n\n**通过对象名去访问成员函数:**\n\n`对象名.成员函数名`\n\n小练习：\n\n给我们刚刚创建的动物类去创建一个对象，并且给属性赋值，并调用对应函数。\n\n## 权限修饰词\n\npublic 公共的：外部可以调用，内部可调用。\n\nPrivate 私有的:外部不能调用，内部可调用。\n\nProtected 受保护的:外部不能调用，内部可调用，派生类可调用。\n\n类的各种成员如果没有加作用域修饰词则默认都是private\n\n## 练习\n\n创建一个学生类，该类里的属性有，`学号`，`姓名`，`爱好`，`家庭地址`，`语文成绩`，`数学成绩`，`英语成绩`，函数有两个，一个是自我介绍的函数，另一个是成绩单的打印。\n","slug":"c++阶段三第三讲","published":1,"updated":"2021-09-15T07:11:42.016Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktnr5v0c0009k0ux1q03gvtp","content":"<h1 id=\"第三讲\"><a href=\"#第三讲\" class=\"headerlink\" title=\"第三讲\"></a>第三讲</h1><h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><p>面向对象中的对象，指的是客观世界中存在的对象，这个对象具有唯一性，对象之间各不相同，各有各的特点，每一个对象都有自己的运动规律和内部状态，对象和对象之间又可以互相联系、互相作用，面向对象技术是一种从组织结构上模拟客观世界的方法。</p>\n<p>客观世界中任何一个事物都可以看作一个对象，每个对象都具有属性和行为两个要素，属性是对象内部状态及自身的特点，行为就是改变自身状态的动作。</p>\n<p>面向过程编程的主要思想是先做什么后做什么，十分符合计算机的思维方式。而面向对象更符合人类的思维方式。</p>\n<p>面向对象中的对象需要通过类来创建，而类是一个新的数据类型，这个新的数据类型包含属性和行为，也就是各种数据类型的集合和各种函数的集合。</p>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><p>创建类的公式：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名&#123;</span></span><br><span class=\"line\">权限修饰词：</span><br><span class=\"line\">\t数据成员<span class=\"number\">1</span>;</span><br><span class=\"line\">\t数据成员<span class=\"number\">2</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\t数据成员n;</span><br><span class=\"line\"></span><br><span class=\"line\">\t函数成员<span class=\"number\">1</span>;</span><br><span class=\"line\">\t函数成员<span class=\"number\">2</span>;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t函数成员n;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>小练习：</p>\n<p>创建一个动物(Animal)的类，这个动物是空中的还是陆地还是水里，这个动物的名字，这个动物的叫声。</p>\n<h2 id=\"创建类的对象\"><a href=\"#创建类的对象\" class=\"headerlink\" title=\"创建类的对象\"></a>创建类的对象</h2><p>公式：</p>\n<p><code>类名 对象名;</code></p>\n<p>类名：我们要创建对象的类名。</p>\n<p>对象名：和变量名类似，做到见名知意。</p>\n<p><strong>通过对象名去访问成员属性：</strong></p>\n<p><code>对象名.成员变量名</code></p>\n<p><strong>通过对象名去访问成员函数:</strong></p>\n<p><code>对象名.成员函数名</code></p>\n<p>小练习：</p>\n<p>给我们刚刚创建的动物类去创建一个对象，并且给属性赋值，并调用对应函数。</p>\n<h2 id=\"权限修饰词\"><a href=\"#权限修饰词\" class=\"headerlink\" title=\"权限修饰词\"></a>权限修饰词</h2><p>public 公共的：外部可以调用，内部可调用。</p>\n<p>Private 私有的:外部不能调用，内部可调用。</p>\n<p>Protected 受保护的:外部不能调用，内部可调用，派生类可调用。</p>\n<p>类的各种成员如果没有加作用域修饰词则默认都是private</p>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p>创建一个学生类，该类里的属性有，<code>学号</code>，<code>姓名</code>，<code>爱好</code>，<code>家庭地址</code>，<code>语文成绩</code>，<code>数学成绩</code>，<code>英语成绩</code>，函数有两个，一个是自我介绍的函数，另一个是成绩单的打印。</p>\n","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"excerpt":"","more":"<h1 id=\"第三讲\"><a href=\"#第三讲\" class=\"headerlink\" title=\"第三讲\"></a>第三讲</h1><h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><p>面向对象中的对象，指的是客观世界中存在的对象，这个对象具有唯一性，对象之间各不相同，各有各的特点，每一个对象都有自己的运动规律和内部状态，对象和对象之间又可以互相联系、互相作用，面向对象技术是一种从组织结构上模拟客观世界的方法。</p>\n<p>客观世界中任何一个事物都可以看作一个对象，每个对象都具有属性和行为两个要素，属性是对象内部状态及自身的特点，行为就是改变自身状态的动作。</p>\n<p>面向过程编程的主要思想是先做什么后做什么，十分符合计算机的思维方式。而面向对象更符合人类的思维方式。</p>\n<p>面向对象中的对象需要通过类来创建，而类是一个新的数据类型，这个新的数据类型包含属性和行为，也就是各种数据类型的集合和各种函数的集合。</p>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><p>创建类的公式：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名&#123;</span></span><br><span class=\"line\">权限修饰词：</span><br><span class=\"line\">\t数据成员<span class=\"number\">1</span>;</span><br><span class=\"line\">\t数据成员<span class=\"number\">2</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\t数据成员n;</span><br><span class=\"line\"></span><br><span class=\"line\">\t函数成员<span class=\"number\">1</span>;</span><br><span class=\"line\">\t函数成员<span class=\"number\">2</span>;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t函数成员n;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>小练习：</p>\n<p>创建一个动物(Animal)的类，这个动物是空中的还是陆地还是水里，这个动物的名字，这个动物的叫声。</p>\n<h2 id=\"创建类的对象\"><a href=\"#创建类的对象\" class=\"headerlink\" title=\"创建类的对象\"></a>创建类的对象</h2><p>公式：</p>\n<p><code>类名 对象名;</code></p>\n<p>类名：我们要创建对象的类名。</p>\n<p>对象名：和变量名类似，做到见名知意。</p>\n<p><strong>通过对象名去访问成员属性：</strong></p>\n<p><code>对象名.成员变量名</code></p>\n<p><strong>通过对象名去访问成员函数:</strong></p>\n<p><code>对象名.成员函数名</code></p>\n<p>小练习：</p>\n<p>给我们刚刚创建的动物类去创建一个对象，并且给属性赋值，并调用对应函数。</p>\n<h2 id=\"权限修饰词\"><a href=\"#权限修饰词\" class=\"headerlink\" title=\"权限修饰词\"></a>权限修饰词</h2><p>public 公共的：外部可以调用，内部可调用。</p>\n<p>Private 私有的:外部不能调用，内部可调用。</p>\n<p>Protected 受保护的:外部不能调用，内部可调用，派生类可调用。</p>\n<p>类的各种成员如果没有加作用域修饰词则默认都是private</p>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p>创建一个学生类，该类里的属性有，<code>学号</code>，<code>姓名</code>，<code>爱好</code>，<code>家庭地址</code>，<code>语文成绩</code>，<code>数学成绩</code>，<code>英语成绩</code>，函数有两个，一个是自我介绍的函数，另一个是成绩单的打印。</p>\n"},{"title":"c++阶段三第二讲","date":"2021-09-10T02:18:09.000Z","description":"c++阶段三第二讲","top_img":"https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png","cover":"https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png","_content":"\n# 第二讲\n\n## 结构体\n\n结构体可以作为函数的参数\n\n具体写法：\n\n```c++\nvoid fun(struct 结构体名 结构体变量名){\n    ...\n}\n```\n\n例子：\n\n```c++\n#include <iostream>\n#include <cstring> \nusing namespace std;\nstruct PersonInfo                            //定义结构体\n{\n\tint index;\n\tstring name;\n\tstring dizhi;\n\tshort age;\n};\nvoid ShowStuctMessage(struct PersonInfo MyInfo)    //自定义函数，输出结构体变量成员\n{\n\tcout << MyInfo.index << endl;\n\tcout << MyInfo.name << endl;\n\tcout << MyInfo.dizhi << endl;\n\tcout << MyInfo.age << endl;\n\n}\nint main()\n{\n\n\tPersonInfo pInfo;                        //声明结构体\n\tpInfo.index = 1;\n\tpInfo.name=\"小王\";\n\tpInfo.dizhi = \"乐山市\";\n\tpInfo.age = 20;\n\tShowStuctMessage(pInfo);                //调用自定义函数\n\treturn 0;\n}\n```\n\n## 结构体指针\n\n指针的创建：\n\n`int* a;`\n\n结构体指针的创建公式：\n\n`结构体名* 指针名`;\n\n结构体指针访问结构体内的属性\n\n`结构体指针名->结构体中的属性`\n\n例子：\n\n```c++\n#include <iostream>\n#include <stdarg.h>\n#include <string>\nusing namespace std;\nstruct stu {\n\tint i;\n};\nint main() {\n\tstu* s;\n\ts->i;\n}\n```\n\n结构体指针作为函数参数\n\n具体写法：\n\n```c++\nvoid fun(struct 结构体名* 指针名){\n    ...\n}\n```\n\n例子：\n\n```c++\n#include <iostream>\n#include <cstring> \nusing namespace std;\nstruct PersonInfo\n{\n    int index;\n    char name[30];\n    short age;\n};\nvoid ShowStuctMessage(struct PersonInfo* pInfo)\n{\n    cout << pInfo->index << endl;\n    cout << pInfo->name << endl;\n    cout << pInfo->age << endl;\n\n}\nint main()\n{\n\n    PersonInfo pInfo;\n    pInfo.index = 1;\n    strcpy(pInfo.name, \"张三\");\n    pInfo.age = 20;\n    ShowStuctMessage(&pInfo);  //传递的是pInfo的地址 \n    return 0;\n}\n```\n\n## 结构体数组\n\n结构体还可以和数组结合\n\n创建公式：\n\n`结构体名 数组名[数字] = {{*,*,...},{*,*,...},....};`\n\n例子:\n\n```c++\n#include <iostream>\n#include<cstring> \nusing namespace std;\nint main()\n{\n    struct PersonInfo\n    {\n        int index;\n        char name[30];\n        short age;\n    } Person[5] = { {1,\"张三\",20}, //创建结构体的同时创建结构体数组\n        {2,\"李可可\",21},\n        {3,\"宋桥\",22},\n        {4,\"元员\",22},\n        {5,\"王冰冰\",22}\n    };\n    struct PersonInfo* pPersonInfo;\n    pPersonInfo = Person;\n    for (int i = 0; i < 5; i++, pPersonInfo++)\n    {\n        cout << pPersonInfo->index << endl;\n        cout << pPersonInfo->name << endl;\n        cout << pPersonInfo->age << endl;\n    }\n    return 0;\n}\n```\n\n## 结构体所占空间大小\n\n```c++\n#include <iostream>\nusing namespace std;\nint main()\n{\n\tstruct PersonInfo\n\t{\n\t\tint index;\n\t\tchar name[30];\n\t\tshort age;\n\t} pInfo;\n\tpInfo.index = 0;\n\tstrcpy(pInfo.name, \"小龙\");\n\tpInfo.age = 20;\n\tcout << \"index:\" << sizeof(pInfo.index) << \"name:\" << sizeof(pInfo.name) << \"age:\" << sizeof(pInfo.age) << endl;\n\tcout << sizeof(pInfo) << endl;\n}\n```\n\n## 修改int数据类型\n\n我们可以为一个数据类型取别名使用`typedef`关键字\n\n公式：`typedef 旧类型名 新类型名;`\n\n例子：\n\n```c++\n#include <iostream>\nusing namespace std;\nint main() {\n    int a = 9;\n    typedef int flag;\n    flag b = 9;\n    cout << a << b;\n}\n```\n\n## 共用体\n\n共用体数据类型是指将不同的数据项组织为一个整体，和结构体类似，但是共用体在内存中占用首地址相同的一段存储单元。\n\n创建共用体的公式：\n\n```c++\nunion 共用体类型名{\n\t成员数据类型  共用体成员名1；\n\t成员数据类型  共用体成员名2；\n\t...\n\t成员数据类型  共用体成员名n；\n};\n```\n\n> 共用体变量所占内存大小是由最长的成员的长度决定的。\n\n共用体的初始化\n\n案例：\n\n```c++\n#include<iostream>\nusing namespace std;\nunion myUnion\n{\n    int iData;\n    char chData;\n    float fData;\n} uStruct;\nint main()\n{\n    uStruct.chData='A';\n    uStruct.fData=0.3;\n    uStruct.iData=100;\n    cout << uStruct.chData << endl;\n    cout << uStruct.fData << endl;\n    cout << uStruct.iData << endl;        //正确显示\n    uStruct.iData=100;\n    uStruct.fData=0.3;\n    uStruct.chData='A';\n    cout << uStruct.chData<< endl;    //正确显示\n    cout << uStruct.fData<< endl;\n    cout << uStruct.iData<< endl;\n    uStruct.iData=100;\n    uStruct.chData='A';\n    uStruct.fData=0.3;\n    cout << uStruct.chData << endl;\n    cout << uStruct.fData << endl;        //正确显示\n    cout << uStruct.iData << endl;\n    return 0;\n}\n```\n\n> 由于是共用的同一个内存单元，所以结果中只有最后赋值的成员能正确显示。\n\n## 枚举\n\n枚举：是一些标识符的集合，其变量的值只能取自括号内的这些标识符。\n\n枚举创建公式：`enum 枚举类型名 {标识符列表};`\n\n创建带整型值的枚举类型的公式：\n\n```c++\nenum 枚举类型名 {\n标识符=0，\n标识符=1，\n标识符=2，\n标识符=3，\n...\n};\n```\n\n创建枚举类型变量的公式： `枚举类型名 变量名；`\n\n```c++\n#include <iostream>\nusing namespace std;\nint main()\n{\n    enum Weekday {Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday};\n    int a=2,b=1;\n    Weekday day;\n    day=(Weekday)a;\n    cout << day << endl;\n    day=(Weekday)(a-b);\n    cout << day << endl;\n    day=(Weekday)(Sunday+Wednesday);\n    cout << day << endl;\n    day=(Weekday)5;\n    cout << day << endl;\n}\n```\n\n枚举类型的值可以和整型类型一起运算、比较等。\n\n```c++\n#include <iostream>\nusing namespace std;\nenum Weekday { Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday };\nint main()\n{\n    Weekday day1, day2;\n    day1 = Monday;\n    day2 = Saturday;\n    int n;\n    n = day1;\n    n = day2 + 1;\n    if (n > day1)            //可以比较\n        cout << \"n>day1\" << endl;\n    if (day1 < day2)\n        cout << \"day1<day2\" << endl;\n}\n```\n\n","source":"_posts/c++阶段三第二讲.md","raw":"---\ntitle: c++阶段三第二讲\ndate: 2021-09-10 10:18:09\ntags: [教材,阶段三]\ncategories: c++\ndescription: c++阶段三第二讲\ntop_img: https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png\ncover: https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png\n---\n\n# 第二讲\n\n## 结构体\n\n结构体可以作为函数的参数\n\n具体写法：\n\n```c++\nvoid fun(struct 结构体名 结构体变量名){\n    ...\n}\n```\n\n例子：\n\n```c++\n#include <iostream>\n#include <cstring> \nusing namespace std;\nstruct PersonInfo                            //定义结构体\n{\n\tint index;\n\tstring name;\n\tstring dizhi;\n\tshort age;\n};\nvoid ShowStuctMessage(struct PersonInfo MyInfo)    //自定义函数，输出结构体变量成员\n{\n\tcout << MyInfo.index << endl;\n\tcout << MyInfo.name << endl;\n\tcout << MyInfo.dizhi << endl;\n\tcout << MyInfo.age << endl;\n\n}\nint main()\n{\n\n\tPersonInfo pInfo;                        //声明结构体\n\tpInfo.index = 1;\n\tpInfo.name=\"小王\";\n\tpInfo.dizhi = \"乐山市\";\n\tpInfo.age = 20;\n\tShowStuctMessage(pInfo);                //调用自定义函数\n\treturn 0;\n}\n```\n\n## 结构体指针\n\n指针的创建：\n\n`int* a;`\n\n结构体指针的创建公式：\n\n`结构体名* 指针名`;\n\n结构体指针访问结构体内的属性\n\n`结构体指针名->结构体中的属性`\n\n例子：\n\n```c++\n#include <iostream>\n#include <stdarg.h>\n#include <string>\nusing namespace std;\nstruct stu {\n\tint i;\n};\nint main() {\n\tstu* s;\n\ts->i;\n}\n```\n\n结构体指针作为函数参数\n\n具体写法：\n\n```c++\nvoid fun(struct 结构体名* 指针名){\n    ...\n}\n```\n\n例子：\n\n```c++\n#include <iostream>\n#include <cstring> \nusing namespace std;\nstruct PersonInfo\n{\n    int index;\n    char name[30];\n    short age;\n};\nvoid ShowStuctMessage(struct PersonInfo* pInfo)\n{\n    cout << pInfo->index << endl;\n    cout << pInfo->name << endl;\n    cout << pInfo->age << endl;\n\n}\nint main()\n{\n\n    PersonInfo pInfo;\n    pInfo.index = 1;\n    strcpy(pInfo.name, \"张三\");\n    pInfo.age = 20;\n    ShowStuctMessage(&pInfo);  //传递的是pInfo的地址 \n    return 0;\n}\n```\n\n## 结构体数组\n\n结构体还可以和数组结合\n\n创建公式：\n\n`结构体名 数组名[数字] = {{*,*,...},{*,*,...},....};`\n\n例子:\n\n```c++\n#include <iostream>\n#include<cstring> \nusing namespace std;\nint main()\n{\n    struct PersonInfo\n    {\n        int index;\n        char name[30];\n        short age;\n    } Person[5] = { {1,\"张三\",20}, //创建结构体的同时创建结构体数组\n        {2,\"李可可\",21},\n        {3,\"宋桥\",22},\n        {4,\"元员\",22},\n        {5,\"王冰冰\",22}\n    };\n    struct PersonInfo* pPersonInfo;\n    pPersonInfo = Person;\n    for (int i = 0; i < 5; i++, pPersonInfo++)\n    {\n        cout << pPersonInfo->index << endl;\n        cout << pPersonInfo->name << endl;\n        cout << pPersonInfo->age << endl;\n    }\n    return 0;\n}\n```\n\n## 结构体所占空间大小\n\n```c++\n#include <iostream>\nusing namespace std;\nint main()\n{\n\tstruct PersonInfo\n\t{\n\t\tint index;\n\t\tchar name[30];\n\t\tshort age;\n\t} pInfo;\n\tpInfo.index = 0;\n\tstrcpy(pInfo.name, \"小龙\");\n\tpInfo.age = 20;\n\tcout << \"index:\" << sizeof(pInfo.index) << \"name:\" << sizeof(pInfo.name) << \"age:\" << sizeof(pInfo.age) << endl;\n\tcout << sizeof(pInfo) << endl;\n}\n```\n\n## 修改int数据类型\n\n我们可以为一个数据类型取别名使用`typedef`关键字\n\n公式：`typedef 旧类型名 新类型名;`\n\n例子：\n\n```c++\n#include <iostream>\nusing namespace std;\nint main() {\n    int a = 9;\n    typedef int flag;\n    flag b = 9;\n    cout << a << b;\n}\n```\n\n## 共用体\n\n共用体数据类型是指将不同的数据项组织为一个整体，和结构体类似，但是共用体在内存中占用首地址相同的一段存储单元。\n\n创建共用体的公式：\n\n```c++\nunion 共用体类型名{\n\t成员数据类型  共用体成员名1；\n\t成员数据类型  共用体成员名2；\n\t...\n\t成员数据类型  共用体成员名n；\n};\n```\n\n> 共用体变量所占内存大小是由最长的成员的长度决定的。\n\n共用体的初始化\n\n案例：\n\n```c++\n#include<iostream>\nusing namespace std;\nunion myUnion\n{\n    int iData;\n    char chData;\n    float fData;\n} uStruct;\nint main()\n{\n    uStruct.chData='A';\n    uStruct.fData=0.3;\n    uStruct.iData=100;\n    cout << uStruct.chData << endl;\n    cout << uStruct.fData << endl;\n    cout << uStruct.iData << endl;        //正确显示\n    uStruct.iData=100;\n    uStruct.fData=0.3;\n    uStruct.chData='A';\n    cout << uStruct.chData<< endl;    //正确显示\n    cout << uStruct.fData<< endl;\n    cout << uStruct.iData<< endl;\n    uStruct.iData=100;\n    uStruct.chData='A';\n    uStruct.fData=0.3;\n    cout << uStruct.chData << endl;\n    cout << uStruct.fData << endl;        //正确显示\n    cout << uStruct.iData << endl;\n    return 0;\n}\n```\n\n> 由于是共用的同一个内存单元，所以结果中只有最后赋值的成员能正确显示。\n\n## 枚举\n\n枚举：是一些标识符的集合，其变量的值只能取自括号内的这些标识符。\n\n枚举创建公式：`enum 枚举类型名 {标识符列表};`\n\n创建带整型值的枚举类型的公式：\n\n```c++\nenum 枚举类型名 {\n标识符=0，\n标识符=1，\n标识符=2，\n标识符=3，\n...\n};\n```\n\n创建枚举类型变量的公式： `枚举类型名 变量名；`\n\n```c++\n#include <iostream>\nusing namespace std;\nint main()\n{\n    enum Weekday {Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday};\n    int a=2,b=1;\n    Weekday day;\n    day=(Weekday)a;\n    cout << day << endl;\n    day=(Weekday)(a-b);\n    cout << day << endl;\n    day=(Weekday)(Sunday+Wednesday);\n    cout << day << endl;\n    day=(Weekday)5;\n    cout << day << endl;\n}\n```\n\n枚举类型的值可以和整型类型一起运算、比较等。\n\n```c++\n#include <iostream>\nusing namespace std;\nenum Weekday { Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday };\nint main()\n{\n    Weekday day1, day2;\n    day1 = Monday;\n    day2 = Saturday;\n    int n;\n    n = day1;\n    n = day2 + 1;\n    if (n > day1)            //可以比较\n        cout << \"n>day1\" << endl;\n    if (day1 < day2)\n        cout << \"day1<day2\" << endl;\n}\n```\n\n","slug":"c++阶段三第二讲","published":1,"updated":"2021-09-15T07:12:38.349Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktnr5v0d000ak0ux2abhhf4m","content":"<h1 id=\"第二讲\"><a href=\"#第二讲\" class=\"headerlink\" title=\"第二讲\"></a>第二讲</h1><h2 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2><p>结构体可以作为函数的参数</p>\n<p>具体写法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(struct 结构体名 结构体变量名)</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span> </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PersonInfo</span>                            //定义结构体</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index;</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\tstring dizhi;</span><br><span class=\"line\">\t<span class=\"keyword\">short</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ShowStuctMessage</span><span class=\"params\">(struct PersonInfo MyInfo)</span>    <span class=\"comment\">//自定义函数，输出结构体变量成员</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; MyInfo.index &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; MyInfo.name &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; MyInfo.dizhi &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; MyInfo.age &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPersonInfo pInfo;                        <span class=\"comment\">//声明结构体</span></span><br><span class=\"line\">\tpInfo.index = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tpInfo.name=<span class=\"string\">&quot;小王&quot;</span>;</span><br><span class=\"line\">\tpInfo.dizhi = <span class=\"string\">&quot;乐山市&quot;</span>;</span><br><span class=\"line\">\tpInfo.age = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">ShowStuctMessage</span>(pInfo);                <span class=\"comment\">//调用自定义函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构体指针\"><a href=\"#结构体指针\" class=\"headerlink\" title=\"结构体指针\"></a>结构体指针</h2><p>指针的创建：</p>\n<p><code>int* a;</code></p>\n<p>结构体指针的创建公式：</p>\n<p><code>结构体名* 指针名</code>;</p>\n<p>结构体指针访问结构体内的属性</p>\n<p><code>结构体指针名-&gt;结构体中的属性</code></p>\n<p>例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stu</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tstu* s;</span><br><span class=\"line\">\ts-&gt;i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结构体指针作为函数参数</p>\n<p>具体写法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(struct 结构体名* 指针名)</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span> </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PersonInfo</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> index;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">30</span>];</span><br><span class=\"line\">    <span class=\"keyword\">short</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ShowStuctMessage</span><span class=\"params\">(struct PersonInfo* pInfo)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; pInfo-&gt;index &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; pInfo-&gt;name &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; pInfo-&gt;age &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    PersonInfo pInfo;</span><br><span class=\"line\">    pInfo.index = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(pInfo.name, <span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">    pInfo.age = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"built_in\">ShowStuctMessage</span>(&amp;pInfo);  <span class=\"comment\">//传递的是pInfo的地址 </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构体数组\"><a href=\"#结构体数组\" class=\"headerlink\" title=\"结构体数组\"></a>结构体数组</h2><p>结构体还可以和数组结合</p>\n<p>创建公式：</p>\n<p><code>结构体名 数组名[数字] = &#123;&#123;*,*,...&#125;,&#123;*,*,...&#125;,....&#125;;</code></p>\n<p>例子:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span> </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PersonInfo</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> index;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> name[<span class=\"number\">30</span>];</span><br><span class=\"line\">        <span class=\"keyword\">short</span> age;</span><br><span class=\"line\">    &#125; Person[<span class=\"number\">5</span>] = &#123; &#123;<span class=\"number\">1</span>,<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">20</span>&#125;, <span class=\"comment\">//创建结构体的同时创建结构体数组</span></span><br><span class=\"line\">        &#123;<span class=\"number\">2</span>,<span class=\"string\">&quot;李可可&quot;</span>,<span class=\"number\">21</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">3</span>,<span class=\"string\">&quot;宋桥&quot;</span>,<span class=\"number\">22</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">4</span>,<span class=\"string\">&quot;元员&quot;</span>,<span class=\"number\">22</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">5</span>,<span class=\"string\">&quot;王冰冰&quot;</span>,<span class=\"number\">22</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PersonInfo</span>* <span class=\"title\">pPersonInfo</span>;</span></span><br><span class=\"line\">    pPersonInfo = Person;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++, pPersonInfo++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; pPersonInfo-&gt;index &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; pPersonInfo-&gt;name &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; pPersonInfo-&gt;age &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构体所占空间大小\"><a href=\"#结构体所占空间大小\" class=\"headerlink\" title=\"结构体所占空间大小\"></a>结构体所占空间大小</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PersonInfo</span></span></span><br><span class=\"line\"><span class=\"class\">\t&#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> name[<span class=\"number\">30</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">short</span> age;</span><br><span class=\"line\">\t&#125; pInfo;</span><br><span class=\"line\">\tpInfo.index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(pInfo.name, <span class=\"string\">&quot;小龙&quot;</span>);</span><br><span class=\"line\">\tpInfo.age = <span class=\"number\">20</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;index:&quot;</span> &lt;&lt; <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(pInfo.index) &lt;&lt; <span class=\"string\">&quot;name:&quot;</span> &lt;&lt; <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(pInfo.name) &lt;&lt; <span class=\"string\">&quot;age:&quot;</span> &lt;&lt; <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(pInfo.age) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(pInfo) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改int数据类型\"><a href=\"#修改int数据类型\" class=\"headerlink\" title=\"修改int数据类型\"></a>修改int数据类型</h2><p>我们可以为一个数据类型取别名使用<code>typedef</code>关键字</p>\n<p>公式：<code>typedef 旧类型名 新类型名;</code></p>\n<p>例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">9</span>;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> flag;</span><br><span class=\"line\">    flag b = <span class=\"number\">9</span>;</span><br><span class=\"line\">    cout &lt;&lt; a &lt;&lt; b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"共用体\"><a href=\"#共用体\" class=\"headerlink\" title=\"共用体\"></a>共用体</h2><p>共用体数据类型是指将不同的数据项组织为一个整体，和结构体类似，但是共用体在内存中占用首地址相同的一段存储单元。</p>\n<p>创建共用体的公式：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">union</span> 共用体类型名&#123;</span></span><br><span class=\"line\">\t成员数据类型  共用体成员名<span class=\"number\">1</span>；</span><br><span class=\"line\">\t成员数据类型  共用体成员名<span class=\"number\">2</span>；</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t成员数据类型  共用体成员名n；</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>共用体变量所占内存大小是由最长的成员的长度决定的。</p>\n</blockquote>\n<p>共用体的初始化</p>\n<p>案例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">myUnion</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> iData;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> chData;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> fData;</span><br><span class=\"line\">&#125; uStruct;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    uStruct.chData=<span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">    uStruct.fData=<span class=\"number\">0.3</span>;</span><br><span class=\"line\">    uStruct.iData=<span class=\"number\">100</span>;</span><br><span class=\"line\">    cout &lt;&lt; uStruct.chData &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; uStruct.fData &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; uStruct.iData &lt;&lt; endl;        <span class=\"comment\">//正确显示</span></span><br><span class=\"line\">    uStruct.iData=<span class=\"number\">100</span>;</span><br><span class=\"line\">    uStruct.fData=<span class=\"number\">0.3</span>;</span><br><span class=\"line\">    uStruct.chData=<span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">    cout &lt;&lt; uStruct.chData&lt;&lt; endl;    <span class=\"comment\">//正确显示</span></span><br><span class=\"line\">    cout &lt;&lt; uStruct.fData&lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; uStruct.iData&lt;&lt; endl;</span><br><span class=\"line\">    uStruct.iData=<span class=\"number\">100</span>;</span><br><span class=\"line\">    uStruct.chData=<span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">    uStruct.fData=<span class=\"number\">0.3</span>;</span><br><span class=\"line\">    cout &lt;&lt; uStruct.chData &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; uStruct.fData &lt;&lt; endl;        <span class=\"comment\">//正确显示</span></span><br><span class=\"line\">    cout &lt;&lt; uStruct.iData &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>由于是共用的同一个内存单元，所以结果中只有最后赋值的成员能正确显示。</p>\n</blockquote>\n<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p>枚举：是一些标识符的集合，其变量的值只能取自括号内的这些标识符。</p>\n<p>枚举创建公式：<code>enum 枚举类型名 &#123;标识符列表&#125;;</code></p>\n<p>创建带整型值的枚举类型的公式：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> 枚举类型名 &#123;</span></span><br><span class=\"line\">标识符=<span class=\"number\">0</span>，</span><br><span class=\"line\">标识符=<span class=\"number\">1</span>，</span><br><span class=\"line\">标识符=<span class=\"number\">2</span>，</span><br><span class=\"line\">标识符=<span class=\"number\">3</span>，</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>创建枚举类型变量的公式： <code>枚举类型名 变量名；</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Weekday</span> &#123;</span>Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a=<span class=\"number\">2</span>,b=<span class=\"number\">1</span>;</span><br><span class=\"line\">    Weekday day;</span><br><span class=\"line\">    day=(Weekday)a;</span><br><span class=\"line\">    cout &lt;&lt; day &lt;&lt; endl;</span><br><span class=\"line\">    day=(Weekday)(a-b);</span><br><span class=\"line\">    cout &lt;&lt; day &lt;&lt; endl;</span><br><span class=\"line\">    day=(Weekday)(Sunday+Wednesday);</span><br><span class=\"line\">    cout &lt;&lt; day &lt;&lt; endl;</span><br><span class=\"line\">    day=(Weekday)<span class=\"number\">5</span>;</span><br><span class=\"line\">    cout &lt;&lt; day &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>枚举类型的值可以和整型类型一起运算、比较等。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Weekday</span> &#123;</span> Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Weekday day1, day2;</span><br><span class=\"line\">    day1 = Monday;</span><br><span class=\"line\">    day2 = Saturday;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    n = day1;</span><br><span class=\"line\">    n = day2 + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &gt; day1)            <span class=\"comment\">//可以比较</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;n&gt;day1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (day1 &lt; day2)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;day1&lt;day2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"excerpt":"","more":"<h1 id=\"第二讲\"><a href=\"#第二讲\" class=\"headerlink\" title=\"第二讲\"></a>第二讲</h1><h2 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2><p>结构体可以作为函数的参数</p>\n<p>具体写法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(struct 结构体名 结构体变量名)</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span> </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PersonInfo</span>                            //定义结构体</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index;</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\tstring dizhi;</span><br><span class=\"line\">\t<span class=\"keyword\">short</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ShowStuctMessage</span><span class=\"params\">(struct PersonInfo MyInfo)</span>    <span class=\"comment\">//自定义函数，输出结构体变量成员</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; MyInfo.index &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; MyInfo.name &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; MyInfo.dizhi &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; MyInfo.age &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPersonInfo pInfo;                        <span class=\"comment\">//声明结构体</span></span><br><span class=\"line\">\tpInfo.index = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tpInfo.name=<span class=\"string\">&quot;小王&quot;</span>;</span><br><span class=\"line\">\tpInfo.dizhi = <span class=\"string\">&quot;乐山市&quot;</span>;</span><br><span class=\"line\">\tpInfo.age = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">ShowStuctMessage</span>(pInfo);                <span class=\"comment\">//调用自定义函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构体指针\"><a href=\"#结构体指针\" class=\"headerlink\" title=\"结构体指针\"></a>结构体指针</h2><p>指针的创建：</p>\n<p><code>int* a;</code></p>\n<p>结构体指针的创建公式：</p>\n<p><code>结构体名* 指针名</code>;</p>\n<p>结构体指针访问结构体内的属性</p>\n<p><code>结构体指针名-&gt;结构体中的属性</code></p>\n<p>例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stu</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tstu* s;</span><br><span class=\"line\">\ts-&gt;i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结构体指针作为函数参数</p>\n<p>具体写法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(struct 结构体名* 指针名)</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span> </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PersonInfo</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> index;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">30</span>];</span><br><span class=\"line\">    <span class=\"keyword\">short</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ShowStuctMessage</span><span class=\"params\">(struct PersonInfo* pInfo)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; pInfo-&gt;index &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; pInfo-&gt;name &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; pInfo-&gt;age &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    PersonInfo pInfo;</span><br><span class=\"line\">    pInfo.index = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(pInfo.name, <span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">    pInfo.age = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"built_in\">ShowStuctMessage</span>(&amp;pInfo);  <span class=\"comment\">//传递的是pInfo的地址 </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构体数组\"><a href=\"#结构体数组\" class=\"headerlink\" title=\"结构体数组\"></a>结构体数组</h2><p>结构体还可以和数组结合</p>\n<p>创建公式：</p>\n<p><code>结构体名 数组名[数字] = &#123;&#123;*,*,...&#125;,&#123;*,*,...&#125;,....&#125;;</code></p>\n<p>例子:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span> </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PersonInfo</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> index;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> name[<span class=\"number\">30</span>];</span><br><span class=\"line\">        <span class=\"keyword\">short</span> age;</span><br><span class=\"line\">    &#125; Person[<span class=\"number\">5</span>] = &#123; &#123;<span class=\"number\">1</span>,<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">20</span>&#125;, <span class=\"comment\">//创建结构体的同时创建结构体数组</span></span><br><span class=\"line\">        &#123;<span class=\"number\">2</span>,<span class=\"string\">&quot;李可可&quot;</span>,<span class=\"number\">21</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">3</span>,<span class=\"string\">&quot;宋桥&quot;</span>,<span class=\"number\">22</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">4</span>,<span class=\"string\">&quot;元员&quot;</span>,<span class=\"number\">22</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">5</span>,<span class=\"string\">&quot;王冰冰&quot;</span>,<span class=\"number\">22</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PersonInfo</span>* <span class=\"title\">pPersonInfo</span>;</span></span><br><span class=\"line\">    pPersonInfo = Person;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++, pPersonInfo++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; pPersonInfo-&gt;index &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; pPersonInfo-&gt;name &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; pPersonInfo-&gt;age &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构体所占空间大小\"><a href=\"#结构体所占空间大小\" class=\"headerlink\" title=\"结构体所占空间大小\"></a>结构体所占空间大小</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PersonInfo</span></span></span><br><span class=\"line\"><span class=\"class\">\t&#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> name[<span class=\"number\">30</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">short</span> age;</span><br><span class=\"line\">\t&#125; pInfo;</span><br><span class=\"line\">\tpInfo.index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(pInfo.name, <span class=\"string\">&quot;小龙&quot;</span>);</span><br><span class=\"line\">\tpInfo.age = <span class=\"number\">20</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;index:&quot;</span> &lt;&lt; <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(pInfo.index) &lt;&lt; <span class=\"string\">&quot;name:&quot;</span> &lt;&lt; <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(pInfo.name) &lt;&lt; <span class=\"string\">&quot;age:&quot;</span> &lt;&lt; <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(pInfo.age) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(pInfo) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改int数据类型\"><a href=\"#修改int数据类型\" class=\"headerlink\" title=\"修改int数据类型\"></a>修改int数据类型</h2><p>我们可以为一个数据类型取别名使用<code>typedef</code>关键字</p>\n<p>公式：<code>typedef 旧类型名 新类型名;</code></p>\n<p>例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">9</span>;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> flag;</span><br><span class=\"line\">    flag b = <span class=\"number\">9</span>;</span><br><span class=\"line\">    cout &lt;&lt; a &lt;&lt; b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"共用体\"><a href=\"#共用体\" class=\"headerlink\" title=\"共用体\"></a>共用体</h2><p>共用体数据类型是指将不同的数据项组织为一个整体，和结构体类似，但是共用体在内存中占用首地址相同的一段存储单元。</p>\n<p>创建共用体的公式：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">union</span> 共用体类型名&#123;</span></span><br><span class=\"line\">\t成员数据类型  共用体成员名<span class=\"number\">1</span>；</span><br><span class=\"line\">\t成员数据类型  共用体成员名<span class=\"number\">2</span>；</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t成员数据类型  共用体成员名n；</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>共用体变量所占内存大小是由最长的成员的长度决定的。</p>\n</blockquote>\n<p>共用体的初始化</p>\n<p>案例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">myUnion</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> iData;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> chData;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> fData;</span><br><span class=\"line\">&#125; uStruct;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    uStruct.chData=<span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">    uStruct.fData=<span class=\"number\">0.3</span>;</span><br><span class=\"line\">    uStruct.iData=<span class=\"number\">100</span>;</span><br><span class=\"line\">    cout &lt;&lt; uStruct.chData &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; uStruct.fData &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; uStruct.iData &lt;&lt; endl;        <span class=\"comment\">//正确显示</span></span><br><span class=\"line\">    uStruct.iData=<span class=\"number\">100</span>;</span><br><span class=\"line\">    uStruct.fData=<span class=\"number\">0.3</span>;</span><br><span class=\"line\">    uStruct.chData=<span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">    cout &lt;&lt; uStruct.chData&lt;&lt; endl;    <span class=\"comment\">//正确显示</span></span><br><span class=\"line\">    cout &lt;&lt; uStruct.fData&lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; uStruct.iData&lt;&lt; endl;</span><br><span class=\"line\">    uStruct.iData=<span class=\"number\">100</span>;</span><br><span class=\"line\">    uStruct.chData=<span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">    uStruct.fData=<span class=\"number\">0.3</span>;</span><br><span class=\"line\">    cout &lt;&lt; uStruct.chData &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; uStruct.fData &lt;&lt; endl;        <span class=\"comment\">//正确显示</span></span><br><span class=\"line\">    cout &lt;&lt; uStruct.iData &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>由于是共用的同一个内存单元，所以结果中只有最后赋值的成员能正确显示。</p>\n</blockquote>\n<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p>枚举：是一些标识符的集合，其变量的值只能取自括号内的这些标识符。</p>\n<p>枚举创建公式：<code>enum 枚举类型名 &#123;标识符列表&#125;;</code></p>\n<p>创建带整型值的枚举类型的公式：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> 枚举类型名 &#123;</span></span><br><span class=\"line\">标识符=<span class=\"number\">0</span>，</span><br><span class=\"line\">标识符=<span class=\"number\">1</span>，</span><br><span class=\"line\">标识符=<span class=\"number\">2</span>，</span><br><span class=\"line\">标识符=<span class=\"number\">3</span>，</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>创建枚举类型变量的公式： <code>枚举类型名 变量名；</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Weekday</span> &#123;</span>Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a=<span class=\"number\">2</span>,b=<span class=\"number\">1</span>;</span><br><span class=\"line\">    Weekday day;</span><br><span class=\"line\">    day=(Weekday)a;</span><br><span class=\"line\">    cout &lt;&lt; day &lt;&lt; endl;</span><br><span class=\"line\">    day=(Weekday)(a-b);</span><br><span class=\"line\">    cout &lt;&lt; day &lt;&lt; endl;</span><br><span class=\"line\">    day=(Weekday)(Sunday+Wednesday);</span><br><span class=\"line\">    cout &lt;&lt; day &lt;&lt; endl;</span><br><span class=\"line\">    day=(Weekday)<span class=\"number\">5</span>;</span><br><span class=\"line\">    cout &lt;&lt; day &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>枚举类型的值可以和整型类型一起运算、比较等。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Weekday</span> &#123;</span> Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Weekday day1, day2;</span><br><span class=\"line\">    day1 = Monday;</span><br><span class=\"line\">    day2 = Saturday;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    n = day1;</span><br><span class=\"line\">    n = day2 + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &gt; day1)            <span class=\"comment\">//可以比较</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;n&gt;day1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (day1 &lt; day2)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;day1&lt;day2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"flutter笔记","date":"2021-09-17T02:25:27.000Z","description":"flutter","top_img":"https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg","cover":"https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg","top":10,"_content":"\n# Flutter\n\n**参考网站：**\n\n[Flutter 中文文档 - Flutter 中文资源 | 安装和环境配置](https://flutter.cn/docs/get-started/install)\n\n[Flutter中文网](https://flutterchina.club/)\n\n[Flutter实战(电子书)](https://book.flutterchina.club/)\n\n[Pub Dart第三方包](https://pub.flutter-io.cn/)\n\n---\n\n# Widget组件\n\nFlutter中万物皆为`Widget`，就如同Android中的`Activity`，HarmonyOS中的`Ability`。\n\n## StatelessWidget---无状态的组件\n\n其他组件通过`extends`继承`StatelessWidget`来表示当前组件是无状态的。\n\n`StatelessWidget`有一个待实现的函数`build`，当前这个`Widget`被创建的时候就会调用这个`build`函数，`build`要返回当前这个组件长样子，也就是返回的还是一个`Widget`。\n\n例子：\n\n```dart\nclass MyWidget extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Widget();\n  }\n}\n```\n\n## StatefulWidget---有状态的组件\n\n其他组件通过`extends`继承`StatefulWidget`来表示当前组件是有状态的。\n\n继承了`StatefulWidget`的组件需要创建一个私有的状态类，用来管理组件的状态，状态类要继承`State<组件>`，这是泛型的写法。这个状态类要去实现`build`函数，`build`要返回当前这个组件长样子，也就是返回的还是一个`Widget`。\n\n在这个组件的状态类中可以去调用`setState`，每一次调用`setState`都会重新绘制一次组件，也就是调用`build`函数。所以我们在`setState`中去修改一些和组件有关的数据时就能做到改变当前这个组件。\n\n例子：\n\n```dart\nclass MyWidget extends StatefulWidget {\n  const MyWidget({Key? key}) : super(key: key);\n\n  @override\n  _MyWidgetState createState() => _MyWidgetState();\n}\n\nclass _MyWidgetState extends State<MyWidget> {\n  @override\n  Widget build(BuildContext context) {\n    return Widget();\n  }\n}\n```\n\n## MaterialApp---UI组件\n\n让开发者的写的组件具有MD风格 [Material Design](https://material.io/design)\n\n源码：\n\n```dart\nconst MaterialApp({\n    Key? key,\n    this.navigatorKey,\n    this.scaffoldMessengerKey,\n    this.home,\n    Map<String, WidgetBuilder> this.routes = const <String, WidgetBuilder>{},\n    this.initialRoute,\n    this.onGenerateRoute,\n    this.onGenerateInitialRoutes,\n    this.onUnknownRoute,\n    List<NavigatorObserver> this.navigatorObservers = const <NavigatorObserver>[],\n    this.builder,\n    this.title = '',\n    this.onGenerateTitle,\n    this.color,\n    this.theme,\n    this.darkTheme,\n    this.highContrastTheme,\n    this.highContrastDarkTheme,\n    this.themeMode = ThemeMode.system,\n    this.locale,\n    this.localizationsDelegates,\n    this.localeListResolutionCallback,\n    this.localeResolutionCallback,\n    this.supportedLocales = const <Locale>[Locale('en', 'US')],\n    this.debugShowMaterialGrid = false,\n    this.showPerformanceOverlay = false,\n    this.checkerboardRasterCacheImages = false,\n    this.checkerboardOffscreenLayers = false,\n    this.showSemanticsDebugger = false,\n    this.debugShowCheckedModeBanner = true,\n    this.shortcuts,\n    this.actions,\n    this.restorationScopeId,\n    this.scrollBehavior,\n  })\n```\n\n[Flutter-MaterialApp详解](https://gaoxianglong.gitee.io/yisheep/2021/09/18/Flutter-MaterialApp/)\n\n# Scaffold---脚手架组件\n\n`Scaffold`将我们的应用分为几个部分，方便我们去搭建整个应用。\n\n源码：\n\n```dart\nconst Scaffold({\n    Key? key,\n    this.appBar,\n    this.body,\n    this.floatingActionButton,\n    this.floatingActionButtonLocation,\n    this.floatingActionButtonAnimator,\n    this.persistentFooterButtons,\n    this.drawer,\n    this.onDrawerChanged,\n    this.endDrawer,\n    this.onEndDrawerChanged,\n    this.bottomNavigationBar,\n    this.bottomSheet,\n    this.backgroundColor,\n    this.resizeToAvoidBottomInset,\n    this.primary = true,\n    this.drawerDragStartBehavior = DragStartBehavior.start,\n    this.extendBody = false,\n    this.extendBodyBehindAppBar = false,\n    this.drawerScrimColor,\n    this.drawerEdgeDragWidth,\n    this.drawerEnableOpenDragGesture = true,\n    this.endDrawerEnableOpenDragGesture = true,\n    this.restorationId,\n  })\n```\n\n[Flutter-Scaffold详解](https://gaoxianglong.gitee.io/yisheep/2021/09/18/Flutter-Scaffold/)\n\n## AppBar---标题栏组件\n\n一般在`Scaffold`中使用，能控制标题栏的属性。\n\n```dart\nAppBar({\n    Key? key,\n    this.leading,\n    this.automaticallyImplyLeading = true,\n    this.title,\n    this.actions,\n    this.flexibleSpace,\n    this.bottom,\n    this.elevation,\n    this.shadowColor,\n    this.shape,\n    this.backgroundColor,\n    this.foregroundColor,\n    this.brightness,\n    this.iconTheme,\n    this.actionsIconTheme,\n    this.textTheme,\n    this.primary = true,\n    this.centerTitle,\n    this.excludeHeaderSemantics = false,\n    this.titleSpacing,\n    this.toolbarOpacity = 1.0,\n    this.bottomOpacity = 1.0,\n    this.toolbarHeight,\n    this.leadingWidth,\n    this.backwardsCompatibility,\n    this.toolbarTextStyle,\n    this.titleTextStyle,\n    this.systemOverlayStyle,\n  })\n```\n\n[Flutter-AppBar详解](https://gaoxianglong.gitee.io/yisheep/2021/09/18/Flutter-AppBar/)\n\n## TabBar---导航栏组件\n\n\n\n## Container---容器\n\n像是一个盒子一样，能够使我们将组件放到里面去，可以更改其大小。\n\n源码：\n\n```dart\nContainer({\n    Key? key,\n    this.alignment,\n    this.padding,\n    this.color,\n    this.decoration,\n    this.foregroundDecoration,\n    double? width,\n    double? height,\n    BoxConstraints? constraints,\n    this.margin,\n    this.transform,\n    this.transformAlignment,\n    this.child,\n    this.clipBehavior = Clip.none,\n  })\n```\n\n[Flutter-Container详解](https://gaoxianglong.gitee.io/yisheep/2021/09/17/Flutter-Container/)\n\n## Center---居中布局\n\n可以让`widget`位于该布局的中心。\n\n源码：\n\n```dart\nconst Center({ \n    Key? key, \n    double? widthFactor, \n    double? heightFactor, \n    Widget? child \n})\n```\n\n[Flutter-Center详解](https://gaoxianglong.gitee.io/yisheep/2021/09/17/Flutter-Center/)\n\n","source":"_posts/flutter笔记.md","raw":"---\ntitle: flutter笔记\ndate: 2021-09-17 10:25:27\ntags: [笔记]\ncategories: flutter\ndescription: flutter\ntop_img: https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg\ncover: https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg\ntop: 10\n---\n\n# Flutter\n\n**参考网站：**\n\n[Flutter 中文文档 - Flutter 中文资源 | 安装和环境配置](https://flutter.cn/docs/get-started/install)\n\n[Flutter中文网](https://flutterchina.club/)\n\n[Flutter实战(电子书)](https://book.flutterchina.club/)\n\n[Pub Dart第三方包](https://pub.flutter-io.cn/)\n\n---\n\n# Widget组件\n\nFlutter中万物皆为`Widget`，就如同Android中的`Activity`，HarmonyOS中的`Ability`。\n\n## StatelessWidget---无状态的组件\n\n其他组件通过`extends`继承`StatelessWidget`来表示当前组件是无状态的。\n\n`StatelessWidget`有一个待实现的函数`build`，当前这个`Widget`被创建的时候就会调用这个`build`函数，`build`要返回当前这个组件长样子，也就是返回的还是一个`Widget`。\n\n例子：\n\n```dart\nclass MyWidget extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Widget();\n  }\n}\n```\n\n## StatefulWidget---有状态的组件\n\n其他组件通过`extends`继承`StatefulWidget`来表示当前组件是有状态的。\n\n继承了`StatefulWidget`的组件需要创建一个私有的状态类，用来管理组件的状态，状态类要继承`State<组件>`，这是泛型的写法。这个状态类要去实现`build`函数，`build`要返回当前这个组件长样子，也就是返回的还是一个`Widget`。\n\n在这个组件的状态类中可以去调用`setState`，每一次调用`setState`都会重新绘制一次组件，也就是调用`build`函数。所以我们在`setState`中去修改一些和组件有关的数据时就能做到改变当前这个组件。\n\n例子：\n\n```dart\nclass MyWidget extends StatefulWidget {\n  const MyWidget({Key? key}) : super(key: key);\n\n  @override\n  _MyWidgetState createState() => _MyWidgetState();\n}\n\nclass _MyWidgetState extends State<MyWidget> {\n  @override\n  Widget build(BuildContext context) {\n    return Widget();\n  }\n}\n```\n\n## MaterialApp---UI组件\n\n让开发者的写的组件具有MD风格 [Material Design](https://material.io/design)\n\n源码：\n\n```dart\nconst MaterialApp({\n    Key? key,\n    this.navigatorKey,\n    this.scaffoldMessengerKey,\n    this.home,\n    Map<String, WidgetBuilder> this.routes = const <String, WidgetBuilder>{},\n    this.initialRoute,\n    this.onGenerateRoute,\n    this.onGenerateInitialRoutes,\n    this.onUnknownRoute,\n    List<NavigatorObserver> this.navigatorObservers = const <NavigatorObserver>[],\n    this.builder,\n    this.title = '',\n    this.onGenerateTitle,\n    this.color,\n    this.theme,\n    this.darkTheme,\n    this.highContrastTheme,\n    this.highContrastDarkTheme,\n    this.themeMode = ThemeMode.system,\n    this.locale,\n    this.localizationsDelegates,\n    this.localeListResolutionCallback,\n    this.localeResolutionCallback,\n    this.supportedLocales = const <Locale>[Locale('en', 'US')],\n    this.debugShowMaterialGrid = false,\n    this.showPerformanceOverlay = false,\n    this.checkerboardRasterCacheImages = false,\n    this.checkerboardOffscreenLayers = false,\n    this.showSemanticsDebugger = false,\n    this.debugShowCheckedModeBanner = true,\n    this.shortcuts,\n    this.actions,\n    this.restorationScopeId,\n    this.scrollBehavior,\n  })\n```\n\n[Flutter-MaterialApp详解](https://gaoxianglong.gitee.io/yisheep/2021/09/18/Flutter-MaterialApp/)\n\n# Scaffold---脚手架组件\n\n`Scaffold`将我们的应用分为几个部分，方便我们去搭建整个应用。\n\n源码：\n\n```dart\nconst Scaffold({\n    Key? key,\n    this.appBar,\n    this.body,\n    this.floatingActionButton,\n    this.floatingActionButtonLocation,\n    this.floatingActionButtonAnimator,\n    this.persistentFooterButtons,\n    this.drawer,\n    this.onDrawerChanged,\n    this.endDrawer,\n    this.onEndDrawerChanged,\n    this.bottomNavigationBar,\n    this.bottomSheet,\n    this.backgroundColor,\n    this.resizeToAvoidBottomInset,\n    this.primary = true,\n    this.drawerDragStartBehavior = DragStartBehavior.start,\n    this.extendBody = false,\n    this.extendBodyBehindAppBar = false,\n    this.drawerScrimColor,\n    this.drawerEdgeDragWidth,\n    this.drawerEnableOpenDragGesture = true,\n    this.endDrawerEnableOpenDragGesture = true,\n    this.restorationId,\n  })\n```\n\n[Flutter-Scaffold详解](https://gaoxianglong.gitee.io/yisheep/2021/09/18/Flutter-Scaffold/)\n\n## AppBar---标题栏组件\n\n一般在`Scaffold`中使用，能控制标题栏的属性。\n\n```dart\nAppBar({\n    Key? key,\n    this.leading,\n    this.automaticallyImplyLeading = true,\n    this.title,\n    this.actions,\n    this.flexibleSpace,\n    this.bottom,\n    this.elevation,\n    this.shadowColor,\n    this.shape,\n    this.backgroundColor,\n    this.foregroundColor,\n    this.brightness,\n    this.iconTheme,\n    this.actionsIconTheme,\n    this.textTheme,\n    this.primary = true,\n    this.centerTitle,\n    this.excludeHeaderSemantics = false,\n    this.titleSpacing,\n    this.toolbarOpacity = 1.0,\n    this.bottomOpacity = 1.0,\n    this.toolbarHeight,\n    this.leadingWidth,\n    this.backwardsCompatibility,\n    this.toolbarTextStyle,\n    this.titleTextStyle,\n    this.systemOverlayStyle,\n  })\n```\n\n[Flutter-AppBar详解](https://gaoxianglong.gitee.io/yisheep/2021/09/18/Flutter-AppBar/)\n\n## TabBar---导航栏组件\n\n\n\n## Container---容器\n\n像是一个盒子一样，能够使我们将组件放到里面去，可以更改其大小。\n\n源码：\n\n```dart\nContainer({\n    Key? key,\n    this.alignment,\n    this.padding,\n    this.color,\n    this.decoration,\n    this.foregroundDecoration,\n    double? width,\n    double? height,\n    BoxConstraints? constraints,\n    this.margin,\n    this.transform,\n    this.transformAlignment,\n    this.child,\n    this.clipBehavior = Clip.none,\n  })\n```\n\n[Flutter-Container详解](https://gaoxianglong.gitee.io/yisheep/2021/09/17/Flutter-Container/)\n\n## Center---居中布局\n\n可以让`widget`位于该布局的中心。\n\n源码：\n\n```dart\nconst Center({ \n    Key? key, \n    double? widthFactor, \n    double? heightFactor, \n    Widget? child \n})\n```\n\n[Flutter-Center详解](https://gaoxianglong.gitee.io/yisheep/2021/09/17/Flutter-Center/)\n\n","slug":"flutter笔记","published":1,"updated":"2021-09-18T07:05:12.008Z","_id":"cktnr5v0f000ck0uxcahs8wt6","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Flutter\"><a href=\"#Flutter\" class=\"headerlink\" title=\"Flutter\"></a>Flutter</h1><p><strong>参考网站：</strong></p>\n<p><a href=\"https://flutter.cn/docs/get-started/install\">Flutter 中文文档 - Flutter 中文资源 | 安装和环境配置</a></p>\n<p><a href=\"https://flutterchina.club/\">Flutter中文网</a></p>\n<p><a href=\"https://book.flutterchina.club/\">Flutter实战(电子书)</a></p>\n<p><a href=\"https://pub.flutter-io.cn/\">Pub Dart第三方包</a></p>\n<hr>\n<h1 id=\"Widget组件\"><a href=\"#Widget组件\" class=\"headerlink\" title=\"Widget组件\"></a>Widget组件</h1><p>Flutter中万物皆为<code>Widget</code>，就如同Android中的<code>Activity</code>，HarmonyOS中的<code>Ability</code>。</p>\n<h2 id=\"StatelessWidget—无状态的组件\"><a href=\"#StatelessWidget—无状态的组件\" class=\"headerlink\" title=\"StatelessWidget—无状态的组件\"></a>StatelessWidget—无状态的组件</h2><p>其他组件通过<code>extends</code>继承<code>StatelessWidget</code>来表示当前组件是无状态的。</p>\n<p><code>StatelessWidget</code>有一个待实现的函数<code>build</code>，当前这个<code>Widget</code>被创建的时候就会调用这个<code>build</code>函数，<code>build</code>要返回当前这个组件长样子，也就是返回的还是一个<code>Widget</code>。</p>\n<p>例子：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyWidget</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Widget();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"StatefulWidget—有状态的组件\"><a href=\"#StatefulWidget—有状态的组件\" class=\"headerlink\" title=\"StatefulWidget—有状态的组件\"></a>StatefulWidget—有状态的组件</h2><p>其他组件通过<code>extends</code>继承<code>StatefulWidget</code>来表示当前组件是有状态的。</p>\n<p>继承了<code>StatefulWidget</code>的组件需要创建一个私有的状态类，用来管理组件的状态，状态类要继承<code>State&lt;组件&gt;</code>，这是泛型的写法。这个状态类要去实现<code>build</code>函数，<code>build</code>要返回当前这个组件长样子，也就是返回的还是一个<code>Widget</code>。</p>\n<p>在这个组件的状态类中可以去调用<code>setState</code>，每一次调用<code>setState</code>都会重新绘制一次组件，也就是调用<code>build</code>函数。所以我们在<code>setState</code>中去修改一些和组件有关的数据时就能做到改变当前这个组件。</p>\n<p>例子：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyWidget</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> MyWidget(&#123;Key? key&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _MyWidgetState createState() =&gt; _MyWidgetState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_MyWidgetState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">MyWidget</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Widget();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MaterialApp—UI组件\"><a href=\"#MaterialApp—UI组件\" class=\"headerlink\" title=\"MaterialApp—UI组件\"></a>MaterialApp—UI组件</h2><p>让开发者的写的组件具有MD风格 <a href=\"https://material.io/design\">Material Design</a></p>\n<p>源码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MaterialApp(&#123;</span><br><span class=\"line\">    Key? key,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.navigatorKey,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.scaffoldMessengerKey,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.home,</span><br><span class=\"line\">    <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, WidgetBuilder&gt; <span class=\"keyword\">this</span>.routes = <span class=\"keyword\">const</span> &lt;<span class=\"built_in\">String</span>, WidgetBuilder&gt;&#123;&#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.initialRoute,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onGenerateRoute,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onGenerateInitialRoutes,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onUnknownRoute,</span><br><span class=\"line\">    <span class=\"built_in\">List</span>&lt;NavigatorObserver&gt; <span class=\"keyword\">this</span>.navigatorObservers = <span class=\"keyword\">const</span> &lt;NavigatorObserver&gt;[],</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.builder,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.title = <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onGenerateTitle,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.theme,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.darkTheme,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.highContrastTheme,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.highContrastDarkTheme,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.themeMode = ThemeMode.system,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.locale,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.localizationsDelegates,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.localeListResolutionCallback,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.localeResolutionCallback,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.supportedLocales = <span class=\"keyword\">const</span> &lt;Locale&gt;[Locale(<span class=\"string\">&#x27;en&#x27;</span>, <span class=\"string\">&#x27;US&#x27;</span>)],</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.debugShowMaterialGrid = <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.showPerformanceOverlay = <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.checkerboardRasterCacheImages = <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.checkerboardOffscreenLayers = <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.showSemanticsDebugger = <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.debugShowCheckedModeBanner = <span class=\"keyword\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.shortcuts,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.actions,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.restorationScopeId,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.scrollBehavior,</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gaoxianglong.gitee.io/yisheep/2021/09/18/Flutter-MaterialApp/\">Flutter-MaterialApp详解</a></p>\n<h1 id=\"Scaffold—脚手架组件\"><a href=\"#Scaffold—脚手架组件\" class=\"headerlink\" title=\"Scaffold—脚手架组件\"></a>Scaffold—脚手架组件</h1><p><code>Scaffold</code>将我们的应用分为几个部分，方便我们去搭建整个应用。</p>\n<p>源码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Scaffold(&#123;</span><br><span class=\"line\">    Key? key,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.appBar,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.body,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.floatingActionButton,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.floatingActionButtonLocation,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.floatingActionButtonAnimator,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.persistentFooterButtons,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.drawer,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onDrawerChanged,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.endDrawer,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onEndDrawerChanged,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bottomNavigationBar,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bottomSheet,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.backgroundColor,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.resizeToAvoidBottomInset,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.primary = <span class=\"keyword\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.drawerDragStartBehavior = DragStartBehavior.start,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.extendBody = <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.extendBodyBehindAppBar = <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.drawerScrimColor,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.drawerEdgeDragWidth,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.drawerEnableOpenDragGesture = <span class=\"keyword\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.endDrawerEnableOpenDragGesture = <span class=\"keyword\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.restorationId,</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gaoxianglong.gitee.io/yisheep/2021/09/18/Flutter-Scaffold/\">Flutter-Scaffold详解</a></p>\n<h2 id=\"AppBar—标题栏组件\"><a href=\"#AppBar—标题栏组件\" class=\"headerlink\" title=\"AppBar—标题栏组件\"></a>AppBar—标题栏组件</h2><p>一般在<code>Scaffold</code>中使用，能控制标题栏的属性。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AppBar(&#123;</span><br><span class=\"line\">    Key? key,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.leading,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.automaticallyImplyLeading = <span class=\"keyword\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.title,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.actions,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.flexibleSpace,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bottom,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.elevation,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.shadowColor,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.shape,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.backgroundColor,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.foregroundColor,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.brightness,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.iconTheme,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.actionsIconTheme,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.textTheme,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.primary = <span class=\"keyword\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.centerTitle,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.excludeHeaderSemantics = <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.titleSpacing,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.toolbarOpacity = <span class=\"number\">1.0</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bottomOpacity = <span class=\"number\">1.0</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.toolbarHeight,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.leadingWidth,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.backwardsCompatibility,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.toolbarTextStyle,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.titleTextStyle,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.systemOverlayStyle,</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gaoxianglong.gitee.io/yisheep/2021/09/18/Flutter-AppBar/\">Flutter-AppBar详解</a></p>\n<h2 id=\"TabBar—导航栏组件\"><a href=\"#TabBar—导航栏组件\" class=\"headerlink\" title=\"TabBar—导航栏组件\"></a>TabBar—导航栏组件</h2><h2 id=\"Container—容器\"><a href=\"#Container—容器\" class=\"headerlink\" title=\"Container—容器\"></a>Container—容器</h2><p>像是一个盒子一样，能够使我们将组件放到里面去，可以更改其大小。</p>\n<p>源码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Container(&#123;</span><br><span class=\"line\">    Key? key,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.alignment,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.padding,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.decoration,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.foregroundDecoration,</span><br><span class=\"line\">    <span class=\"built_in\">double?</span> width,</span><br><span class=\"line\">    <span class=\"built_in\">double?</span> height,</span><br><span class=\"line\">    BoxConstraints? constraints,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.margin,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.transform,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.transformAlignment,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.child,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.clipBehavior = Clip.none,</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gaoxianglong.gitee.io/yisheep/2021/09/17/Flutter-Container/\">Flutter-Container详解</a></p>\n<h2 id=\"Center—居中布局\"><a href=\"#Center—居中布局\" class=\"headerlink\" title=\"Center—居中布局\"></a>Center—居中布局</h2><p>可以让<code>widget</code>位于该布局的中心。</p>\n<p>源码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Center(&#123; </span><br><span class=\"line\">    Key? key, </span><br><span class=\"line\">    <span class=\"built_in\">double?</span> widthFactor, </span><br><span class=\"line\">    <span class=\"built_in\">double?</span> heightFactor, </span><br><span class=\"line\">    Widget? child </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gaoxianglong.gitee.io/yisheep/2021/09/17/Flutter-Center/\">Flutter-Center详解</a></p>\n","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"excerpt":"","more":"<h1 id=\"Flutter\"><a href=\"#Flutter\" class=\"headerlink\" title=\"Flutter\"></a>Flutter</h1><p><strong>参考网站：</strong></p>\n<p><a href=\"https://flutter.cn/docs/get-started/install\">Flutter 中文文档 - Flutter 中文资源 | 安装和环境配置</a></p>\n<p><a href=\"https://flutterchina.club/\">Flutter中文网</a></p>\n<p><a href=\"https://book.flutterchina.club/\">Flutter实战(电子书)</a></p>\n<p><a href=\"https://pub.flutter-io.cn/\">Pub Dart第三方包</a></p>\n<hr>\n<h1 id=\"Widget组件\"><a href=\"#Widget组件\" class=\"headerlink\" title=\"Widget组件\"></a>Widget组件</h1><p>Flutter中万物皆为<code>Widget</code>，就如同Android中的<code>Activity</code>，HarmonyOS中的<code>Ability</code>。</p>\n<h2 id=\"StatelessWidget—无状态的组件\"><a href=\"#StatelessWidget—无状态的组件\" class=\"headerlink\" title=\"StatelessWidget—无状态的组件\"></a>StatelessWidget—无状态的组件</h2><p>其他组件通过<code>extends</code>继承<code>StatelessWidget</code>来表示当前组件是无状态的。</p>\n<p><code>StatelessWidget</code>有一个待实现的函数<code>build</code>，当前这个<code>Widget</code>被创建的时候就会调用这个<code>build</code>函数，<code>build</code>要返回当前这个组件长样子，也就是返回的还是一个<code>Widget</code>。</p>\n<p>例子：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyWidget</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Widget();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"StatefulWidget—有状态的组件\"><a href=\"#StatefulWidget—有状态的组件\" class=\"headerlink\" title=\"StatefulWidget—有状态的组件\"></a>StatefulWidget—有状态的组件</h2><p>其他组件通过<code>extends</code>继承<code>StatefulWidget</code>来表示当前组件是有状态的。</p>\n<p>继承了<code>StatefulWidget</code>的组件需要创建一个私有的状态类，用来管理组件的状态，状态类要继承<code>State&lt;组件&gt;</code>，这是泛型的写法。这个状态类要去实现<code>build</code>函数，<code>build</code>要返回当前这个组件长样子，也就是返回的还是一个<code>Widget</code>。</p>\n<p>在这个组件的状态类中可以去调用<code>setState</code>，每一次调用<code>setState</code>都会重新绘制一次组件，也就是调用<code>build</code>函数。所以我们在<code>setState</code>中去修改一些和组件有关的数据时就能做到改变当前这个组件。</p>\n<p>例子：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyWidget</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> MyWidget(&#123;Key? key&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _MyWidgetState createState() =&gt; _MyWidgetState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_MyWidgetState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">MyWidget</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Widget();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MaterialApp—UI组件\"><a href=\"#MaterialApp—UI组件\" class=\"headerlink\" title=\"MaterialApp—UI组件\"></a>MaterialApp—UI组件</h2><p>让开发者的写的组件具有MD风格 <a href=\"https://material.io/design\">Material Design</a></p>\n<p>源码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MaterialApp(&#123;</span><br><span class=\"line\">    Key? key,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.navigatorKey,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.scaffoldMessengerKey,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.home,</span><br><span class=\"line\">    <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, WidgetBuilder&gt; <span class=\"keyword\">this</span>.routes = <span class=\"keyword\">const</span> &lt;<span class=\"built_in\">String</span>, WidgetBuilder&gt;&#123;&#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.initialRoute,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onGenerateRoute,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onGenerateInitialRoutes,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onUnknownRoute,</span><br><span class=\"line\">    <span class=\"built_in\">List</span>&lt;NavigatorObserver&gt; <span class=\"keyword\">this</span>.navigatorObservers = <span class=\"keyword\">const</span> &lt;NavigatorObserver&gt;[],</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.builder,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.title = <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onGenerateTitle,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.theme,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.darkTheme,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.highContrastTheme,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.highContrastDarkTheme,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.themeMode = ThemeMode.system,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.locale,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.localizationsDelegates,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.localeListResolutionCallback,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.localeResolutionCallback,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.supportedLocales = <span class=\"keyword\">const</span> &lt;Locale&gt;[Locale(<span class=\"string\">&#x27;en&#x27;</span>, <span class=\"string\">&#x27;US&#x27;</span>)],</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.debugShowMaterialGrid = <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.showPerformanceOverlay = <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.checkerboardRasterCacheImages = <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.checkerboardOffscreenLayers = <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.showSemanticsDebugger = <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.debugShowCheckedModeBanner = <span class=\"keyword\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.shortcuts,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.actions,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.restorationScopeId,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.scrollBehavior,</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gaoxianglong.gitee.io/yisheep/2021/09/18/Flutter-MaterialApp/\">Flutter-MaterialApp详解</a></p>\n<h1 id=\"Scaffold—脚手架组件\"><a href=\"#Scaffold—脚手架组件\" class=\"headerlink\" title=\"Scaffold—脚手架组件\"></a>Scaffold—脚手架组件</h1><p><code>Scaffold</code>将我们的应用分为几个部分，方便我们去搭建整个应用。</p>\n<p>源码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Scaffold(&#123;</span><br><span class=\"line\">    Key? key,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.appBar,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.body,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.floatingActionButton,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.floatingActionButtonLocation,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.floatingActionButtonAnimator,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.persistentFooterButtons,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.drawer,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onDrawerChanged,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.endDrawer,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onEndDrawerChanged,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bottomNavigationBar,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bottomSheet,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.backgroundColor,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.resizeToAvoidBottomInset,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.primary = <span class=\"keyword\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.drawerDragStartBehavior = DragStartBehavior.start,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.extendBody = <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.extendBodyBehindAppBar = <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.drawerScrimColor,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.drawerEdgeDragWidth,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.drawerEnableOpenDragGesture = <span class=\"keyword\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.endDrawerEnableOpenDragGesture = <span class=\"keyword\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.restorationId,</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gaoxianglong.gitee.io/yisheep/2021/09/18/Flutter-Scaffold/\">Flutter-Scaffold详解</a></p>\n<h2 id=\"AppBar—标题栏组件\"><a href=\"#AppBar—标题栏组件\" class=\"headerlink\" title=\"AppBar—标题栏组件\"></a>AppBar—标题栏组件</h2><p>一般在<code>Scaffold</code>中使用，能控制标题栏的属性。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AppBar(&#123;</span><br><span class=\"line\">    Key? key,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.leading,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.automaticallyImplyLeading = <span class=\"keyword\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.title,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.actions,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.flexibleSpace,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bottom,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.elevation,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.shadowColor,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.shape,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.backgroundColor,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.foregroundColor,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.brightness,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.iconTheme,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.actionsIconTheme,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.textTheme,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.primary = <span class=\"keyword\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.centerTitle,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.excludeHeaderSemantics = <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.titleSpacing,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.toolbarOpacity = <span class=\"number\">1.0</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bottomOpacity = <span class=\"number\">1.0</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.toolbarHeight,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.leadingWidth,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.backwardsCompatibility,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.toolbarTextStyle,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.titleTextStyle,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.systemOverlayStyle,</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gaoxianglong.gitee.io/yisheep/2021/09/18/Flutter-AppBar/\">Flutter-AppBar详解</a></p>\n<h2 id=\"TabBar—导航栏组件\"><a href=\"#TabBar—导航栏组件\" class=\"headerlink\" title=\"TabBar—导航栏组件\"></a>TabBar—导航栏组件</h2><h2 id=\"Container—容器\"><a href=\"#Container—容器\" class=\"headerlink\" title=\"Container—容器\"></a>Container—容器</h2><p>像是一个盒子一样，能够使我们将组件放到里面去，可以更改其大小。</p>\n<p>源码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Container(&#123;</span><br><span class=\"line\">    Key? key,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.alignment,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.padding,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.decoration,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.foregroundDecoration,</span><br><span class=\"line\">    <span class=\"built_in\">double?</span> width,</span><br><span class=\"line\">    <span class=\"built_in\">double?</span> height,</span><br><span class=\"line\">    BoxConstraints? constraints,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.margin,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.transform,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.transformAlignment,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.child,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.clipBehavior = Clip.none,</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gaoxianglong.gitee.io/yisheep/2021/09/17/Flutter-Container/\">Flutter-Container详解</a></p>\n<h2 id=\"Center—居中布局\"><a href=\"#Center—居中布局\" class=\"headerlink\" title=\"Center—居中布局\"></a>Center—居中布局</h2><p>可以让<code>widget</code>位于该布局的中心。</p>\n<p>源码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Center(&#123; </span><br><span class=\"line\">    Key? key, </span><br><span class=\"line\">    <span class=\"built_in\">double?</span> widthFactor, </span><br><span class=\"line\">    <span class=\"built_in\">double?</span> heightFactor, </span><br><span class=\"line\">    Widget? child </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gaoxianglong.gitee.io/yisheep/2021/09/17/Flutter-Center/\">Flutter-Center详解</a></p>\n"},{"title":"c++阶段二第二讲","date":"2021-09-09T10:20:18.000Z","description":"c++阶段二第二讲","top_img":"https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png","cover":"https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png","_content":"\n# 第二讲\n\n## 函数的默认参数\n\n在调用有参函数时，如果经常需要传递同一个值到调用函数，在定义函数时，可以为参数设置一个默认值，这样在调用函数时可以省略一些参数，此时程序将采用默认值作为函数的实际参数。\n\n比如学校给每一位学生注册某学习网站的账号，账号都是有一个对应密码的，要是每一个学生都去设置一个单独的密码，就会比较繁琐，所以大多数学校都选择设置一个统一的密码。\n\n现在就有这么一个注册的函数，需要两个参数，一个是账号，一个是密码，我们只需要每一位同学的账号不一样，而密码都是0000。那么我们就可以使用默认参数。\n\n```c++\nvoid login(string username,string password=\"0000\"){\n    \n}\n```\n\n**函数默认参数：在指定函数时通过赋值符给予默认值，这个默认值在调用函数时没有传入对应参数的话就会使用默认值，要是传入了对应参数那么就会使用传入的值。**\n\n## 函数的重载\n\n我们完成了两个数求和，求差等等函数，但是他们都有一个弊端，就是只能计算两个int类型的数，要是我们要传入一个long类型的或者小数类型的，那就没办法计算了。\n\n你们想想能够怎么去解决这个问题？\n\n解决办法有两个，其中一个就是再创建一个函数，这个函数的接收参数类为long或者小数等等这些类型。但是有一个弊端那就是函数的名字要改变不然创不了，如果要去适配很多种类型就意味着有很多函数，在调用的时候还要去看要传入的参数类型，再去想你要调用哪一个函数，就会很繁琐。\n\n第二个方法就是函数的重载，\n\n**函数的重载：能做到多个函数名相同，**\n\n**但是两个重载函数必须在下列一个或两个方面有所区别：**\n\n* 函数的参数个数不同。\n\n* 函数的参数类型不同或者参数类型顺序不同。\n\n```c++\nvoid fun(){}\nvoid fun(int a){}\nvoid fun(int a,double b){}\nfun();\nfun(1);\nfun(1,1.2);\n```\n\n## 函数的可变参数:\n\n```c++\n#include <iostream>\n#include <stdarg.h>\n#include <string>\nusing namespace std;\nvoid va_add(int cnt,...)\n{\n\tva_list ap;\n\t//cout << cnt << \"\\n\";\n\tva_start(ap, cnt);\n\tint sum = cnt;\n\tfor (int i = 0; i <= cnt; i++) {\n\t\tint a = va_arg(ap, int);\n\t\tsum += a;\n\t\tcout<<a<<\"\\n\";\n\t}\n\tva_end(ap);\n\tprintf(\"%d\\n\", sum);\n}\n\nint main() {\n\tva_add(1, 2, 3);\n}\n```\n\n## 函数与变量的作用域\n\n函数里创建的变量只有当前这个函数里才能访问。\n\n","source":"_posts/c++阶段二第二讲.md","raw":"---\ntitle: c++阶段二第二讲\ndate: 2021-09-09 18:20:18\ntags: [教材,阶段二]\ncategories: c++\ndescription: c++阶段二第二讲\ntop_img: https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png\ncover: https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png\n---\n\n# 第二讲\n\n## 函数的默认参数\n\n在调用有参函数时，如果经常需要传递同一个值到调用函数，在定义函数时，可以为参数设置一个默认值，这样在调用函数时可以省略一些参数，此时程序将采用默认值作为函数的实际参数。\n\n比如学校给每一位学生注册某学习网站的账号，账号都是有一个对应密码的，要是每一个学生都去设置一个单独的密码，就会比较繁琐，所以大多数学校都选择设置一个统一的密码。\n\n现在就有这么一个注册的函数，需要两个参数，一个是账号，一个是密码，我们只需要每一位同学的账号不一样，而密码都是0000。那么我们就可以使用默认参数。\n\n```c++\nvoid login(string username,string password=\"0000\"){\n    \n}\n```\n\n**函数默认参数：在指定函数时通过赋值符给予默认值，这个默认值在调用函数时没有传入对应参数的话就会使用默认值，要是传入了对应参数那么就会使用传入的值。**\n\n## 函数的重载\n\n我们完成了两个数求和，求差等等函数，但是他们都有一个弊端，就是只能计算两个int类型的数，要是我们要传入一个long类型的或者小数类型的，那就没办法计算了。\n\n你们想想能够怎么去解决这个问题？\n\n解决办法有两个，其中一个就是再创建一个函数，这个函数的接收参数类为long或者小数等等这些类型。但是有一个弊端那就是函数的名字要改变不然创不了，如果要去适配很多种类型就意味着有很多函数，在调用的时候还要去看要传入的参数类型，再去想你要调用哪一个函数，就会很繁琐。\n\n第二个方法就是函数的重载，\n\n**函数的重载：能做到多个函数名相同，**\n\n**但是两个重载函数必须在下列一个或两个方面有所区别：**\n\n* 函数的参数个数不同。\n\n* 函数的参数类型不同或者参数类型顺序不同。\n\n```c++\nvoid fun(){}\nvoid fun(int a){}\nvoid fun(int a,double b){}\nfun();\nfun(1);\nfun(1,1.2);\n```\n\n## 函数的可变参数:\n\n```c++\n#include <iostream>\n#include <stdarg.h>\n#include <string>\nusing namespace std;\nvoid va_add(int cnt,...)\n{\n\tva_list ap;\n\t//cout << cnt << \"\\n\";\n\tva_start(ap, cnt);\n\tint sum = cnt;\n\tfor (int i = 0; i <= cnt; i++) {\n\t\tint a = va_arg(ap, int);\n\t\tsum += a;\n\t\tcout<<a<<\"\\n\";\n\t}\n\tva_end(ap);\n\tprintf(\"%d\\n\", sum);\n}\n\nint main() {\n\tva_add(1, 2, 3);\n}\n```\n\n## 函数与变量的作用域\n\n函数里创建的变量只有当前这个函数里才能访问。\n\n","slug":"c++阶段二第二讲","published":1,"updated":"2021-09-18T07:09:55.672Z","_id":"cktnr5v0h000ek0ux8cxm717m","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"第二讲\"><a href=\"#第二讲\" class=\"headerlink\" title=\"第二讲\"></a>第二讲</h1><h2 id=\"函数的默认参数\"><a href=\"#函数的默认参数\" class=\"headerlink\" title=\"函数的默认参数\"></a>函数的默认参数</h2><p>在调用有参函数时，如果经常需要传递同一个值到调用函数，在定义函数时，可以为参数设置一个默认值，这样在调用函数时可以省略一些参数，此时程序将采用默认值作为函数的实际参数。</p>\n<p>比如学校给每一位学生注册某学习网站的账号，账号都是有一个对应密码的，要是每一个学生都去设置一个单独的密码，就会比较繁琐，所以大多数学校都选择设置一个统一的密码。</p>\n<p>现在就有这么一个注册的函数，需要两个参数，一个是账号，一个是密码，我们只需要每一位同学的账号不一样，而密码都是0000。那么我们就可以使用默认参数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(string username,string password=<span class=\"string\">&quot;0000&quot;</span>)</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>函数默认参数：在指定函数时通过赋值符给予默认值，这个默认值在调用函数时没有传入对应参数的话就会使用默认值，要是传入了对应参数那么就会使用传入的值。</strong></p>\n<h2 id=\"函数的重载\"><a href=\"#函数的重载\" class=\"headerlink\" title=\"函数的重载\"></a>函数的重载</h2><p>我们完成了两个数求和，求差等等函数，但是他们都有一个弊端，就是只能计算两个int类型的数，要是我们要传入一个long类型的或者小数类型的，那就没办法计算了。</p>\n<p>你们想想能够怎么去解决这个问题？</p>\n<p>解决办法有两个，其中一个就是再创建一个函数，这个函数的接收参数类为long或者小数等等这些类型。但是有一个弊端那就是函数的名字要改变不然创不了，如果要去适配很多种类型就意味着有很多函数，在调用的时候还要去看要传入的参数类型，再去想你要调用哪一个函数，就会很繁琐。</p>\n<p>第二个方法就是函数的重载，</p>\n<p><strong>函数的重载：能做到多个函数名相同，</strong></p>\n<p><strong>但是两个重载函数必须在下列一个或两个方面有所区别：</strong></p>\n<ul>\n<li><p>函数的参数个数不同。</p>\n</li>\n<li><p>函数的参数类型不同或者参数类型顺序不同。</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">double</span> b)</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">fun</span>();</span><br><span class=\"line\"><span class=\"built_in\">fun</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">fun</span>(<span class=\"number\">1</span>,<span class=\"number\">1.2</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数的可变参数\"><a href=\"#函数的可变参数\" class=\"headerlink\" title=\"函数的可变参数:\"></a>函数的可变参数:</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">va_add</span><span class=\"params\">(<span class=\"keyword\">int</span> cnt,...)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tva_list ap;</span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; cnt &lt;&lt; &quot;\\n&quot;;</span></span><br><span class=\"line\">\t<span class=\"built_in\">va_start</span>(ap, cnt);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sum = cnt;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= cnt; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"built_in\">va_arg</span>(ap, <span class=\"keyword\">int</span>);</span><br><span class=\"line\">\t\tsum += a;</span><br><span class=\"line\">\t\tcout&lt;&lt;a&lt;&lt;<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">va_end</span>(ap);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">va_add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数与变量的作用域\"><a href=\"#函数与变量的作用域\" class=\"headerlink\" title=\"函数与变量的作用域\"></a>函数与变量的作用域</h2><p>函数里创建的变量只有当前这个函数里才能访问。</p>\n","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"excerpt":"","more":"<h1 id=\"第二讲\"><a href=\"#第二讲\" class=\"headerlink\" title=\"第二讲\"></a>第二讲</h1><h2 id=\"函数的默认参数\"><a href=\"#函数的默认参数\" class=\"headerlink\" title=\"函数的默认参数\"></a>函数的默认参数</h2><p>在调用有参函数时，如果经常需要传递同一个值到调用函数，在定义函数时，可以为参数设置一个默认值，这样在调用函数时可以省略一些参数，此时程序将采用默认值作为函数的实际参数。</p>\n<p>比如学校给每一位学生注册某学习网站的账号，账号都是有一个对应密码的，要是每一个学生都去设置一个单独的密码，就会比较繁琐，所以大多数学校都选择设置一个统一的密码。</p>\n<p>现在就有这么一个注册的函数，需要两个参数，一个是账号，一个是密码，我们只需要每一位同学的账号不一样，而密码都是0000。那么我们就可以使用默认参数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(string username,string password=<span class=\"string\">&quot;0000&quot;</span>)</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>函数默认参数：在指定函数时通过赋值符给予默认值，这个默认值在调用函数时没有传入对应参数的话就会使用默认值，要是传入了对应参数那么就会使用传入的值。</strong></p>\n<h2 id=\"函数的重载\"><a href=\"#函数的重载\" class=\"headerlink\" title=\"函数的重载\"></a>函数的重载</h2><p>我们完成了两个数求和，求差等等函数，但是他们都有一个弊端，就是只能计算两个int类型的数，要是我们要传入一个long类型的或者小数类型的，那就没办法计算了。</p>\n<p>你们想想能够怎么去解决这个问题？</p>\n<p>解决办法有两个，其中一个就是再创建一个函数，这个函数的接收参数类为long或者小数等等这些类型。但是有一个弊端那就是函数的名字要改变不然创不了，如果要去适配很多种类型就意味着有很多函数，在调用的时候还要去看要传入的参数类型，再去想你要调用哪一个函数，就会很繁琐。</p>\n<p>第二个方法就是函数的重载，</p>\n<p><strong>函数的重载：能做到多个函数名相同，</strong></p>\n<p><strong>但是两个重载函数必须在下列一个或两个方面有所区别：</strong></p>\n<ul>\n<li><p>函数的参数个数不同。</p>\n</li>\n<li><p>函数的参数类型不同或者参数类型顺序不同。</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">double</span> b)</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">fun</span>();</span><br><span class=\"line\"><span class=\"built_in\">fun</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">fun</span>(<span class=\"number\">1</span>,<span class=\"number\">1.2</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数的可变参数\"><a href=\"#函数的可变参数\" class=\"headerlink\" title=\"函数的可变参数:\"></a>函数的可变参数:</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">va_add</span><span class=\"params\">(<span class=\"keyword\">int</span> cnt,...)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tva_list ap;</span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; cnt &lt;&lt; &quot;\\n&quot;;</span></span><br><span class=\"line\">\t<span class=\"built_in\">va_start</span>(ap, cnt);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sum = cnt;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= cnt; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"built_in\">va_arg</span>(ap, <span class=\"keyword\">int</span>);</span><br><span class=\"line\">\t\tsum += a;</span><br><span class=\"line\">\t\tcout&lt;&lt;a&lt;&lt;<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">va_end</span>(ap);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">va_add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数与变量的作用域\"><a href=\"#函数与变量的作用域\" class=\"headerlink\" title=\"函数与变量的作用域\"></a>函数与变量的作用域</h2><p>函数里创建的变量只有当前这个函数里才能访问。</p>\n"},{"title":"c++阶段二第三讲","date":"2021-09-15T03:29:57.000Z","description":"c++阶段二第三讲","top_img":"https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png","cover":"https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png","_content":"\n# 第三讲\n\n## 数组\n\n**数组：将同一数据类型的数据按照一定形式有序的组织起来，这些有序数据的集合就称为数组。一个数组有一个统一的数组名，可以通过数组名和下标来确定数组中的元素。**\n\n### 创建公式：\n\n`数据类型 数组名[数组大小];`\n\n**注意：**\n\n1、数组名定义规则与变量名相同。\n\n2、数组名后面的括号必须为方括号。\n\n3、方括号中的常量表达式表示数组长度（数组中的元素个数）。\n\n4、方括号中的常量表达式不能是变量。因为数组的长度、大小不能动态定义。\n\n例子：\n\n声明一个整形数组，数组名为啊，有5个元素\n\n`int a[5];`\n\n### 数组的使用\n\n`数组名[下标]`\n\n数组名：我们创建的数组名字\n\n下标：数组元素的房间号，**从0开始**\n\n例子：\n\n`int a[3];`\n\n`a[0]`访问数组a中的第一个元素\n\n`a[1]`访问数组a中的第二个元素\n\n**注意：**\n\n1、数组元素下标从0开始，而非从1开始。\n\n2、在以上声明数组中a[3]是不存在的数组元素，引用a[3]非法。A[3]属于下标越界，容易引起程序瘫痪。\n\n### 数组的初始化:\n\n1. 单一数组元素赋值：先创建函数，再对单一数组元素赋值\n\n   `a[0]=1;a[1]=2;`\n\n2. 集合方式赋值：创建数组的同时用大括号进行多个元素的赋值。\n\n   `int a[3]= {0,1,2};`\n\n   `int a[] = {2.10,5};`\n\n注意：不能用以下形式赋值\n\n`int a[3]; `先声明数组\n\n`a={1,2,3}; `再通过大括号统一为数组赋值。\n\n## 练习：\n\n声明一个数组，包含10个元素，利用for循环对每一个数组元素赋值，数组元素值=下标。然后利用for循环输出数组。\n\n声明一个数组，包含10个元素，利用键盘输入对每一个数组元素赋值。然后利用for循环输出数组。\n\n声明一个数组，包含10个元素，利用键盘输入对每一个数组元素赋值。然后输出最大和最小值。\n\n声明一个数组，包含10个元素，利用键盘输入对每一个数组元素赋值。然后对数组中的元素进行排序，输出排序后的数组。\n","source":"_posts/c++阶段二第三讲.md","raw":"---\ntitle: c++阶段二第三讲\ndate: 2021-09-15 11:29:57\ntags: [教材,阶段二]\ncategories: c++\ndescription: c++阶段二第三讲\ntop_img: https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png\ncover: https://i.loli.net/2021/09/01/3TLgNjv8qmcfU1S.png\n---\n\n# 第三讲\n\n## 数组\n\n**数组：将同一数据类型的数据按照一定形式有序的组织起来，这些有序数据的集合就称为数组。一个数组有一个统一的数组名，可以通过数组名和下标来确定数组中的元素。**\n\n### 创建公式：\n\n`数据类型 数组名[数组大小];`\n\n**注意：**\n\n1、数组名定义规则与变量名相同。\n\n2、数组名后面的括号必须为方括号。\n\n3、方括号中的常量表达式表示数组长度（数组中的元素个数）。\n\n4、方括号中的常量表达式不能是变量。因为数组的长度、大小不能动态定义。\n\n例子：\n\n声明一个整形数组，数组名为啊，有5个元素\n\n`int a[5];`\n\n### 数组的使用\n\n`数组名[下标]`\n\n数组名：我们创建的数组名字\n\n下标：数组元素的房间号，**从0开始**\n\n例子：\n\n`int a[3];`\n\n`a[0]`访问数组a中的第一个元素\n\n`a[1]`访问数组a中的第二个元素\n\n**注意：**\n\n1、数组元素下标从0开始，而非从1开始。\n\n2、在以上声明数组中a[3]是不存在的数组元素，引用a[3]非法。A[3]属于下标越界，容易引起程序瘫痪。\n\n### 数组的初始化:\n\n1. 单一数组元素赋值：先创建函数，再对单一数组元素赋值\n\n   `a[0]=1;a[1]=2;`\n\n2. 集合方式赋值：创建数组的同时用大括号进行多个元素的赋值。\n\n   `int a[3]= {0,1,2};`\n\n   `int a[] = {2.10,5};`\n\n注意：不能用以下形式赋值\n\n`int a[3]; `先声明数组\n\n`a={1,2,3}; `再通过大括号统一为数组赋值。\n\n## 练习：\n\n声明一个数组，包含10个元素，利用for循环对每一个数组元素赋值，数组元素值=下标。然后利用for循环输出数组。\n\n声明一个数组，包含10个元素，利用键盘输入对每一个数组元素赋值。然后利用for循环输出数组。\n\n声明一个数组，包含10个元素，利用键盘输入对每一个数组元素赋值。然后输出最大和最小值。\n\n声明一个数组，包含10个元素，利用键盘输入对每一个数组元素赋值。然后对数组中的元素进行排序，输出排序后的数组。\n","slug":"c++阶段二第三讲","published":1,"updated":"2021-09-15T06:30:37.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktnr5v0k000jk0ux8qpz55is","content":"<h1 id=\"第三讲\"><a href=\"#第三讲\" class=\"headerlink\" title=\"第三讲\"></a>第三讲</h1><h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p><strong>数组：将同一数据类型的数据按照一定形式有序的组织起来，这些有序数据的集合就称为数组。一个数组有一个统一的数组名，可以通过数组名和下标来确定数组中的元素。</strong></p>\n<h3 id=\"创建公式：\"><a href=\"#创建公式：\" class=\"headerlink\" title=\"创建公式：\"></a>创建公式：</h3><p><code>数据类型 数组名[数组大小];</code></p>\n<p><strong>注意：</strong></p>\n<p>1、数组名定义规则与变量名相同。</p>\n<p>2、数组名后面的括号必须为方括号。</p>\n<p>3、方括号中的常量表达式表示数组长度（数组中的元素个数）。</p>\n<p>4、方括号中的常量表达式不能是变量。因为数组的长度、大小不能动态定义。</p>\n<p>例子：</p>\n<p>声明一个整形数组，数组名为啊，有5个元素</p>\n<p><code>int a[5];</code></p>\n<h3 id=\"数组的使用\"><a href=\"#数组的使用\" class=\"headerlink\" title=\"数组的使用\"></a>数组的使用</h3><p><code>数组名[下标]</code></p>\n<p>数组名：我们创建的数组名字</p>\n<p>下标：数组元素的房间号，<strong>从0开始</strong></p>\n<p>例子：</p>\n<p><code>int a[3];</code></p>\n<p><code>a[0]</code>访问数组a中的第一个元素</p>\n<p><code>a[1]</code>访问数组a中的第二个元素</p>\n<p><strong>注意：</strong></p>\n<p>1、数组元素下标从0开始，而非从1开始。</p>\n<p>2、在以上声明数组中a[3]是不存在的数组元素，引用a[3]非法。A[3]属于下标越界，容易引起程序瘫痪。</p>\n<h3 id=\"数组的初始化\"><a href=\"#数组的初始化\" class=\"headerlink\" title=\"数组的初始化:\"></a>数组的初始化:</h3><ol>\n<li><p>单一数组元素赋值：先创建函数，再对单一数组元素赋值</p>\n<p><code>a[0]=1;a[1]=2;</code></p>\n</li>\n<li><p>集合方式赋值：创建数组的同时用大括号进行多个元素的赋值。</p>\n<p><code>int a[3]= &#123;0,1,2&#125;;</code></p>\n<p><code>int a[] = &#123;2.10,5&#125;;</code></p>\n</li>\n</ol>\n<p>注意：不能用以下形式赋值</p>\n<p><code>int a[3]; </code>先声明数组</p>\n<p><code>a=&#123;1,2,3&#125;; </code>再通过大括号统一为数组赋值。</p>\n<h2 id=\"练习：\"><a href=\"#练习：\" class=\"headerlink\" title=\"练习：\"></a>练习：</h2><p>声明一个数组，包含10个元素，利用for循环对每一个数组元素赋值，数组元素值=下标。然后利用for循环输出数组。</p>\n<p>声明一个数组，包含10个元素，利用键盘输入对每一个数组元素赋值。然后利用for循环输出数组。</p>\n<p>声明一个数组，包含10个元素，利用键盘输入对每一个数组元素赋值。然后输出最大和最小值。</p>\n<p>声明一个数组，包含10个元素，利用键盘输入对每一个数组元素赋值。然后对数组中的元素进行排序，输出排序后的数组。</p>\n","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"excerpt":"","more":"<h1 id=\"第三讲\"><a href=\"#第三讲\" class=\"headerlink\" title=\"第三讲\"></a>第三讲</h1><h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p><strong>数组：将同一数据类型的数据按照一定形式有序的组织起来，这些有序数据的集合就称为数组。一个数组有一个统一的数组名，可以通过数组名和下标来确定数组中的元素。</strong></p>\n<h3 id=\"创建公式：\"><a href=\"#创建公式：\" class=\"headerlink\" title=\"创建公式：\"></a>创建公式：</h3><p><code>数据类型 数组名[数组大小];</code></p>\n<p><strong>注意：</strong></p>\n<p>1、数组名定义规则与变量名相同。</p>\n<p>2、数组名后面的括号必须为方括号。</p>\n<p>3、方括号中的常量表达式表示数组长度（数组中的元素个数）。</p>\n<p>4、方括号中的常量表达式不能是变量。因为数组的长度、大小不能动态定义。</p>\n<p>例子：</p>\n<p>声明一个整形数组，数组名为啊，有5个元素</p>\n<p><code>int a[5];</code></p>\n<h3 id=\"数组的使用\"><a href=\"#数组的使用\" class=\"headerlink\" title=\"数组的使用\"></a>数组的使用</h3><p><code>数组名[下标]</code></p>\n<p>数组名：我们创建的数组名字</p>\n<p>下标：数组元素的房间号，<strong>从0开始</strong></p>\n<p>例子：</p>\n<p><code>int a[3];</code></p>\n<p><code>a[0]</code>访问数组a中的第一个元素</p>\n<p><code>a[1]</code>访问数组a中的第二个元素</p>\n<p><strong>注意：</strong></p>\n<p>1、数组元素下标从0开始，而非从1开始。</p>\n<p>2、在以上声明数组中a[3]是不存在的数组元素，引用a[3]非法。A[3]属于下标越界，容易引起程序瘫痪。</p>\n<h3 id=\"数组的初始化\"><a href=\"#数组的初始化\" class=\"headerlink\" title=\"数组的初始化:\"></a>数组的初始化:</h3><ol>\n<li><p>单一数组元素赋值：先创建函数，再对单一数组元素赋值</p>\n<p><code>a[0]=1;a[1]=2;</code></p>\n</li>\n<li><p>集合方式赋值：创建数组的同时用大括号进行多个元素的赋值。</p>\n<p><code>int a[3]= &#123;0,1,2&#125;;</code></p>\n<p><code>int a[] = &#123;2.10,5&#125;;</code></p>\n</li>\n</ol>\n<p>注意：不能用以下形式赋值</p>\n<p><code>int a[3]; </code>先声明数组</p>\n<p><code>a=&#123;1,2,3&#125;; </code>再通过大括号统一为数组赋值。</p>\n<h2 id=\"练习：\"><a href=\"#练习：\" class=\"headerlink\" title=\"练习：\"></a>练习：</h2><p>声明一个数组，包含10个元素，利用for循环对每一个数组元素赋值，数组元素值=下标。然后利用for循环输出数组。</p>\n<p>声明一个数组，包含10个元素，利用键盘输入对每一个数组元素赋值。然后利用for循环输出数组。</p>\n<p>声明一个数组，包含10个元素，利用键盘输入对每一个数组元素赋值。然后输出最大和最小值。</p>\n<p>声明一个数组，包含10个元素，利用键盘输入对每一个数组元素赋值。然后对数组中的元素进行排序，输出排序后的数组。</p>\n"},{"title":"Flutter-Center详解","date":"2021-09-17T09:49:32.000Z","description":"Flutter-Center详解","top_img":"https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg","cover":"https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg","_content":"\n# Flutter-Center详解\n\n# Center介绍\n\n`Center`就是将子组件进行一个居中展示，它继承自`Align`，因为`Align`默认的对齐方式是居中的，所以它能实现居中效果，如果`Center`的尺寸没有受到限制，那么它将尽可能大。\n\n## 示例代码\n\n本文中很多效果都没有截图，可通过视频教程查看 [视频教程地址](https://www.bilibili.com/video/BV1BM4y1L71Z?p=15)\n\n## 什么情况下使用Center？\n\n当我们需要对子组件进行居中的时候使用`Center`。\n\n## Center的属性和说明\n\n| 字段         | 属性   | 描述     |\n| ------------ | ------ | -------- |\n| widthFactor  | double | 宽度系数 |\n| heightFactor | double | 高度系数 |\n| child        | Widget | 子组件   |\n\n## Center使用\n\n```dart\nimport 'package:flutter/material.dart'; \nclass CenterExample extends StatefulWidget {  \n    @override  _CenterExampleState createState() => _CenterExampleState(); \n} \nclass _CenterExampleState extends State<CenterExample> {\n    @override  Widget build(BuildContext context) { \n        return Scaffold(      \n            appBar: AppBar(\n                title: Text(\"AlignExample\"),\n            ),      \n            body: Center(    \n                child: Text(\"Jimi\"), \n            ),  \n        ); \n    }\n} \n```\n\n## 效果展示\n\n[![img](https://gz-ljm-blog.oss-cn-guangzhou.aliyuncs.com/blog/center.png)](https://gz-ljm-blog.oss-cn-guangzhou.aliyuncs.com/blog/center.png)\n","source":"_posts/Flutter-Center.md","raw":"---\ntitle: Flutter-Center详解\ndate: 2021-09-17 17:49:32\ntags: [笔记]\ncategories: flutter\ndescription: Flutter-Center详解\ntop_img: https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg\ncover: https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg\n---\n\n# Flutter-Center详解\n\n# Center介绍\n\n`Center`就是将子组件进行一个居中展示，它继承自`Align`，因为`Align`默认的对齐方式是居中的，所以它能实现居中效果，如果`Center`的尺寸没有受到限制，那么它将尽可能大。\n\n## 示例代码\n\n本文中很多效果都没有截图，可通过视频教程查看 [视频教程地址](https://www.bilibili.com/video/BV1BM4y1L71Z?p=15)\n\n## 什么情况下使用Center？\n\n当我们需要对子组件进行居中的时候使用`Center`。\n\n## Center的属性和说明\n\n| 字段         | 属性   | 描述     |\n| ------------ | ------ | -------- |\n| widthFactor  | double | 宽度系数 |\n| heightFactor | double | 高度系数 |\n| child        | Widget | 子组件   |\n\n## Center使用\n\n```dart\nimport 'package:flutter/material.dart'; \nclass CenterExample extends StatefulWidget {  \n    @override  _CenterExampleState createState() => _CenterExampleState(); \n} \nclass _CenterExampleState extends State<CenterExample> {\n    @override  Widget build(BuildContext context) { \n        return Scaffold(      \n            appBar: AppBar(\n                title: Text(\"AlignExample\"),\n            ),      \n            body: Center(    \n                child: Text(\"Jimi\"), \n            ),  \n        ); \n    }\n} \n```\n\n## 效果展示\n\n[![img](https://gz-ljm-blog.oss-cn-guangzhou.aliyuncs.com/blog/center.png)](https://gz-ljm-blog.oss-cn-guangzhou.aliyuncs.com/blog/center.png)\n","slug":"Flutter-Center","published":1,"updated":"2021-09-18T00:46:23.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktpg91yl000084ux5ha32jkp","content":"<h1 id=\"Flutter-Center详解\"><a href=\"#Flutter-Center详解\" class=\"headerlink\" title=\"Flutter-Center详解\"></a>Flutter-Center详解</h1><h1 id=\"Center介绍\"><a href=\"#Center介绍\" class=\"headerlink\" title=\"Center介绍\"></a>Center介绍</h1><p><code>Center</code>就是将子组件进行一个居中展示，它继承自<code>Align</code>，因为<code>Align</code>默认的对齐方式是居中的，所以它能实现居中效果，如果<code>Center</code>的尺寸没有受到限制，那么它将尽可能大。</p>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><p>本文中很多效果都没有截图，可通过视频教程查看 <a href=\"https://www.bilibili.com/video/BV1BM4y1L71Z?p=15\">视频教程地址</a></p>\n<h2 id=\"什么情况下使用Center？\"><a href=\"#什么情况下使用Center？\" class=\"headerlink\" title=\"什么情况下使用Center？\"></a>什么情况下使用Center？</h2><p>当我们需要对子组件进行居中的时候使用<code>Center</code>。</p>\n<h2 id=\"Center的属性和说明\"><a href=\"#Center的属性和说明\" class=\"headerlink\" title=\"Center的属性和说明\"></a>Center的属性和说明</h2><table>\n<thead>\n<tr>\n<th>字段</th>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>widthFactor</td>\n<td>double</td>\n<td>宽度系数</td>\n</tr>\n<tr>\n<td>heightFactor</td>\n<td>double</td>\n<td>高度系数</td>\n</tr>\n<tr>\n<td>child</td>\n<td>Widget</td>\n<td>子组件</td>\n</tr>\n</tbody></table>\n<h2 id=\"Center使用\"><a href=\"#Center使用\" class=\"headerlink\" title=\"Center使用\"></a>Center使用</h2><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/material.dart&#x27;</span>; </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CenterExample</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"meta\">@override</span>  _CenterExampleState createState() =&gt; _CenterExampleState(); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_CenterExampleState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">CenterExample</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@override</span>  Widget build(BuildContext context) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> Scaffold(      </span><br><span class=\"line\">            appBar: AppBar(</span><br><span class=\"line\">                title: Text(<span class=\"string\">&quot;AlignExample&quot;</span>),</span><br><span class=\"line\">            ),      </span><br><span class=\"line\">            body: Center(    </span><br><span class=\"line\">                child: Text(<span class=\"string\">&quot;Jimi&quot;</span>), </span><br><span class=\"line\">            ),  </span><br><span class=\"line\">        ); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h2><p><a href=\"https://gz-ljm-blog.oss-cn-guangzhou.aliyuncs.com/blog/center.png\"><img src=\"https://gz-ljm-blog.oss-cn-guangzhou.aliyuncs.com/blog/center.png\" alt=\"img\"></a></p>\n","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"excerpt":"","more":"<h1 id=\"Flutter-Center详解\"><a href=\"#Flutter-Center详解\" class=\"headerlink\" title=\"Flutter-Center详解\"></a>Flutter-Center详解</h1><h1 id=\"Center介绍\"><a href=\"#Center介绍\" class=\"headerlink\" title=\"Center介绍\"></a>Center介绍</h1><p><code>Center</code>就是将子组件进行一个居中展示，它继承自<code>Align</code>，因为<code>Align</code>默认的对齐方式是居中的，所以它能实现居中效果，如果<code>Center</code>的尺寸没有受到限制，那么它将尽可能大。</p>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><p>本文中很多效果都没有截图，可通过视频教程查看 <a href=\"https://www.bilibili.com/video/BV1BM4y1L71Z?p=15\">视频教程地址</a></p>\n<h2 id=\"什么情况下使用Center？\"><a href=\"#什么情况下使用Center？\" class=\"headerlink\" title=\"什么情况下使用Center？\"></a>什么情况下使用Center？</h2><p>当我们需要对子组件进行居中的时候使用<code>Center</code>。</p>\n<h2 id=\"Center的属性和说明\"><a href=\"#Center的属性和说明\" class=\"headerlink\" title=\"Center的属性和说明\"></a>Center的属性和说明</h2><table>\n<thead>\n<tr>\n<th>字段</th>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>widthFactor</td>\n<td>double</td>\n<td>宽度系数</td>\n</tr>\n<tr>\n<td>heightFactor</td>\n<td>double</td>\n<td>高度系数</td>\n</tr>\n<tr>\n<td>child</td>\n<td>Widget</td>\n<td>子组件</td>\n</tr>\n</tbody></table>\n<h2 id=\"Center使用\"><a href=\"#Center使用\" class=\"headerlink\" title=\"Center使用\"></a>Center使用</h2><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/material.dart&#x27;</span>; </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CenterExample</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"meta\">@override</span>  _CenterExampleState createState() =&gt; _CenterExampleState(); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_CenterExampleState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">CenterExample</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@override</span>  Widget build(BuildContext context) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> Scaffold(      </span><br><span class=\"line\">            appBar: AppBar(</span><br><span class=\"line\">                title: Text(<span class=\"string\">&quot;AlignExample&quot;</span>),</span><br><span class=\"line\">            ),      </span><br><span class=\"line\">            body: Center(    </span><br><span class=\"line\">                child: Text(<span class=\"string\">&quot;Jimi&quot;</span>), </span><br><span class=\"line\">            ),  </span><br><span class=\"line\">        ); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h2><p><a href=\"https://gz-ljm-blog.oss-cn-guangzhou.aliyuncs.com/blog/center.png\"><img src=\"https://gz-ljm-blog.oss-cn-guangzhou.aliyuncs.com/blog/center.png\" alt=\"img\"></a></p>\n"},{"title":"Flutter-AppBar详解","date":"2021-09-18T02:22:13.000Z","description":"Flutter-AppBar详解","top_img":"https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg","cover":"https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg","_content":"\n# Flutter-AppBar详解\n\n## AppBar介绍\n\nAppBar是基于Material Design设计风格的应用栏，一般使用在Scaffold内部，作为顶部导航栏。\n\n#### 为什么需要AppBar\n\n1、因为导航栏里面一般由左侧功能键（返回键、菜单键）、标题、右侧功能键组成，而AppBar里面内置封装了这些组件，使用起来非常方便。\n\n2、可以做一些特殊的导航栏，比如可滚动的导航栏。\n\n3、根据环境 `MediaQuery` 的填充插入内容，以避免系统 `UI` 入侵。\n\n## 示例代码\n\n本文中很多效果都没有截图，可下载源代码运行项目 [源代码地址](https://github.com/JunAILiang/flutter_code)，或者通过视频教程查看 [视频教程地址](https://www.bilibili.com/video/BV1BM4y1L71Z?p=4)\n\n## AppBar属性和说明\n\n> 总共28个属性\n\n| 字段                      | 属性                 | 描述                                                         |\n| ------------------------- | -------------------- | ------------------------------------------------------------ |\n| key                       | Key                  | 当组件在组件树中移动时使用Key可以保持组件之前状态            |\n| leading                   | Widget               | 通常情况下返回一个返回键（IconButton)                        |\n| leadingWidth              | double               | 左侧leading的宽度，默认56                                    |\n| automaticallyImplyLeading | bool                 | 和leading配合使用，如果为true并且leading为空的情况下，会自动配置返回键 |\n| title                     | Widget               | 导航栏的标题                                                 |\n| centerTitle               | bool                 | 标题是否居中，不同操作系统默认显示位置不一样                 |\n| actions                   | List                 | 一个Widget列表                                               |\n| bottom                    | PreferredSizeWidget  | 出现在导航栏底部的控件                                       |\n| elevation                 | double               | 控制导航栏下方阴影的大小                                     |\n| shadowColor               | Color                | 控制导航栏下方阴影的颜色                                     |\n| shape                     | ShapeBorder          | 导航栏的形状以及阴影                                         |\n| backgroundColor           | Color                | 导航栏的背景颜色                                             |\n| foregroundColor           | Color                | 导航栏中文本和图标的颜色                                     |\n| backwardsCompatibility    | bool                 | 与foregroundColor配合使用                                    |\n| iconTheme                 | IconThemeData        | 导航栏图标的颜色、透明度、大小的配置                         |\n| actionsIconTheme          | IconThemeData        | 导航栏右侧图标的颜色、透明度、大小的配置                     |\n| textTheme                 | TextTheme            | 导航栏文本的排版样式                                         |\n| primary                   | bool                 | 导航栏是否显示在屏幕顶部                                     |\n| excludeHeaderSemantics    | bool                 | 标题是否应该用 [Semantics] 包裹，默认false                   |\n| titleSpacing              | double               | title内容的间距                                              |\n| toolbarOpacity            | double               | 导航栏的透明度                                               |\n| bottomOpacity             | double               | 导航栏底部的透明度                                           |\n| toolbarHeight             | double               | 导航栏的高度，默认kToolbarHeight                             |\n| toolbarTextStyle          | TextStyle            | 导航栏图标的颜色                                             |\n| titleTextStyle            | TextStyle            | 导航栏标题的默认颜色                                         |\n| flexibleSpace             | Widget               | 堆叠在工具栏和选项卡栏的后面                                 |\n| systemOverlayStyle        | SystemUiOverlayStyle | 叠加层的样式                                                 |\n| brightness                | Brightness           | 导航栏的亮度，改属性已废弃，用systemOverlayStyle代替         |\n\n## AppBar详细使用\n\n### 1、key\n\n`key` 是用来作为`Widget` 、`Element` 和 `SemanticsNode` 的标识，当组件在组件树中移动时使用Key可以保持组件之前状态。\n\n#### 使用方法\n\n```dart\nGlobalKey _appBarKey = GlobalKey(); \n@override Widget build(BuildContext context) { \n    return Scaffold(\n        appBar: AppBar(    \n            key: _appBarKey,  \n        ), \n    );\n} \n```\n\n### 2、leading\n\nappBar` 左侧显示的一个 `Widget`，一般显示返回键 `Icon` 或 `IconButton\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold(\n        appBar: AppBar(  \n            leading: IconButton(      \n                onPressed: (){     \n                    Navigator.pop(context);  \n                },       \n                icon: Icon(\n                    Icons.arrow_back_sharp,\n                    color: Colors.white,\n                )    \n            ),  \n        ), \n    ); \n} \n```\n\n### 3、leadingWidth\n\n左侧leading的宽度，默认56\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) {\n    return Scaffold(  \n        appBar: AppBar(    \n            leading: IconButton(   \n                onPressed: (){       \n                    Navigator.pop(context);    \n                },        \n                icon: Icon(\n                    Icons.arrow_back_sharp,\n                    color: Colors.white,\n                )   \n            ),  \n            leadingWidth: 60,  \n        ), \n    ); \n} \n```\n\n### 4、automaticallyImplyLeading\n\n当`leading` 未配置时，在二级页面下会自动展示一个返回键，默认值为 `true`\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold(   \n        appBar: AppBar(    \n            automaticallyImplyLeading: false,   \n        ),  \n    ); \n} \n```\n\n### 5、title\n\n导航栏的标题，一般是显示当前页面的标题文字\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold(  \n        appBar: AppBar( \n            title: Text(\"AppBarExample\"), \n        ),  \n    );\n} \n```\n\n### 6、centerTitle\n\n标题是否居中，不同操作系统默认显示位置不一样，安卓默认显示在左侧，苹果默认显示在中间\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) {  \n    return Scaffold(   \n        appBar: AppBar(   \n            title: Text(\"AppBarExample\"),  \n            centerTitle: true,  \n        ),  \n    );\n} \n```\n\n### 7、actions\n\n一个 `Widget` 列表，代表 `Toolbar` 中所显示的菜单，对于常用的菜单，通常使用 `IconButton` 来表示；对于不常用的菜单通常使用 `PopupMenuButton` 来显示为三个点，点击后弹出二级菜单\n\n```dart\n@override Widget build(BuildContext context) {  \n    return Scaffold(   \n        appBar: AppBar(     \n            actions: [      \n                IconButton(      \n                    onPressed: (){},    \n                    tooltip: \"扫一扫\",   \n                    icon: Icon(Icons.qr_code_scanner),  \n                ),      \n                IconButton(    \n                    onPressed: (){},     \n                    tooltip: \"添加\",      \n                    icon: Icon(Icons.add),     \n                )     \n            ],  \n        ), \n    ); \n} \n```\n\n### 8、bottom\n\n出现在应用栏底部的控件，一般是 `TabBar`\n\n#### 使用方法\n\n```dart\nimport 'package:flutter/material.dart'; \nclass AppBarExample extends StatefulWidget {\n    @override  _AppBarExampleState createState() => _AppBarExampleState(); \n} \nclass _AppBarExampleState extends State<AppBarExample> with SingleTickerProviderStateMixin{\n    TabController _tabController; \n    @override  void initState() { \n        // TODO: implement initState   \n        super.initState();  \n        _tabController = TabController(length: 2, vsync: this); \n    }  \n    @override  Widget build(BuildContext context) {  \n        return Scaffold(   \n            appBar: AppBar(   \n                bottom: TabBar(       \n                    controller: _tabController,  \n                    tabs: [     \n                        Tab(\n                            text: \"火车\", \n                            icon: Icon(Icons.bus_alert),\n                        ),      \n                        Tab(\n                            text: \"汽车\", \n                            icon: Icon(Icons.bus_alert),\n                        )      \n                    ],     \n                ),  \n            ),    \n        ); \n    } \n} \n```\n\n### 9、elevation\n\n控制应用栏下方阴影的大小，这个值不能是一个负值。\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) {\n    return Scaffold(  \n        appBar: AppBar(   \n            elevation: 10,   \n        ),\n    ); \n} \n```\n\n### 10、shadowColor\n\n控制导航栏下方阴影的颜色\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) {  \n    return Scaffold(    \n        appBar: AppBar(     \n            elevation: 10,   \n            shadowColor: Colors.green, \n        ),\n    );\n} \n```\n\n### 11、shape\n\n导航栏的形状以及阴影\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold(   \n        appBar: AppBar(    \n            elevation: 10,     \n            shadowColor: Colors.green,  \n            shape: RoundedRectangleBorder(   \n                side: BorderSide(     \n                    color: Colors.red,     \n                    width: 5     \n                )    \n            )  \n        ), \n    ); \n} \n```\n\n### 12、backgroundColor\n\n导航栏的背景颜色\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold(\n        appBar: AppBar(     \n            backgroundColor: Colors.orange, \n        ), \n    ); \n} \n```\n\n### 13、foregroundColor\n\n导航栏中文本和图标的颜色\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold(  \n        appBar: AppBar(  \n            foregroundColor: Colors.black, \n        ), \n    ); \n} \n```\n\n### 14、backwardsCompatibility\n\n与foregroundColor配合使用\n\n### 使用方法\n\n```dart\n@override Widget build(BuildContext context) {  \n    return Scaffold(   \n        appBar: AppBar(    \n            foregroundColor: Colors.black,  \n            backwardsCompatibility: true,   \n        ), \n    ); \n} \n```\n\n### 15、iconTheme\n\n导航栏图标的颜色、透明度、大小的配置\n\n### 使用方法\n\n```dart\n@override Widget build(BuildContext context) {\n    return Scaffold(  \n        appBar: AppBar(    \n            leading: IconButton(     \n                onPressed: (){  \n                    Navigator.pop(context);    \n                },       \n                icon: Icon(Icons.arrow_back_sharp, color: Colors.white,)   \n            ),    \n            iconTheme: IconThemeData(     \n                color: Colors.orange,   \n                opacity: 1,    \n                size: 50    \n            ), \n        ), \n    );\n} \n```\n\n### 16、actionsIconTheme\n\n导航栏右侧图标的颜色、透明度、大小的配置\n\n### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold(  \n        appBar: AppBar(   \n            actions: [     \n                IconButton(      \n                    onPressed: (){},    \n                    tooltip: \"扫一扫\",    \n                    icon: Icon(Icons.qr_code_scanner),   \n                ),      \n                IconButton(   \n                    onPressed: (){},      \n                    tooltip: \"添加\",     \n                    icon: Icon(Icons.add),    \n                )    \n            ],   \n            actionsIconTheme: IconThemeData(  \n                color: Colors.purple,  \n            ),  \n        ),  \n    ); \n} \n```\n\n### 17、textTheme\n\n导航栏文本的排版样式，默认使用`ThemeData.primaryTextTheme`\n\n### 18、primary\n\n导航栏是否显示在屏幕顶部\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold( \n        appBar: AppBar(    \n            backrogoundColor: Colors.black, \n            primary: true,  \n        ), \n    ); \n} \n```\n\n### 19、excludeHeaderSemantics\n\n标题是否应该用 [Semantics] 包裹，默认false\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) {  \n    return Scaffold(  \n        appBar: AppBar(    \n            backrogoundColor: Colors.black,   \n            primary: true,  \n            excludeHeaderSemantics: true,  \n        ), \n    ); \n} \n```\n\n### 20、titleSpacing\n\n标题内容的间距，如果为0，将占用全部空间\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold(  \n        appBar: AppBar(   \n            title: Text(\"AppBarExample\"), \n            centerTitle: true,    \n            titleSpacing: 0,  \n        ), \n    ); \n} \n```\n\n### 21、toolbarOpacity\n\n导航栏的透明度\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) {\n    return Scaffold(  \n        appBar: AppBar(     \n            backrogoundColor: Colors.black,  \n            toolbarOpacity: 0.5,   \n        ), \n    );\n} \n```\n\n### 22、bottomOpacity\n\n导航栏底部的透明度\n\n#### 使用方法\n\n```dart\nimport 'package:flutter/material.dart'; \nclass AppBarExample extends StatefulWidget {  \n    @override  _AppBarExampleState createState() => _AppBarExampleState(); \n}\nclass _AppBarExampleState extends State<AppBarExample> with SingleTickerProviderStateMixin{ \n    TabController _tabController;  \n    @override  void initState() { \n        // TODO: implement initState   \n        super.initState();   \n        _tabController = TabController(length: 2, vsync: this); \n    } \n    @override  Widget build(BuildContext context) { \n        return Scaffold(    \n            appBar: AppBar(      \n                bottom: TabBar(     \n                    controller: _tabController,       \n                    tabs: [           \n                        Tab(text: \"火车\", icon: Icon(Icons.bus_alert),),   \n                        Tab(text: \"汽车\", icon: Icon(Icons.bus_alert),)     \n                    ],     \n                ), \t\t\n                bottomOpacity: 0.5,   \n            ),   \n        ); \n    } \n} \n```\n\n### 23、toolbarHeight\n\n导航栏的高度，默认kToolbarHeight\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold( \n        appBar: AppBar(  \n            backrogoundColor: Colors.black,  \n            toolbarHeight: 200,\n        ),\n    ); \n} \n```\n\n### 24、toolbarTextStyle\n\n导航栏图标的颜色\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold(  \n        appBar: AppBar(    \n            leading: IconButton(   \n                onPressed: (){  \n                    Navigator.pop(context);  \n                },        \n                icon: Icon(Icons.arrow_back_sharp, color: Colors.white,)  \n            ),    \n            toolbarTextStyle: TextStyle(     \n                color: Colors.black   \n            ),  \n        ),  \n    );\n} \n```\n\n### 25、titleTextStyle\n\n导航栏标题的默认颜色\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold(  \n        appBar: AppBar(   \n            title: Text(\"AppBarExample\"),  \n            centerTitle: true,    \n            titleSpacing: 0,    \n            titleTextStyle: TextStyle(  \n                color: Colors.red    \n            ),   \n        ), \n    ); \n} \n```\n\n### 26、flexibleSpace、systemOverlayStyle、brightness\n\n`flexibleSpace` 以及 `systemOverlayStyle` 一般都是在配合 `SliverAppBar` 使用的，这里不做过多的描述。而 `brightness` 已经废弃，用 `systemOverlayStyle` 代替。\n\n## 总结\n\n以上是针对 `AppBar` 的所有使用方法，最常用的属有`leading`、`title`、`actions`、`centerTitle`、`bottom`、`backgroundColor`，其他属性都是在特定的情况才会使用。\n","source":"_posts/Flutter-AppBar.md","raw":"---\ntitle: Flutter-AppBar详解\ndate: 2021-09-18 10:22:13\ntags: [笔记]\ncategories: flutter\ndescription: Flutter-AppBar详解\ntop_img: https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg\ncover: https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg\n---\n\n# Flutter-AppBar详解\n\n## AppBar介绍\n\nAppBar是基于Material Design设计风格的应用栏，一般使用在Scaffold内部，作为顶部导航栏。\n\n#### 为什么需要AppBar\n\n1、因为导航栏里面一般由左侧功能键（返回键、菜单键）、标题、右侧功能键组成，而AppBar里面内置封装了这些组件，使用起来非常方便。\n\n2、可以做一些特殊的导航栏，比如可滚动的导航栏。\n\n3、根据环境 `MediaQuery` 的填充插入内容，以避免系统 `UI` 入侵。\n\n## 示例代码\n\n本文中很多效果都没有截图，可下载源代码运行项目 [源代码地址](https://github.com/JunAILiang/flutter_code)，或者通过视频教程查看 [视频教程地址](https://www.bilibili.com/video/BV1BM4y1L71Z?p=4)\n\n## AppBar属性和说明\n\n> 总共28个属性\n\n| 字段                      | 属性                 | 描述                                                         |\n| ------------------------- | -------------------- | ------------------------------------------------------------ |\n| key                       | Key                  | 当组件在组件树中移动时使用Key可以保持组件之前状态            |\n| leading                   | Widget               | 通常情况下返回一个返回键（IconButton)                        |\n| leadingWidth              | double               | 左侧leading的宽度，默认56                                    |\n| automaticallyImplyLeading | bool                 | 和leading配合使用，如果为true并且leading为空的情况下，会自动配置返回键 |\n| title                     | Widget               | 导航栏的标题                                                 |\n| centerTitle               | bool                 | 标题是否居中，不同操作系统默认显示位置不一样                 |\n| actions                   | List                 | 一个Widget列表                                               |\n| bottom                    | PreferredSizeWidget  | 出现在导航栏底部的控件                                       |\n| elevation                 | double               | 控制导航栏下方阴影的大小                                     |\n| shadowColor               | Color                | 控制导航栏下方阴影的颜色                                     |\n| shape                     | ShapeBorder          | 导航栏的形状以及阴影                                         |\n| backgroundColor           | Color                | 导航栏的背景颜色                                             |\n| foregroundColor           | Color                | 导航栏中文本和图标的颜色                                     |\n| backwardsCompatibility    | bool                 | 与foregroundColor配合使用                                    |\n| iconTheme                 | IconThemeData        | 导航栏图标的颜色、透明度、大小的配置                         |\n| actionsIconTheme          | IconThemeData        | 导航栏右侧图标的颜色、透明度、大小的配置                     |\n| textTheme                 | TextTheme            | 导航栏文本的排版样式                                         |\n| primary                   | bool                 | 导航栏是否显示在屏幕顶部                                     |\n| excludeHeaderSemantics    | bool                 | 标题是否应该用 [Semantics] 包裹，默认false                   |\n| titleSpacing              | double               | title内容的间距                                              |\n| toolbarOpacity            | double               | 导航栏的透明度                                               |\n| bottomOpacity             | double               | 导航栏底部的透明度                                           |\n| toolbarHeight             | double               | 导航栏的高度，默认kToolbarHeight                             |\n| toolbarTextStyle          | TextStyle            | 导航栏图标的颜色                                             |\n| titleTextStyle            | TextStyle            | 导航栏标题的默认颜色                                         |\n| flexibleSpace             | Widget               | 堆叠在工具栏和选项卡栏的后面                                 |\n| systemOverlayStyle        | SystemUiOverlayStyle | 叠加层的样式                                                 |\n| brightness                | Brightness           | 导航栏的亮度，改属性已废弃，用systemOverlayStyle代替         |\n\n## AppBar详细使用\n\n### 1、key\n\n`key` 是用来作为`Widget` 、`Element` 和 `SemanticsNode` 的标识，当组件在组件树中移动时使用Key可以保持组件之前状态。\n\n#### 使用方法\n\n```dart\nGlobalKey _appBarKey = GlobalKey(); \n@override Widget build(BuildContext context) { \n    return Scaffold(\n        appBar: AppBar(    \n            key: _appBarKey,  \n        ), \n    );\n} \n```\n\n### 2、leading\n\nappBar` 左侧显示的一个 `Widget`，一般显示返回键 `Icon` 或 `IconButton\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold(\n        appBar: AppBar(  \n            leading: IconButton(      \n                onPressed: (){     \n                    Navigator.pop(context);  \n                },       \n                icon: Icon(\n                    Icons.arrow_back_sharp,\n                    color: Colors.white,\n                )    \n            ),  \n        ), \n    ); \n} \n```\n\n### 3、leadingWidth\n\n左侧leading的宽度，默认56\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) {\n    return Scaffold(  \n        appBar: AppBar(    \n            leading: IconButton(   \n                onPressed: (){       \n                    Navigator.pop(context);    \n                },        \n                icon: Icon(\n                    Icons.arrow_back_sharp,\n                    color: Colors.white,\n                )   \n            ),  \n            leadingWidth: 60,  \n        ), \n    ); \n} \n```\n\n### 4、automaticallyImplyLeading\n\n当`leading` 未配置时，在二级页面下会自动展示一个返回键，默认值为 `true`\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold(   \n        appBar: AppBar(    \n            automaticallyImplyLeading: false,   \n        ),  \n    ); \n} \n```\n\n### 5、title\n\n导航栏的标题，一般是显示当前页面的标题文字\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold(  \n        appBar: AppBar( \n            title: Text(\"AppBarExample\"), \n        ),  \n    );\n} \n```\n\n### 6、centerTitle\n\n标题是否居中，不同操作系统默认显示位置不一样，安卓默认显示在左侧，苹果默认显示在中间\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) {  \n    return Scaffold(   \n        appBar: AppBar(   \n            title: Text(\"AppBarExample\"),  \n            centerTitle: true,  \n        ),  \n    );\n} \n```\n\n### 7、actions\n\n一个 `Widget` 列表，代表 `Toolbar` 中所显示的菜单，对于常用的菜单，通常使用 `IconButton` 来表示；对于不常用的菜单通常使用 `PopupMenuButton` 来显示为三个点，点击后弹出二级菜单\n\n```dart\n@override Widget build(BuildContext context) {  \n    return Scaffold(   \n        appBar: AppBar(     \n            actions: [      \n                IconButton(      \n                    onPressed: (){},    \n                    tooltip: \"扫一扫\",   \n                    icon: Icon(Icons.qr_code_scanner),  \n                ),      \n                IconButton(    \n                    onPressed: (){},     \n                    tooltip: \"添加\",      \n                    icon: Icon(Icons.add),     \n                )     \n            ],  \n        ), \n    ); \n} \n```\n\n### 8、bottom\n\n出现在应用栏底部的控件，一般是 `TabBar`\n\n#### 使用方法\n\n```dart\nimport 'package:flutter/material.dart'; \nclass AppBarExample extends StatefulWidget {\n    @override  _AppBarExampleState createState() => _AppBarExampleState(); \n} \nclass _AppBarExampleState extends State<AppBarExample> with SingleTickerProviderStateMixin{\n    TabController _tabController; \n    @override  void initState() { \n        // TODO: implement initState   \n        super.initState();  \n        _tabController = TabController(length: 2, vsync: this); \n    }  \n    @override  Widget build(BuildContext context) {  \n        return Scaffold(   \n            appBar: AppBar(   \n                bottom: TabBar(       \n                    controller: _tabController,  \n                    tabs: [     \n                        Tab(\n                            text: \"火车\", \n                            icon: Icon(Icons.bus_alert),\n                        ),      \n                        Tab(\n                            text: \"汽车\", \n                            icon: Icon(Icons.bus_alert),\n                        )      \n                    ],     \n                ),  \n            ),    \n        ); \n    } \n} \n```\n\n### 9、elevation\n\n控制应用栏下方阴影的大小，这个值不能是一个负值。\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) {\n    return Scaffold(  \n        appBar: AppBar(   \n            elevation: 10,   \n        ),\n    ); \n} \n```\n\n### 10、shadowColor\n\n控制导航栏下方阴影的颜色\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) {  \n    return Scaffold(    \n        appBar: AppBar(     \n            elevation: 10,   \n            shadowColor: Colors.green, \n        ),\n    );\n} \n```\n\n### 11、shape\n\n导航栏的形状以及阴影\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold(   \n        appBar: AppBar(    \n            elevation: 10,     \n            shadowColor: Colors.green,  \n            shape: RoundedRectangleBorder(   \n                side: BorderSide(     \n                    color: Colors.red,     \n                    width: 5     \n                )    \n            )  \n        ), \n    ); \n} \n```\n\n### 12、backgroundColor\n\n导航栏的背景颜色\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold(\n        appBar: AppBar(     \n            backgroundColor: Colors.orange, \n        ), \n    ); \n} \n```\n\n### 13、foregroundColor\n\n导航栏中文本和图标的颜色\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold(  \n        appBar: AppBar(  \n            foregroundColor: Colors.black, \n        ), \n    ); \n} \n```\n\n### 14、backwardsCompatibility\n\n与foregroundColor配合使用\n\n### 使用方法\n\n```dart\n@override Widget build(BuildContext context) {  \n    return Scaffold(   \n        appBar: AppBar(    \n            foregroundColor: Colors.black,  \n            backwardsCompatibility: true,   \n        ), \n    ); \n} \n```\n\n### 15、iconTheme\n\n导航栏图标的颜色、透明度、大小的配置\n\n### 使用方法\n\n```dart\n@override Widget build(BuildContext context) {\n    return Scaffold(  \n        appBar: AppBar(    \n            leading: IconButton(     \n                onPressed: (){  \n                    Navigator.pop(context);    \n                },       \n                icon: Icon(Icons.arrow_back_sharp, color: Colors.white,)   \n            ),    \n            iconTheme: IconThemeData(     \n                color: Colors.orange,   \n                opacity: 1,    \n                size: 50    \n            ), \n        ), \n    );\n} \n```\n\n### 16、actionsIconTheme\n\n导航栏右侧图标的颜色、透明度、大小的配置\n\n### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold(  \n        appBar: AppBar(   \n            actions: [     \n                IconButton(      \n                    onPressed: (){},    \n                    tooltip: \"扫一扫\",    \n                    icon: Icon(Icons.qr_code_scanner),   \n                ),      \n                IconButton(   \n                    onPressed: (){},      \n                    tooltip: \"添加\",     \n                    icon: Icon(Icons.add),    \n                )    \n            ],   \n            actionsIconTheme: IconThemeData(  \n                color: Colors.purple,  \n            ),  \n        ),  \n    ); \n} \n```\n\n### 17、textTheme\n\n导航栏文本的排版样式，默认使用`ThemeData.primaryTextTheme`\n\n### 18、primary\n\n导航栏是否显示在屏幕顶部\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold( \n        appBar: AppBar(    \n            backrogoundColor: Colors.black, \n            primary: true,  \n        ), \n    ); \n} \n```\n\n### 19、excludeHeaderSemantics\n\n标题是否应该用 [Semantics] 包裹，默认false\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) {  \n    return Scaffold(  \n        appBar: AppBar(    \n            backrogoundColor: Colors.black,   \n            primary: true,  \n            excludeHeaderSemantics: true,  \n        ), \n    ); \n} \n```\n\n### 20、titleSpacing\n\n标题内容的间距，如果为0，将占用全部空间\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold(  \n        appBar: AppBar(   \n            title: Text(\"AppBarExample\"), \n            centerTitle: true,    \n            titleSpacing: 0,  \n        ), \n    ); \n} \n```\n\n### 21、toolbarOpacity\n\n导航栏的透明度\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) {\n    return Scaffold(  \n        appBar: AppBar(     \n            backrogoundColor: Colors.black,  \n            toolbarOpacity: 0.5,   \n        ), \n    );\n} \n```\n\n### 22、bottomOpacity\n\n导航栏底部的透明度\n\n#### 使用方法\n\n```dart\nimport 'package:flutter/material.dart'; \nclass AppBarExample extends StatefulWidget {  \n    @override  _AppBarExampleState createState() => _AppBarExampleState(); \n}\nclass _AppBarExampleState extends State<AppBarExample> with SingleTickerProviderStateMixin{ \n    TabController _tabController;  \n    @override  void initState() { \n        // TODO: implement initState   \n        super.initState();   \n        _tabController = TabController(length: 2, vsync: this); \n    } \n    @override  Widget build(BuildContext context) { \n        return Scaffold(    \n            appBar: AppBar(      \n                bottom: TabBar(     \n                    controller: _tabController,       \n                    tabs: [           \n                        Tab(text: \"火车\", icon: Icon(Icons.bus_alert),),   \n                        Tab(text: \"汽车\", icon: Icon(Icons.bus_alert),)     \n                    ],     \n                ), \t\t\n                bottomOpacity: 0.5,   \n            ),   \n        ); \n    } \n} \n```\n\n### 23、toolbarHeight\n\n导航栏的高度，默认kToolbarHeight\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold( \n        appBar: AppBar(  \n            backrogoundColor: Colors.black,  \n            toolbarHeight: 200,\n        ),\n    ); \n} \n```\n\n### 24、toolbarTextStyle\n\n导航栏图标的颜色\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold(  \n        appBar: AppBar(    \n            leading: IconButton(   \n                onPressed: (){  \n                    Navigator.pop(context);  \n                },        \n                icon: Icon(Icons.arrow_back_sharp, color: Colors.white,)  \n            ),    \n            toolbarTextStyle: TextStyle(     \n                color: Colors.black   \n            ),  \n        ),  \n    );\n} \n```\n\n### 25、titleTextStyle\n\n导航栏标题的默认颜色\n\n#### 使用方法\n\n```dart\n@override Widget build(BuildContext context) { \n    return Scaffold(  \n        appBar: AppBar(   \n            title: Text(\"AppBarExample\"),  \n            centerTitle: true,    \n            titleSpacing: 0,    \n            titleTextStyle: TextStyle(  \n                color: Colors.red    \n            ),   \n        ), \n    ); \n} \n```\n\n### 26、flexibleSpace、systemOverlayStyle、brightness\n\n`flexibleSpace` 以及 `systemOverlayStyle` 一般都是在配合 `SliverAppBar` 使用的，这里不做过多的描述。而 `brightness` 已经废弃，用 `systemOverlayStyle` 代替。\n\n## 总结\n\n以上是针对 `AppBar` 的所有使用方法，最常用的属有`leading`、`title`、`actions`、`centerTitle`、`bottom`、`backgroundColor`，其他属性都是在特定的情况才会使用。\n","slug":"Flutter-AppBar","published":1,"updated":"2021-09-18T02:34:48.848Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktpg91z5000384ux55rp0med","content":"<h1 id=\"Flutter-AppBar详解\"><a href=\"#Flutter-AppBar详解\" class=\"headerlink\" title=\"Flutter-AppBar详解\"></a>Flutter-AppBar详解</h1><h2 id=\"AppBar介绍\"><a href=\"#AppBar介绍\" class=\"headerlink\" title=\"AppBar介绍\"></a>AppBar介绍</h2><p>AppBar是基于Material Design设计风格的应用栏，一般使用在Scaffold内部，作为顶部导航栏。</p>\n<h4 id=\"为什么需要AppBar\"><a href=\"#为什么需要AppBar\" class=\"headerlink\" title=\"为什么需要AppBar\"></a>为什么需要AppBar</h4><p>1、因为导航栏里面一般由左侧功能键（返回键、菜单键）、标题、右侧功能键组成，而AppBar里面内置封装了这些组件，使用起来非常方便。</p>\n<p>2、可以做一些特殊的导航栏，比如可滚动的导航栏。</p>\n<p>3、根据环境 <code>MediaQuery</code> 的填充插入内容，以避免系统 <code>UI</code> 入侵。</p>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><p>本文中很多效果都没有截图，可下载源代码运行项目 <a href=\"https://github.com/JunAILiang/flutter_code\">源代码地址</a>，或者通过视频教程查看 <a href=\"https://www.bilibili.com/video/BV1BM4y1L71Z?p=4\">视频教程地址</a></p>\n<h2 id=\"AppBar属性和说明\"><a href=\"#AppBar属性和说明\" class=\"headerlink\" title=\"AppBar属性和说明\"></a>AppBar属性和说明</h2><blockquote>\n<p>总共28个属性</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>key</td>\n<td>Key</td>\n<td>当组件在组件树中移动时使用Key可以保持组件之前状态</td>\n</tr>\n<tr>\n<td>leading</td>\n<td>Widget</td>\n<td>通常情况下返回一个返回键（IconButton)</td>\n</tr>\n<tr>\n<td>leadingWidth</td>\n<td>double</td>\n<td>左侧leading的宽度，默认56</td>\n</tr>\n<tr>\n<td>automaticallyImplyLeading</td>\n<td>bool</td>\n<td>和leading配合使用，如果为true并且leading为空的情况下，会自动配置返回键</td>\n</tr>\n<tr>\n<td>title</td>\n<td>Widget</td>\n<td>导航栏的标题</td>\n</tr>\n<tr>\n<td>centerTitle</td>\n<td>bool</td>\n<td>标题是否居中，不同操作系统默认显示位置不一样</td>\n</tr>\n<tr>\n<td>actions</td>\n<td>List</td>\n<td>一个Widget列表</td>\n</tr>\n<tr>\n<td>bottom</td>\n<td>PreferredSizeWidget</td>\n<td>出现在导航栏底部的控件</td>\n</tr>\n<tr>\n<td>elevation</td>\n<td>double</td>\n<td>控制导航栏下方阴影的大小</td>\n</tr>\n<tr>\n<td>shadowColor</td>\n<td>Color</td>\n<td>控制导航栏下方阴影的颜色</td>\n</tr>\n<tr>\n<td>shape</td>\n<td>ShapeBorder</td>\n<td>导航栏的形状以及阴影</td>\n</tr>\n<tr>\n<td>backgroundColor</td>\n<td>Color</td>\n<td>导航栏的背景颜色</td>\n</tr>\n<tr>\n<td>foregroundColor</td>\n<td>Color</td>\n<td>导航栏中文本和图标的颜色</td>\n</tr>\n<tr>\n<td>backwardsCompatibility</td>\n<td>bool</td>\n<td>与foregroundColor配合使用</td>\n</tr>\n<tr>\n<td>iconTheme</td>\n<td>IconThemeData</td>\n<td>导航栏图标的颜色、透明度、大小的配置</td>\n</tr>\n<tr>\n<td>actionsIconTheme</td>\n<td>IconThemeData</td>\n<td>导航栏右侧图标的颜色、透明度、大小的配置</td>\n</tr>\n<tr>\n<td>textTheme</td>\n<td>TextTheme</td>\n<td>导航栏文本的排版样式</td>\n</tr>\n<tr>\n<td>primary</td>\n<td>bool</td>\n<td>导航栏是否显示在屏幕顶部</td>\n</tr>\n<tr>\n<td>excludeHeaderSemantics</td>\n<td>bool</td>\n<td>标题是否应该用 [Semantics] 包裹，默认false</td>\n</tr>\n<tr>\n<td>titleSpacing</td>\n<td>double</td>\n<td>title内容的间距</td>\n</tr>\n<tr>\n<td>toolbarOpacity</td>\n<td>double</td>\n<td>导航栏的透明度</td>\n</tr>\n<tr>\n<td>bottomOpacity</td>\n<td>double</td>\n<td>导航栏底部的透明度</td>\n</tr>\n<tr>\n<td>toolbarHeight</td>\n<td>double</td>\n<td>导航栏的高度，默认kToolbarHeight</td>\n</tr>\n<tr>\n<td>toolbarTextStyle</td>\n<td>TextStyle</td>\n<td>导航栏图标的颜色</td>\n</tr>\n<tr>\n<td>titleTextStyle</td>\n<td>TextStyle</td>\n<td>导航栏标题的默认颜色</td>\n</tr>\n<tr>\n<td>flexibleSpace</td>\n<td>Widget</td>\n<td>堆叠在工具栏和选项卡栏的后面</td>\n</tr>\n<tr>\n<td>systemOverlayStyle</td>\n<td>SystemUiOverlayStyle</td>\n<td>叠加层的样式</td>\n</tr>\n<tr>\n<td>brightness</td>\n<td>Brightness</td>\n<td>导航栏的亮度，改属性已废弃，用systemOverlayStyle代替</td>\n</tr>\n</tbody></table>\n<h2 id=\"AppBar详细使用\"><a href=\"#AppBar详细使用\" class=\"headerlink\" title=\"AppBar详细使用\"></a>AppBar详细使用</h2><h3 id=\"1、key\"><a href=\"#1、key\" class=\"headerlink\" title=\"1、key\"></a>1、key</h3><p><code>key</code> 是用来作为<code>Widget</code> 、<code>Element</code> 和 <code>SemanticsNode</code> 的标识，当组件在组件树中移动时使用Key可以保持组件之前状态。</p>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey _appBarKey = GlobalKey(); </span><br><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">        appBar: AppBar(    </span><br><span class=\"line\">            key: _appBarKey,  </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、leading\"><a href=\"#2、leading\" class=\"headerlink\" title=\"2、leading\"></a>2、leading</h3><p>appBar<code>左侧显示的一个</code>Widget<code>，一般显示返回键 </code>Icon<code>或</code>IconButton</p>\n<h4 id=\"使用方法-1\"><a href=\"#使用方法-1\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">        appBar: AppBar(  </span><br><span class=\"line\">            leading: IconButton(      </span><br><span class=\"line\">                onPressed: ()&#123;     </span><br><span class=\"line\">                    Navigator.pop(context);  </span><br><span class=\"line\">                &#125;,       </span><br><span class=\"line\">                icon: Icon(</span><br><span class=\"line\">                    Icons.arrow_back_sharp,</span><br><span class=\"line\">                    color: Colors.white,</span><br><span class=\"line\">                )    </span><br><span class=\"line\">            ),  </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、leadingWidth\"><a href=\"#3、leadingWidth\" class=\"headerlink\" title=\"3、leadingWidth\"></a>3、leadingWidth</h3><p>左侧leading的宽度，默认56</p>\n<h4 id=\"使用方法-2\"><a href=\"#使用方法-2\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(  </span><br><span class=\"line\">        appBar: AppBar(    </span><br><span class=\"line\">            leading: IconButton(   </span><br><span class=\"line\">                onPressed: ()&#123;       </span><br><span class=\"line\">                    Navigator.pop(context);    </span><br><span class=\"line\">                &#125;,        </span><br><span class=\"line\">                icon: Icon(</span><br><span class=\"line\">                    Icons.arrow_back_sharp,</span><br><span class=\"line\">                    color: Colors.white,</span><br><span class=\"line\">                )   </span><br><span class=\"line\">            ),  </span><br><span class=\"line\">            leadingWidth: <span class=\"number\">60</span>,  </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、automaticallyImplyLeading\"><a href=\"#4、automaticallyImplyLeading\" class=\"headerlink\" title=\"4、automaticallyImplyLeading\"></a>4、automaticallyImplyLeading</h3><p>当<code>leading</code> 未配置时，在二级页面下会自动展示一个返回键，默认值为 <code>true</code></p>\n<h4 id=\"使用方法-3\"><a href=\"#使用方法-3\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(   </span><br><span class=\"line\">        appBar: AppBar(    </span><br><span class=\"line\">            automaticallyImplyLeading: <span class=\"keyword\">false</span>,   </span><br><span class=\"line\">        ),  </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、title\"><a href=\"#5、title\" class=\"headerlink\" title=\"5、title\"></a>5、title</h3><p>导航栏的标题，一般是显示当前页面的标题文字</p>\n<h4 id=\"使用方法-4\"><a href=\"#使用方法-4\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(  </span><br><span class=\"line\">        appBar: AppBar( </span><br><span class=\"line\">            title: Text(<span class=\"string\">&quot;AppBarExample&quot;</span>), </span><br><span class=\"line\">        ),  </span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、centerTitle\"><a href=\"#6、centerTitle\" class=\"headerlink\" title=\"6、centerTitle\"></a>6、centerTitle</h3><p>标题是否居中，不同操作系统默认显示位置不一样，安卓默认显示在左侧，苹果默认显示在中间</p>\n<h4 id=\"使用方法-5\"><a href=\"#使用方法-5\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(   </span><br><span class=\"line\">        appBar: AppBar(   </span><br><span class=\"line\">            title: Text(<span class=\"string\">&quot;AppBarExample&quot;</span>),  </span><br><span class=\"line\">            centerTitle: <span class=\"keyword\">true</span>,  </span><br><span class=\"line\">        ),  </span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、actions\"><a href=\"#7、actions\" class=\"headerlink\" title=\"7、actions\"></a>7、actions</h3><p>一个 <code>Widget</code> 列表，代表 <code>Toolbar</code> 中所显示的菜单，对于常用的菜单，通常使用 <code>IconButton</code> 来表示；对于不常用的菜单通常使用 <code>PopupMenuButton</code> 来显示为三个点，点击后弹出二级菜单</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(   </span><br><span class=\"line\">        appBar: AppBar(     </span><br><span class=\"line\">            actions: [      </span><br><span class=\"line\">                IconButton(      </span><br><span class=\"line\">                    onPressed: ()&#123;&#125;,    </span><br><span class=\"line\">                    tooltip: <span class=\"string\">&quot;扫一扫&quot;</span>,   </span><br><span class=\"line\">                    icon: Icon(Icons.qr_code_scanner),  </span><br><span class=\"line\">                ),      </span><br><span class=\"line\">                IconButton(    </span><br><span class=\"line\">                    onPressed: ()&#123;&#125;,     </span><br><span class=\"line\">                    tooltip: <span class=\"string\">&quot;添加&quot;</span>,      </span><br><span class=\"line\">                    icon: Icon(Icons.add),     </span><br><span class=\"line\">                )     </span><br><span class=\"line\">            ],  </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、bottom\"><a href=\"#8、bottom\" class=\"headerlink\" title=\"8、bottom\"></a>8、bottom</h3><p>出现在应用栏底部的控件，一般是 <code>TabBar</code></p>\n<h4 id=\"使用方法-6\"><a href=\"#使用方法-6\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/material.dart&#x27;</span>; </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppBarExample</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@override</span>  _AppBarExampleState createState() =&gt; _AppBarExampleState(); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_AppBarExampleState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">AppBarExample</span>&gt; <span class=\"title\">with</span> <span class=\"title\">SingleTickerProviderStateMixin</span></span>&#123;</span><br><span class=\"line\">    TabController _tabController; </span><br><span class=\"line\">    <span class=\"meta\">@override</span>  <span class=\"keyword\">void</span> initState() &#123; </span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> implement initState   </span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.initState();  </span><br><span class=\"line\">        _tabController = TabController(length: <span class=\"number\">2</span>, vsync: <span class=\"keyword\">this</span>); </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@override</span>  Widget build(BuildContext context) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> Scaffold(   </span><br><span class=\"line\">            appBar: AppBar(   </span><br><span class=\"line\">                bottom: TabBar(       </span><br><span class=\"line\">                    controller: _tabController,  </span><br><span class=\"line\">                    tabs: [     </span><br><span class=\"line\">                        Tab(</span><br><span class=\"line\">                            text: <span class=\"string\">&quot;火车&quot;</span>, </span><br><span class=\"line\">                            icon: Icon(Icons.bus_alert),</span><br><span class=\"line\">                        ),      </span><br><span class=\"line\">                        Tab(</span><br><span class=\"line\">                            text: <span class=\"string\">&quot;汽车&quot;</span>, </span><br><span class=\"line\">                            icon: Icon(Icons.bus_alert),</span><br><span class=\"line\">                        )      </span><br><span class=\"line\">                    ],     </span><br><span class=\"line\">                ),  </span><br><span class=\"line\">            ),    </span><br><span class=\"line\">        ); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、elevation\"><a href=\"#9、elevation\" class=\"headerlink\" title=\"9、elevation\"></a>9、elevation</h3><p>控制应用栏下方阴影的大小，这个值不能是一个负值。</p>\n<h4 id=\"使用方法-7\"><a href=\"#使用方法-7\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(  </span><br><span class=\"line\">        appBar: AppBar(   </span><br><span class=\"line\">            elevation: <span class=\"number\">10</span>,   </span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、shadowColor\"><a href=\"#10、shadowColor\" class=\"headerlink\" title=\"10、shadowColor\"></a>10、shadowColor</h3><p>控制导航栏下方阴影的颜色</p>\n<h4 id=\"使用方法-8\"><a href=\"#使用方法-8\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(    </span><br><span class=\"line\">        appBar: AppBar(     </span><br><span class=\"line\">            elevation: <span class=\"number\">10</span>,   </span><br><span class=\"line\">            shadowColor: Colors.green, </span><br><span class=\"line\">        ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11、shape\"><a href=\"#11、shape\" class=\"headerlink\" title=\"11、shape\"></a>11、shape</h3><p>导航栏的形状以及阴影</p>\n<h4 id=\"使用方法-9\"><a href=\"#使用方法-9\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(   </span><br><span class=\"line\">        appBar: AppBar(    </span><br><span class=\"line\">            elevation: <span class=\"number\">10</span>,     </span><br><span class=\"line\">            shadowColor: Colors.green,  </span><br><span class=\"line\">            shape: RoundedRectangleBorder(   </span><br><span class=\"line\">                side: BorderSide(     </span><br><span class=\"line\">                    color: Colors.red,     </span><br><span class=\"line\">                    width: <span class=\"number\">5</span>     </span><br><span class=\"line\">                )    </span><br><span class=\"line\">            )  </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12、backgroundColor\"><a href=\"#12、backgroundColor\" class=\"headerlink\" title=\"12、backgroundColor\"></a>12、backgroundColor</h3><p>导航栏的背景颜色</p>\n<h4 id=\"使用方法-10\"><a href=\"#使用方法-10\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">        appBar: AppBar(     </span><br><span class=\"line\">            backgroundColor: Colors.orange, </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13、foregroundColor\"><a href=\"#13、foregroundColor\" class=\"headerlink\" title=\"13、foregroundColor\"></a>13、foregroundColor</h3><p>导航栏中文本和图标的颜色</p>\n<h4 id=\"使用方法-11\"><a href=\"#使用方法-11\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(  </span><br><span class=\"line\">        appBar: AppBar(  </span><br><span class=\"line\">            foregroundColor: Colors.black, </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14、backwardsCompatibility\"><a href=\"#14、backwardsCompatibility\" class=\"headerlink\" title=\"14、backwardsCompatibility\"></a>14、backwardsCompatibility</h3><p>与foregroundColor配合使用</p>\n<h3 id=\"使用方法-12\"><a href=\"#使用方法-12\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(   </span><br><span class=\"line\">        appBar: AppBar(    </span><br><span class=\"line\">            foregroundColor: Colors.black,  </span><br><span class=\"line\">            backwardsCompatibility: <span class=\"keyword\">true</span>,   </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15、iconTheme\"><a href=\"#15、iconTheme\" class=\"headerlink\" title=\"15、iconTheme\"></a>15、iconTheme</h3><p>导航栏图标的颜色、透明度、大小的配置</p>\n<h3 id=\"使用方法-13\"><a href=\"#使用方法-13\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(  </span><br><span class=\"line\">        appBar: AppBar(    </span><br><span class=\"line\">            leading: IconButton(     </span><br><span class=\"line\">                onPressed: ()&#123;  </span><br><span class=\"line\">                    Navigator.pop(context);    </span><br><span class=\"line\">                &#125;,       </span><br><span class=\"line\">                icon: Icon(Icons.arrow_back_sharp, color: Colors.white,)   </span><br><span class=\"line\">            ),    </span><br><span class=\"line\">            iconTheme: IconThemeData(     </span><br><span class=\"line\">                color: Colors.orange,   </span><br><span class=\"line\">                opacity: <span class=\"number\">1</span>,    </span><br><span class=\"line\">                size: <span class=\"number\">50</span>    </span><br><span class=\"line\">            ), </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16、actionsIconTheme\"><a href=\"#16、actionsIconTheme\" class=\"headerlink\" title=\"16、actionsIconTheme\"></a>16、actionsIconTheme</h3><p>导航栏右侧图标的颜色、透明度、大小的配置</p>\n<h3 id=\"使用方法-14\"><a href=\"#使用方法-14\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(  </span><br><span class=\"line\">        appBar: AppBar(   </span><br><span class=\"line\">            actions: [     </span><br><span class=\"line\">                IconButton(      </span><br><span class=\"line\">                    onPressed: ()&#123;&#125;,    </span><br><span class=\"line\">                    tooltip: <span class=\"string\">&quot;扫一扫&quot;</span>,    </span><br><span class=\"line\">                    icon: Icon(Icons.qr_code_scanner),   </span><br><span class=\"line\">                ),      </span><br><span class=\"line\">                IconButton(   </span><br><span class=\"line\">                    onPressed: ()&#123;&#125;,      </span><br><span class=\"line\">                    tooltip: <span class=\"string\">&quot;添加&quot;</span>,     </span><br><span class=\"line\">                    icon: Icon(Icons.add),    </span><br><span class=\"line\">                )    </span><br><span class=\"line\">            ],   </span><br><span class=\"line\">            actionsIconTheme: IconThemeData(  </span><br><span class=\"line\">                color: Colors.purple,  </span><br><span class=\"line\">            ),  </span><br><span class=\"line\">        ),  </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17、textTheme\"><a href=\"#17、textTheme\" class=\"headerlink\" title=\"17、textTheme\"></a>17、textTheme</h3><p>导航栏文本的排版样式，默认使用<code>ThemeData.primaryTextTheme</code></p>\n<h3 id=\"18、primary\"><a href=\"#18、primary\" class=\"headerlink\" title=\"18、primary\"></a>18、primary</h3><p>导航栏是否显示在屏幕顶部</p>\n<h4 id=\"使用方法-15\"><a href=\"#使用方法-15\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold( </span><br><span class=\"line\">        appBar: AppBar(    </span><br><span class=\"line\">            backrogoundColor: Colors.black, </span><br><span class=\"line\">            primary: <span class=\"keyword\">true</span>,  </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19、excludeHeaderSemantics\"><a href=\"#19、excludeHeaderSemantics\" class=\"headerlink\" title=\"19、excludeHeaderSemantics\"></a>19、excludeHeaderSemantics</h3><p>标题是否应该用 [Semantics] 包裹，默认false</p>\n<h4 id=\"使用方法-16\"><a href=\"#使用方法-16\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(  </span><br><span class=\"line\">        appBar: AppBar(    </span><br><span class=\"line\">            backrogoundColor: Colors.black,   </span><br><span class=\"line\">            primary: <span class=\"keyword\">true</span>,  </span><br><span class=\"line\">            excludeHeaderSemantics: <span class=\"keyword\">true</span>,  </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20、titleSpacing\"><a href=\"#20、titleSpacing\" class=\"headerlink\" title=\"20、titleSpacing\"></a>20、titleSpacing</h3><p>标题内容的间距，如果为0，将占用全部空间</p>\n<h4 id=\"使用方法-17\"><a href=\"#使用方法-17\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(  </span><br><span class=\"line\">        appBar: AppBar(   </span><br><span class=\"line\">            title: Text(<span class=\"string\">&quot;AppBarExample&quot;</span>), </span><br><span class=\"line\">            centerTitle: <span class=\"keyword\">true</span>,    </span><br><span class=\"line\">            titleSpacing: <span class=\"number\">0</span>,  </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"21、toolbarOpacity\"><a href=\"#21、toolbarOpacity\" class=\"headerlink\" title=\"21、toolbarOpacity\"></a>21、toolbarOpacity</h3><p>导航栏的透明度</p>\n<h4 id=\"使用方法-18\"><a href=\"#使用方法-18\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(  </span><br><span class=\"line\">        appBar: AppBar(     </span><br><span class=\"line\">            backrogoundColor: Colors.black,  </span><br><span class=\"line\">            toolbarOpacity: <span class=\"number\">0.5</span>,   </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"22、bottomOpacity\"><a href=\"#22、bottomOpacity\" class=\"headerlink\" title=\"22、bottomOpacity\"></a>22、bottomOpacity</h3><p>导航栏底部的透明度</p>\n<h4 id=\"使用方法-19\"><a href=\"#使用方法-19\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/material.dart&#x27;</span>; </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppBarExample</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"meta\">@override</span>  _AppBarExampleState createState() =&gt; _AppBarExampleState(); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_AppBarExampleState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">AppBarExample</span>&gt; <span class=\"title\">with</span> <span class=\"title\">SingleTickerProviderStateMixin</span></span>&#123; </span><br><span class=\"line\">    TabController _tabController;  </span><br><span class=\"line\">    <span class=\"meta\">@override</span>  <span class=\"keyword\">void</span> initState() &#123; </span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> implement initState   </span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.initState();   </span><br><span class=\"line\">        _tabController = TabController(length: <span class=\"number\">2</span>, vsync: <span class=\"keyword\">this</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"meta\">@override</span>  Widget build(BuildContext context) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> Scaffold(    </span><br><span class=\"line\">            appBar: AppBar(      </span><br><span class=\"line\">                bottom: TabBar(     </span><br><span class=\"line\">                    controller: _tabController,       </span><br><span class=\"line\">                    tabs: [           </span><br><span class=\"line\">                        Tab(text: <span class=\"string\">&quot;火车&quot;</span>, icon: Icon(Icons.bus_alert),),   </span><br><span class=\"line\">                        Tab(text: <span class=\"string\">&quot;汽车&quot;</span>, icon: Icon(Icons.bus_alert),)     </span><br><span class=\"line\">                    ],     </span><br><span class=\"line\">                ), \t\t</span><br><span class=\"line\">                bottomOpacity: <span class=\"number\">0.5</span>,   </span><br><span class=\"line\">            ),   </span><br><span class=\"line\">        ); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"23、toolbarHeight\"><a href=\"#23、toolbarHeight\" class=\"headerlink\" title=\"23、toolbarHeight\"></a>23、toolbarHeight</h3><p>导航栏的高度，默认kToolbarHeight</p>\n<h4 id=\"使用方法-20\"><a href=\"#使用方法-20\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold( </span><br><span class=\"line\">        appBar: AppBar(  </span><br><span class=\"line\">            backrogoundColor: Colors.black,  </span><br><span class=\"line\">            toolbarHeight: <span class=\"number\">200</span>,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"24、toolbarTextStyle\"><a href=\"#24、toolbarTextStyle\" class=\"headerlink\" title=\"24、toolbarTextStyle\"></a>24、toolbarTextStyle</h3><p>导航栏图标的颜色</p>\n<h4 id=\"使用方法-21\"><a href=\"#使用方法-21\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(  </span><br><span class=\"line\">        appBar: AppBar(    </span><br><span class=\"line\">            leading: IconButton(   </span><br><span class=\"line\">                onPressed: ()&#123;  </span><br><span class=\"line\">                    Navigator.pop(context);  </span><br><span class=\"line\">                &#125;,        </span><br><span class=\"line\">                icon: Icon(Icons.arrow_back_sharp, color: Colors.white,)  </span><br><span class=\"line\">            ),    </span><br><span class=\"line\">            toolbarTextStyle: TextStyle(     </span><br><span class=\"line\">                color: Colors.black   </span><br><span class=\"line\">            ),  </span><br><span class=\"line\">        ),  </span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"25、titleTextStyle\"><a href=\"#25、titleTextStyle\" class=\"headerlink\" title=\"25、titleTextStyle\"></a>25、titleTextStyle</h3><p>导航栏标题的默认颜色</p>\n<h4 id=\"使用方法-22\"><a href=\"#使用方法-22\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(  </span><br><span class=\"line\">        appBar: AppBar(   </span><br><span class=\"line\">            title: Text(<span class=\"string\">&quot;AppBarExample&quot;</span>),  </span><br><span class=\"line\">            centerTitle: <span class=\"keyword\">true</span>,    </span><br><span class=\"line\">            titleSpacing: <span class=\"number\">0</span>,    </span><br><span class=\"line\">            titleTextStyle: TextStyle(  </span><br><span class=\"line\">                color: Colors.red    </span><br><span class=\"line\">            ),   </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"26、flexibleSpace、systemOverlayStyle、brightness\"><a href=\"#26、flexibleSpace、systemOverlayStyle、brightness\" class=\"headerlink\" title=\"26、flexibleSpace、systemOverlayStyle、brightness\"></a>26、flexibleSpace、systemOverlayStyle、brightness</h3><p><code>flexibleSpace</code> 以及 <code>systemOverlayStyle</code> 一般都是在配合 <code>SliverAppBar</code> 使用的，这里不做过多的描述。而 <code>brightness</code> 已经废弃，用 <code>systemOverlayStyle</code> 代替。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上是针对 <code>AppBar</code> 的所有使用方法，最常用的属有<code>leading</code>、<code>title</code>、<code>actions</code>、<code>centerTitle</code>、<code>bottom</code>、<code>backgroundColor</code>，其他属性都是在特定的情况才会使用。</p>\n","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"excerpt":"","more":"<h1 id=\"Flutter-AppBar详解\"><a href=\"#Flutter-AppBar详解\" class=\"headerlink\" title=\"Flutter-AppBar详解\"></a>Flutter-AppBar详解</h1><h2 id=\"AppBar介绍\"><a href=\"#AppBar介绍\" class=\"headerlink\" title=\"AppBar介绍\"></a>AppBar介绍</h2><p>AppBar是基于Material Design设计风格的应用栏，一般使用在Scaffold内部，作为顶部导航栏。</p>\n<h4 id=\"为什么需要AppBar\"><a href=\"#为什么需要AppBar\" class=\"headerlink\" title=\"为什么需要AppBar\"></a>为什么需要AppBar</h4><p>1、因为导航栏里面一般由左侧功能键（返回键、菜单键）、标题、右侧功能键组成，而AppBar里面内置封装了这些组件，使用起来非常方便。</p>\n<p>2、可以做一些特殊的导航栏，比如可滚动的导航栏。</p>\n<p>3、根据环境 <code>MediaQuery</code> 的填充插入内容，以避免系统 <code>UI</code> 入侵。</p>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><p>本文中很多效果都没有截图，可下载源代码运行项目 <a href=\"https://github.com/JunAILiang/flutter_code\">源代码地址</a>，或者通过视频教程查看 <a href=\"https://www.bilibili.com/video/BV1BM4y1L71Z?p=4\">视频教程地址</a></p>\n<h2 id=\"AppBar属性和说明\"><a href=\"#AppBar属性和说明\" class=\"headerlink\" title=\"AppBar属性和说明\"></a>AppBar属性和说明</h2><blockquote>\n<p>总共28个属性</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>key</td>\n<td>Key</td>\n<td>当组件在组件树中移动时使用Key可以保持组件之前状态</td>\n</tr>\n<tr>\n<td>leading</td>\n<td>Widget</td>\n<td>通常情况下返回一个返回键（IconButton)</td>\n</tr>\n<tr>\n<td>leadingWidth</td>\n<td>double</td>\n<td>左侧leading的宽度，默认56</td>\n</tr>\n<tr>\n<td>automaticallyImplyLeading</td>\n<td>bool</td>\n<td>和leading配合使用，如果为true并且leading为空的情况下，会自动配置返回键</td>\n</tr>\n<tr>\n<td>title</td>\n<td>Widget</td>\n<td>导航栏的标题</td>\n</tr>\n<tr>\n<td>centerTitle</td>\n<td>bool</td>\n<td>标题是否居中，不同操作系统默认显示位置不一样</td>\n</tr>\n<tr>\n<td>actions</td>\n<td>List</td>\n<td>一个Widget列表</td>\n</tr>\n<tr>\n<td>bottom</td>\n<td>PreferredSizeWidget</td>\n<td>出现在导航栏底部的控件</td>\n</tr>\n<tr>\n<td>elevation</td>\n<td>double</td>\n<td>控制导航栏下方阴影的大小</td>\n</tr>\n<tr>\n<td>shadowColor</td>\n<td>Color</td>\n<td>控制导航栏下方阴影的颜色</td>\n</tr>\n<tr>\n<td>shape</td>\n<td>ShapeBorder</td>\n<td>导航栏的形状以及阴影</td>\n</tr>\n<tr>\n<td>backgroundColor</td>\n<td>Color</td>\n<td>导航栏的背景颜色</td>\n</tr>\n<tr>\n<td>foregroundColor</td>\n<td>Color</td>\n<td>导航栏中文本和图标的颜色</td>\n</tr>\n<tr>\n<td>backwardsCompatibility</td>\n<td>bool</td>\n<td>与foregroundColor配合使用</td>\n</tr>\n<tr>\n<td>iconTheme</td>\n<td>IconThemeData</td>\n<td>导航栏图标的颜色、透明度、大小的配置</td>\n</tr>\n<tr>\n<td>actionsIconTheme</td>\n<td>IconThemeData</td>\n<td>导航栏右侧图标的颜色、透明度、大小的配置</td>\n</tr>\n<tr>\n<td>textTheme</td>\n<td>TextTheme</td>\n<td>导航栏文本的排版样式</td>\n</tr>\n<tr>\n<td>primary</td>\n<td>bool</td>\n<td>导航栏是否显示在屏幕顶部</td>\n</tr>\n<tr>\n<td>excludeHeaderSemantics</td>\n<td>bool</td>\n<td>标题是否应该用 [Semantics] 包裹，默认false</td>\n</tr>\n<tr>\n<td>titleSpacing</td>\n<td>double</td>\n<td>title内容的间距</td>\n</tr>\n<tr>\n<td>toolbarOpacity</td>\n<td>double</td>\n<td>导航栏的透明度</td>\n</tr>\n<tr>\n<td>bottomOpacity</td>\n<td>double</td>\n<td>导航栏底部的透明度</td>\n</tr>\n<tr>\n<td>toolbarHeight</td>\n<td>double</td>\n<td>导航栏的高度，默认kToolbarHeight</td>\n</tr>\n<tr>\n<td>toolbarTextStyle</td>\n<td>TextStyle</td>\n<td>导航栏图标的颜色</td>\n</tr>\n<tr>\n<td>titleTextStyle</td>\n<td>TextStyle</td>\n<td>导航栏标题的默认颜色</td>\n</tr>\n<tr>\n<td>flexibleSpace</td>\n<td>Widget</td>\n<td>堆叠在工具栏和选项卡栏的后面</td>\n</tr>\n<tr>\n<td>systemOverlayStyle</td>\n<td>SystemUiOverlayStyle</td>\n<td>叠加层的样式</td>\n</tr>\n<tr>\n<td>brightness</td>\n<td>Brightness</td>\n<td>导航栏的亮度，改属性已废弃，用systemOverlayStyle代替</td>\n</tr>\n</tbody></table>\n<h2 id=\"AppBar详细使用\"><a href=\"#AppBar详细使用\" class=\"headerlink\" title=\"AppBar详细使用\"></a>AppBar详细使用</h2><h3 id=\"1、key\"><a href=\"#1、key\" class=\"headerlink\" title=\"1、key\"></a>1、key</h3><p><code>key</code> 是用来作为<code>Widget</code> 、<code>Element</code> 和 <code>SemanticsNode</code> 的标识，当组件在组件树中移动时使用Key可以保持组件之前状态。</p>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey _appBarKey = GlobalKey(); </span><br><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">        appBar: AppBar(    </span><br><span class=\"line\">            key: _appBarKey,  </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、leading\"><a href=\"#2、leading\" class=\"headerlink\" title=\"2、leading\"></a>2、leading</h3><p>appBar<code>左侧显示的一个</code>Widget<code>，一般显示返回键 </code>Icon<code>或</code>IconButton</p>\n<h4 id=\"使用方法-1\"><a href=\"#使用方法-1\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">        appBar: AppBar(  </span><br><span class=\"line\">            leading: IconButton(      </span><br><span class=\"line\">                onPressed: ()&#123;     </span><br><span class=\"line\">                    Navigator.pop(context);  </span><br><span class=\"line\">                &#125;,       </span><br><span class=\"line\">                icon: Icon(</span><br><span class=\"line\">                    Icons.arrow_back_sharp,</span><br><span class=\"line\">                    color: Colors.white,</span><br><span class=\"line\">                )    </span><br><span class=\"line\">            ),  </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、leadingWidth\"><a href=\"#3、leadingWidth\" class=\"headerlink\" title=\"3、leadingWidth\"></a>3、leadingWidth</h3><p>左侧leading的宽度，默认56</p>\n<h4 id=\"使用方法-2\"><a href=\"#使用方法-2\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(  </span><br><span class=\"line\">        appBar: AppBar(    </span><br><span class=\"line\">            leading: IconButton(   </span><br><span class=\"line\">                onPressed: ()&#123;       </span><br><span class=\"line\">                    Navigator.pop(context);    </span><br><span class=\"line\">                &#125;,        </span><br><span class=\"line\">                icon: Icon(</span><br><span class=\"line\">                    Icons.arrow_back_sharp,</span><br><span class=\"line\">                    color: Colors.white,</span><br><span class=\"line\">                )   </span><br><span class=\"line\">            ),  </span><br><span class=\"line\">            leadingWidth: <span class=\"number\">60</span>,  </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、automaticallyImplyLeading\"><a href=\"#4、automaticallyImplyLeading\" class=\"headerlink\" title=\"4、automaticallyImplyLeading\"></a>4、automaticallyImplyLeading</h3><p>当<code>leading</code> 未配置时，在二级页面下会自动展示一个返回键，默认值为 <code>true</code></p>\n<h4 id=\"使用方法-3\"><a href=\"#使用方法-3\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(   </span><br><span class=\"line\">        appBar: AppBar(    </span><br><span class=\"line\">            automaticallyImplyLeading: <span class=\"keyword\">false</span>,   </span><br><span class=\"line\">        ),  </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、title\"><a href=\"#5、title\" class=\"headerlink\" title=\"5、title\"></a>5、title</h3><p>导航栏的标题，一般是显示当前页面的标题文字</p>\n<h4 id=\"使用方法-4\"><a href=\"#使用方法-4\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(  </span><br><span class=\"line\">        appBar: AppBar( </span><br><span class=\"line\">            title: Text(<span class=\"string\">&quot;AppBarExample&quot;</span>), </span><br><span class=\"line\">        ),  </span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、centerTitle\"><a href=\"#6、centerTitle\" class=\"headerlink\" title=\"6、centerTitle\"></a>6、centerTitle</h3><p>标题是否居中，不同操作系统默认显示位置不一样，安卓默认显示在左侧，苹果默认显示在中间</p>\n<h4 id=\"使用方法-5\"><a href=\"#使用方法-5\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(   </span><br><span class=\"line\">        appBar: AppBar(   </span><br><span class=\"line\">            title: Text(<span class=\"string\">&quot;AppBarExample&quot;</span>),  </span><br><span class=\"line\">            centerTitle: <span class=\"keyword\">true</span>,  </span><br><span class=\"line\">        ),  </span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、actions\"><a href=\"#7、actions\" class=\"headerlink\" title=\"7、actions\"></a>7、actions</h3><p>一个 <code>Widget</code> 列表，代表 <code>Toolbar</code> 中所显示的菜单，对于常用的菜单，通常使用 <code>IconButton</code> 来表示；对于不常用的菜单通常使用 <code>PopupMenuButton</code> 来显示为三个点，点击后弹出二级菜单</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(   </span><br><span class=\"line\">        appBar: AppBar(     </span><br><span class=\"line\">            actions: [      </span><br><span class=\"line\">                IconButton(      </span><br><span class=\"line\">                    onPressed: ()&#123;&#125;,    </span><br><span class=\"line\">                    tooltip: <span class=\"string\">&quot;扫一扫&quot;</span>,   </span><br><span class=\"line\">                    icon: Icon(Icons.qr_code_scanner),  </span><br><span class=\"line\">                ),      </span><br><span class=\"line\">                IconButton(    </span><br><span class=\"line\">                    onPressed: ()&#123;&#125;,     </span><br><span class=\"line\">                    tooltip: <span class=\"string\">&quot;添加&quot;</span>,      </span><br><span class=\"line\">                    icon: Icon(Icons.add),     </span><br><span class=\"line\">                )     </span><br><span class=\"line\">            ],  </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、bottom\"><a href=\"#8、bottom\" class=\"headerlink\" title=\"8、bottom\"></a>8、bottom</h3><p>出现在应用栏底部的控件，一般是 <code>TabBar</code></p>\n<h4 id=\"使用方法-6\"><a href=\"#使用方法-6\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/material.dart&#x27;</span>; </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppBarExample</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@override</span>  _AppBarExampleState createState() =&gt; _AppBarExampleState(); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_AppBarExampleState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">AppBarExample</span>&gt; <span class=\"title\">with</span> <span class=\"title\">SingleTickerProviderStateMixin</span></span>&#123;</span><br><span class=\"line\">    TabController _tabController; </span><br><span class=\"line\">    <span class=\"meta\">@override</span>  <span class=\"keyword\">void</span> initState() &#123; </span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> implement initState   </span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.initState();  </span><br><span class=\"line\">        _tabController = TabController(length: <span class=\"number\">2</span>, vsync: <span class=\"keyword\">this</span>); </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@override</span>  Widget build(BuildContext context) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> Scaffold(   </span><br><span class=\"line\">            appBar: AppBar(   </span><br><span class=\"line\">                bottom: TabBar(       </span><br><span class=\"line\">                    controller: _tabController,  </span><br><span class=\"line\">                    tabs: [     </span><br><span class=\"line\">                        Tab(</span><br><span class=\"line\">                            text: <span class=\"string\">&quot;火车&quot;</span>, </span><br><span class=\"line\">                            icon: Icon(Icons.bus_alert),</span><br><span class=\"line\">                        ),      </span><br><span class=\"line\">                        Tab(</span><br><span class=\"line\">                            text: <span class=\"string\">&quot;汽车&quot;</span>, </span><br><span class=\"line\">                            icon: Icon(Icons.bus_alert),</span><br><span class=\"line\">                        )      </span><br><span class=\"line\">                    ],     </span><br><span class=\"line\">                ),  </span><br><span class=\"line\">            ),    </span><br><span class=\"line\">        ); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、elevation\"><a href=\"#9、elevation\" class=\"headerlink\" title=\"9、elevation\"></a>9、elevation</h3><p>控制应用栏下方阴影的大小，这个值不能是一个负值。</p>\n<h4 id=\"使用方法-7\"><a href=\"#使用方法-7\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(  </span><br><span class=\"line\">        appBar: AppBar(   </span><br><span class=\"line\">            elevation: <span class=\"number\">10</span>,   </span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、shadowColor\"><a href=\"#10、shadowColor\" class=\"headerlink\" title=\"10、shadowColor\"></a>10、shadowColor</h3><p>控制导航栏下方阴影的颜色</p>\n<h4 id=\"使用方法-8\"><a href=\"#使用方法-8\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(    </span><br><span class=\"line\">        appBar: AppBar(     </span><br><span class=\"line\">            elevation: <span class=\"number\">10</span>,   </span><br><span class=\"line\">            shadowColor: Colors.green, </span><br><span class=\"line\">        ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11、shape\"><a href=\"#11、shape\" class=\"headerlink\" title=\"11、shape\"></a>11、shape</h3><p>导航栏的形状以及阴影</p>\n<h4 id=\"使用方法-9\"><a href=\"#使用方法-9\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(   </span><br><span class=\"line\">        appBar: AppBar(    </span><br><span class=\"line\">            elevation: <span class=\"number\">10</span>,     </span><br><span class=\"line\">            shadowColor: Colors.green,  </span><br><span class=\"line\">            shape: RoundedRectangleBorder(   </span><br><span class=\"line\">                side: BorderSide(     </span><br><span class=\"line\">                    color: Colors.red,     </span><br><span class=\"line\">                    width: <span class=\"number\">5</span>     </span><br><span class=\"line\">                )    </span><br><span class=\"line\">            )  </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12、backgroundColor\"><a href=\"#12、backgroundColor\" class=\"headerlink\" title=\"12、backgroundColor\"></a>12、backgroundColor</h3><p>导航栏的背景颜色</p>\n<h4 id=\"使用方法-10\"><a href=\"#使用方法-10\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">        appBar: AppBar(     </span><br><span class=\"line\">            backgroundColor: Colors.orange, </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13、foregroundColor\"><a href=\"#13、foregroundColor\" class=\"headerlink\" title=\"13、foregroundColor\"></a>13、foregroundColor</h3><p>导航栏中文本和图标的颜色</p>\n<h4 id=\"使用方法-11\"><a href=\"#使用方法-11\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(  </span><br><span class=\"line\">        appBar: AppBar(  </span><br><span class=\"line\">            foregroundColor: Colors.black, </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14、backwardsCompatibility\"><a href=\"#14、backwardsCompatibility\" class=\"headerlink\" title=\"14、backwardsCompatibility\"></a>14、backwardsCompatibility</h3><p>与foregroundColor配合使用</p>\n<h3 id=\"使用方法-12\"><a href=\"#使用方法-12\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(   </span><br><span class=\"line\">        appBar: AppBar(    </span><br><span class=\"line\">            foregroundColor: Colors.black,  </span><br><span class=\"line\">            backwardsCompatibility: <span class=\"keyword\">true</span>,   </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15、iconTheme\"><a href=\"#15、iconTheme\" class=\"headerlink\" title=\"15、iconTheme\"></a>15、iconTheme</h3><p>导航栏图标的颜色、透明度、大小的配置</p>\n<h3 id=\"使用方法-13\"><a href=\"#使用方法-13\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(  </span><br><span class=\"line\">        appBar: AppBar(    </span><br><span class=\"line\">            leading: IconButton(     </span><br><span class=\"line\">                onPressed: ()&#123;  </span><br><span class=\"line\">                    Navigator.pop(context);    </span><br><span class=\"line\">                &#125;,       </span><br><span class=\"line\">                icon: Icon(Icons.arrow_back_sharp, color: Colors.white,)   </span><br><span class=\"line\">            ),    </span><br><span class=\"line\">            iconTheme: IconThemeData(     </span><br><span class=\"line\">                color: Colors.orange,   </span><br><span class=\"line\">                opacity: <span class=\"number\">1</span>,    </span><br><span class=\"line\">                size: <span class=\"number\">50</span>    </span><br><span class=\"line\">            ), </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16、actionsIconTheme\"><a href=\"#16、actionsIconTheme\" class=\"headerlink\" title=\"16、actionsIconTheme\"></a>16、actionsIconTheme</h3><p>导航栏右侧图标的颜色、透明度、大小的配置</p>\n<h3 id=\"使用方法-14\"><a href=\"#使用方法-14\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(  </span><br><span class=\"line\">        appBar: AppBar(   </span><br><span class=\"line\">            actions: [     </span><br><span class=\"line\">                IconButton(      </span><br><span class=\"line\">                    onPressed: ()&#123;&#125;,    </span><br><span class=\"line\">                    tooltip: <span class=\"string\">&quot;扫一扫&quot;</span>,    </span><br><span class=\"line\">                    icon: Icon(Icons.qr_code_scanner),   </span><br><span class=\"line\">                ),      </span><br><span class=\"line\">                IconButton(   </span><br><span class=\"line\">                    onPressed: ()&#123;&#125;,      </span><br><span class=\"line\">                    tooltip: <span class=\"string\">&quot;添加&quot;</span>,     </span><br><span class=\"line\">                    icon: Icon(Icons.add),    </span><br><span class=\"line\">                )    </span><br><span class=\"line\">            ],   </span><br><span class=\"line\">            actionsIconTheme: IconThemeData(  </span><br><span class=\"line\">                color: Colors.purple,  </span><br><span class=\"line\">            ),  </span><br><span class=\"line\">        ),  </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17、textTheme\"><a href=\"#17、textTheme\" class=\"headerlink\" title=\"17、textTheme\"></a>17、textTheme</h3><p>导航栏文本的排版样式，默认使用<code>ThemeData.primaryTextTheme</code></p>\n<h3 id=\"18、primary\"><a href=\"#18、primary\" class=\"headerlink\" title=\"18、primary\"></a>18、primary</h3><p>导航栏是否显示在屏幕顶部</p>\n<h4 id=\"使用方法-15\"><a href=\"#使用方法-15\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold( </span><br><span class=\"line\">        appBar: AppBar(    </span><br><span class=\"line\">            backrogoundColor: Colors.black, </span><br><span class=\"line\">            primary: <span class=\"keyword\">true</span>,  </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19、excludeHeaderSemantics\"><a href=\"#19、excludeHeaderSemantics\" class=\"headerlink\" title=\"19、excludeHeaderSemantics\"></a>19、excludeHeaderSemantics</h3><p>标题是否应该用 [Semantics] 包裹，默认false</p>\n<h4 id=\"使用方法-16\"><a href=\"#使用方法-16\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(  </span><br><span class=\"line\">        appBar: AppBar(    </span><br><span class=\"line\">            backrogoundColor: Colors.black,   </span><br><span class=\"line\">            primary: <span class=\"keyword\">true</span>,  </span><br><span class=\"line\">            excludeHeaderSemantics: <span class=\"keyword\">true</span>,  </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20、titleSpacing\"><a href=\"#20、titleSpacing\" class=\"headerlink\" title=\"20、titleSpacing\"></a>20、titleSpacing</h3><p>标题内容的间距，如果为0，将占用全部空间</p>\n<h4 id=\"使用方法-17\"><a href=\"#使用方法-17\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(  </span><br><span class=\"line\">        appBar: AppBar(   </span><br><span class=\"line\">            title: Text(<span class=\"string\">&quot;AppBarExample&quot;</span>), </span><br><span class=\"line\">            centerTitle: <span class=\"keyword\">true</span>,    </span><br><span class=\"line\">            titleSpacing: <span class=\"number\">0</span>,  </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"21、toolbarOpacity\"><a href=\"#21、toolbarOpacity\" class=\"headerlink\" title=\"21、toolbarOpacity\"></a>21、toolbarOpacity</h3><p>导航栏的透明度</p>\n<h4 id=\"使用方法-18\"><a href=\"#使用方法-18\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(  </span><br><span class=\"line\">        appBar: AppBar(     </span><br><span class=\"line\">            backrogoundColor: Colors.black,  </span><br><span class=\"line\">            toolbarOpacity: <span class=\"number\">0.5</span>,   </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"22、bottomOpacity\"><a href=\"#22、bottomOpacity\" class=\"headerlink\" title=\"22、bottomOpacity\"></a>22、bottomOpacity</h3><p>导航栏底部的透明度</p>\n<h4 id=\"使用方法-19\"><a href=\"#使用方法-19\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/material.dart&#x27;</span>; </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppBarExample</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"meta\">@override</span>  _AppBarExampleState createState() =&gt; _AppBarExampleState(); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_AppBarExampleState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">AppBarExample</span>&gt; <span class=\"title\">with</span> <span class=\"title\">SingleTickerProviderStateMixin</span></span>&#123; </span><br><span class=\"line\">    TabController _tabController;  </span><br><span class=\"line\">    <span class=\"meta\">@override</span>  <span class=\"keyword\">void</span> initState() &#123; </span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> implement initState   </span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.initState();   </span><br><span class=\"line\">        _tabController = TabController(length: <span class=\"number\">2</span>, vsync: <span class=\"keyword\">this</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"meta\">@override</span>  Widget build(BuildContext context) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> Scaffold(    </span><br><span class=\"line\">            appBar: AppBar(      </span><br><span class=\"line\">                bottom: TabBar(     </span><br><span class=\"line\">                    controller: _tabController,       </span><br><span class=\"line\">                    tabs: [           </span><br><span class=\"line\">                        Tab(text: <span class=\"string\">&quot;火车&quot;</span>, icon: Icon(Icons.bus_alert),),   </span><br><span class=\"line\">                        Tab(text: <span class=\"string\">&quot;汽车&quot;</span>, icon: Icon(Icons.bus_alert),)     </span><br><span class=\"line\">                    ],     </span><br><span class=\"line\">                ), \t\t</span><br><span class=\"line\">                bottomOpacity: <span class=\"number\">0.5</span>,   </span><br><span class=\"line\">            ),   </span><br><span class=\"line\">        ); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"23、toolbarHeight\"><a href=\"#23、toolbarHeight\" class=\"headerlink\" title=\"23、toolbarHeight\"></a>23、toolbarHeight</h3><p>导航栏的高度，默认kToolbarHeight</p>\n<h4 id=\"使用方法-20\"><a href=\"#使用方法-20\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold( </span><br><span class=\"line\">        appBar: AppBar(  </span><br><span class=\"line\">            backrogoundColor: Colors.black,  </span><br><span class=\"line\">            toolbarHeight: <span class=\"number\">200</span>,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"24、toolbarTextStyle\"><a href=\"#24、toolbarTextStyle\" class=\"headerlink\" title=\"24、toolbarTextStyle\"></a>24、toolbarTextStyle</h3><p>导航栏图标的颜色</p>\n<h4 id=\"使用方法-21\"><a href=\"#使用方法-21\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(  </span><br><span class=\"line\">        appBar: AppBar(    </span><br><span class=\"line\">            leading: IconButton(   </span><br><span class=\"line\">                onPressed: ()&#123;  </span><br><span class=\"line\">                    Navigator.pop(context);  </span><br><span class=\"line\">                &#125;,        </span><br><span class=\"line\">                icon: Icon(Icons.arrow_back_sharp, color: Colors.white,)  </span><br><span class=\"line\">            ),    </span><br><span class=\"line\">            toolbarTextStyle: TextStyle(     </span><br><span class=\"line\">                color: Colors.black   </span><br><span class=\"line\">            ),  </span><br><span class=\"line\">        ),  </span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"25、titleTextStyle\"><a href=\"#25、titleTextStyle\" class=\"headerlink\" title=\"25、titleTextStyle\"></a>25、titleTextStyle</h3><p>导航栏标题的默认颜色</p>\n<h4 id=\"使用方法-22\"><a href=\"#使用方法-22\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span> Widget build(BuildContext context) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(  </span><br><span class=\"line\">        appBar: AppBar(   </span><br><span class=\"line\">            title: Text(<span class=\"string\">&quot;AppBarExample&quot;</span>),  </span><br><span class=\"line\">            centerTitle: <span class=\"keyword\">true</span>,    </span><br><span class=\"line\">            titleSpacing: <span class=\"number\">0</span>,    </span><br><span class=\"line\">            titleTextStyle: TextStyle(  </span><br><span class=\"line\">                color: Colors.red    </span><br><span class=\"line\">            ),   </span><br><span class=\"line\">        ), </span><br><span class=\"line\">    ); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"26、flexibleSpace、systemOverlayStyle、brightness\"><a href=\"#26、flexibleSpace、systemOverlayStyle、brightness\" class=\"headerlink\" title=\"26、flexibleSpace、systemOverlayStyle、brightness\"></a>26、flexibleSpace、systemOverlayStyle、brightness</h3><p><code>flexibleSpace</code> 以及 <code>systemOverlayStyle</code> 一般都是在配合 <code>SliverAppBar</code> 使用的，这里不做过多的描述。而 <code>brightness</code> 已经废弃，用 <code>systemOverlayStyle</code> 代替。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上是针对 <code>AppBar</code> 的所有使用方法，最常用的属有<code>leading</code>、<code>title</code>、<code>actions</code>、<code>centerTitle</code>、<code>bottom</code>、<code>backgroundColor</code>，其他属性都是在特定的情况才会使用。</p>\n"},{"title":"Flutter-Container详解","date":"2021-09-17T09:27:16.000Z","description":"Flutter-Container详解","top_img":"https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg","cover":"https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg","_content":"\n# Flutter-Container详解\n\n# 概述\n\nContainer是一个拥有绘制、定位、调整大小的 widget，是开发中最常用、最基础的组件。虽然最基础但不可小觑，熟悉每一个属性可以帮助我们更好更快的实现想要的效果，避免走弯路，也能避免代码冗余。本文主要针对其属性进行讲解。\n\n# 属性\n\n```dart\n  Container({\n    Key? key,\n    this.alignment,\n    this.padding,\n    this.color,\n    this.decoration,\n    this.foregroundDecoration,\n    double? width,\n    double? height,\n    BoxConstraints? constraints,\n    this.margin,\n    this.transform,\n    this.transformAlignment,\n    this.child,\n    this.clipBehavior = Clip.none,\n  })\n```\n\n### key\n\nkey用于控制控件如何取代树中的另一个控件，即若widget指定了相同的key，则这些widget可以复用。 如果widget的key值不为空，会判断key._currentElement值所指向的widget，和当前widget的类型key都相同，那么就从旧的父节点上移除，作为当前的节点的子widget之一， 否则将进行真实的创建新的Element。若开发中对组建的使用没有较高要求，一般不设置该属性。\n\n### alignment\n\nalignment可以理解为Container内容的锚点位置或重力方向，锚点在哪，内容就从哪里开始。alignment的类型为AlignmentGeometry类型，通常我们会使用其实现类Alignment来进行设置。AlignmentGeometry属于抽象类：\n\n```java\n@immutable\nabstract class AlignmentGeometry {...}\n复制代码\n```\n\n一般不直接使用AlignmentGeometry ，而是使用其实现类。Flutter中实现或继承了AlignmentGeometry的公共可直接调用的类有两个：Alignment，AlignmentDirectional。这两个实现类的使用方法和相似，可以直接调用其内部属性：\n\n```dart\n  static const Alignment topLeft = Alignment(-1.0, -1.0);\n  static const Alignment topCenter = Alignment(0.0, -1.0);\n  static const Alignment topRight = Alignment(1.0, -1.0);\n  static const Alignment centerLeft = Alignment(-1.0, 0.0);\n  static const Alignment center = Alignment(0.0, 0.0);\n  static const Alignment centerRight = Alignment(1.0, 0.0);\n  static const Alignment bottomLeft = Alignment(-1.0, 1.0);\n  static const Alignment bottomCenter = Alignment(0.0, 1.0);\n  static const Alignment bottomRight = Alignment(1.0, 1.0);\n```\n\n使用的时候直接用Alignment.topLeft调用即可，也可直接设置参数数值比如Alignment(-1.0, -1.0)即可。根据设置不同的alignment属性值，视图效果也是不一样的： ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/b3681934fb184cce9f9396f0bf41b653~tplv-k3u1fbpfcp-watermark.awebp) 若在其他组件中需要设置TextDirection，可以考虑使用AlignmentDirectional。AlignmentDirectional和Alignment差不多：\n\n```dart\n  static const AlignmentDirectional topStart = AlignmentDirectional(-1.0, -1.0);\n  static const AlignmentDirectional topCenter = AlignmentDirectional(0.0, -1.0);\n  static const AlignmentDirectional topEnd = AlignmentDirectional(1.0, -1.0);\n  static const AlignmentDirectional centerStart = AlignmentDirectional(-1.0, 0.0);\n  static const AlignmentDirectional center = AlignmentDirectional(0.0, 0.0);\n  static const AlignmentDirectional centerEnd = AlignmentDirectional(1.0, 0.0);\n  static const AlignmentDirectional bottomStart = AlignmentDirectional(-1.0, 1.0);\n  static const AlignmentDirectional bottomCenter = AlignmentDirectional(0.0, 1.0);\n  static const AlignmentDirectional bottomEnd = AlignmentDirectional(1.0, 1.0);\n```\n\n使用方法和Alignment一样，不再叙述。\n\n### padding、margin\n\npadding为内边距，margin为外边距。 ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/52b995b0a8af4963b960e1e85529be46~tplv-k3u1fbpfcp-watermark.awebp)\n\n针对于上图中Container2，Container1与Container2之间的边框距离称之为margin，Container2与内容之间距离为padding。通常margin和padding使用EdgeInsets，EdgeInsets使用方法如下：\n\n| 方法                                                         | 使用                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| EdgeInsets.fromLTRB(this.left, this.top, this.right, this.bottom) | 左上右下依次填写                                             |\n| EdgeInsets.all(double value)                                 | 所有边距一样                                                 |\n| EdgeInsets.only({this.left = 0.0,this.top = 0.0,this.right = 0.0,this.bottom = 0.0, }) | 左上右下可选择设置                                           |\n| EdgeInsets zero                                              | 左上右下都为0                                                |\n| EdgeInsets.fromWindowPadding(ui.WindowPadding padding, double devicePixelRatio) | 左上右下距离窗口的边距，和设备像素比，而不是距离父组件的边距 |\n\nEdgeInsets继承于EdgeInsetsGeometry，和之类似的还有EdgeInsetsDirectional，同样继承自EdgeInsetsGeometry，暴露出的方法有：\n\n```dart\nclass EdgeInsetsDirectional extends EdgeInsetsGeometry {\n  const EdgeInsetsDirectional.fromSTEB(this.start, this.top, this.end, this.bottom);\n  const EdgeInsetsDirectional.only({\n    this.start = 0.0,\n    this.top = 0.0,\n    this.end = 0.0,\n    this.bottom = 0.0,\n  });\n  static const EdgeInsetsDirectional zero = EdgeInsetsDirectional.only();\n  ...\n}\n```\n\nEdgeInsetsDirectional使用方法和EdgeInsets类似，多用于TextDirection。\n\n### color\n\ncolor为Container颜色，设置颜色通常可以调用Colors.white，Colors.red等Flutter定义好的颜色，如没有适合的颜色，可以使用Color(0xFFFFFFFF)，自定义颜色，0x代表16进制，前面两个FF代表透明度（Android中可以不写，但Flutter中不可省略），后面6个F代表颜色数值。以Color(0xFFFFFFFF)为例，以下表格对Color的使用进行说明\n\n| 方法                                   | 含义                      |\n| -------------------------------------- | ------------------------- |\n| Color(0xFFFFFFFF).value                | 获取颜色数值(0-255)       |\n| Color(0xFFFFFFFF).red                  | 获取颜色中红色            |\n| Color(0xFFFFFFFF).blue                 | 获取颜色中蓝色            |\n| Color(0xFFFFFFFF).opacity              | 获取颜色不透明度(0.0-1.0) |\n| Color(0xFFFFFFFF).alpha                | 获取颜色透明度            |\n| Color(0xFFFFFFFF).green                | 获取颜色中绿色            |\n| Color(0xFFFFFFFF).withOpacity(opacity) | 设置颜色不透明度          |\n| Color(0xFFFFFFFF).computeLuminance()   | 计算颜色亮度(0-1)         |\n| Color(0xFFFFFFFF).withAlpha(a)         | 设置颜色透明度 (0-255)    |\n| Color(0xFFFFFFFF).withBlue(b)          | 设置颜色中蓝色值(0-255)   |\n| Color(0xFFFFFFFF).withGreen(g)         | 设置颜色中绿值            |\n| Color(0xFFFFFFFF).withRed(r)           | 设置颜色中红色值          |\n\n关于Color大多有这几个常用的方法，若Container设置了decoration，Container的color就不要设置了，两者冲突会报错，以decoration中的color为准。\n\n### decoration，foregroundDecoration\n\ndecoration为背景装饰，foregroundDecoration为前景装饰。简单理解就是设置样式，不仅仅是设置颜色，还包括形状、图片、渐变、阴影、模糊等。 decoration指定类型为Decoration，同样Decoration为抽象类，没有具体的实现，需要使用其实现类或子类，其实现类主要有BoxDecoration、FlutterLogoDecoration、UnderlineTabIndicator、ShapeDecoration。Container中通常使用BoxDecoration，BoxDecoration有如下几个参数：\n\n```dart\n  const BoxDecoration({\n    this.color,\n    this.image,\n    this.border,\n    this.borderRadius,\n    this.boxShadow,\n    this.gradient,\n    this.backgroundBlendMode,\n    this.shape = BoxShape.rectangle,\n  })\n```\n\n##### color\n\n颜色直接在BoxDecoration中设置即可，以下分别是红色和蓝色的效果图 ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/41646f7a778f4c76aadf7c0eacff70fb~tplv-k3u1fbpfcp-watermark.awebp)\n\n##### image\n\nimage就是设置装饰图片，图片分为资源图片、本地图片和网络图片，这里只能使用DecorationImage\n\n```dart\n const DecorationImage({\n    required this.image,\n    this.onError,\n    this.colorFilter,\n    this.fit,\n    this.alignment = Alignment.center,\n    this.centerSlice,\n    this.repeat = ImageRepeat.noRepeat,\n    this.matchTextDirection = false,\n    this.scale = 1.0\n  })\n```\n\n- image\n\nDecorationImage中指定了image的类型必须是ImageProvider，也就是这里使用的是AssetImage()、NetworkImage()、FileImage()，而不是Image.asset()、Image.net()、Image.file()等。 ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/f0cae560c70544c79980a29d78241b36~tplv-k3u1fbpfcp-watermark.awebp) 左图为AssetImage，右图为NetworkImage，FileImage()访问的是手机中的图片，和前两者一样，只要拿到路径都不是问题。\n\n- onError\n\nonError指的是图片错误监听，万一图片格式不对，大小不对，网络出错，加载出错，开发者需要知道错在哪里了，然后做错误处理。\n\n- colorFilter\n\ncolorFilter就是相当于给图片加上一层滤镜，以上图中左边图片为例，ColorFilter使用方式有四种：\n\n| 方法                                               | 含义                                                         |\n| -------------------------------------------------- | ------------------------------------------------------------ |\n| ColorFilter.mode(Color color, BlendMode blendMode) | 添加指定混合模式指定颜色的滤镜，BlendMode 大概有三十种，用户自由选择 |\n| ColorFilter.matrix(List matrix)                    | 矩阵混合                                                     |\n| ColorFilter.linearToSrgbGamma()                    | 将sRGB伽马曲线应用于RGB通道                                  |\n| ColorFilter.srgbToLinearGamma()                    | 将sRGB伽马曲线逆应用于RGB通道                                |\n\n效果： ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/10e86695928a4d4e9a0e9213bd660adf~tplv-k3u1fbpfcp-watermark.awebp) 通过上图可以发现，同一图片使用不同的滤镜，效果大不相同。如果需要开发图片滤镜功能，这一块会有大用处。\n\n- fit\n\nfit指的是图片适配模式，使用BoxFit即可，BoxFit也提供了几种模式供选择。\n\n| 模式      | 含义                 |\n| --------- | -------------------- |\n| fill      | 根据图片比例填充     |\n| contain   | 容器范围内尽可能最大 |\n| cover     | 覆盖整个容器         |\n| fitWidth  | 宽度适应             |\n| fitHeight | 高度适应             |\n| none      | 无                   |\n| scaleDown | 等比例缩放           |\n\n各种模式依次效果如下： ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/295cfc1025164faa939144c9abf10b53~tplv-k3u1fbpfcp-watermark.awebp) 上图中图片较小，容器固定，有些图片看不出区别，而实际使用过程中不同模式之间差别较大，以实际为准。\n\n- alignment\n\nalignment 同文章开头的alignment一样，不再叙述。\n\n- centerSlice\n\ncenterSlice和fit效果有些相似，当两者同时使用的时候，可能没有效果，可能无法看到图片，使用时需要谨慎一些。 centerSlice类型为Rect，centerSlice用于nine-patch image，即可拉伸图片，后续这一块需要仔细研究一下。\n\n| 方法                                                         |\n| ------------------------------------------------------------ |\n| Rect.fromLTRB(this.left, this.top, this.right, this.bottom)  |\n| Rect.fromLTWH(double left, double top, double width, double height) |\n| Rect.fromCircle({ required Offset center, required double radius }) |\n| Rect.fromCenter({ required Offset center, required double width, required double height }) |\n| Rect.fromPoints(Offset a, Offset b)                          |\n\n- repeat\n\nrepeat 是空白区域图片重复模式。\n\n| 方法                 | 含义         |\n| -------------------- | ------------ |\n| ImageRepeat.repeat   | 全部填充图片 |\n| ImageRepeat.repeatX  | 水平重复     |\n| ImageRepeat.repeatY  | 竖直重复     |\n| ImageRepeat.noRepeat | 不重复       |\n\n对于的效果依次如下： ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/57986d6cf4274deea6b69ee70df1f4e7~tplv-k3u1fbpfcp-watermark.awebp) 由于图片本身已经占用了容器的水平位置上的全部空间，所以repeatX和noRepeat效果一样，repeat和repeatY效果一样。若图片水平和竖直方向都有剩余空间，则repeat等于repeatX和repeatY叠加。\n\n- matchTextDirection\n\nmatchTextDirection默认为false，表示背景图片和文字方向没有关系。当为true的时候，表示图片和文字方向一致。\n\n- scale\n\nscale表示图片缩放，默认为1.0，表示按原图大小显示。小于1.0，则按比例缩小图片；大于1.0，则表示按比例放大图片。\n\n##### border\n\nborder是边框的意思，设置该属性，就可以设置Contaier边框样式。border指定类型为BoxBorder，BoxBorder，InputBorder，OutlinedBorder虽都继承自ShapeBorder ，但这里BoxBorder也是抽象类，所以需要使用其子类Border或BorderDirectional，这里通常使用Border。Border有四种构造方法：\n\n| 方法                                                         | 含义                       |\n| ------------------------------------------------------------ | -------------------------- |\n| Border({BorderSide top: BorderSide.none, BorderSide right: BorderSide.none, BorderSide bottom: BorderSide.none, BorderSide left: BorderSide.none}) | 可分别设置上下左右边框     |\n| Border.all({Color color: const Color(0xFF000000), double width: 1.0, BorderStyle style: BorderStyle.solid}) | 设置所有边框               |\n| Border.fromBorderSide(BorderSide side)                       | 内边框                     |\n| Border.symmetric({BorderSide vertical: BorderSide.none, BorderSide horizontal: BorderSide.none}) | 水平方向边框，竖直方向边框 |\n\n通过上表可以发现，不管使用哪一种方法都要使用BorderSide，BorderSide指的是具体边框的样式，而Border指的是在哪个方向可以有边框。BorderSide比较简单：\n\n```dart\n  const BorderSide({\n    this.color = const Color(0xFF000000),\n    this.width = 1.0,\n    this.style = BorderStyle.solid,\n  })\n```\n\ncolor代表边框颜色，width代表边框宽度，style表示边框样式（默认实线-BorderStyle.solid）。具体效果如下图： ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/338d7a9a549b4309aabae85278a35d11~tplv-k3u1fbpfcp-watermark.awebp)\n\n##### borderRadius\n\n边角弧度，类型为BorderRadiusGeometry ，通常使用其实现类BorderRadius或BorderRadiusDirectional，其中BorderRadius最常用，以下是BorderRadius的一些用法：\n\n| 方法                                                         | 含义                 |\n| ------------------------------------------------------------ | -------------------- |\n| BorderRadius.all(Radius radius)                              | 所有角的弧度         |\n| BorderRadius.circular(double radius)                         | 所有角的弧度         |\n| BorderRadius.horizontal({Radius left: Radius.zero, Radius right: Radius.zero}) | 所有角的水平方向弧度 |\n| BorderRadius.only({Radius topLeft: Radius.zero, Radius topRight: Radius.zero, Radius bottomLeft: Radius.zero, Radius bottomRight: Radius.zero}) | 分别设置四角的弧度   |\n| BorderRadius.vertical({Radius top: Radius.zero, Radius bottom: Radius.zero}) | 所有角的垂直方向弧度 |\n\n和border一样，BorderRadius中除了 BorderRadius.circular外都是指定哪个角设置弧度，具体实现由Radius实现。Radius中Radius.circular(double radius)指的是圆角的弧度一样，Radius.elliptical(double x,double y)表示水平和垂直方向的弧度自由定义。 ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/26e68484fc054378810f2fa21be29734~tplv-k3u1fbpfcp-watermark.awebp) 总而言之，borderRadius针对于不同的角，不同方向，不同弧度都可以随意设置，比较灵活。\n\n##### boxShadow\n\nboxShadow设置Container阴影或投影，List boxShadow说明使用时是以数组的形式，对于稍显复杂的场景一层阴影无法达到要求，所有需要很多层阴影相互叠加来满足要求。BoxShadow使用相对简单\n\n```dart\nconst BoxShadow(\n{Color color: const Color(0xFF000000),\nOffset offset: Offset.zero,\ndouble blurRadius: 0.0,\ndouble spreadRadius: 0.0}\n)\n```\n\ncolor是阴影的颜色，Offset是投影偏移量，blurRadius投影模糊程度，spreadRadius则是投影的扩散程度。 ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/7e12889e7ccd427186f86c0312bade62~tplv-k3u1fbpfcp-watermark.awebp)blurRadius取值不同，效果不同，取值越大，阴影的色彩越淡，但是扩散的范围越大。 ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/12d35552e60f4f0c87af5ce8144b1ee1~tplv-k3u1fbpfcp-watermark.awebp) spreadRadius取值不同，阴影范围有明显区别。当取值大于0时，阴影向外扩散；当取值小于0时，阴影向内部聚集，若此时需要显示阴影，需要设置Offset，光线角度不同，阴影的投射方向也不同，所以设置内投影的时候，一定要设置Offset，让投影偏移出来，否则投影被遮挡无法显示。\n\n##### gradient\n\ngradient为设置渐变，渐变类型分为LinearGradient、RadialGradient、SweepGradient，分别为线性渐变、辐射渐变、扫描渐变。\n\n- LinearGradient（线性渐变）\n\n![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/99cd24bd3d65407ba9e4a8df306a7d82~tplv-k3u1fbpfcp-watermark.awebp) begin线性渐变起点，end为线性渐变终点，可水平，可竖直，可对角，根据需要自由选择。stops里面数值数量要和colors里面的数量保持一致。tileMode为颜色填充模式：\n\n| 模式              | 含义                                         |\n| ----------------- | -------------------------------------------- |\n| TileMode.clamp    | 夹钳模式，颜色与颜色之间有类似窄而明显的过渡 |\n| TileMode.repeated | 重复                                         |\n| TileMode.mirror   | 镜像                                         |\n| TileMode.decal    | 贴花（探索中）                               |\n\n具体效果如下： ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/a097c28eae154f22ac0d4932f7073e59~tplv-k3u1fbpfcp-watermark.awebp) 没有对TileMode.decal进行效果展示，是因为关于这个模式的解释比较模糊，也没有观察出到底有什么不同，需后续持续探索。 transform表示渐变色变换，一般有GradientRotation和SweepGradient供选择，主要用于SweepGradient和RadialGradient中。\n\n- SweepGradient（扫描渐变）\n\n```dart\nSweepGradient({\n    this.center = Alignment.center,\n    this.startAngle = 0.0,\n    this.endAngle = math.pi * 2,\n    required List<Color> colors,\n    List<double>? stops,\n    this.tileMode = TileMode.clamp,\n    GradientTransform? transform,\n  })\n```\n\n默认中心的从Container中心开始，开始弧度为0.0，结束弧度为pi*2，也就是一周。运行效果如下： ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/dc27c7d62b9942feb5a605906f9536c4~tplv-k3u1fbpfcp-watermark.awebp) 如果设置好颜色，再搭配上旋转动画，像雷达扫描、大转盘这种效果是可以轻松实现的。\n\n- RadialGradient（辐射渐变）\n\n```dart\n    RadialGradient({\n    this.center = Alignment.center,\n    this.radius = 0.5,\n    required List<Color> colors,\n    List<Color>? stops,\n    this.tileMode = TileMode.clamp,\n    this.focal,\n    this.focalRadius = 0.0,\n    GradientTransform? transform,\n    })\n```\n\n效果如下： ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/0ec845126687477483a8891126a797c8~tplv-k3u1fbpfcp-watermark.awebp) 第一张图片是没有设置焦点。第二张图片是设置了焦点，焦点中心为Container中心，焦点半径为0.1。第三张图同样设置了焦点，但是焦点的中心为centerLeft，且焦点半径为1.0，焦点半径单位不是像素，focalRadius和focal设置的值不同，效果区别较大，有时和想象中的不太一样，所以使用的时候需仔细调试一下。\n\n##### backgroundBlendMode\n\nbackgroundBlendMode为背景混合模式，和前面讲的图片滤镜差不多，大概有将近30种模式，有些差别较大，有些区别不是很明显，需要开发者多多尝试，这里随机选取了四种，效果如下： ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/39135332b8684ee7890caaea495d8085~tplv-k3u1fbpfcp-watermark.awebp)\n\n##### shape\n\nshape即为装饰的形状，默认为BoxShape.rectangle，用户也可以选择BoxShape.circle。BoxShape.circle是整个装饰为圆形，而RadialGradient是辐射状也为圆形，不容易区分到底是哪一个决定的，但LinearGradient区分比较开，如下图所示： ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/725a1faf253640febe05a55d3b6f0faa~tplv-k3u1fbpfcp-watermark.awebp) 所以shape和RadialGradient、SweepGradient有时可以实现相同的效果，可灵活使用。\n\n### width，height\n\nContainer需要固定宽高，否则会报错。虽有时没有设置也能正常显示，是因为Container包含的组件的宽高固定了，只要子组件宽高固定，Container宽高也固定了，所以显示正常。\n\n### constraints\n\nconstraints是Container的约束，主要指定的是宽高上面的约束：\n\n```dart\nBoxConstraints({\n    this.minWidth = 0.0,\n    this.maxWidth = double.infinity,\n    this.minHeight = 0.0,\n    this.maxHeight = double.infinity,\n  })\n```\n\nconstraints可以指定Container的最大宽高和最小宽高，否则有时超出某些范围页面显示异常。和BoxConstraints一样，同样继承自Constraint还有SliverConstraints，SliverConstraints在Sliver相关组件中使用，这里就不多讲了。\n\n### transform\n\n矩阵变化，类型为Matrix4，即四阶矩阵。常用的有以下几种用法：\n\n| 方法            | 含义                                |\n| --------------- | ----------------------------------- |\n| Matrix4(...)    | 16个参数， 平移，旋转，缩放，扭曲等 |\n| diagonal3Values | 缩放                                |\n| rotationX       | 沿x旋转                             |\n| rotationY       | 沿y旋转                             |\n| rotationZ       | 沿z旋转                             |\n| columns         | 设置新矩阵                          |\n| compose         | 合并平移，旋转，缩放成新矩阵        |\n| copy            | 复制矩阵                            |\n| identity        | 单位矩阵                            |\n| inverted        | 矩阵逆运算                          |\n| outer           | 合并                                |\n| skew            | 扭曲                                |\n| skewX(          | x扭曲                               |\n| skewY           | y扭曲                               |\n| zero            | 零矩阵                              |\n| fromList        | 数组转矩阵                          |\n\n还有其他方法，这里就不一一列举。基本上所有的变换都是在Matrix4(...)基础上实现的，所以只要弄懂Matrix4(...) ，其他的也不是问题。高级变换是一定需要矩阵，复杂的动画也需要矩阵，基础的是四阶，复杂的有五阶、六阶等等，所以矩阵很重要。以下是几种简单的变换效果： ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/18b16f4dc62d4a01a6cd1cd47918ce36~tplv-k3u1fbpfcp-watermark.awebp) 实际中变换后的图片的大小、方位、角度都有不同，效果无法在上图中完全体现出来。\n\n### transformAlignment\n\n变换锚点或者是变换重力方向和上文中的alignment是一样的，这里就不再叙述。\n\n### clipBehavior\n\nclipBehavior就是组件内容边缘的切割方式，分为四种：\n\n- none\n\n不做处理。\n\n- hardEdge\n\n当内容溢出时，hardEdge切割容器边缘最快，但是精准度欠佳，可能会有一些锯齿存在。\n\n- antiAlias\n\n抗锯齿，速度要比hardEdge慢一些，但是边缘要平滑一些。\n\n- antiAliasWithSaveLayer\n\n图层抗锯齿，就是容器中每一个图层都做抗锯齿处理，而antiAlias是在容器的轮廓做抗锯齿，antiAliasWithSaveLayer效果肯定会更好更平滑，但是速度最慢，如果没有明确指明，建议使用antiAlias，这样效果和性能能够达到较好的平衡。\n\n### Container\n\n查看Container对于各种属性的处理如下：\n\n```dart\n @override\n  Widget build(BuildContext context) {\n    Widget? current = child;\n\n    if (child == null && (constraints == null || !constraints!.isTight)) {\n      current = LimitedBox(\n        maxWidth: 0.0,\n        maxHeight: 0.0,\n        child: ConstrainedBox(constraints: const BoxConstraints.expand()),\n      );\n    }\n\n    if (alignment != null)\n      current = Align(alignment: alignment!, child: current);\n\n    final EdgeInsetsGeometry? effectivePadding = _paddingIncludingDecoration;\n    if (effectivePadding != null)\n      current = Padding(padding: effectivePadding, child: current);\n\n    if (color != null)\n      current = ColoredBox(color: color!, child: current);\n\n    if (clipBehavior != Clip.none) {\n      assert(decoration != null);\n      current = ClipPath(\n        clipper: _DecorationClipper(\n          textDirection: Directionality.maybeOf(context),\n          decoration: decoration!,\n        ),\n        clipBehavior: clipBehavior,\n        child: current,\n      );\n    }\n\n    if (decoration != null)\n      current = DecoratedBox(decoration: decoration!, child: current);\n\n    if (foregroundDecoration != null) {\n      current = DecoratedBox(\n        decoration: foregroundDecoration!,\n        position: DecorationPosition.foreground,\n        child: current,\n      );\n    }\n\n    if (constraints != null)\n      current = ConstrainedBox(constraints: constraints!, child: current);\n\n    if (margin != null)\n      current = Padding(padding: margin!, child: current);\n\n    if (transform != null)\n      current = Transform(transform: transform!, child: current, alignment: transformAlignment);\n\n    return current!;\n  }\n```\n\nContainer并非是单元组件不可再次拆分，恰恰相反，Container中多数属性都有关联组件，所以当属性被设置的时候，也是调用了该属性关联的组件，然后在此基础上再依次进行嵌套，最后套成Container，所以Container是由其他组件组成的。 本文是对Container的属性进行单独解析，实际使用时，大多都是各种属性相互配合使用，实现的效果也要比文中呈现的效果要丰富得多。\n\n# 注\n\n- 文中有很多遗漏，错误，不准确的，欢迎补充批评指正。\n- 熟悉基础，可以帮助开发者用简单、少量、高效的代码解决复杂问题。\n","source":"_posts/Flutter-Container.md","raw":"---\ntitle: Flutter-Container详解\ndate: 2021-09-17 17:27:16\ntags: [笔记]\ncategories: flutter\ndescription: Flutter-Container详解\ntop_img: https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg\ncover: https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg\n---\n\n# Flutter-Container详解\n\n# 概述\n\nContainer是一个拥有绘制、定位、调整大小的 widget，是开发中最常用、最基础的组件。虽然最基础但不可小觑，熟悉每一个属性可以帮助我们更好更快的实现想要的效果，避免走弯路，也能避免代码冗余。本文主要针对其属性进行讲解。\n\n# 属性\n\n```dart\n  Container({\n    Key? key,\n    this.alignment,\n    this.padding,\n    this.color,\n    this.decoration,\n    this.foregroundDecoration,\n    double? width,\n    double? height,\n    BoxConstraints? constraints,\n    this.margin,\n    this.transform,\n    this.transformAlignment,\n    this.child,\n    this.clipBehavior = Clip.none,\n  })\n```\n\n### key\n\nkey用于控制控件如何取代树中的另一个控件，即若widget指定了相同的key，则这些widget可以复用。 如果widget的key值不为空，会判断key._currentElement值所指向的widget，和当前widget的类型key都相同，那么就从旧的父节点上移除，作为当前的节点的子widget之一， 否则将进行真实的创建新的Element。若开发中对组建的使用没有较高要求，一般不设置该属性。\n\n### alignment\n\nalignment可以理解为Container内容的锚点位置或重力方向，锚点在哪，内容就从哪里开始。alignment的类型为AlignmentGeometry类型，通常我们会使用其实现类Alignment来进行设置。AlignmentGeometry属于抽象类：\n\n```java\n@immutable\nabstract class AlignmentGeometry {...}\n复制代码\n```\n\n一般不直接使用AlignmentGeometry ，而是使用其实现类。Flutter中实现或继承了AlignmentGeometry的公共可直接调用的类有两个：Alignment，AlignmentDirectional。这两个实现类的使用方法和相似，可以直接调用其内部属性：\n\n```dart\n  static const Alignment topLeft = Alignment(-1.0, -1.0);\n  static const Alignment topCenter = Alignment(0.0, -1.0);\n  static const Alignment topRight = Alignment(1.0, -1.0);\n  static const Alignment centerLeft = Alignment(-1.0, 0.0);\n  static const Alignment center = Alignment(0.0, 0.0);\n  static const Alignment centerRight = Alignment(1.0, 0.0);\n  static const Alignment bottomLeft = Alignment(-1.0, 1.0);\n  static const Alignment bottomCenter = Alignment(0.0, 1.0);\n  static const Alignment bottomRight = Alignment(1.0, 1.0);\n```\n\n使用的时候直接用Alignment.topLeft调用即可，也可直接设置参数数值比如Alignment(-1.0, -1.0)即可。根据设置不同的alignment属性值，视图效果也是不一样的： ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/b3681934fb184cce9f9396f0bf41b653~tplv-k3u1fbpfcp-watermark.awebp) 若在其他组件中需要设置TextDirection，可以考虑使用AlignmentDirectional。AlignmentDirectional和Alignment差不多：\n\n```dart\n  static const AlignmentDirectional topStart = AlignmentDirectional(-1.0, -1.0);\n  static const AlignmentDirectional topCenter = AlignmentDirectional(0.0, -1.0);\n  static const AlignmentDirectional topEnd = AlignmentDirectional(1.0, -1.0);\n  static const AlignmentDirectional centerStart = AlignmentDirectional(-1.0, 0.0);\n  static const AlignmentDirectional center = AlignmentDirectional(0.0, 0.0);\n  static const AlignmentDirectional centerEnd = AlignmentDirectional(1.0, 0.0);\n  static const AlignmentDirectional bottomStart = AlignmentDirectional(-1.0, 1.0);\n  static const AlignmentDirectional bottomCenter = AlignmentDirectional(0.0, 1.0);\n  static const AlignmentDirectional bottomEnd = AlignmentDirectional(1.0, 1.0);\n```\n\n使用方法和Alignment一样，不再叙述。\n\n### padding、margin\n\npadding为内边距，margin为外边距。 ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/52b995b0a8af4963b960e1e85529be46~tplv-k3u1fbpfcp-watermark.awebp)\n\n针对于上图中Container2，Container1与Container2之间的边框距离称之为margin，Container2与内容之间距离为padding。通常margin和padding使用EdgeInsets，EdgeInsets使用方法如下：\n\n| 方法                                                         | 使用                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| EdgeInsets.fromLTRB(this.left, this.top, this.right, this.bottom) | 左上右下依次填写                                             |\n| EdgeInsets.all(double value)                                 | 所有边距一样                                                 |\n| EdgeInsets.only({this.left = 0.0,this.top = 0.0,this.right = 0.0,this.bottom = 0.0, }) | 左上右下可选择设置                                           |\n| EdgeInsets zero                                              | 左上右下都为0                                                |\n| EdgeInsets.fromWindowPadding(ui.WindowPadding padding, double devicePixelRatio) | 左上右下距离窗口的边距，和设备像素比，而不是距离父组件的边距 |\n\nEdgeInsets继承于EdgeInsetsGeometry，和之类似的还有EdgeInsetsDirectional，同样继承自EdgeInsetsGeometry，暴露出的方法有：\n\n```dart\nclass EdgeInsetsDirectional extends EdgeInsetsGeometry {\n  const EdgeInsetsDirectional.fromSTEB(this.start, this.top, this.end, this.bottom);\n  const EdgeInsetsDirectional.only({\n    this.start = 0.0,\n    this.top = 0.0,\n    this.end = 0.0,\n    this.bottom = 0.0,\n  });\n  static const EdgeInsetsDirectional zero = EdgeInsetsDirectional.only();\n  ...\n}\n```\n\nEdgeInsetsDirectional使用方法和EdgeInsets类似，多用于TextDirection。\n\n### color\n\ncolor为Container颜色，设置颜色通常可以调用Colors.white，Colors.red等Flutter定义好的颜色，如没有适合的颜色，可以使用Color(0xFFFFFFFF)，自定义颜色，0x代表16进制，前面两个FF代表透明度（Android中可以不写，但Flutter中不可省略），后面6个F代表颜色数值。以Color(0xFFFFFFFF)为例，以下表格对Color的使用进行说明\n\n| 方法                                   | 含义                      |\n| -------------------------------------- | ------------------------- |\n| Color(0xFFFFFFFF).value                | 获取颜色数值(0-255)       |\n| Color(0xFFFFFFFF).red                  | 获取颜色中红色            |\n| Color(0xFFFFFFFF).blue                 | 获取颜色中蓝色            |\n| Color(0xFFFFFFFF).opacity              | 获取颜色不透明度(0.0-1.0) |\n| Color(0xFFFFFFFF).alpha                | 获取颜色透明度            |\n| Color(0xFFFFFFFF).green                | 获取颜色中绿色            |\n| Color(0xFFFFFFFF).withOpacity(opacity) | 设置颜色不透明度          |\n| Color(0xFFFFFFFF).computeLuminance()   | 计算颜色亮度(0-1)         |\n| Color(0xFFFFFFFF).withAlpha(a)         | 设置颜色透明度 (0-255)    |\n| Color(0xFFFFFFFF).withBlue(b)          | 设置颜色中蓝色值(0-255)   |\n| Color(0xFFFFFFFF).withGreen(g)         | 设置颜色中绿值            |\n| Color(0xFFFFFFFF).withRed(r)           | 设置颜色中红色值          |\n\n关于Color大多有这几个常用的方法，若Container设置了decoration，Container的color就不要设置了，两者冲突会报错，以decoration中的color为准。\n\n### decoration，foregroundDecoration\n\ndecoration为背景装饰，foregroundDecoration为前景装饰。简单理解就是设置样式，不仅仅是设置颜色，还包括形状、图片、渐变、阴影、模糊等。 decoration指定类型为Decoration，同样Decoration为抽象类，没有具体的实现，需要使用其实现类或子类，其实现类主要有BoxDecoration、FlutterLogoDecoration、UnderlineTabIndicator、ShapeDecoration。Container中通常使用BoxDecoration，BoxDecoration有如下几个参数：\n\n```dart\n  const BoxDecoration({\n    this.color,\n    this.image,\n    this.border,\n    this.borderRadius,\n    this.boxShadow,\n    this.gradient,\n    this.backgroundBlendMode,\n    this.shape = BoxShape.rectangle,\n  })\n```\n\n##### color\n\n颜色直接在BoxDecoration中设置即可，以下分别是红色和蓝色的效果图 ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/41646f7a778f4c76aadf7c0eacff70fb~tplv-k3u1fbpfcp-watermark.awebp)\n\n##### image\n\nimage就是设置装饰图片，图片分为资源图片、本地图片和网络图片，这里只能使用DecorationImage\n\n```dart\n const DecorationImage({\n    required this.image,\n    this.onError,\n    this.colorFilter,\n    this.fit,\n    this.alignment = Alignment.center,\n    this.centerSlice,\n    this.repeat = ImageRepeat.noRepeat,\n    this.matchTextDirection = false,\n    this.scale = 1.0\n  })\n```\n\n- image\n\nDecorationImage中指定了image的类型必须是ImageProvider，也就是这里使用的是AssetImage()、NetworkImage()、FileImage()，而不是Image.asset()、Image.net()、Image.file()等。 ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/f0cae560c70544c79980a29d78241b36~tplv-k3u1fbpfcp-watermark.awebp) 左图为AssetImage，右图为NetworkImage，FileImage()访问的是手机中的图片，和前两者一样，只要拿到路径都不是问题。\n\n- onError\n\nonError指的是图片错误监听，万一图片格式不对，大小不对，网络出错，加载出错，开发者需要知道错在哪里了，然后做错误处理。\n\n- colorFilter\n\ncolorFilter就是相当于给图片加上一层滤镜，以上图中左边图片为例，ColorFilter使用方式有四种：\n\n| 方法                                               | 含义                                                         |\n| -------------------------------------------------- | ------------------------------------------------------------ |\n| ColorFilter.mode(Color color, BlendMode blendMode) | 添加指定混合模式指定颜色的滤镜，BlendMode 大概有三十种，用户自由选择 |\n| ColorFilter.matrix(List matrix)                    | 矩阵混合                                                     |\n| ColorFilter.linearToSrgbGamma()                    | 将sRGB伽马曲线应用于RGB通道                                  |\n| ColorFilter.srgbToLinearGamma()                    | 将sRGB伽马曲线逆应用于RGB通道                                |\n\n效果： ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/10e86695928a4d4e9a0e9213bd660adf~tplv-k3u1fbpfcp-watermark.awebp) 通过上图可以发现，同一图片使用不同的滤镜，效果大不相同。如果需要开发图片滤镜功能，这一块会有大用处。\n\n- fit\n\nfit指的是图片适配模式，使用BoxFit即可，BoxFit也提供了几种模式供选择。\n\n| 模式      | 含义                 |\n| --------- | -------------------- |\n| fill      | 根据图片比例填充     |\n| contain   | 容器范围内尽可能最大 |\n| cover     | 覆盖整个容器         |\n| fitWidth  | 宽度适应             |\n| fitHeight | 高度适应             |\n| none      | 无                   |\n| scaleDown | 等比例缩放           |\n\n各种模式依次效果如下： ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/295cfc1025164faa939144c9abf10b53~tplv-k3u1fbpfcp-watermark.awebp) 上图中图片较小，容器固定，有些图片看不出区别，而实际使用过程中不同模式之间差别较大，以实际为准。\n\n- alignment\n\nalignment 同文章开头的alignment一样，不再叙述。\n\n- centerSlice\n\ncenterSlice和fit效果有些相似，当两者同时使用的时候，可能没有效果，可能无法看到图片，使用时需要谨慎一些。 centerSlice类型为Rect，centerSlice用于nine-patch image，即可拉伸图片，后续这一块需要仔细研究一下。\n\n| 方法                                                         |\n| ------------------------------------------------------------ |\n| Rect.fromLTRB(this.left, this.top, this.right, this.bottom)  |\n| Rect.fromLTWH(double left, double top, double width, double height) |\n| Rect.fromCircle({ required Offset center, required double radius }) |\n| Rect.fromCenter({ required Offset center, required double width, required double height }) |\n| Rect.fromPoints(Offset a, Offset b)                          |\n\n- repeat\n\nrepeat 是空白区域图片重复模式。\n\n| 方法                 | 含义         |\n| -------------------- | ------------ |\n| ImageRepeat.repeat   | 全部填充图片 |\n| ImageRepeat.repeatX  | 水平重复     |\n| ImageRepeat.repeatY  | 竖直重复     |\n| ImageRepeat.noRepeat | 不重复       |\n\n对于的效果依次如下： ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/57986d6cf4274deea6b69ee70df1f4e7~tplv-k3u1fbpfcp-watermark.awebp) 由于图片本身已经占用了容器的水平位置上的全部空间，所以repeatX和noRepeat效果一样，repeat和repeatY效果一样。若图片水平和竖直方向都有剩余空间，则repeat等于repeatX和repeatY叠加。\n\n- matchTextDirection\n\nmatchTextDirection默认为false，表示背景图片和文字方向没有关系。当为true的时候，表示图片和文字方向一致。\n\n- scale\n\nscale表示图片缩放，默认为1.0，表示按原图大小显示。小于1.0，则按比例缩小图片；大于1.0，则表示按比例放大图片。\n\n##### border\n\nborder是边框的意思，设置该属性，就可以设置Contaier边框样式。border指定类型为BoxBorder，BoxBorder，InputBorder，OutlinedBorder虽都继承自ShapeBorder ，但这里BoxBorder也是抽象类，所以需要使用其子类Border或BorderDirectional，这里通常使用Border。Border有四种构造方法：\n\n| 方法                                                         | 含义                       |\n| ------------------------------------------------------------ | -------------------------- |\n| Border({BorderSide top: BorderSide.none, BorderSide right: BorderSide.none, BorderSide bottom: BorderSide.none, BorderSide left: BorderSide.none}) | 可分别设置上下左右边框     |\n| Border.all({Color color: const Color(0xFF000000), double width: 1.0, BorderStyle style: BorderStyle.solid}) | 设置所有边框               |\n| Border.fromBorderSide(BorderSide side)                       | 内边框                     |\n| Border.symmetric({BorderSide vertical: BorderSide.none, BorderSide horizontal: BorderSide.none}) | 水平方向边框，竖直方向边框 |\n\n通过上表可以发现，不管使用哪一种方法都要使用BorderSide，BorderSide指的是具体边框的样式，而Border指的是在哪个方向可以有边框。BorderSide比较简单：\n\n```dart\n  const BorderSide({\n    this.color = const Color(0xFF000000),\n    this.width = 1.0,\n    this.style = BorderStyle.solid,\n  })\n```\n\ncolor代表边框颜色，width代表边框宽度，style表示边框样式（默认实线-BorderStyle.solid）。具体效果如下图： ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/338d7a9a549b4309aabae85278a35d11~tplv-k3u1fbpfcp-watermark.awebp)\n\n##### borderRadius\n\n边角弧度，类型为BorderRadiusGeometry ，通常使用其实现类BorderRadius或BorderRadiusDirectional，其中BorderRadius最常用，以下是BorderRadius的一些用法：\n\n| 方法                                                         | 含义                 |\n| ------------------------------------------------------------ | -------------------- |\n| BorderRadius.all(Radius radius)                              | 所有角的弧度         |\n| BorderRadius.circular(double radius)                         | 所有角的弧度         |\n| BorderRadius.horizontal({Radius left: Radius.zero, Radius right: Radius.zero}) | 所有角的水平方向弧度 |\n| BorderRadius.only({Radius topLeft: Radius.zero, Radius topRight: Radius.zero, Radius bottomLeft: Radius.zero, Radius bottomRight: Radius.zero}) | 分别设置四角的弧度   |\n| BorderRadius.vertical({Radius top: Radius.zero, Radius bottom: Radius.zero}) | 所有角的垂直方向弧度 |\n\n和border一样，BorderRadius中除了 BorderRadius.circular外都是指定哪个角设置弧度，具体实现由Radius实现。Radius中Radius.circular(double radius)指的是圆角的弧度一样，Radius.elliptical(double x,double y)表示水平和垂直方向的弧度自由定义。 ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/26e68484fc054378810f2fa21be29734~tplv-k3u1fbpfcp-watermark.awebp) 总而言之，borderRadius针对于不同的角，不同方向，不同弧度都可以随意设置，比较灵活。\n\n##### boxShadow\n\nboxShadow设置Container阴影或投影，List boxShadow说明使用时是以数组的形式，对于稍显复杂的场景一层阴影无法达到要求，所有需要很多层阴影相互叠加来满足要求。BoxShadow使用相对简单\n\n```dart\nconst BoxShadow(\n{Color color: const Color(0xFF000000),\nOffset offset: Offset.zero,\ndouble blurRadius: 0.0,\ndouble spreadRadius: 0.0}\n)\n```\n\ncolor是阴影的颜色，Offset是投影偏移量，blurRadius投影模糊程度，spreadRadius则是投影的扩散程度。 ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/7e12889e7ccd427186f86c0312bade62~tplv-k3u1fbpfcp-watermark.awebp)blurRadius取值不同，效果不同，取值越大，阴影的色彩越淡，但是扩散的范围越大。 ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/12d35552e60f4f0c87af5ce8144b1ee1~tplv-k3u1fbpfcp-watermark.awebp) spreadRadius取值不同，阴影范围有明显区别。当取值大于0时，阴影向外扩散；当取值小于0时，阴影向内部聚集，若此时需要显示阴影，需要设置Offset，光线角度不同，阴影的投射方向也不同，所以设置内投影的时候，一定要设置Offset，让投影偏移出来，否则投影被遮挡无法显示。\n\n##### gradient\n\ngradient为设置渐变，渐变类型分为LinearGradient、RadialGradient、SweepGradient，分别为线性渐变、辐射渐变、扫描渐变。\n\n- LinearGradient（线性渐变）\n\n![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/99cd24bd3d65407ba9e4a8df306a7d82~tplv-k3u1fbpfcp-watermark.awebp) begin线性渐变起点，end为线性渐变终点，可水平，可竖直，可对角，根据需要自由选择。stops里面数值数量要和colors里面的数量保持一致。tileMode为颜色填充模式：\n\n| 模式              | 含义                                         |\n| ----------------- | -------------------------------------------- |\n| TileMode.clamp    | 夹钳模式，颜色与颜色之间有类似窄而明显的过渡 |\n| TileMode.repeated | 重复                                         |\n| TileMode.mirror   | 镜像                                         |\n| TileMode.decal    | 贴花（探索中）                               |\n\n具体效果如下： ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/a097c28eae154f22ac0d4932f7073e59~tplv-k3u1fbpfcp-watermark.awebp) 没有对TileMode.decal进行效果展示，是因为关于这个模式的解释比较模糊，也没有观察出到底有什么不同，需后续持续探索。 transform表示渐变色变换，一般有GradientRotation和SweepGradient供选择，主要用于SweepGradient和RadialGradient中。\n\n- SweepGradient（扫描渐变）\n\n```dart\nSweepGradient({\n    this.center = Alignment.center,\n    this.startAngle = 0.0,\n    this.endAngle = math.pi * 2,\n    required List<Color> colors,\n    List<double>? stops,\n    this.tileMode = TileMode.clamp,\n    GradientTransform? transform,\n  })\n```\n\n默认中心的从Container中心开始，开始弧度为0.0，结束弧度为pi*2，也就是一周。运行效果如下： ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/dc27c7d62b9942feb5a605906f9536c4~tplv-k3u1fbpfcp-watermark.awebp) 如果设置好颜色，再搭配上旋转动画，像雷达扫描、大转盘这种效果是可以轻松实现的。\n\n- RadialGradient（辐射渐变）\n\n```dart\n    RadialGradient({\n    this.center = Alignment.center,\n    this.radius = 0.5,\n    required List<Color> colors,\n    List<Color>? stops,\n    this.tileMode = TileMode.clamp,\n    this.focal,\n    this.focalRadius = 0.0,\n    GradientTransform? transform,\n    })\n```\n\n效果如下： ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/0ec845126687477483a8891126a797c8~tplv-k3u1fbpfcp-watermark.awebp) 第一张图片是没有设置焦点。第二张图片是设置了焦点，焦点中心为Container中心，焦点半径为0.1。第三张图同样设置了焦点，但是焦点的中心为centerLeft，且焦点半径为1.0，焦点半径单位不是像素，focalRadius和focal设置的值不同，效果区别较大，有时和想象中的不太一样，所以使用的时候需仔细调试一下。\n\n##### backgroundBlendMode\n\nbackgroundBlendMode为背景混合模式，和前面讲的图片滤镜差不多，大概有将近30种模式，有些差别较大，有些区别不是很明显，需要开发者多多尝试，这里随机选取了四种，效果如下： ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/39135332b8684ee7890caaea495d8085~tplv-k3u1fbpfcp-watermark.awebp)\n\n##### shape\n\nshape即为装饰的形状，默认为BoxShape.rectangle，用户也可以选择BoxShape.circle。BoxShape.circle是整个装饰为圆形，而RadialGradient是辐射状也为圆形，不容易区分到底是哪一个决定的，但LinearGradient区分比较开，如下图所示： ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/725a1faf253640febe05a55d3b6f0faa~tplv-k3u1fbpfcp-watermark.awebp) 所以shape和RadialGradient、SweepGradient有时可以实现相同的效果，可灵活使用。\n\n### width，height\n\nContainer需要固定宽高，否则会报错。虽有时没有设置也能正常显示，是因为Container包含的组件的宽高固定了，只要子组件宽高固定，Container宽高也固定了，所以显示正常。\n\n### constraints\n\nconstraints是Container的约束，主要指定的是宽高上面的约束：\n\n```dart\nBoxConstraints({\n    this.minWidth = 0.0,\n    this.maxWidth = double.infinity,\n    this.minHeight = 0.0,\n    this.maxHeight = double.infinity,\n  })\n```\n\nconstraints可以指定Container的最大宽高和最小宽高，否则有时超出某些范围页面显示异常。和BoxConstraints一样，同样继承自Constraint还有SliverConstraints，SliverConstraints在Sliver相关组件中使用，这里就不多讲了。\n\n### transform\n\n矩阵变化，类型为Matrix4，即四阶矩阵。常用的有以下几种用法：\n\n| 方法            | 含义                                |\n| --------------- | ----------------------------------- |\n| Matrix4(...)    | 16个参数， 平移，旋转，缩放，扭曲等 |\n| diagonal3Values | 缩放                                |\n| rotationX       | 沿x旋转                             |\n| rotationY       | 沿y旋转                             |\n| rotationZ       | 沿z旋转                             |\n| columns         | 设置新矩阵                          |\n| compose         | 合并平移，旋转，缩放成新矩阵        |\n| copy            | 复制矩阵                            |\n| identity        | 单位矩阵                            |\n| inverted        | 矩阵逆运算                          |\n| outer           | 合并                                |\n| skew            | 扭曲                                |\n| skewX(          | x扭曲                               |\n| skewY           | y扭曲                               |\n| zero            | 零矩阵                              |\n| fromList        | 数组转矩阵                          |\n\n还有其他方法，这里就不一一列举。基本上所有的变换都是在Matrix4(...)基础上实现的，所以只要弄懂Matrix4(...) ，其他的也不是问题。高级变换是一定需要矩阵，复杂的动画也需要矩阵，基础的是四阶，复杂的有五阶、六阶等等，所以矩阵很重要。以下是几种简单的变换效果： ![在这里插入图片描述](https://gitee.com/gaoxianglong/picgo/raw/master/img/18b16f4dc62d4a01a6cd1cd47918ce36~tplv-k3u1fbpfcp-watermark.awebp) 实际中变换后的图片的大小、方位、角度都有不同，效果无法在上图中完全体现出来。\n\n### transformAlignment\n\n变换锚点或者是变换重力方向和上文中的alignment是一样的，这里就不再叙述。\n\n### clipBehavior\n\nclipBehavior就是组件内容边缘的切割方式，分为四种：\n\n- none\n\n不做处理。\n\n- hardEdge\n\n当内容溢出时，hardEdge切割容器边缘最快，但是精准度欠佳，可能会有一些锯齿存在。\n\n- antiAlias\n\n抗锯齿，速度要比hardEdge慢一些，但是边缘要平滑一些。\n\n- antiAliasWithSaveLayer\n\n图层抗锯齿，就是容器中每一个图层都做抗锯齿处理，而antiAlias是在容器的轮廓做抗锯齿，antiAliasWithSaveLayer效果肯定会更好更平滑，但是速度最慢，如果没有明确指明，建议使用antiAlias，这样效果和性能能够达到较好的平衡。\n\n### Container\n\n查看Container对于各种属性的处理如下：\n\n```dart\n @override\n  Widget build(BuildContext context) {\n    Widget? current = child;\n\n    if (child == null && (constraints == null || !constraints!.isTight)) {\n      current = LimitedBox(\n        maxWidth: 0.0,\n        maxHeight: 0.0,\n        child: ConstrainedBox(constraints: const BoxConstraints.expand()),\n      );\n    }\n\n    if (alignment != null)\n      current = Align(alignment: alignment!, child: current);\n\n    final EdgeInsetsGeometry? effectivePadding = _paddingIncludingDecoration;\n    if (effectivePadding != null)\n      current = Padding(padding: effectivePadding, child: current);\n\n    if (color != null)\n      current = ColoredBox(color: color!, child: current);\n\n    if (clipBehavior != Clip.none) {\n      assert(decoration != null);\n      current = ClipPath(\n        clipper: _DecorationClipper(\n          textDirection: Directionality.maybeOf(context),\n          decoration: decoration!,\n        ),\n        clipBehavior: clipBehavior,\n        child: current,\n      );\n    }\n\n    if (decoration != null)\n      current = DecoratedBox(decoration: decoration!, child: current);\n\n    if (foregroundDecoration != null) {\n      current = DecoratedBox(\n        decoration: foregroundDecoration!,\n        position: DecorationPosition.foreground,\n        child: current,\n      );\n    }\n\n    if (constraints != null)\n      current = ConstrainedBox(constraints: constraints!, child: current);\n\n    if (margin != null)\n      current = Padding(padding: margin!, child: current);\n\n    if (transform != null)\n      current = Transform(transform: transform!, child: current, alignment: transformAlignment);\n\n    return current!;\n  }\n```\n\nContainer并非是单元组件不可再次拆分，恰恰相反，Container中多数属性都有关联组件，所以当属性被设置的时候，也是调用了该属性关联的组件，然后在此基础上再依次进行嵌套，最后套成Container，所以Container是由其他组件组成的。 本文是对Container的属性进行单独解析，实际使用时，大多都是各种属性相互配合使用，实现的效果也要比文中呈现的效果要丰富得多。\n\n# 注\n\n- 文中有很多遗漏，错误，不准确的，欢迎补充批评指正。\n- 熟悉基础，可以帮助开发者用简单、少量、高效的代码解决复杂问题。\n","slug":"Flutter-Container","published":1,"updated":"2021-09-17T09:35:48.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktpg91z6000484uxel5t72jg","content":"<h1 id=\"Flutter-Container详解\"><a href=\"#Flutter-Container详解\" class=\"headerlink\" title=\"Flutter-Container详解\"></a>Flutter-Container详解</h1><h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>Container是一个拥有绘制、定位、调整大小的 widget，是开发中最常用、最基础的组件。虽然最基础但不可小觑，熟悉每一个属性可以帮助我们更好更快的实现想要的效果，避免走弯路，也能避免代码冗余。本文主要针对其属性进行讲解。</p>\n<h1 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h1><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Container(&#123;</span><br><span class=\"line\">  Key? key,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.alignment,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.padding,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.decoration,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.foregroundDecoration,</span><br><span class=\"line\">  <span class=\"built_in\">double?</span> width,</span><br><span class=\"line\">  <span class=\"built_in\">double?</span> height,</span><br><span class=\"line\">  BoxConstraints? constraints,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.margin,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.transform,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.transformAlignment,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.child,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.clipBehavior = Clip.none,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h3><p>key用于控制控件如何取代树中的另一个控件，即若widget指定了相同的key，则这些widget可以复用。 如果widget的key值不为空，会判断key._currentElement值所指向的widget，和当前widget的类型key都相同，那么就从旧的父节点上移除，作为当前的节点的子widget之一， 否则将进行真实的创建新的Element。若开发中对组建的使用没有较高要求，一般不设置该属性。</p>\n<h3 id=\"alignment\"><a href=\"#alignment\" class=\"headerlink\" title=\"alignment\"></a>alignment</h3><p>alignment可以理解为Container内容的锚点位置或重力方向，锚点在哪，内容就从哪里开始。alignment的类型为AlignmentGeometry类型，通常我们会使用其实现类Alignment来进行设置。AlignmentGeometry属于抽象类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@immutable</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlignmentGeometry</span> </span>&#123;...&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>一般不直接使用AlignmentGeometry ，而是使用其实现类。Flutter中实现或继承了AlignmentGeometry的公共可直接调用的类有两个：Alignment，AlignmentDirectional。这两个实现类的使用方法和相似，可以直接调用其内部属性：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> Alignment topLeft = Alignment(<span class=\"number\">-1.0</span>, <span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> Alignment topCenter = Alignment(<span class=\"number\">0.0</span>, <span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> Alignment topRight = Alignment(<span class=\"number\">1.0</span>, <span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> Alignment centerLeft = Alignment(<span class=\"number\">-1.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> Alignment center = Alignment(<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> Alignment centerRight = Alignment(<span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> Alignment bottomLeft = Alignment(<span class=\"number\">-1.0</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> Alignment bottomCenter = Alignment(<span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> Alignment bottomRight = Alignment(<span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>使用的时候直接用Alignment.topLeft调用即可，也可直接设置参数数值比如Alignment(-1.0, -1.0)即可。根据设置不同的alignment属性值，视图效果也是不一样的： <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/b3681934fb184cce9f9396f0bf41b653~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> 若在其他组件中需要设置TextDirection，可以考虑使用AlignmentDirectional。AlignmentDirectional和Alignment差不多：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> AlignmentDirectional topStart = AlignmentDirectional(<span class=\"number\">-1.0</span>, <span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> AlignmentDirectional topCenter = AlignmentDirectional(<span class=\"number\">0.0</span>, <span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> AlignmentDirectional topEnd = AlignmentDirectional(<span class=\"number\">1.0</span>, <span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> AlignmentDirectional centerStart = AlignmentDirectional(<span class=\"number\">-1.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> AlignmentDirectional center = AlignmentDirectional(<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> AlignmentDirectional centerEnd = AlignmentDirectional(<span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> AlignmentDirectional bottomStart = AlignmentDirectional(<span class=\"number\">-1.0</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> AlignmentDirectional bottomCenter = AlignmentDirectional(<span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> AlignmentDirectional bottomEnd = AlignmentDirectional(<span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>使用方法和Alignment一样，不再叙述。</p>\n<h3 id=\"padding、margin\"><a href=\"#padding、margin\" class=\"headerlink\" title=\"padding、margin\"></a>padding、margin</h3><p>padding为内边距，margin为外边距。 <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/52b995b0a8af4963b960e1e85529be46~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"></p>\n<p>针对于上图中Container2，Container1与Container2之间的边框距离称之为margin，Container2与内容之间距离为padding。通常margin和padding使用EdgeInsets，EdgeInsets使用方法如下：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>使用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>EdgeInsets.fromLTRB(this.left, this.top, this.right, this.bottom)</td>\n<td>左上右下依次填写</td>\n</tr>\n<tr>\n<td>EdgeInsets.all(double value)</td>\n<td>所有边距一样</td>\n</tr>\n<tr>\n<td>EdgeInsets.only({this.left = 0.0,this.top = 0.0,this.right = 0.0,this.bottom = 0.0, })</td>\n<td>左上右下可选择设置</td>\n</tr>\n<tr>\n<td>EdgeInsets zero</td>\n<td>左上右下都为0</td>\n</tr>\n<tr>\n<td>EdgeInsets.fromWindowPadding(ui.WindowPadding padding, double devicePixelRatio)</td>\n<td>左上右下距离窗口的边距，和设备像素比，而不是距离父组件的边距</td>\n</tr>\n</tbody></table>\n<p>EdgeInsets继承于EdgeInsetsGeometry，和之类似的还有EdgeInsetsDirectional，同样继承自EdgeInsetsGeometry，暴露出的方法有：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EdgeInsetsDirectional</span> <span class=\"keyword\">extends</span> <span class=\"title\">EdgeInsetsGeometry</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> EdgeInsetsDirectional.fromSTEB(<span class=\"keyword\">this</span>.start, <span class=\"keyword\">this</span>.top, <span class=\"keyword\">this</span>.end, <span class=\"keyword\">this</span>.bottom);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> EdgeInsetsDirectional.only(&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.start = <span class=\"number\">0.0</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.top = <span class=\"number\">0.0</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.end = <span class=\"number\">0.0</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bottom = <span class=\"number\">0.0</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> EdgeInsetsDirectional zero = EdgeInsetsDirectional.only();</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>EdgeInsetsDirectional使用方法和EdgeInsets类似，多用于TextDirection。</p>\n<h3 id=\"color\"><a href=\"#color\" class=\"headerlink\" title=\"color\"></a>color</h3><p>color为Container颜色，设置颜色通常可以调用Colors.white，Colors.red等Flutter定义好的颜色，如没有适合的颜色，可以使用Color(0xFFFFFFFF)，自定义颜色，0x代表16进制，前面两个FF代表透明度（Android中可以不写，但Flutter中不可省略），后面6个F代表颜色数值。以Color(0xFFFFFFFF)为例，以下表格对Color的使用进行说明</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Color(0xFFFFFFFF).value</td>\n<td>获取颜色数值(0-255)</td>\n</tr>\n<tr>\n<td>Color(0xFFFFFFFF).red</td>\n<td>获取颜色中红色</td>\n</tr>\n<tr>\n<td>Color(0xFFFFFFFF).blue</td>\n<td>获取颜色中蓝色</td>\n</tr>\n<tr>\n<td>Color(0xFFFFFFFF).opacity</td>\n<td>获取颜色不透明度(0.0-1.0)</td>\n</tr>\n<tr>\n<td>Color(0xFFFFFFFF).alpha</td>\n<td>获取颜色透明度</td>\n</tr>\n<tr>\n<td>Color(0xFFFFFFFF).green</td>\n<td>获取颜色中绿色</td>\n</tr>\n<tr>\n<td>Color(0xFFFFFFFF).withOpacity(opacity)</td>\n<td>设置颜色不透明度</td>\n</tr>\n<tr>\n<td>Color(0xFFFFFFFF).computeLuminance()</td>\n<td>计算颜色亮度(0-1)</td>\n</tr>\n<tr>\n<td>Color(0xFFFFFFFF).withAlpha(a)</td>\n<td>设置颜色透明度 (0-255)</td>\n</tr>\n<tr>\n<td>Color(0xFFFFFFFF).withBlue(b)</td>\n<td>设置颜色中蓝色值(0-255)</td>\n</tr>\n<tr>\n<td>Color(0xFFFFFFFF).withGreen(g)</td>\n<td>设置颜色中绿值</td>\n</tr>\n<tr>\n<td>Color(0xFFFFFFFF).withRed(r)</td>\n<td>设置颜色中红色值</td>\n</tr>\n</tbody></table>\n<p>关于Color大多有这几个常用的方法，若Container设置了decoration，Container的color就不要设置了，两者冲突会报错，以decoration中的color为准。</p>\n<h3 id=\"decoration，foregroundDecoration\"><a href=\"#decoration，foregroundDecoration\" class=\"headerlink\" title=\"decoration，foregroundDecoration\"></a>decoration，foregroundDecoration</h3><p>decoration为背景装饰，foregroundDecoration为前景装饰。简单理解就是设置样式，不仅仅是设置颜色，还包括形状、图片、渐变、阴影、模糊等。 decoration指定类型为Decoration，同样Decoration为抽象类，没有具体的实现，需要使用其实现类或子类，其实现类主要有BoxDecoration、FlutterLogoDecoration、UnderlineTabIndicator、ShapeDecoration。Container中通常使用BoxDecoration，BoxDecoration有如下几个参数：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> BoxDecoration(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.image,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.border,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.borderRadius,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.boxShadow,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.gradient,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.backgroundBlendMode,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.shape = BoxShape.rectangle,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"color-1\"><a href=\"#color-1\" class=\"headerlink\" title=\"color\"></a>color</h5><p>颜色直接在BoxDecoration中设置即可，以下分别是红色和蓝色的效果图 <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/41646f7a778f4c76aadf7c0eacff70fb~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"image\"><a href=\"#image\" class=\"headerlink\" title=\"image\"></a>image</h5><p>image就是设置装饰图片，图片分为资源图片、本地图片和网络图片，这里只能使用DecorationImage</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> DecorationImage(&#123;</span><br><span class=\"line\">   <span class=\"keyword\">required</span> <span class=\"keyword\">this</span>.image,</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.onError,</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.colorFilter,</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.fit,</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.alignment = Alignment.center,</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.centerSlice,</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.repeat = ImageRepeat.noRepeat,</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.matchTextDirection = <span class=\"keyword\">false</span>,</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.scale = <span class=\"number\">1.0</span></span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>image</li>\n</ul>\n<p>DecorationImage中指定了image的类型必须是ImageProvider，也就是这里使用的是AssetImage()、NetworkImage()、FileImage()，而不是Image.asset()、Image.net()、Image.file()等。 <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/f0cae560c70544c79980a29d78241b36~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> 左图为AssetImage，右图为NetworkImage，FileImage()访问的是手机中的图片，和前两者一样，只要拿到路径都不是问题。</p>\n<ul>\n<li>onError</li>\n</ul>\n<p>onError指的是图片错误监听，万一图片格式不对，大小不对，网络出错，加载出错，开发者需要知道错在哪里了，然后做错误处理。</p>\n<ul>\n<li>colorFilter</li>\n</ul>\n<p>colorFilter就是相当于给图片加上一层滤镜，以上图中左边图片为例，ColorFilter使用方式有四种：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ColorFilter.mode(Color color, BlendMode blendMode)</td>\n<td>添加指定混合模式指定颜色的滤镜，BlendMode 大概有三十种，用户自由选择</td>\n</tr>\n<tr>\n<td>ColorFilter.matrix(List matrix)</td>\n<td>矩阵混合</td>\n</tr>\n<tr>\n<td>ColorFilter.linearToSrgbGamma()</td>\n<td>将sRGB伽马曲线应用于RGB通道</td>\n</tr>\n<tr>\n<td>ColorFilter.srgbToLinearGamma()</td>\n<td>将sRGB伽马曲线逆应用于RGB通道</td>\n</tr>\n</tbody></table>\n<p>效果： <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/10e86695928a4d4e9a0e9213bd660adf~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> 通过上图可以发现，同一图片使用不同的滤镜，效果大不相同。如果需要开发图片滤镜功能，这一块会有大用处。</p>\n<ul>\n<li>fit</li>\n</ul>\n<p>fit指的是图片适配模式，使用BoxFit即可，BoxFit也提供了几种模式供选择。</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>fill</td>\n<td>根据图片比例填充</td>\n</tr>\n<tr>\n<td>contain</td>\n<td>容器范围内尽可能最大</td>\n</tr>\n<tr>\n<td>cover</td>\n<td>覆盖整个容器</td>\n</tr>\n<tr>\n<td>fitWidth</td>\n<td>宽度适应</td>\n</tr>\n<tr>\n<td>fitHeight</td>\n<td>高度适应</td>\n</tr>\n<tr>\n<td>none</td>\n<td>无</td>\n</tr>\n<tr>\n<td>scaleDown</td>\n<td>等比例缩放</td>\n</tr>\n</tbody></table>\n<p>各种模式依次效果如下： <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/295cfc1025164faa939144c9abf10b53~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> 上图中图片较小，容器固定，有些图片看不出区别，而实际使用过程中不同模式之间差别较大，以实际为准。</p>\n<ul>\n<li>alignment</li>\n</ul>\n<p>alignment 同文章开头的alignment一样，不再叙述。</p>\n<ul>\n<li>centerSlice</li>\n</ul>\n<p>centerSlice和fit效果有些相似，当两者同时使用的时候，可能没有效果，可能无法看到图片，使用时需要谨慎一些。 centerSlice类型为Rect，centerSlice用于nine-patch image，即可拉伸图片，后续这一块需要仔细研究一下。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Rect.fromLTRB(this.left, this.top, this.right, this.bottom)</td>\n</tr>\n<tr>\n<td>Rect.fromLTWH(double left, double top, double width, double height)</td>\n</tr>\n<tr>\n<td>Rect.fromCircle({ required Offset center, required double radius })</td>\n</tr>\n<tr>\n<td>Rect.fromCenter({ required Offset center, required double width, required double height })</td>\n</tr>\n<tr>\n<td>Rect.fromPoints(Offset a, Offset b)</td>\n</tr>\n</tbody></table>\n<ul>\n<li>repeat</li>\n</ul>\n<p>repeat 是空白区域图片重复模式。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ImageRepeat.repeat</td>\n<td>全部填充图片</td>\n</tr>\n<tr>\n<td>ImageRepeat.repeatX</td>\n<td>水平重复</td>\n</tr>\n<tr>\n<td>ImageRepeat.repeatY</td>\n<td>竖直重复</td>\n</tr>\n<tr>\n<td>ImageRepeat.noRepeat</td>\n<td>不重复</td>\n</tr>\n</tbody></table>\n<p>对于的效果依次如下： <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/57986d6cf4274deea6b69ee70df1f4e7~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> 由于图片本身已经占用了容器的水平位置上的全部空间，所以repeatX和noRepeat效果一样，repeat和repeatY效果一样。若图片水平和竖直方向都有剩余空间，则repeat等于repeatX和repeatY叠加。</p>\n<ul>\n<li>matchTextDirection</li>\n</ul>\n<p>matchTextDirection默认为false，表示背景图片和文字方向没有关系。当为true的时候，表示图片和文字方向一致。</p>\n<ul>\n<li>scale</li>\n</ul>\n<p>scale表示图片缩放，默认为1.0，表示按原图大小显示。小于1.0，则按比例缩小图片；大于1.0，则表示按比例放大图片。</p>\n<h5 id=\"border\"><a href=\"#border\" class=\"headerlink\" title=\"border\"></a>border</h5><p>border是边框的意思，设置该属性，就可以设置Contaier边框样式。border指定类型为BoxBorder，BoxBorder，InputBorder，OutlinedBorder虽都继承自ShapeBorder ，但这里BoxBorder也是抽象类，所以需要使用其子类Border或BorderDirectional，这里通常使用Border。Border有四种构造方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Border({BorderSide top: BorderSide.none, BorderSide right: BorderSide.none, BorderSide bottom: BorderSide.none, BorderSide left: BorderSide.none})</td>\n<td>可分别设置上下左右边框</td>\n</tr>\n<tr>\n<td>Border.all({Color color: const Color(0xFF000000), double width: 1.0, BorderStyle style: BorderStyle.solid})</td>\n<td>设置所有边框</td>\n</tr>\n<tr>\n<td>Border.fromBorderSide(BorderSide side)</td>\n<td>内边框</td>\n</tr>\n<tr>\n<td>Border.symmetric({BorderSide vertical: BorderSide.none, BorderSide horizontal: BorderSide.none})</td>\n<td>水平方向边框，竖直方向边框</td>\n</tr>\n</tbody></table>\n<p>通过上表可以发现，不管使用哪一种方法都要使用BorderSide，BorderSide指的是具体边框的样式，而Border指的是在哪个方向可以有边框。BorderSide比较简单：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> BorderSide(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color = <span class=\"keyword\">const</span> Color(<span class=\"number\">0xFF000000</span>),</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.width = <span class=\"number\">1.0</span>,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.style = BorderStyle.solid,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>color代表边框颜色，width代表边框宽度，style表示边框样式（默认实线-BorderStyle.solid）。具体效果如下图： <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/338d7a9a549b4309aabae85278a35d11~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"borderRadius\"><a href=\"#borderRadius\" class=\"headerlink\" title=\"borderRadius\"></a>borderRadius</h5><p>边角弧度，类型为BorderRadiusGeometry ，通常使用其实现类BorderRadius或BorderRadiusDirectional，其中BorderRadius最常用，以下是BorderRadius的一些用法：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BorderRadius.all(Radius radius)</td>\n<td>所有角的弧度</td>\n</tr>\n<tr>\n<td>BorderRadius.circular(double radius)</td>\n<td>所有角的弧度</td>\n</tr>\n<tr>\n<td>BorderRadius.horizontal({Radius left: Radius.zero, Radius right: Radius.zero})</td>\n<td>所有角的水平方向弧度</td>\n</tr>\n<tr>\n<td>BorderRadius.only({Radius topLeft: Radius.zero, Radius topRight: Radius.zero, Radius bottomLeft: Radius.zero, Radius bottomRight: Radius.zero})</td>\n<td>分别设置四角的弧度</td>\n</tr>\n<tr>\n<td>BorderRadius.vertical({Radius top: Radius.zero, Radius bottom: Radius.zero})</td>\n<td>所有角的垂直方向弧度</td>\n</tr>\n</tbody></table>\n<p>和border一样，BorderRadius中除了 BorderRadius.circular外都是指定哪个角设置弧度，具体实现由Radius实现。Radius中Radius.circular(double radius)指的是圆角的弧度一样，Radius.elliptical(double x,double y)表示水平和垂直方向的弧度自由定义。 <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/26e68484fc054378810f2fa21be29734~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> 总而言之，borderRadius针对于不同的角，不同方向，不同弧度都可以随意设置，比较灵活。</p>\n<h5 id=\"boxShadow\"><a href=\"#boxShadow\" class=\"headerlink\" title=\"boxShadow\"></a>boxShadow</h5><p>boxShadow设置Container阴影或投影，List boxShadow说明使用时是以数组的形式，对于稍显复杂的场景一层阴影无法达到要求，所有需要很多层阴影相互叠加来满足要求。BoxShadow使用相对简单</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> BoxShadow(</span><br><span class=\"line\">&#123;Color color: <span class=\"keyword\">const</span> Color(<span class=\"number\">0xFF000000</span>),</span><br><span class=\"line\">Offset offset: Offset.zero,</span><br><span class=\"line\"><span class=\"built_in\">double</span> blurRadius: <span class=\"number\">0.0</span>,</span><br><span class=\"line\"><span class=\"built_in\">double</span> spreadRadius: <span class=\"number\">0.0</span>&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>color是阴影的颜色，Offset是投影偏移量，blurRadius投影模糊程度，spreadRadius则是投影的扩散程度。 <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/7e12889e7ccd427186f86c0312bade62~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\">blurRadius取值不同，效果不同，取值越大，阴影的色彩越淡，但是扩散的范围越大。 <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/12d35552e60f4f0c87af5ce8144b1ee1~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> spreadRadius取值不同，阴影范围有明显区别。当取值大于0时，阴影向外扩散；当取值小于0时，阴影向内部聚集，若此时需要显示阴影，需要设置Offset，光线角度不同，阴影的投射方向也不同，所以设置内投影的时候，一定要设置Offset，让投影偏移出来，否则投影被遮挡无法显示。</p>\n<h5 id=\"gradient\"><a href=\"#gradient\" class=\"headerlink\" title=\"gradient\"></a>gradient</h5><p>gradient为设置渐变，渐变类型分为LinearGradient、RadialGradient、SweepGradient，分别为线性渐变、辐射渐变、扫描渐变。</p>\n<ul>\n<li>LinearGradient（线性渐变）</li>\n</ul>\n<p><img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/99cd24bd3d65407ba9e4a8df306a7d82~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> begin线性渐变起点，end为线性渐变终点，可水平，可竖直，可对角，根据需要自由选择。stops里面数值数量要和colors里面的数量保持一致。tileMode为颜色填充模式：</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TileMode.clamp</td>\n<td>夹钳模式，颜色与颜色之间有类似窄而明显的过渡</td>\n</tr>\n<tr>\n<td>TileMode.repeated</td>\n<td>重复</td>\n</tr>\n<tr>\n<td>TileMode.mirror</td>\n<td>镜像</td>\n</tr>\n<tr>\n<td>TileMode.decal</td>\n<td>贴花（探索中）</td>\n</tr>\n</tbody></table>\n<p>具体效果如下： <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/a097c28eae154f22ac0d4932f7073e59~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> 没有对TileMode.decal进行效果展示，是因为关于这个模式的解释比较模糊，也没有观察出到底有什么不同，需后续持续探索。 transform表示渐变色变换，一般有GradientRotation和SweepGradient供选择，主要用于SweepGradient和RadialGradient中。</p>\n<ul>\n<li>SweepGradient（扫描渐变）</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SweepGradient(&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.center = Alignment.center,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.startAngle = <span class=\"number\">0.0</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.endAngle = math.pi * <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"built_in\">List</span>&lt;Color&gt; colors,</span><br><span class=\"line\">    <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">double</span>&gt;? stops,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tileMode = TileMode.clamp,</span><br><span class=\"line\">    GradientTransform? transform,</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>默认中心的从Container中心开始，开始弧度为0.0，结束弧度为pi*2，也就是一周。运行效果如下： <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/dc27c7d62b9942feb5a605906f9536c4~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> 如果设置好颜色，再搭配上旋转动画，像雷达扫描、大转盘这种效果是可以轻松实现的。</p>\n<ul>\n<li>RadialGradient（辐射渐变）</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RadialGradient(&#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.center = Alignment.center,</span><br><span class=\"line\"><span class=\"keyword\">this</span>.radius = <span class=\"number\">0.5</span>,</span><br><span class=\"line\"><span class=\"keyword\">required</span> <span class=\"built_in\">List</span>&lt;Color&gt; colors,</span><br><span class=\"line\"><span class=\"built_in\">List</span>&lt;Color&gt;? stops,</span><br><span class=\"line\"><span class=\"keyword\">this</span>.tileMode = TileMode.clamp,</span><br><span class=\"line\"><span class=\"keyword\">this</span>.focal,</span><br><span class=\"line\"><span class=\"keyword\">this</span>.focalRadius = <span class=\"number\">0.0</span>,</span><br><span class=\"line\">GradientTransform? transform,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>效果如下： <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/0ec845126687477483a8891126a797c8~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> 第一张图片是没有设置焦点。第二张图片是设置了焦点，焦点中心为Container中心，焦点半径为0.1。第三张图同样设置了焦点，但是焦点的中心为centerLeft，且焦点半径为1.0，焦点半径单位不是像素，focalRadius和focal设置的值不同，效果区别较大，有时和想象中的不太一样，所以使用的时候需仔细调试一下。</p>\n<h5 id=\"backgroundBlendMode\"><a href=\"#backgroundBlendMode\" class=\"headerlink\" title=\"backgroundBlendMode\"></a>backgroundBlendMode</h5><p>backgroundBlendMode为背景混合模式，和前面讲的图片滤镜差不多，大概有将近30种模式，有些差别较大，有些区别不是很明显，需要开发者多多尝试，这里随机选取了四种，效果如下： <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/39135332b8684ee7890caaea495d8085~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"shape\"><a href=\"#shape\" class=\"headerlink\" title=\"shape\"></a>shape</h5><p>shape即为装饰的形状，默认为BoxShape.rectangle，用户也可以选择BoxShape.circle。BoxShape.circle是整个装饰为圆形，而RadialGradient是辐射状也为圆形，不容易区分到底是哪一个决定的，但LinearGradient区分比较开，如下图所示： <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/725a1faf253640febe05a55d3b6f0faa~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> 所以shape和RadialGradient、SweepGradient有时可以实现相同的效果，可灵活使用。</p>\n<h3 id=\"width，height\"><a href=\"#width，height\" class=\"headerlink\" title=\"width，height\"></a>width，height</h3><p>Container需要固定宽高，否则会报错。虽有时没有设置也能正常显示，是因为Container包含的组件的宽高固定了，只要子组件宽高固定，Container宽高也固定了，所以显示正常。</p>\n<h3 id=\"constraints\"><a href=\"#constraints\" class=\"headerlink\" title=\"constraints\"></a>constraints</h3><p>constraints是Container的约束，主要指定的是宽高上面的约束：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BoxConstraints(&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.minWidth = <span class=\"number\">0.0</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.maxWidth = <span class=\"built_in\">double</span>.infinity,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.minHeight = <span class=\"number\">0.0</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.maxHeight = <span class=\"built_in\">double</span>.infinity,</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>constraints可以指定Container的最大宽高和最小宽高，否则有时超出某些范围页面显示异常。和BoxConstraints一样，同样继承自Constraint还有SliverConstraints，SliverConstraints在Sliver相关组件中使用，这里就不多讲了。</p>\n<h3 id=\"transform\"><a href=\"#transform\" class=\"headerlink\" title=\"transform\"></a>transform</h3><p>矩阵变化，类型为Matrix4，即四阶矩阵。常用的有以下几种用法：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Matrix4(…)</td>\n<td>16个参数， 平移，旋转，缩放，扭曲等</td>\n</tr>\n<tr>\n<td>diagonal3Values</td>\n<td>缩放</td>\n</tr>\n<tr>\n<td>rotationX</td>\n<td>沿x旋转</td>\n</tr>\n<tr>\n<td>rotationY</td>\n<td>沿y旋转</td>\n</tr>\n<tr>\n<td>rotationZ</td>\n<td>沿z旋转</td>\n</tr>\n<tr>\n<td>columns</td>\n<td>设置新矩阵</td>\n</tr>\n<tr>\n<td>compose</td>\n<td>合并平移，旋转，缩放成新矩阵</td>\n</tr>\n<tr>\n<td>copy</td>\n<td>复制矩阵</td>\n</tr>\n<tr>\n<td>identity</td>\n<td>单位矩阵</td>\n</tr>\n<tr>\n<td>inverted</td>\n<td>矩阵逆运算</td>\n</tr>\n<tr>\n<td>outer</td>\n<td>合并</td>\n</tr>\n<tr>\n<td>skew</td>\n<td>扭曲</td>\n</tr>\n<tr>\n<td>skewX(</td>\n<td>x扭曲</td>\n</tr>\n<tr>\n<td>skewY</td>\n<td>y扭曲</td>\n</tr>\n<tr>\n<td>zero</td>\n<td>零矩阵</td>\n</tr>\n<tr>\n<td>fromList</td>\n<td>数组转矩阵</td>\n</tr>\n</tbody></table>\n<p>还有其他方法，这里就不一一列举。基本上所有的变换都是在Matrix4(…)基础上实现的，所以只要弄懂Matrix4(…) ，其他的也不是问题。高级变换是一定需要矩阵，复杂的动画也需要矩阵，基础的是四阶，复杂的有五阶、六阶等等，所以矩阵很重要。以下是几种简单的变换效果： <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/18b16f4dc62d4a01a6cd1cd47918ce36~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> 实际中变换后的图片的大小、方位、角度都有不同，效果无法在上图中完全体现出来。</p>\n<h3 id=\"transformAlignment\"><a href=\"#transformAlignment\" class=\"headerlink\" title=\"transformAlignment\"></a>transformAlignment</h3><p>变换锚点或者是变换重力方向和上文中的alignment是一样的，这里就不再叙述。</p>\n<h3 id=\"clipBehavior\"><a href=\"#clipBehavior\" class=\"headerlink\" title=\"clipBehavior\"></a>clipBehavior</h3><p>clipBehavior就是组件内容边缘的切割方式，分为四种：</p>\n<ul>\n<li>none</li>\n</ul>\n<p>不做处理。</p>\n<ul>\n<li>hardEdge</li>\n</ul>\n<p>当内容溢出时，hardEdge切割容器边缘最快，但是精准度欠佳，可能会有一些锯齿存在。</p>\n<ul>\n<li>antiAlias</li>\n</ul>\n<p>抗锯齿，速度要比hardEdge慢一些，但是边缘要平滑一些。</p>\n<ul>\n<li>antiAliasWithSaveLayer</li>\n</ul>\n<p>图层抗锯齿，就是容器中每一个图层都做抗锯齿处理，而antiAlias是在容器的轮廓做抗锯齿，antiAliasWithSaveLayer效果肯定会更好更平滑，但是速度最慢，如果没有明确指明，建议使用antiAlias，这样效果和性能能够达到较好的平衡。</p>\n<h3 id=\"Container\"><a href=\"#Container\" class=\"headerlink\" title=\"Container\"></a>Container</h3><p>查看Container对于各种属性的处理如下：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span></span><br><span class=\"line\"> Widget build(BuildContext context) &#123;</span><br><span class=\"line\">   Widget? current = child;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span> &amp;&amp; (constraints == <span class=\"keyword\">null</span> || !constraints!.isTight)) &#123;</span><br><span class=\"line\">     current = LimitedBox(</span><br><span class=\"line\">       maxWidth: <span class=\"number\">0.0</span>,</span><br><span class=\"line\">       maxHeight: <span class=\"number\">0.0</span>,</span><br><span class=\"line\">       child: ConstrainedBox(constraints: <span class=\"keyword\">const</span> BoxConstraints.expand()),</span><br><span class=\"line\">     );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (alignment != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">     current = Align(alignment: alignment!, child: current);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">final</span> EdgeInsetsGeometry? effectivePadding = _paddingIncludingDecoration;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (effectivePadding != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">     current = Padding(padding: effectivePadding, child: current);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (color != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">     current = ColoredBox(color: color!, child: current);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (clipBehavior != Clip.none) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">assert</span>(decoration != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">     current = ClipPath(</span><br><span class=\"line\">       clipper: _DecorationClipper(</span><br><span class=\"line\">         textDirection: Directionality.maybeOf(context),</span><br><span class=\"line\">         decoration: decoration!,</span><br><span class=\"line\">       ),</span><br><span class=\"line\">       clipBehavior: clipBehavior,</span><br><span class=\"line\">       child: current,</span><br><span class=\"line\">     );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (decoration != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">     current = DecoratedBox(decoration: decoration!, child: current);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (foregroundDecoration != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">     current = DecoratedBox(</span><br><span class=\"line\">       decoration: foregroundDecoration!,</span><br><span class=\"line\">       position: DecorationPosition.foreground,</span><br><span class=\"line\">       child: current,</span><br><span class=\"line\">     );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (constraints != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">     current = ConstrainedBox(constraints: constraints!, child: current);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (margin != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">     current = Padding(padding: margin!, child: current);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (transform != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">     current = Transform(transform: transform!, child: current, alignment: transformAlignment);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> current!;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>Container并非是单元组件不可再次拆分，恰恰相反，Container中多数属性都有关联组件，所以当属性被设置的时候，也是调用了该属性关联的组件，然后在此基础上再依次进行嵌套，最后套成Container，所以Container是由其他组件组成的。 本文是对Container的属性进行单独解析，实际使用时，大多都是各种属性相互配合使用，实现的效果也要比文中呈现的效果要丰富得多。</p>\n<h1 id=\"注\"><a href=\"#注\" class=\"headerlink\" title=\"注\"></a>注</h1><ul>\n<li>文中有很多遗漏，错误，不准确的，欢迎补充批评指正。</li>\n<li>熟悉基础，可以帮助开发者用简单、少量、高效的代码解决复杂问题。</li>\n</ul>\n","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"excerpt":"","more":"<h1 id=\"Flutter-Container详解\"><a href=\"#Flutter-Container详解\" class=\"headerlink\" title=\"Flutter-Container详解\"></a>Flutter-Container详解</h1><h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>Container是一个拥有绘制、定位、调整大小的 widget，是开发中最常用、最基础的组件。虽然最基础但不可小觑，熟悉每一个属性可以帮助我们更好更快的实现想要的效果，避免走弯路，也能避免代码冗余。本文主要针对其属性进行讲解。</p>\n<h1 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h1><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Container(&#123;</span><br><span class=\"line\">  Key? key,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.alignment,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.padding,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.decoration,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.foregroundDecoration,</span><br><span class=\"line\">  <span class=\"built_in\">double?</span> width,</span><br><span class=\"line\">  <span class=\"built_in\">double?</span> height,</span><br><span class=\"line\">  BoxConstraints? constraints,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.margin,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.transform,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.transformAlignment,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.child,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.clipBehavior = Clip.none,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h3><p>key用于控制控件如何取代树中的另一个控件，即若widget指定了相同的key，则这些widget可以复用。 如果widget的key值不为空，会判断key._currentElement值所指向的widget，和当前widget的类型key都相同，那么就从旧的父节点上移除，作为当前的节点的子widget之一， 否则将进行真实的创建新的Element。若开发中对组建的使用没有较高要求，一般不设置该属性。</p>\n<h3 id=\"alignment\"><a href=\"#alignment\" class=\"headerlink\" title=\"alignment\"></a>alignment</h3><p>alignment可以理解为Container内容的锚点位置或重力方向，锚点在哪，内容就从哪里开始。alignment的类型为AlignmentGeometry类型，通常我们会使用其实现类Alignment来进行设置。AlignmentGeometry属于抽象类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@immutable</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlignmentGeometry</span> </span>&#123;...&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>一般不直接使用AlignmentGeometry ，而是使用其实现类。Flutter中实现或继承了AlignmentGeometry的公共可直接调用的类有两个：Alignment，AlignmentDirectional。这两个实现类的使用方法和相似，可以直接调用其内部属性：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> Alignment topLeft = Alignment(<span class=\"number\">-1.0</span>, <span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> Alignment topCenter = Alignment(<span class=\"number\">0.0</span>, <span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> Alignment topRight = Alignment(<span class=\"number\">1.0</span>, <span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> Alignment centerLeft = Alignment(<span class=\"number\">-1.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> Alignment center = Alignment(<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> Alignment centerRight = Alignment(<span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> Alignment bottomLeft = Alignment(<span class=\"number\">-1.0</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> Alignment bottomCenter = Alignment(<span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> Alignment bottomRight = Alignment(<span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>使用的时候直接用Alignment.topLeft调用即可，也可直接设置参数数值比如Alignment(-1.0, -1.0)即可。根据设置不同的alignment属性值，视图效果也是不一样的： <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/b3681934fb184cce9f9396f0bf41b653~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> 若在其他组件中需要设置TextDirection，可以考虑使用AlignmentDirectional。AlignmentDirectional和Alignment差不多：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> AlignmentDirectional topStart = AlignmentDirectional(<span class=\"number\">-1.0</span>, <span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> AlignmentDirectional topCenter = AlignmentDirectional(<span class=\"number\">0.0</span>, <span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> AlignmentDirectional topEnd = AlignmentDirectional(<span class=\"number\">1.0</span>, <span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> AlignmentDirectional centerStart = AlignmentDirectional(<span class=\"number\">-1.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> AlignmentDirectional center = AlignmentDirectional(<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> AlignmentDirectional centerEnd = AlignmentDirectional(<span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> AlignmentDirectional bottomStart = AlignmentDirectional(<span class=\"number\">-1.0</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> AlignmentDirectional bottomCenter = AlignmentDirectional(<span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> AlignmentDirectional bottomEnd = AlignmentDirectional(<span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>使用方法和Alignment一样，不再叙述。</p>\n<h3 id=\"padding、margin\"><a href=\"#padding、margin\" class=\"headerlink\" title=\"padding、margin\"></a>padding、margin</h3><p>padding为内边距，margin为外边距。 <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/52b995b0a8af4963b960e1e85529be46~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"></p>\n<p>针对于上图中Container2，Container1与Container2之间的边框距离称之为margin，Container2与内容之间距离为padding。通常margin和padding使用EdgeInsets，EdgeInsets使用方法如下：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>使用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>EdgeInsets.fromLTRB(this.left, this.top, this.right, this.bottom)</td>\n<td>左上右下依次填写</td>\n</tr>\n<tr>\n<td>EdgeInsets.all(double value)</td>\n<td>所有边距一样</td>\n</tr>\n<tr>\n<td>EdgeInsets.only({this.left = 0.0,this.top = 0.0,this.right = 0.0,this.bottom = 0.0, })</td>\n<td>左上右下可选择设置</td>\n</tr>\n<tr>\n<td>EdgeInsets zero</td>\n<td>左上右下都为0</td>\n</tr>\n<tr>\n<td>EdgeInsets.fromWindowPadding(ui.WindowPadding padding, double devicePixelRatio)</td>\n<td>左上右下距离窗口的边距，和设备像素比，而不是距离父组件的边距</td>\n</tr>\n</tbody></table>\n<p>EdgeInsets继承于EdgeInsetsGeometry，和之类似的还有EdgeInsetsDirectional，同样继承自EdgeInsetsGeometry，暴露出的方法有：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EdgeInsetsDirectional</span> <span class=\"keyword\">extends</span> <span class=\"title\">EdgeInsetsGeometry</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> EdgeInsetsDirectional.fromSTEB(<span class=\"keyword\">this</span>.start, <span class=\"keyword\">this</span>.top, <span class=\"keyword\">this</span>.end, <span class=\"keyword\">this</span>.bottom);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> EdgeInsetsDirectional.only(&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.start = <span class=\"number\">0.0</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.top = <span class=\"number\">0.0</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.end = <span class=\"number\">0.0</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bottom = <span class=\"number\">0.0</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> EdgeInsetsDirectional zero = EdgeInsetsDirectional.only();</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>EdgeInsetsDirectional使用方法和EdgeInsets类似，多用于TextDirection。</p>\n<h3 id=\"color\"><a href=\"#color\" class=\"headerlink\" title=\"color\"></a>color</h3><p>color为Container颜色，设置颜色通常可以调用Colors.white，Colors.red等Flutter定义好的颜色，如没有适合的颜色，可以使用Color(0xFFFFFFFF)，自定义颜色，0x代表16进制，前面两个FF代表透明度（Android中可以不写，但Flutter中不可省略），后面6个F代表颜色数值。以Color(0xFFFFFFFF)为例，以下表格对Color的使用进行说明</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Color(0xFFFFFFFF).value</td>\n<td>获取颜色数值(0-255)</td>\n</tr>\n<tr>\n<td>Color(0xFFFFFFFF).red</td>\n<td>获取颜色中红色</td>\n</tr>\n<tr>\n<td>Color(0xFFFFFFFF).blue</td>\n<td>获取颜色中蓝色</td>\n</tr>\n<tr>\n<td>Color(0xFFFFFFFF).opacity</td>\n<td>获取颜色不透明度(0.0-1.0)</td>\n</tr>\n<tr>\n<td>Color(0xFFFFFFFF).alpha</td>\n<td>获取颜色透明度</td>\n</tr>\n<tr>\n<td>Color(0xFFFFFFFF).green</td>\n<td>获取颜色中绿色</td>\n</tr>\n<tr>\n<td>Color(0xFFFFFFFF).withOpacity(opacity)</td>\n<td>设置颜色不透明度</td>\n</tr>\n<tr>\n<td>Color(0xFFFFFFFF).computeLuminance()</td>\n<td>计算颜色亮度(0-1)</td>\n</tr>\n<tr>\n<td>Color(0xFFFFFFFF).withAlpha(a)</td>\n<td>设置颜色透明度 (0-255)</td>\n</tr>\n<tr>\n<td>Color(0xFFFFFFFF).withBlue(b)</td>\n<td>设置颜色中蓝色值(0-255)</td>\n</tr>\n<tr>\n<td>Color(0xFFFFFFFF).withGreen(g)</td>\n<td>设置颜色中绿值</td>\n</tr>\n<tr>\n<td>Color(0xFFFFFFFF).withRed(r)</td>\n<td>设置颜色中红色值</td>\n</tr>\n</tbody></table>\n<p>关于Color大多有这几个常用的方法，若Container设置了decoration，Container的color就不要设置了，两者冲突会报错，以decoration中的color为准。</p>\n<h3 id=\"decoration，foregroundDecoration\"><a href=\"#decoration，foregroundDecoration\" class=\"headerlink\" title=\"decoration，foregroundDecoration\"></a>decoration，foregroundDecoration</h3><p>decoration为背景装饰，foregroundDecoration为前景装饰。简单理解就是设置样式，不仅仅是设置颜色，还包括形状、图片、渐变、阴影、模糊等。 decoration指定类型为Decoration，同样Decoration为抽象类，没有具体的实现，需要使用其实现类或子类，其实现类主要有BoxDecoration、FlutterLogoDecoration、UnderlineTabIndicator、ShapeDecoration。Container中通常使用BoxDecoration，BoxDecoration有如下几个参数：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> BoxDecoration(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.image,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.border,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.borderRadius,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.boxShadow,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.gradient,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.backgroundBlendMode,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.shape = BoxShape.rectangle,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"color-1\"><a href=\"#color-1\" class=\"headerlink\" title=\"color\"></a>color</h5><p>颜色直接在BoxDecoration中设置即可，以下分别是红色和蓝色的效果图 <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/41646f7a778f4c76aadf7c0eacff70fb~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"image\"><a href=\"#image\" class=\"headerlink\" title=\"image\"></a>image</h5><p>image就是设置装饰图片，图片分为资源图片、本地图片和网络图片，这里只能使用DecorationImage</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> DecorationImage(&#123;</span><br><span class=\"line\">   <span class=\"keyword\">required</span> <span class=\"keyword\">this</span>.image,</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.onError,</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.colorFilter,</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.fit,</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.alignment = Alignment.center,</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.centerSlice,</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.repeat = ImageRepeat.noRepeat,</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.matchTextDirection = <span class=\"keyword\">false</span>,</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.scale = <span class=\"number\">1.0</span></span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>image</li>\n</ul>\n<p>DecorationImage中指定了image的类型必须是ImageProvider，也就是这里使用的是AssetImage()、NetworkImage()、FileImage()，而不是Image.asset()、Image.net()、Image.file()等。 <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/f0cae560c70544c79980a29d78241b36~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> 左图为AssetImage，右图为NetworkImage，FileImage()访问的是手机中的图片，和前两者一样，只要拿到路径都不是问题。</p>\n<ul>\n<li>onError</li>\n</ul>\n<p>onError指的是图片错误监听，万一图片格式不对，大小不对，网络出错，加载出错，开发者需要知道错在哪里了，然后做错误处理。</p>\n<ul>\n<li>colorFilter</li>\n</ul>\n<p>colorFilter就是相当于给图片加上一层滤镜，以上图中左边图片为例，ColorFilter使用方式有四种：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ColorFilter.mode(Color color, BlendMode blendMode)</td>\n<td>添加指定混合模式指定颜色的滤镜，BlendMode 大概有三十种，用户自由选择</td>\n</tr>\n<tr>\n<td>ColorFilter.matrix(List matrix)</td>\n<td>矩阵混合</td>\n</tr>\n<tr>\n<td>ColorFilter.linearToSrgbGamma()</td>\n<td>将sRGB伽马曲线应用于RGB通道</td>\n</tr>\n<tr>\n<td>ColorFilter.srgbToLinearGamma()</td>\n<td>将sRGB伽马曲线逆应用于RGB通道</td>\n</tr>\n</tbody></table>\n<p>效果： <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/10e86695928a4d4e9a0e9213bd660adf~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> 通过上图可以发现，同一图片使用不同的滤镜，效果大不相同。如果需要开发图片滤镜功能，这一块会有大用处。</p>\n<ul>\n<li>fit</li>\n</ul>\n<p>fit指的是图片适配模式，使用BoxFit即可，BoxFit也提供了几种模式供选择。</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>fill</td>\n<td>根据图片比例填充</td>\n</tr>\n<tr>\n<td>contain</td>\n<td>容器范围内尽可能最大</td>\n</tr>\n<tr>\n<td>cover</td>\n<td>覆盖整个容器</td>\n</tr>\n<tr>\n<td>fitWidth</td>\n<td>宽度适应</td>\n</tr>\n<tr>\n<td>fitHeight</td>\n<td>高度适应</td>\n</tr>\n<tr>\n<td>none</td>\n<td>无</td>\n</tr>\n<tr>\n<td>scaleDown</td>\n<td>等比例缩放</td>\n</tr>\n</tbody></table>\n<p>各种模式依次效果如下： <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/295cfc1025164faa939144c9abf10b53~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> 上图中图片较小，容器固定，有些图片看不出区别，而实际使用过程中不同模式之间差别较大，以实际为准。</p>\n<ul>\n<li>alignment</li>\n</ul>\n<p>alignment 同文章开头的alignment一样，不再叙述。</p>\n<ul>\n<li>centerSlice</li>\n</ul>\n<p>centerSlice和fit效果有些相似，当两者同时使用的时候，可能没有效果，可能无法看到图片，使用时需要谨慎一些。 centerSlice类型为Rect，centerSlice用于nine-patch image，即可拉伸图片，后续这一块需要仔细研究一下。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Rect.fromLTRB(this.left, this.top, this.right, this.bottom)</td>\n</tr>\n<tr>\n<td>Rect.fromLTWH(double left, double top, double width, double height)</td>\n</tr>\n<tr>\n<td>Rect.fromCircle({ required Offset center, required double radius })</td>\n</tr>\n<tr>\n<td>Rect.fromCenter({ required Offset center, required double width, required double height })</td>\n</tr>\n<tr>\n<td>Rect.fromPoints(Offset a, Offset b)</td>\n</tr>\n</tbody></table>\n<ul>\n<li>repeat</li>\n</ul>\n<p>repeat 是空白区域图片重复模式。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ImageRepeat.repeat</td>\n<td>全部填充图片</td>\n</tr>\n<tr>\n<td>ImageRepeat.repeatX</td>\n<td>水平重复</td>\n</tr>\n<tr>\n<td>ImageRepeat.repeatY</td>\n<td>竖直重复</td>\n</tr>\n<tr>\n<td>ImageRepeat.noRepeat</td>\n<td>不重复</td>\n</tr>\n</tbody></table>\n<p>对于的效果依次如下： <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/57986d6cf4274deea6b69ee70df1f4e7~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> 由于图片本身已经占用了容器的水平位置上的全部空间，所以repeatX和noRepeat效果一样，repeat和repeatY效果一样。若图片水平和竖直方向都有剩余空间，则repeat等于repeatX和repeatY叠加。</p>\n<ul>\n<li>matchTextDirection</li>\n</ul>\n<p>matchTextDirection默认为false，表示背景图片和文字方向没有关系。当为true的时候，表示图片和文字方向一致。</p>\n<ul>\n<li>scale</li>\n</ul>\n<p>scale表示图片缩放，默认为1.0，表示按原图大小显示。小于1.0，则按比例缩小图片；大于1.0，则表示按比例放大图片。</p>\n<h5 id=\"border\"><a href=\"#border\" class=\"headerlink\" title=\"border\"></a>border</h5><p>border是边框的意思，设置该属性，就可以设置Contaier边框样式。border指定类型为BoxBorder，BoxBorder，InputBorder，OutlinedBorder虽都继承自ShapeBorder ，但这里BoxBorder也是抽象类，所以需要使用其子类Border或BorderDirectional，这里通常使用Border。Border有四种构造方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Border({BorderSide top: BorderSide.none, BorderSide right: BorderSide.none, BorderSide bottom: BorderSide.none, BorderSide left: BorderSide.none})</td>\n<td>可分别设置上下左右边框</td>\n</tr>\n<tr>\n<td>Border.all({Color color: const Color(0xFF000000), double width: 1.0, BorderStyle style: BorderStyle.solid})</td>\n<td>设置所有边框</td>\n</tr>\n<tr>\n<td>Border.fromBorderSide(BorderSide side)</td>\n<td>内边框</td>\n</tr>\n<tr>\n<td>Border.symmetric({BorderSide vertical: BorderSide.none, BorderSide horizontal: BorderSide.none})</td>\n<td>水平方向边框，竖直方向边框</td>\n</tr>\n</tbody></table>\n<p>通过上表可以发现，不管使用哪一种方法都要使用BorderSide，BorderSide指的是具体边框的样式，而Border指的是在哪个方向可以有边框。BorderSide比较简单：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> BorderSide(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color = <span class=\"keyword\">const</span> Color(<span class=\"number\">0xFF000000</span>),</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.width = <span class=\"number\">1.0</span>,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.style = BorderStyle.solid,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>color代表边框颜色，width代表边框宽度，style表示边框样式（默认实线-BorderStyle.solid）。具体效果如下图： <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/338d7a9a549b4309aabae85278a35d11~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"borderRadius\"><a href=\"#borderRadius\" class=\"headerlink\" title=\"borderRadius\"></a>borderRadius</h5><p>边角弧度，类型为BorderRadiusGeometry ，通常使用其实现类BorderRadius或BorderRadiusDirectional，其中BorderRadius最常用，以下是BorderRadius的一些用法：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BorderRadius.all(Radius radius)</td>\n<td>所有角的弧度</td>\n</tr>\n<tr>\n<td>BorderRadius.circular(double radius)</td>\n<td>所有角的弧度</td>\n</tr>\n<tr>\n<td>BorderRadius.horizontal({Radius left: Radius.zero, Radius right: Radius.zero})</td>\n<td>所有角的水平方向弧度</td>\n</tr>\n<tr>\n<td>BorderRadius.only({Radius topLeft: Radius.zero, Radius topRight: Radius.zero, Radius bottomLeft: Radius.zero, Radius bottomRight: Radius.zero})</td>\n<td>分别设置四角的弧度</td>\n</tr>\n<tr>\n<td>BorderRadius.vertical({Radius top: Radius.zero, Radius bottom: Radius.zero})</td>\n<td>所有角的垂直方向弧度</td>\n</tr>\n</tbody></table>\n<p>和border一样，BorderRadius中除了 BorderRadius.circular外都是指定哪个角设置弧度，具体实现由Radius实现。Radius中Radius.circular(double radius)指的是圆角的弧度一样，Radius.elliptical(double x,double y)表示水平和垂直方向的弧度自由定义。 <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/26e68484fc054378810f2fa21be29734~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> 总而言之，borderRadius针对于不同的角，不同方向，不同弧度都可以随意设置，比较灵活。</p>\n<h5 id=\"boxShadow\"><a href=\"#boxShadow\" class=\"headerlink\" title=\"boxShadow\"></a>boxShadow</h5><p>boxShadow设置Container阴影或投影，List boxShadow说明使用时是以数组的形式，对于稍显复杂的场景一层阴影无法达到要求，所有需要很多层阴影相互叠加来满足要求。BoxShadow使用相对简单</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> BoxShadow(</span><br><span class=\"line\">&#123;Color color: <span class=\"keyword\">const</span> Color(<span class=\"number\">0xFF000000</span>),</span><br><span class=\"line\">Offset offset: Offset.zero,</span><br><span class=\"line\"><span class=\"built_in\">double</span> blurRadius: <span class=\"number\">0.0</span>,</span><br><span class=\"line\"><span class=\"built_in\">double</span> spreadRadius: <span class=\"number\">0.0</span>&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>color是阴影的颜色，Offset是投影偏移量，blurRadius投影模糊程度，spreadRadius则是投影的扩散程度。 <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/7e12889e7ccd427186f86c0312bade62~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\">blurRadius取值不同，效果不同，取值越大，阴影的色彩越淡，但是扩散的范围越大。 <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/12d35552e60f4f0c87af5ce8144b1ee1~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> spreadRadius取值不同，阴影范围有明显区别。当取值大于0时，阴影向外扩散；当取值小于0时，阴影向内部聚集，若此时需要显示阴影，需要设置Offset，光线角度不同，阴影的投射方向也不同，所以设置内投影的时候，一定要设置Offset，让投影偏移出来，否则投影被遮挡无法显示。</p>\n<h5 id=\"gradient\"><a href=\"#gradient\" class=\"headerlink\" title=\"gradient\"></a>gradient</h5><p>gradient为设置渐变，渐变类型分为LinearGradient、RadialGradient、SweepGradient，分别为线性渐变、辐射渐变、扫描渐变。</p>\n<ul>\n<li>LinearGradient（线性渐变）</li>\n</ul>\n<p><img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/99cd24bd3d65407ba9e4a8df306a7d82~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> begin线性渐变起点，end为线性渐变终点，可水平，可竖直，可对角，根据需要自由选择。stops里面数值数量要和colors里面的数量保持一致。tileMode为颜色填充模式：</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TileMode.clamp</td>\n<td>夹钳模式，颜色与颜色之间有类似窄而明显的过渡</td>\n</tr>\n<tr>\n<td>TileMode.repeated</td>\n<td>重复</td>\n</tr>\n<tr>\n<td>TileMode.mirror</td>\n<td>镜像</td>\n</tr>\n<tr>\n<td>TileMode.decal</td>\n<td>贴花（探索中）</td>\n</tr>\n</tbody></table>\n<p>具体效果如下： <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/a097c28eae154f22ac0d4932f7073e59~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> 没有对TileMode.decal进行效果展示，是因为关于这个模式的解释比较模糊，也没有观察出到底有什么不同，需后续持续探索。 transform表示渐变色变换，一般有GradientRotation和SweepGradient供选择，主要用于SweepGradient和RadialGradient中。</p>\n<ul>\n<li>SweepGradient（扫描渐变）</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SweepGradient(&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.center = Alignment.center,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.startAngle = <span class=\"number\">0.0</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.endAngle = math.pi * <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"built_in\">List</span>&lt;Color&gt; colors,</span><br><span class=\"line\">    <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">double</span>&gt;? stops,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tileMode = TileMode.clamp,</span><br><span class=\"line\">    GradientTransform? transform,</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>默认中心的从Container中心开始，开始弧度为0.0，结束弧度为pi*2，也就是一周。运行效果如下： <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/dc27c7d62b9942feb5a605906f9536c4~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> 如果设置好颜色，再搭配上旋转动画，像雷达扫描、大转盘这种效果是可以轻松实现的。</p>\n<ul>\n<li>RadialGradient（辐射渐变）</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RadialGradient(&#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.center = Alignment.center,</span><br><span class=\"line\"><span class=\"keyword\">this</span>.radius = <span class=\"number\">0.5</span>,</span><br><span class=\"line\"><span class=\"keyword\">required</span> <span class=\"built_in\">List</span>&lt;Color&gt; colors,</span><br><span class=\"line\"><span class=\"built_in\">List</span>&lt;Color&gt;? stops,</span><br><span class=\"line\"><span class=\"keyword\">this</span>.tileMode = TileMode.clamp,</span><br><span class=\"line\"><span class=\"keyword\">this</span>.focal,</span><br><span class=\"line\"><span class=\"keyword\">this</span>.focalRadius = <span class=\"number\">0.0</span>,</span><br><span class=\"line\">GradientTransform? transform,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>效果如下： <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/0ec845126687477483a8891126a797c8~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> 第一张图片是没有设置焦点。第二张图片是设置了焦点，焦点中心为Container中心，焦点半径为0.1。第三张图同样设置了焦点，但是焦点的中心为centerLeft，且焦点半径为1.0，焦点半径单位不是像素，focalRadius和focal设置的值不同，效果区别较大，有时和想象中的不太一样，所以使用的时候需仔细调试一下。</p>\n<h5 id=\"backgroundBlendMode\"><a href=\"#backgroundBlendMode\" class=\"headerlink\" title=\"backgroundBlendMode\"></a>backgroundBlendMode</h5><p>backgroundBlendMode为背景混合模式，和前面讲的图片滤镜差不多，大概有将近30种模式，有些差别较大，有些区别不是很明显，需要开发者多多尝试，这里随机选取了四种，效果如下： <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/39135332b8684ee7890caaea495d8085~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"shape\"><a href=\"#shape\" class=\"headerlink\" title=\"shape\"></a>shape</h5><p>shape即为装饰的形状，默认为BoxShape.rectangle，用户也可以选择BoxShape.circle。BoxShape.circle是整个装饰为圆形，而RadialGradient是辐射状也为圆形，不容易区分到底是哪一个决定的，但LinearGradient区分比较开，如下图所示： <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/725a1faf253640febe05a55d3b6f0faa~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> 所以shape和RadialGradient、SweepGradient有时可以实现相同的效果，可灵活使用。</p>\n<h3 id=\"width，height\"><a href=\"#width，height\" class=\"headerlink\" title=\"width，height\"></a>width，height</h3><p>Container需要固定宽高，否则会报错。虽有时没有设置也能正常显示，是因为Container包含的组件的宽高固定了，只要子组件宽高固定，Container宽高也固定了，所以显示正常。</p>\n<h3 id=\"constraints\"><a href=\"#constraints\" class=\"headerlink\" title=\"constraints\"></a>constraints</h3><p>constraints是Container的约束，主要指定的是宽高上面的约束：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BoxConstraints(&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.minWidth = <span class=\"number\">0.0</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.maxWidth = <span class=\"built_in\">double</span>.infinity,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.minHeight = <span class=\"number\">0.0</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.maxHeight = <span class=\"built_in\">double</span>.infinity,</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>constraints可以指定Container的最大宽高和最小宽高，否则有时超出某些范围页面显示异常。和BoxConstraints一样，同样继承自Constraint还有SliverConstraints，SliverConstraints在Sliver相关组件中使用，这里就不多讲了。</p>\n<h3 id=\"transform\"><a href=\"#transform\" class=\"headerlink\" title=\"transform\"></a>transform</h3><p>矩阵变化，类型为Matrix4，即四阶矩阵。常用的有以下几种用法：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Matrix4(…)</td>\n<td>16个参数， 平移，旋转，缩放，扭曲等</td>\n</tr>\n<tr>\n<td>diagonal3Values</td>\n<td>缩放</td>\n</tr>\n<tr>\n<td>rotationX</td>\n<td>沿x旋转</td>\n</tr>\n<tr>\n<td>rotationY</td>\n<td>沿y旋转</td>\n</tr>\n<tr>\n<td>rotationZ</td>\n<td>沿z旋转</td>\n</tr>\n<tr>\n<td>columns</td>\n<td>设置新矩阵</td>\n</tr>\n<tr>\n<td>compose</td>\n<td>合并平移，旋转，缩放成新矩阵</td>\n</tr>\n<tr>\n<td>copy</td>\n<td>复制矩阵</td>\n</tr>\n<tr>\n<td>identity</td>\n<td>单位矩阵</td>\n</tr>\n<tr>\n<td>inverted</td>\n<td>矩阵逆运算</td>\n</tr>\n<tr>\n<td>outer</td>\n<td>合并</td>\n</tr>\n<tr>\n<td>skew</td>\n<td>扭曲</td>\n</tr>\n<tr>\n<td>skewX(</td>\n<td>x扭曲</td>\n</tr>\n<tr>\n<td>skewY</td>\n<td>y扭曲</td>\n</tr>\n<tr>\n<td>zero</td>\n<td>零矩阵</td>\n</tr>\n<tr>\n<td>fromList</td>\n<td>数组转矩阵</td>\n</tr>\n</tbody></table>\n<p>还有其他方法，这里就不一一列举。基本上所有的变换都是在Matrix4(…)基础上实现的，所以只要弄懂Matrix4(…) ，其他的也不是问题。高级变换是一定需要矩阵，复杂的动画也需要矩阵，基础的是四阶，复杂的有五阶、六阶等等，所以矩阵很重要。以下是几种简单的变换效果： <img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/18b16f4dc62d4a01a6cd1cd47918ce36~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"在这里插入图片描述\"> 实际中变换后的图片的大小、方位、角度都有不同，效果无法在上图中完全体现出来。</p>\n<h3 id=\"transformAlignment\"><a href=\"#transformAlignment\" class=\"headerlink\" title=\"transformAlignment\"></a>transformAlignment</h3><p>变换锚点或者是变换重力方向和上文中的alignment是一样的，这里就不再叙述。</p>\n<h3 id=\"clipBehavior\"><a href=\"#clipBehavior\" class=\"headerlink\" title=\"clipBehavior\"></a>clipBehavior</h3><p>clipBehavior就是组件内容边缘的切割方式，分为四种：</p>\n<ul>\n<li>none</li>\n</ul>\n<p>不做处理。</p>\n<ul>\n<li>hardEdge</li>\n</ul>\n<p>当内容溢出时，hardEdge切割容器边缘最快，但是精准度欠佳，可能会有一些锯齿存在。</p>\n<ul>\n<li>antiAlias</li>\n</ul>\n<p>抗锯齿，速度要比hardEdge慢一些，但是边缘要平滑一些。</p>\n<ul>\n<li>antiAliasWithSaveLayer</li>\n</ul>\n<p>图层抗锯齿，就是容器中每一个图层都做抗锯齿处理，而antiAlias是在容器的轮廓做抗锯齿，antiAliasWithSaveLayer效果肯定会更好更平滑，但是速度最慢，如果没有明确指明，建议使用antiAlias，这样效果和性能能够达到较好的平衡。</p>\n<h3 id=\"Container\"><a href=\"#Container\" class=\"headerlink\" title=\"Container\"></a>Container</h3><p>查看Container对于各种属性的处理如下：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span></span><br><span class=\"line\"> Widget build(BuildContext context) &#123;</span><br><span class=\"line\">   Widget? current = child;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span> &amp;&amp; (constraints == <span class=\"keyword\">null</span> || !constraints!.isTight)) &#123;</span><br><span class=\"line\">     current = LimitedBox(</span><br><span class=\"line\">       maxWidth: <span class=\"number\">0.0</span>,</span><br><span class=\"line\">       maxHeight: <span class=\"number\">0.0</span>,</span><br><span class=\"line\">       child: ConstrainedBox(constraints: <span class=\"keyword\">const</span> BoxConstraints.expand()),</span><br><span class=\"line\">     );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (alignment != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">     current = Align(alignment: alignment!, child: current);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">final</span> EdgeInsetsGeometry? effectivePadding = _paddingIncludingDecoration;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (effectivePadding != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">     current = Padding(padding: effectivePadding, child: current);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (color != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">     current = ColoredBox(color: color!, child: current);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (clipBehavior != Clip.none) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">assert</span>(decoration != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">     current = ClipPath(</span><br><span class=\"line\">       clipper: _DecorationClipper(</span><br><span class=\"line\">         textDirection: Directionality.maybeOf(context),</span><br><span class=\"line\">         decoration: decoration!,</span><br><span class=\"line\">       ),</span><br><span class=\"line\">       clipBehavior: clipBehavior,</span><br><span class=\"line\">       child: current,</span><br><span class=\"line\">     );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (decoration != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">     current = DecoratedBox(decoration: decoration!, child: current);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (foregroundDecoration != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">     current = DecoratedBox(</span><br><span class=\"line\">       decoration: foregroundDecoration!,</span><br><span class=\"line\">       position: DecorationPosition.foreground,</span><br><span class=\"line\">       child: current,</span><br><span class=\"line\">     );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (constraints != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">     current = ConstrainedBox(constraints: constraints!, child: current);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (margin != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">     current = Padding(padding: margin!, child: current);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (transform != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">     current = Transform(transform: transform!, child: current, alignment: transformAlignment);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> current!;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>Container并非是单元组件不可再次拆分，恰恰相反，Container中多数属性都有关联组件，所以当属性被设置的时候，也是调用了该属性关联的组件，然后在此基础上再依次进行嵌套，最后套成Container，所以Container是由其他组件组成的。 本文是对Container的属性进行单独解析，实际使用时，大多都是各种属性相互配合使用，实现的效果也要比文中呈现的效果要丰富得多。</p>\n<h1 id=\"注\"><a href=\"#注\" class=\"headerlink\" title=\"注\"></a>注</h1><ul>\n<li>文中有很多遗漏，错误，不准确的，欢迎补充批评指正。</li>\n<li>熟悉基础，可以帮助开发者用简单、少量、高效的代码解决复杂问题。</li>\n</ul>\n"},{"title":"Flutter-MaterialApp详解","date":"2021-09-18T00:48:33.000Z","description":"Flutter-MaterialApp详解","top_img":"https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg","cover":"https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg","_content":"\n# Flutter-MaterialApp详解\n\n## Flutter整体结构图\n\n![img](https://gitee.com/gaoxianglong/picgo/raw/master/img/20191129195736853.png)\n\n#### Flutter Framework\n\n- Foundation、Animation、Painting、Gestures被合成了一个Dart UI层，对应的是Flutter中 `dart:ui` 包，是Flutter引擎暴露的底层UI库，主要提供动画、手势、绘制能力。\n\n- Rendering层是一个抽象布局层，依赖于Dart UI层，Rendering层会构建一个UI树、当UI树有变化时，会计算出有变化的部分，然后更新UI树，最终绘制在屏幕上\n\n- Widgets层是Flutter提供的一套基础组件库\n\n- Material、Cupertino是Flutter提供了两种视觉风格的组件库（Android、iOS)\n\n  #### Flutter Engine\n\n  这是一个纯C++实现的SDK，主要执行相关的渲染、线程管理、平台事件等操作。其中包括了Skia引擎、Dart运行时、文字排版引擎等。在调用`dart:ui`库是，其实最终会走到Engine层，实现真正的绘制逻辑.\n\n  #### Flutter Embedder\n\n  提供四个Task Runner，将引擎一直到平台中间层代码的渲染设置、原生插件、打包、线程管理、时间循环、交互操作等。\n\n- UI Runner 负责绑定渲染相关操作\n\n- GPU Runner 用户执行GPU指令\n\n- iOS Runner 处理图片数据、为GPU做准备的\n\n- Platform Runner 所有接口调用都使用该接口\n\n  ## 示例代码\n\n本文中很多效果都没有截图，可通过视频教程查看 [视频教程地址](https://www.bilibili.com/video/BV1BM4y1L71Z?p=2)\n\n## Material介绍\n\n> Material 组件（MDC）帮助开发者实现 [Material Design](https://material.io/design)。MDC 由谷歌团队的工程师和 UX 设计师创造，为 Android、iOS、Web 和 Flutter 提供很多美观实用的 UI 组件。\n\n## MaterialApp介绍\n\n`MaterialApp` 包含了许多的 `Widget` ，这些 `Widget` 通常是实现 [Material Design](https://material.io/design) 的应用程序所必须要的，包含的 `Widget` 可以在 [Material Components widgets](https://flutter.dev/docs/development/ui/widgets/material) 中查看所有。 了解基本的概念，接下来我们详细看一下 `MaterialApp` 具体怎么使用。\n\n#### Material属性和说明\n\n> 总共33个属性\n\n| **字段**                      | **属性**                        | **描述**                                   |\n| :---------------------------- | ------------------------------- | ------------------------------------------ |\n| navigatorKey                  | GlobalKey                       | 导航键                                     |\n| scaffoldMessengerKey          | GlobalKey                       | 脚手架键                                   |\n| home                          | Widget                          | 主页，应用打开时显示的页面                 |\n| routes                        | Map<String, WidgetBuilder>      | 应用程序顶级路由表                         |\n| initialRoute                  | String                          | 如果构建了导航器，则会显示第一个路由的名称 |\n| onGenerateRoute               | RouteFactory                    | 路由管理拦截器                             |\n| onGenerateInitialRoutes       | InitialRouteListFactory         | 生成初始化路由                             |\n| onUnknownRoute                | RouteFactory                    | 当onGenerateRoute无法生成路由时调用        |\n| navigatorObservers            | List                            | 创建导航器的观察者列表                     |\n| builder                       | TransitionBuilder               | 在导航器上面插入小部件                     |\n| title                         | String                          | 程序切换时显示的标题                       |\n| onGenerateTitle               | GenerateAppTitle                | 程序切换时生成标题字符串                   |\n| color                         | Color                           | 程序切换时应用图标背景颜色（仅安卓有效）   |\n| theme                         | ThemeData                       | 主题颜色                                   |\n| darkTheme                     | ThemeData                       | 暗黑模式主题颜色                           |\n| highContrastTheme             | ThemeData                       | 系统请求“高对比度”使用的主题               |\n| highContrastDarkTheme         | ThemeData                       | 系统请求“高对比度”暗黑模式下使用的主题颜色 |\n| themeMode                     | ThemeMode                       | 使用哪种模式的主题（默认跟随系统）         |\n| locale                        | Locale                          | 初始区域设置                               |\n| localizationsDelegates        | Iterable<LocalizationsDelegate> | 本地化代理                                 |\n| localeListResolutionCallback  | LocaleListResolutionCallback    | 失败或未提供设备的语言环境                 |\n| localeResolutionCallback      | LocaleResolutionCallback        | 负责计算语言环境                           |\n| supportedLocales              | Iterable                        | 本地化地区列表                             |\n| debugShowMaterialGrid         | bool                            | 绘制基线网格叠加层（仅debug模式）          |\n| showPerformanceOverlay        | bool                            | 显示性能叠加                               |\n| checkerboardRasterCacheImages | bool                            | 打开栅格缓存图像的棋盘格。                 |\n| checkerboardOffscreenLayers   | bool                            | 打开渲染到屏幕外位图的层的棋盘格。         |\n| showSemanticsDebugger         | bool                            | 打开显示可访问性信息的叠加层               |\n| debugShowCheckedModeBanner    | bool                            | 调试显示检查模式横幅                       |\n| shortcuts                     | Map<LogicalKeySet, Intent>      | 应用程序意图的键盘快捷键的默认映射。       |\n| actions                       | Map<Type, Action>               | 包含和定义用户操作的映射                   |\n| restorationScopeId            | String                          | 应用程序状态恢复的标识符                   |\n| scrollBehavior                | ScrollBehavior                  | 可滚动小部件的行为方式                     |\n\n## 构造函数\n\n##### 创建一个MaterialApp\n\n> MaterialApp(…)\n\n##### 创建一个使用 Router 而不是 Navigator 的 MaterialApp\n\n> MaterialApp.router(…)\n\n## 属性详解\n\n### 1、navigatorKey\n\n`navigatorKey` 相当于 `Navigator.of(context)` ，如果应用程序想实现无 `context` 跳转，那么可以通过设置该key, 通过 `navigatorKey.currentState.overlay.context` 获取全局context。\n\n#### 使用方法\n\n```dart\nGlobalKey<NavigatorState> _navigatorKey = GlobalKey(); \nMaterialApp(  \n    navigatorKey: _navigatorKey, \n); \n```\n\n### 2、scaffoldMessengerKey\n\nscaffoldMessengerKey` 主要是管理后代的 `Scaffolds`，可以实现无 `context` 调用 `snack bars\n\n#### 使用方法\n\n```dart\nGlobalKey<ScaffoldMessengerState> _scaffoldKey = GlobalKey(); \nMaterialApp( \n    scaffoldMessengerKey: _scaffoldKey, \n);\n_scaffoldKey.currentState.showSnackBar(\n    SnackBar(content: Text(\"show SnackBar\"))\n); \n```\n\n### 3、home\n\n程序进入后的第一个界面，传入一个 `Widget`\n\n##### 使用方法\n\n```dart\n... \nMaterialApp( \n    home: Scaffold(...),\n); \n... \n```\n\n### 4、routes\n\n生成路由表，以键值对形式传入 `key` 为路由名字， `value` 为对应的`Widget`\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    routes: {   \n        \"/home\": (_) => Home(), \n        \"/my\": (_) => My()  \n            //.... \n    }, \n); \n```\n\n### 5、initialRoute\n\n初始路由，如果设置了该参数并且在 `routes` 找到了对应的key，将会展示对应的 `Widget` ，否则展示 `home`\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    routes: {    \n        \"/home\": (_) => Home(),   \n        \"/my\": (_) => My()  \n    },   \n    initialRoute: \"/home\", \n) \n```\n\n### 6、onGenerateRoute\n\n当跳转路由时，如果在 `routes` 找不到对应的 `key` ，会执行该回调，会调用会返回一个 `RouteSettings` ，该对象中有 `name` 路由名称、 `arguments` 路由参数。\n\n##### 使用方法\n\n```dart\nMaterialApp(   \n    routes: {    \n        \"/home\": (_) => Home(),     \n        \"/my\": (_) => My()   \n    },  \n    initialRoute: \"/home\",  \n    onGenerateRoute: (setting) {    \n        // 这里可以做进一步的逻辑处理    \n        return MaterialPageRoute(builder: (_) => Home()); \n    }, \n) \n```\n\n### 7、onGenerateInitialRoutes\n\n如果提供了 `initialRoute` ，则用于生成初始路由的路由生成器回调，如果未设置此属性，则底层 [Navigator.onGenerateInitialRoutes](http://navigator.ongenerateinitialroutes/) 将默认为 [Navigator.defaultGenerateInitialRoutes](https://api.flutter.dev/flutter/widgets/Navigator/defaultGenerateInitialRoutes.html)。\n\n##### 使用方法\n\n```dart\nMaterialApp(\n    initialRoute: \"/home\",  \n    onGenerateInitialRoutes: (initialRoute) {  \n        return [   \n            MaterialPageRoute(builder: (_) => Home()), \n            MaterialPageRoute(builder: (_) => My()),   \n        ];\n    }\n) \n```\n\n### 8、onUnknownRoute\n\n效果和 `onGenerateRoute` 一样，只是先走 `onGenerateRoute` ，如果无法生成路由时则在调用 `onUnknownRoute` 。\n\n##### 使用方法\n\n```dart\nMaterialApp(  \n    routes: {    \n        \"/home\": (_) => Home(),   \n        \"/my\": (_) => My()    \n    },   \n    initialRoute: \"/home\",  \n    onGenerateRoute: (setting) {\n        return null; \n    },  \n    onUnknownRoute: (setting) {   \n        return MaterialPageRoute(builder: (_) => Home());  \n    }, \n) \n```\n\n### 9、navigatorObservers\n\n路由监听器，主要是就是监听页面路由堆栈的变化，当页面进行 `push` `pop` `remove` `replace` 等操作时会进行监听。\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    navigatorObservers: [ \n        MyObserver() \n    ], \n) \nclass MyObserver extends NavigatorObserver {  \n    @override  void didPush(Route route, Route previousRoute) {  \n        print(route); \n        print(previousRoute);   \n        super.didPush(route, previousRoute); \n    }\n} \n```\n\n### 10、builder\n\n当构建 `Widget` 前调用，主要用于字体大小、主题颜色等配置\n\n##### 使用方法\n\n```dart\nMaterialApp(  \n    routes: {    \n        \"/home\": (_) => Home(),  \n        \"/my\": (_) => My()  \n    }, \n    initialRoute: \"/home\",   \n    onGenerateRoute: (setting) {   \n        return null; \n    },  \n    onUnknownRoute: (setting) {    \n        return MaterialPageRoute(builder: (_) => Home());  \n    }, \t\n    builder: (_, child) {  \n        return Scaffold(\n            appBar: AppBar(title: Text(\"build\")), \n            body: child,\n        );  \n    },\n) \n```\n\n### 11、title\n\nAndroid：任务管理器的程序快照之上 IOS: 程序切换管理器中\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    title: 'Flutter应用', \n); \n```\n\n### 12、onGenerateTitle\n\n如果非空，则调用此回调函数以生成应用程序的标题字符串，否则会使用 `title` 。每次重建页面是该方法就会回调执行。\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    title: 'Flutter应用', \n    onGenerateTitle: (_) {  \n        return \"我的天\";   \n    },\n); \n```\n\n### 13、color\n\n设置该值的在程序切换时应用图标的背景颜色，当应用图标为透明时。\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    color: Colors.blue,\n) \n```\n\n### 14、theme\n\n如果指定了 `darkTheme` ，那么用于提供用户界面的深色版本。如果提供了 `darkTheme` ， `themeMode` 将控制将使用哪个主题。默认值是 `ThemeData.light()` 应用程序的主题颜色\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    theme: ThemeData(    \n        // 主要颜色 \n        primaryColor: Colors.red \n    ),\n) \n```\n\n### 15、darkTheme\n\n应用程序深色主题颜色\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    theme: ThemeData(   \n        // 主要颜色    \n        primaryColor: Colors.red \n    ),\n) \n```\n\n### 16、highContrastTheme\n\n当系统请求“高对比度”时使用的 `ThemeData` ，当该值为空时会用 `theme` 应用该主题\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    highContrastTheme: ThemeData(  \n        primaryColor: Colors.pink \n    ),\n) \n```\n\n### 17、highContrastDarkTheme\n\n当系统再暗黑模式下请求“高对比度”时使用的 `ThemeData` ，当该值为空时会用 `darkTheme` 应用该主题。\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    highContrastDarkTheme: ThemeData(\n        primaryColor: Colors.green\n    ), \n) \n```\n\n### 18、themeMode\n\n白天模式和暗黑模式模式切换，默认值为 `ThemeMode.system`\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    themeMode: ThemeMode.dark\n) \n```\n\n### 19、locale\n\n主要用于语言切换时，如果为 `null` 时使用系统区域\n\n##### 使用方法\n\n```dart\nMaterialApp(  \n    locale: Locale('zh', 'CN') // 中文简体 \n) \n```\n\n### 20、localizationsDelegates\n\n本地化委托\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    locale: Locale('zh', 'CN') // 中文简体 \n    localizationsDelegates: [  \n        GlobalMaterialLocalizations.delegate,  \n        GlobalWidgetsLocalizations.delegate, \n    ],\n) \n```\n\n### 21、supportedLocales\n\n当前应用支持的 `Locale` 列表\n\n##### 使用方法\n\n```dart\nMaterialApp(  \n    locale: Locale('zh', 'CN'), // 中文简体  \n    supportedLocales: [    \n        Locale('en', 'US'), //美国英语    \n        Locale(\"zh\", 'CN'), //中文简体  \n    ]\n) \n```\n\n### 22、localeListResolutionCallback\n\n监听系统语言切换事件，一些安卓系统特性，可设置多语言列表，默认以第一个列表为默认语言\n\n##### 使用方法\n\n```dart\nMaterialApp(  \n    locale: Locale('zh', 'CN'), // 中文简体  \n    supportedLocales: [   \n        Locale('en', 'US'), //美国英语   \n        Locale(\"zh\", 'CN'), //中文简体 \n    ],  \n    localeListResolutionCallback: (List<Locale> locales, Iterable<Locale> supportedLocales) \n    {    \n        // 系统切换语言时调用    \n        return Locale(\"zh\", 'CN'); \n    }, \n) \n```\n\n### 23、localeResolutionCallback\n\n监听系统语言切换事件\n\n##### 使用方法\n\n```dart\nMaterialApp(\n    locale: Locale('zh', 'CN'), // 中文简体  \n    supportedLocales: [   \n        Locale('en', 'US'), //美国英语  \n        Locale(\"zh\", 'CN'), //中文简体 \n    ],  \n    localeResolutionCallback: (Locale locale, Iterable<Locale> supportedLocales){   \n        return Locale(\"zh\", 'CN'); \n    },\n) \n```\n\n### 24、debugShowMaterialGrid\n\n在 `debug` 模式下展示基线网格\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    debugShowMaterialGrid: true\n) \n```\n\n### 25、showPerformanceOverlay\n\n显示性能叠加，开启此模式主要用于性能测试\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    showPerformanceOverlay: true \n) \n```\n\n### 26、checkerboardRasterCacheImages\n\n打开栅格缓存图像的棋盘格\n\n##### 使用方法\n\n```dart\nMaterialApp(\n    checkerboardRasterCacheImages: true\n) \n```\n\n### 27、checkerboardOffscreenLayers\n\n打开渲染到屏幕外位图的层的棋盘格\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    checkerboardOffscreenLayers: true\n) \n```\n\n### 28、showSemanticsDebugger\n\n打开显示可访问性信息的叠加层，展示组件之间的关系、占位大小\n\n##### 使用方法\n\n```dart\nMaterialApp(\n    showSemanticsDebugger: true \n) \n```\n\n### 29、debugShowCheckedModeBanner\n\n调试显示检查模式横幅\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    debugShowCheckedModeBanner: false\n) \n```\n\n### 30、shortcuts以及actions\n\n`shortcuts` 和 `actions` 是将物理键盘事件绑定到用户界面中的操作。 比如，要在您的应用程序中定义键盘快捷键，这里不做过多的描述，后面我会专门拿一个专题来讲解。\n\n### 31、restorationScopeId\n\n定义一个应用程序状态恢复的标识符，提供标识符会将 [RootRestorationScope](https://api.flutter.dev/flutter/widgets/RootRestorationScope-class.html) 插入 `widget` 层次结构，从而为后代 `widget` 启用状态恢复。还可以通过标识符使 `WidgetsApp` 构建的导航器恢复其状态（即恢复活动路由的历史堆栈），由于这里涉及的内容较多，后面会专门拿一个专题来讲解。\n\n### 32、scrollBehavior\n\n统一滚动行为设置，设置后子组件将返回对应的滚动行为\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    scrollBehavior: ScrollBehaviorModified()\n)  \nclass ScrollBehaviorModified extends ScrollBehavior { \n    const ScrollBehaviorModified();\n    @override  ScrollPhysics getScrollPhysics(BuildContext context) {  \n        switch (getPlatform(context)) {  \n            case TargetPlatform.iOS:   \n            case TargetPlatform.macOS:  \n            case TargetPlatform.android:   \n                return const BouncingScrollPhysics();  \n            case TargetPlatform.fuchsia:   \n            case TargetPlatform.linux: \n            case TargetPlatform.windows:     \n                return const ClampingScrollPhysics();  \n        }   \n        return null; \n    } \n}\n```\n\n","source":"_posts/Flutter-MaterialApp.md","raw":"---\ntitle: Flutter-MaterialApp详解\ndate: 2021-09-18 08:48:33\ntags: [笔记]\ncategories: flutter\ndescription: Flutter-MaterialApp详解\ntop_img: https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg\ncover: https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg\n---\n\n# Flutter-MaterialApp详解\n\n## Flutter整体结构图\n\n![img](https://gitee.com/gaoxianglong/picgo/raw/master/img/20191129195736853.png)\n\n#### Flutter Framework\n\n- Foundation、Animation、Painting、Gestures被合成了一个Dart UI层，对应的是Flutter中 `dart:ui` 包，是Flutter引擎暴露的底层UI库，主要提供动画、手势、绘制能力。\n\n- Rendering层是一个抽象布局层，依赖于Dart UI层，Rendering层会构建一个UI树、当UI树有变化时，会计算出有变化的部分，然后更新UI树，最终绘制在屏幕上\n\n- Widgets层是Flutter提供的一套基础组件库\n\n- Material、Cupertino是Flutter提供了两种视觉风格的组件库（Android、iOS)\n\n  #### Flutter Engine\n\n  这是一个纯C++实现的SDK，主要执行相关的渲染、线程管理、平台事件等操作。其中包括了Skia引擎、Dart运行时、文字排版引擎等。在调用`dart:ui`库是，其实最终会走到Engine层，实现真正的绘制逻辑.\n\n  #### Flutter Embedder\n\n  提供四个Task Runner，将引擎一直到平台中间层代码的渲染设置、原生插件、打包、线程管理、时间循环、交互操作等。\n\n- UI Runner 负责绑定渲染相关操作\n\n- GPU Runner 用户执行GPU指令\n\n- iOS Runner 处理图片数据、为GPU做准备的\n\n- Platform Runner 所有接口调用都使用该接口\n\n  ## 示例代码\n\n本文中很多效果都没有截图，可通过视频教程查看 [视频教程地址](https://www.bilibili.com/video/BV1BM4y1L71Z?p=2)\n\n## Material介绍\n\n> Material 组件（MDC）帮助开发者实现 [Material Design](https://material.io/design)。MDC 由谷歌团队的工程师和 UX 设计师创造，为 Android、iOS、Web 和 Flutter 提供很多美观实用的 UI 组件。\n\n## MaterialApp介绍\n\n`MaterialApp` 包含了许多的 `Widget` ，这些 `Widget` 通常是实现 [Material Design](https://material.io/design) 的应用程序所必须要的，包含的 `Widget` 可以在 [Material Components widgets](https://flutter.dev/docs/development/ui/widgets/material) 中查看所有。 了解基本的概念，接下来我们详细看一下 `MaterialApp` 具体怎么使用。\n\n#### Material属性和说明\n\n> 总共33个属性\n\n| **字段**                      | **属性**                        | **描述**                                   |\n| :---------------------------- | ------------------------------- | ------------------------------------------ |\n| navigatorKey                  | GlobalKey                       | 导航键                                     |\n| scaffoldMessengerKey          | GlobalKey                       | 脚手架键                                   |\n| home                          | Widget                          | 主页，应用打开时显示的页面                 |\n| routes                        | Map<String, WidgetBuilder>      | 应用程序顶级路由表                         |\n| initialRoute                  | String                          | 如果构建了导航器，则会显示第一个路由的名称 |\n| onGenerateRoute               | RouteFactory                    | 路由管理拦截器                             |\n| onGenerateInitialRoutes       | InitialRouteListFactory         | 生成初始化路由                             |\n| onUnknownRoute                | RouteFactory                    | 当onGenerateRoute无法生成路由时调用        |\n| navigatorObservers            | List                            | 创建导航器的观察者列表                     |\n| builder                       | TransitionBuilder               | 在导航器上面插入小部件                     |\n| title                         | String                          | 程序切换时显示的标题                       |\n| onGenerateTitle               | GenerateAppTitle                | 程序切换时生成标题字符串                   |\n| color                         | Color                           | 程序切换时应用图标背景颜色（仅安卓有效）   |\n| theme                         | ThemeData                       | 主题颜色                                   |\n| darkTheme                     | ThemeData                       | 暗黑模式主题颜色                           |\n| highContrastTheme             | ThemeData                       | 系统请求“高对比度”使用的主题               |\n| highContrastDarkTheme         | ThemeData                       | 系统请求“高对比度”暗黑模式下使用的主题颜色 |\n| themeMode                     | ThemeMode                       | 使用哪种模式的主题（默认跟随系统）         |\n| locale                        | Locale                          | 初始区域设置                               |\n| localizationsDelegates        | Iterable<LocalizationsDelegate> | 本地化代理                                 |\n| localeListResolutionCallback  | LocaleListResolutionCallback    | 失败或未提供设备的语言环境                 |\n| localeResolutionCallback      | LocaleResolutionCallback        | 负责计算语言环境                           |\n| supportedLocales              | Iterable                        | 本地化地区列表                             |\n| debugShowMaterialGrid         | bool                            | 绘制基线网格叠加层（仅debug模式）          |\n| showPerformanceOverlay        | bool                            | 显示性能叠加                               |\n| checkerboardRasterCacheImages | bool                            | 打开栅格缓存图像的棋盘格。                 |\n| checkerboardOffscreenLayers   | bool                            | 打开渲染到屏幕外位图的层的棋盘格。         |\n| showSemanticsDebugger         | bool                            | 打开显示可访问性信息的叠加层               |\n| debugShowCheckedModeBanner    | bool                            | 调试显示检查模式横幅                       |\n| shortcuts                     | Map<LogicalKeySet, Intent>      | 应用程序意图的键盘快捷键的默认映射。       |\n| actions                       | Map<Type, Action>               | 包含和定义用户操作的映射                   |\n| restorationScopeId            | String                          | 应用程序状态恢复的标识符                   |\n| scrollBehavior                | ScrollBehavior                  | 可滚动小部件的行为方式                     |\n\n## 构造函数\n\n##### 创建一个MaterialApp\n\n> MaterialApp(…)\n\n##### 创建一个使用 Router 而不是 Navigator 的 MaterialApp\n\n> MaterialApp.router(…)\n\n## 属性详解\n\n### 1、navigatorKey\n\n`navigatorKey` 相当于 `Navigator.of(context)` ，如果应用程序想实现无 `context` 跳转，那么可以通过设置该key, 通过 `navigatorKey.currentState.overlay.context` 获取全局context。\n\n#### 使用方法\n\n```dart\nGlobalKey<NavigatorState> _navigatorKey = GlobalKey(); \nMaterialApp(  \n    navigatorKey: _navigatorKey, \n); \n```\n\n### 2、scaffoldMessengerKey\n\nscaffoldMessengerKey` 主要是管理后代的 `Scaffolds`，可以实现无 `context` 调用 `snack bars\n\n#### 使用方法\n\n```dart\nGlobalKey<ScaffoldMessengerState> _scaffoldKey = GlobalKey(); \nMaterialApp( \n    scaffoldMessengerKey: _scaffoldKey, \n);\n_scaffoldKey.currentState.showSnackBar(\n    SnackBar(content: Text(\"show SnackBar\"))\n); \n```\n\n### 3、home\n\n程序进入后的第一个界面，传入一个 `Widget`\n\n##### 使用方法\n\n```dart\n... \nMaterialApp( \n    home: Scaffold(...),\n); \n... \n```\n\n### 4、routes\n\n生成路由表，以键值对形式传入 `key` 为路由名字， `value` 为对应的`Widget`\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    routes: {   \n        \"/home\": (_) => Home(), \n        \"/my\": (_) => My()  \n            //.... \n    }, \n); \n```\n\n### 5、initialRoute\n\n初始路由，如果设置了该参数并且在 `routes` 找到了对应的key，将会展示对应的 `Widget` ，否则展示 `home`\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    routes: {    \n        \"/home\": (_) => Home(),   \n        \"/my\": (_) => My()  \n    },   \n    initialRoute: \"/home\", \n) \n```\n\n### 6、onGenerateRoute\n\n当跳转路由时，如果在 `routes` 找不到对应的 `key` ，会执行该回调，会调用会返回一个 `RouteSettings` ，该对象中有 `name` 路由名称、 `arguments` 路由参数。\n\n##### 使用方法\n\n```dart\nMaterialApp(   \n    routes: {    \n        \"/home\": (_) => Home(),     \n        \"/my\": (_) => My()   \n    },  \n    initialRoute: \"/home\",  \n    onGenerateRoute: (setting) {    \n        // 这里可以做进一步的逻辑处理    \n        return MaterialPageRoute(builder: (_) => Home()); \n    }, \n) \n```\n\n### 7、onGenerateInitialRoutes\n\n如果提供了 `initialRoute` ，则用于生成初始路由的路由生成器回调，如果未设置此属性，则底层 [Navigator.onGenerateInitialRoutes](http://navigator.ongenerateinitialroutes/) 将默认为 [Navigator.defaultGenerateInitialRoutes](https://api.flutter.dev/flutter/widgets/Navigator/defaultGenerateInitialRoutes.html)。\n\n##### 使用方法\n\n```dart\nMaterialApp(\n    initialRoute: \"/home\",  \n    onGenerateInitialRoutes: (initialRoute) {  \n        return [   \n            MaterialPageRoute(builder: (_) => Home()), \n            MaterialPageRoute(builder: (_) => My()),   \n        ];\n    }\n) \n```\n\n### 8、onUnknownRoute\n\n效果和 `onGenerateRoute` 一样，只是先走 `onGenerateRoute` ，如果无法生成路由时则在调用 `onUnknownRoute` 。\n\n##### 使用方法\n\n```dart\nMaterialApp(  \n    routes: {    \n        \"/home\": (_) => Home(),   \n        \"/my\": (_) => My()    \n    },   \n    initialRoute: \"/home\",  \n    onGenerateRoute: (setting) {\n        return null; \n    },  \n    onUnknownRoute: (setting) {   \n        return MaterialPageRoute(builder: (_) => Home());  \n    }, \n) \n```\n\n### 9、navigatorObservers\n\n路由监听器，主要是就是监听页面路由堆栈的变化，当页面进行 `push` `pop` `remove` `replace` 等操作时会进行监听。\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    navigatorObservers: [ \n        MyObserver() \n    ], \n) \nclass MyObserver extends NavigatorObserver {  \n    @override  void didPush(Route route, Route previousRoute) {  \n        print(route); \n        print(previousRoute);   \n        super.didPush(route, previousRoute); \n    }\n} \n```\n\n### 10、builder\n\n当构建 `Widget` 前调用，主要用于字体大小、主题颜色等配置\n\n##### 使用方法\n\n```dart\nMaterialApp(  \n    routes: {    \n        \"/home\": (_) => Home(),  \n        \"/my\": (_) => My()  \n    }, \n    initialRoute: \"/home\",   \n    onGenerateRoute: (setting) {   \n        return null; \n    },  \n    onUnknownRoute: (setting) {    \n        return MaterialPageRoute(builder: (_) => Home());  \n    }, \t\n    builder: (_, child) {  \n        return Scaffold(\n            appBar: AppBar(title: Text(\"build\")), \n            body: child,\n        );  \n    },\n) \n```\n\n### 11、title\n\nAndroid：任务管理器的程序快照之上 IOS: 程序切换管理器中\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    title: 'Flutter应用', \n); \n```\n\n### 12、onGenerateTitle\n\n如果非空，则调用此回调函数以生成应用程序的标题字符串，否则会使用 `title` 。每次重建页面是该方法就会回调执行。\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    title: 'Flutter应用', \n    onGenerateTitle: (_) {  \n        return \"我的天\";   \n    },\n); \n```\n\n### 13、color\n\n设置该值的在程序切换时应用图标的背景颜色，当应用图标为透明时。\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    color: Colors.blue,\n) \n```\n\n### 14、theme\n\n如果指定了 `darkTheme` ，那么用于提供用户界面的深色版本。如果提供了 `darkTheme` ， `themeMode` 将控制将使用哪个主题。默认值是 `ThemeData.light()` 应用程序的主题颜色\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    theme: ThemeData(    \n        // 主要颜色 \n        primaryColor: Colors.red \n    ),\n) \n```\n\n### 15、darkTheme\n\n应用程序深色主题颜色\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    theme: ThemeData(   \n        // 主要颜色    \n        primaryColor: Colors.red \n    ),\n) \n```\n\n### 16、highContrastTheme\n\n当系统请求“高对比度”时使用的 `ThemeData` ，当该值为空时会用 `theme` 应用该主题\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    highContrastTheme: ThemeData(  \n        primaryColor: Colors.pink \n    ),\n) \n```\n\n### 17、highContrastDarkTheme\n\n当系统再暗黑模式下请求“高对比度”时使用的 `ThemeData` ，当该值为空时会用 `darkTheme` 应用该主题。\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    highContrastDarkTheme: ThemeData(\n        primaryColor: Colors.green\n    ), \n) \n```\n\n### 18、themeMode\n\n白天模式和暗黑模式模式切换，默认值为 `ThemeMode.system`\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    themeMode: ThemeMode.dark\n) \n```\n\n### 19、locale\n\n主要用于语言切换时，如果为 `null` 时使用系统区域\n\n##### 使用方法\n\n```dart\nMaterialApp(  \n    locale: Locale('zh', 'CN') // 中文简体 \n) \n```\n\n### 20、localizationsDelegates\n\n本地化委托\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    locale: Locale('zh', 'CN') // 中文简体 \n    localizationsDelegates: [  \n        GlobalMaterialLocalizations.delegate,  \n        GlobalWidgetsLocalizations.delegate, \n    ],\n) \n```\n\n### 21、supportedLocales\n\n当前应用支持的 `Locale` 列表\n\n##### 使用方法\n\n```dart\nMaterialApp(  \n    locale: Locale('zh', 'CN'), // 中文简体  \n    supportedLocales: [    \n        Locale('en', 'US'), //美国英语    \n        Locale(\"zh\", 'CN'), //中文简体  \n    ]\n) \n```\n\n### 22、localeListResolutionCallback\n\n监听系统语言切换事件，一些安卓系统特性，可设置多语言列表，默认以第一个列表为默认语言\n\n##### 使用方法\n\n```dart\nMaterialApp(  \n    locale: Locale('zh', 'CN'), // 中文简体  \n    supportedLocales: [   \n        Locale('en', 'US'), //美国英语   \n        Locale(\"zh\", 'CN'), //中文简体 \n    ],  \n    localeListResolutionCallback: (List<Locale> locales, Iterable<Locale> supportedLocales) \n    {    \n        // 系统切换语言时调用    \n        return Locale(\"zh\", 'CN'); \n    }, \n) \n```\n\n### 23、localeResolutionCallback\n\n监听系统语言切换事件\n\n##### 使用方法\n\n```dart\nMaterialApp(\n    locale: Locale('zh', 'CN'), // 中文简体  \n    supportedLocales: [   \n        Locale('en', 'US'), //美国英语  \n        Locale(\"zh\", 'CN'), //中文简体 \n    ],  \n    localeResolutionCallback: (Locale locale, Iterable<Locale> supportedLocales){   \n        return Locale(\"zh\", 'CN'); \n    },\n) \n```\n\n### 24、debugShowMaterialGrid\n\n在 `debug` 模式下展示基线网格\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    debugShowMaterialGrid: true\n) \n```\n\n### 25、showPerformanceOverlay\n\n显示性能叠加，开启此模式主要用于性能测试\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    showPerformanceOverlay: true \n) \n```\n\n### 26、checkerboardRasterCacheImages\n\n打开栅格缓存图像的棋盘格\n\n##### 使用方法\n\n```dart\nMaterialApp(\n    checkerboardRasterCacheImages: true\n) \n```\n\n### 27、checkerboardOffscreenLayers\n\n打开渲染到屏幕外位图的层的棋盘格\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    checkerboardOffscreenLayers: true\n) \n```\n\n### 28、showSemanticsDebugger\n\n打开显示可访问性信息的叠加层，展示组件之间的关系、占位大小\n\n##### 使用方法\n\n```dart\nMaterialApp(\n    showSemanticsDebugger: true \n) \n```\n\n### 29、debugShowCheckedModeBanner\n\n调试显示检查模式横幅\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    debugShowCheckedModeBanner: false\n) \n```\n\n### 30、shortcuts以及actions\n\n`shortcuts` 和 `actions` 是将物理键盘事件绑定到用户界面中的操作。 比如，要在您的应用程序中定义键盘快捷键，这里不做过多的描述，后面我会专门拿一个专题来讲解。\n\n### 31、restorationScopeId\n\n定义一个应用程序状态恢复的标识符，提供标识符会将 [RootRestorationScope](https://api.flutter.dev/flutter/widgets/RootRestorationScope-class.html) 插入 `widget` 层次结构，从而为后代 `widget` 启用状态恢复。还可以通过标识符使 `WidgetsApp` 构建的导航器恢复其状态（即恢复活动路由的历史堆栈），由于这里涉及的内容较多，后面会专门拿一个专题来讲解。\n\n### 32、scrollBehavior\n\n统一滚动行为设置，设置后子组件将返回对应的滚动行为\n\n##### 使用方法\n\n```dart\nMaterialApp( \n    scrollBehavior: ScrollBehaviorModified()\n)  \nclass ScrollBehaviorModified extends ScrollBehavior { \n    const ScrollBehaviorModified();\n    @override  ScrollPhysics getScrollPhysics(BuildContext context) {  \n        switch (getPlatform(context)) {  \n            case TargetPlatform.iOS:   \n            case TargetPlatform.macOS:  \n            case TargetPlatform.android:   \n                return const BouncingScrollPhysics();  \n            case TargetPlatform.fuchsia:   \n            case TargetPlatform.linux: \n            case TargetPlatform.windows:     \n                return const ClampingScrollPhysics();  \n        }   \n        return null; \n    } \n}\n```\n\n","slug":"Flutter-MaterialApp","published":1,"updated":"2021-09-18T01:27:08.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktpg91z9000984ux1kuj69a7","content":"<h1 id=\"Flutter-MaterialApp详解\"><a href=\"#Flutter-MaterialApp详解\" class=\"headerlink\" title=\"Flutter-MaterialApp详解\"></a>Flutter-MaterialApp详解</h1><h2 id=\"Flutter整体结构图\"><a href=\"#Flutter整体结构图\" class=\"headerlink\" title=\"Flutter整体结构图\"></a>Flutter整体结构图</h2><p><img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/20191129195736853.png\" alt=\"img\"></p>\n<h4 id=\"Flutter-Framework\"><a href=\"#Flutter-Framework\" class=\"headerlink\" title=\"Flutter Framework\"></a>Flutter Framework</h4><ul>\n<li><p>Foundation、Animation、Painting、Gestures被合成了一个Dart UI层，对应的是Flutter中 <code>dart:ui</code> 包，是Flutter引擎暴露的底层UI库，主要提供动画、手势、绘制能力。</p>\n</li>\n<li><p>Rendering层是一个抽象布局层，依赖于Dart UI层，Rendering层会构建一个UI树、当UI树有变化时，会计算出有变化的部分，然后更新UI树，最终绘制在屏幕上</p>\n</li>\n<li><p>Widgets层是Flutter提供的一套基础组件库</p>\n</li>\n<li><p>Material、Cupertino是Flutter提供了两种视觉风格的组件库（Android、iOS)</p>\n<h4 id=\"Flutter-Engine\"><a href=\"#Flutter-Engine\" class=\"headerlink\" title=\"Flutter Engine\"></a>Flutter Engine</h4><p>这是一个纯C++实现的SDK，主要执行相关的渲染、线程管理、平台事件等操作。其中包括了Skia引擎、Dart运行时、文字排版引擎等。在调用<code>dart:ui</code>库是，其实最终会走到Engine层，实现真正的绘制逻辑.</p>\n<h4 id=\"Flutter-Embedder\"><a href=\"#Flutter-Embedder\" class=\"headerlink\" title=\"Flutter Embedder\"></a>Flutter Embedder</h4><p>提供四个Task Runner，将引擎一直到平台中间层代码的渲染设置、原生插件、打包、线程管理、时间循环、交互操作等。</p>\n</li>\n<li><p>UI Runner 负责绑定渲染相关操作</p>\n</li>\n<li><p>GPU Runner 用户执行GPU指令</p>\n</li>\n<li><p>iOS Runner 处理图片数据、为GPU做准备的</p>\n</li>\n<li><p>Platform Runner 所有接口调用都使用该接口</p>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2></li>\n</ul>\n<p>本文中很多效果都没有截图，可通过视频教程查看 <a href=\"https://www.bilibili.com/video/BV1BM4y1L71Z?p=2\">视频教程地址</a></p>\n<h2 id=\"Material介绍\"><a href=\"#Material介绍\" class=\"headerlink\" title=\"Material介绍\"></a>Material介绍</h2><blockquote>\n<p>Material 组件（MDC）帮助开发者实现 <a href=\"https://material.io/design\">Material Design</a>。MDC 由谷歌团队的工程师和 UX 设计师创造，为 Android、iOS、Web 和 Flutter 提供很多美观实用的 UI 组件。</p>\n</blockquote>\n<h2 id=\"MaterialApp介绍\"><a href=\"#MaterialApp介绍\" class=\"headerlink\" title=\"MaterialApp介绍\"></a>MaterialApp介绍</h2><p><code>MaterialApp</code> 包含了许多的 <code>Widget</code> ，这些 <code>Widget</code> 通常是实现 <a href=\"https://material.io/design\">Material Design</a> 的应用程序所必须要的，包含的 <code>Widget</code> 可以在 <a href=\"https://flutter.dev/docs/development/ui/widgets/material\">Material Components widgets</a> 中查看所有。 了解基本的概念，接下来我们详细看一下 <code>MaterialApp</code> 具体怎么使用。</p>\n<h4 id=\"Material属性和说明\"><a href=\"#Material属性和说明\" class=\"headerlink\" title=\"Material属性和说明\"></a>Material属性和说明</h4><blockquote>\n<p>总共33个属性</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>字段</strong></th>\n<th><strong>属性</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">navigatorKey</td>\n<td>GlobalKey</td>\n<td>导航键</td>\n</tr>\n<tr>\n<td align=\"left\">scaffoldMessengerKey</td>\n<td>GlobalKey</td>\n<td>脚手架键</td>\n</tr>\n<tr>\n<td align=\"left\">home</td>\n<td>Widget</td>\n<td>主页，应用打开时显示的页面</td>\n</tr>\n<tr>\n<td align=\"left\">routes</td>\n<td>Map&lt;String, WidgetBuilder&gt;</td>\n<td>应用程序顶级路由表</td>\n</tr>\n<tr>\n<td align=\"left\">initialRoute</td>\n<td>String</td>\n<td>如果构建了导航器，则会显示第一个路由的名称</td>\n</tr>\n<tr>\n<td align=\"left\">onGenerateRoute</td>\n<td>RouteFactory</td>\n<td>路由管理拦截器</td>\n</tr>\n<tr>\n<td align=\"left\">onGenerateInitialRoutes</td>\n<td>InitialRouteListFactory</td>\n<td>生成初始化路由</td>\n</tr>\n<tr>\n<td align=\"left\">onUnknownRoute</td>\n<td>RouteFactory</td>\n<td>当onGenerateRoute无法生成路由时调用</td>\n</tr>\n<tr>\n<td align=\"left\">navigatorObservers</td>\n<td>List</td>\n<td>创建导航器的观察者列表</td>\n</tr>\n<tr>\n<td align=\"left\">builder</td>\n<td>TransitionBuilder</td>\n<td>在导航器上面插入小部件</td>\n</tr>\n<tr>\n<td align=\"left\">title</td>\n<td>String</td>\n<td>程序切换时显示的标题</td>\n</tr>\n<tr>\n<td align=\"left\">onGenerateTitle</td>\n<td>GenerateAppTitle</td>\n<td>程序切换时生成标题字符串</td>\n</tr>\n<tr>\n<td align=\"left\">color</td>\n<td>Color</td>\n<td>程序切换时应用图标背景颜色（仅安卓有效）</td>\n</tr>\n<tr>\n<td align=\"left\">theme</td>\n<td>ThemeData</td>\n<td>主题颜色</td>\n</tr>\n<tr>\n<td align=\"left\">darkTheme</td>\n<td>ThemeData</td>\n<td>暗黑模式主题颜色</td>\n</tr>\n<tr>\n<td align=\"left\">highContrastTheme</td>\n<td>ThemeData</td>\n<td>系统请求“高对比度”使用的主题</td>\n</tr>\n<tr>\n<td align=\"left\">highContrastDarkTheme</td>\n<td>ThemeData</td>\n<td>系统请求“高对比度”暗黑模式下使用的主题颜色</td>\n</tr>\n<tr>\n<td align=\"left\">themeMode</td>\n<td>ThemeMode</td>\n<td>使用哪种模式的主题（默认跟随系统）</td>\n</tr>\n<tr>\n<td align=\"left\">locale</td>\n<td>Locale</td>\n<td>初始区域设置</td>\n</tr>\n<tr>\n<td align=\"left\">localizationsDelegates</td>\n<td>Iterable<LocalizationsDelegate></td>\n<td>本地化代理</td>\n</tr>\n<tr>\n<td align=\"left\">localeListResolutionCallback</td>\n<td>LocaleListResolutionCallback</td>\n<td>失败或未提供设备的语言环境</td>\n</tr>\n<tr>\n<td align=\"left\">localeResolutionCallback</td>\n<td>LocaleResolutionCallback</td>\n<td>负责计算语言环境</td>\n</tr>\n<tr>\n<td align=\"left\">supportedLocales</td>\n<td>Iterable</td>\n<td>本地化地区列表</td>\n</tr>\n<tr>\n<td align=\"left\">debugShowMaterialGrid</td>\n<td>bool</td>\n<td>绘制基线网格叠加层（仅debug模式）</td>\n</tr>\n<tr>\n<td align=\"left\">showPerformanceOverlay</td>\n<td>bool</td>\n<td>显示性能叠加</td>\n</tr>\n<tr>\n<td align=\"left\">checkerboardRasterCacheImages</td>\n<td>bool</td>\n<td>打开栅格缓存图像的棋盘格。</td>\n</tr>\n<tr>\n<td align=\"left\">checkerboardOffscreenLayers</td>\n<td>bool</td>\n<td>打开渲染到屏幕外位图的层的棋盘格。</td>\n</tr>\n<tr>\n<td align=\"left\">showSemanticsDebugger</td>\n<td>bool</td>\n<td>打开显示可访问性信息的叠加层</td>\n</tr>\n<tr>\n<td align=\"left\">debugShowCheckedModeBanner</td>\n<td>bool</td>\n<td>调试显示检查模式横幅</td>\n</tr>\n<tr>\n<td align=\"left\">shortcuts</td>\n<td>Map&lt;LogicalKeySet, Intent&gt;</td>\n<td>应用程序意图的键盘快捷键的默认映射。</td>\n</tr>\n<tr>\n<td align=\"left\">actions</td>\n<td>Map&lt;Type, Action&gt;</td>\n<td>包含和定义用户操作的映射</td>\n</tr>\n<tr>\n<td align=\"left\">restorationScopeId</td>\n<td>String</td>\n<td>应用程序状态恢复的标识符</td>\n</tr>\n<tr>\n<td align=\"left\">scrollBehavior</td>\n<td>ScrollBehavior</td>\n<td>可滚动小部件的行为方式</td>\n</tr>\n</tbody></table>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><h5 id=\"创建一个MaterialApp\"><a href=\"#创建一个MaterialApp\" class=\"headerlink\" title=\"创建一个MaterialApp\"></a>创建一个MaterialApp</h5><blockquote>\n<p>MaterialApp(…)</p>\n</blockquote>\n<h5 id=\"创建一个使用-Router-而不是-Navigator-的-MaterialApp\"><a href=\"#创建一个使用-Router-而不是-Navigator-的-MaterialApp\" class=\"headerlink\" title=\"创建一个使用 Router 而不是 Navigator 的 MaterialApp\"></a>创建一个使用 Router 而不是 Navigator 的 MaterialApp</h5><blockquote>\n<p>MaterialApp.router(…)</p>\n</blockquote>\n<h2 id=\"属性详解\"><a href=\"#属性详解\" class=\"headerlink\" title=\"属性详解\"></a>属性详解</h2><h3 id=\"1、navigatorKey\"><a href=\"#1、navigatorKey\" class=\"headerlink\" title=\"1、navigatorKey\"></a>1、navigatorKey</h3><p><code>navigatorKey</code> 相当于 <code>Navigator.of(context)</code> ，如果应用程序想实现无 <code>context</code> 跳转，那么可以通过设置该key, 通过 <code>navigatorKey.currentState.overlay.context</code> 获取全局context。</p>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;NavigatorState&gt; _navigatorKey = GlobalKey(); </span><br><span class=\"line\">MaterialApp(  </span><br><span class=\"line\">    navigatorKey: _navigatorKey, </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、scaffoldMessengerKey\"><a href=\"#2、scaffoldMessengerKey\" class=\"headerlink\" title=\"2、scaffoldMessengerKey\"></a>2、scaffoldMessengerKey</h3><p>scaffoldMessengerKey<code>主要是管理后代的</code>Scaffolds<code>，可以实现无 </code>context<code>调用</code>snack bars</p>\n<h4 id=\"使用方法-1\"><a href=\"#使用方法-1\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;ScaffoldMessengerState&gt; _scaffoldKey = GlobalKey(); </span><br><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    scaffoldMessengerKey: _scaffoldKey, </span><br><span class=\"line\">);</span><br><span class=\"line\">_scaffoldKey.currentState.showSnackBar(</span><br><span class=\"line\">    SnackBar(content: Text(<span class=\"string\">&quot;show SnackBar&quot;</span>))</span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、home\"><a href=\"#3、home\" class=\"headerlink\" title=\"3、home\"></a>3、home</h3><p>程序进入后的第一个界面，传入一个 <code>Widget</code></p>\n<h5 id=\"使用方法-2\"><a href=\"#使用方法-2\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">... </span><br><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    home: Scaffold(...),</span><br><span class=\"line\">); </span><br><span class=\"line\">... </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、routes\"><a href=\"#4、routes\" class=\"headerlink\" title=\"4、routes\"></a>4、routes</h3><p>生成路由表，以键值对形式传入 <code>key</code> 为路由名字， <code>value</code> 为对应的<code>Widget</code></p>\n<h5 id=\"使用方法-3\"><a href=\"#使用方法-3\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    routes: &#123;   </span><br><span class=\"line\">        <span class=\"string\">&quot;/home&quot;</span>: (_) =&gt; Home(), </span><br><span class=\"line\">        <span class=\"string\">&quot;/my&quot;</span>: (_) =&gt; My()  </span><br><span class=\"line\">            <span class=\"comment\">//.... </span></span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、initialRoute\"><a href=\"#5、initialRoute\" class=\"headerlink\" title=\"5、initialRoute\"></a>5、initialRoute</h3><p>初始路由，如果设置了该参数并且在 <code>routes</code> 找到了对应的key，将会展示对应的 <code>Widget</code> ，否则展示 <code>home</code></p>\n<h5 id=\"使用方法-4\"><a href=\"#使用方法-4\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    routes: &#123;    </span><br><span class=\"line\">        <span class=\"string\">&quot;/home&quot;</span>: (_) =&gt; Home(),   </span><br><span class=\"line\">        <span class=\"string\">&quot;/my&quot;</span>: (_) =&gt; My()  </span><br><span class=\"line\">    &#125;,   </span><br><span class=\"line\">    initialRoute: <span class=\"string\">&quot;/home&quot;</span>, </span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、onGenerateRoute\"><a href=\"#6、onGenerateRoute\" class=\"headerlink\" title=\"6、onGenerateRoute\"></a>6、onGenerateRoute</h3><p>当跳转路由时，如果在 <code>routes</code> 找不到对应的 <code>key</code> ，会执行该回调，会调用会返回一个 <code>RouteSettings</code> ，该对象中有 <code>name</code> 路由名称、 <code>arguments</code> 路由参数。</p>\n<h5 id=\"使用方法-5\"><a href=\"#使用方法-5\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp(   </span><br><span class=\"line\">    routes: &#123;    </span><br><span class=\"line\">        <span class=\"string\">&quot;/home&quot;</span>: (_) =&gt; Home(),     </span><br><span class=\"line\">        <span class=\"string\">&quot;/my&quot;</span>: (_) =&gt; My()   </span><br><span class=\"line\">    &#125;,  </span><br><span class=\"line\">    initialRoute: <span class=\"string\">&quot;/home&quot;</span>,  </span><br><span class=\"line\">    onGenerateRoute: (setting) &#123;    </span><br><span class=\"line\">        <span class=\"comment\">// 这里可以做进一步的逻辑处理    </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> MaterialPageRoute(builder: (_) =&gt; Home()); </span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、onGenerateInitialRoutes\"><a href=\"#7、onGenerateInitialRoutes\" class=\"headerlink\" title=\"7、onGenerateInitialRoutes\"></a>7、onGenerateInitialRoutes</h3><p>如果提供了 <code>initialRoute</code> ，则用于生成初始路由的路由生成器回调，如果未设置此属性，则底层 <a href=\"http://navigator.ongenerateinitialroutes/\">Navigator.onGenerateInitialRoutes</a> 将默认为 <a href=\"https://api.flutter.dev/flutter/widgets/Navigator/defaultGenerateInitialRoutes.html\">Navigator.defaultGenerateInitialRoutes</a>。</p>\n<h5 id=\"使用方法-6\"><a href=\"#使用方法-6\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp(</span><br><span class=\"line\">    initialRoute: <span class=\"string\">&quot;/home&quot;</span>,  </span><br><span class=\"line\">    onGenerateInitialRoutes: (initialRoute) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> [   </span><br><span class=\"line\">            MaterialPageRoute(builder: (_) =&gt; Home()), </span><br><span class=\"line\">            MaterialPageRoute(builder: (_) =&gt; My()),   </span><br><span class=\"line\">        ];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、onUnknownRoute\"><a href=\"#8、onUnknownRoute\" class=\"headerlink\" title=\"8、onUnknownRoute\"></a>8、onUnknownRoute</h3><p>效果和 <code>onGenerateRoute</code> 一样，只是先走 <code>onGenerateRoute</code> ，如果无法生成路由时则在调用 <code>onUnknownRoute</code> 。</p>\n<h5 id=\"使用方法-7\"><a href=\"#使用方法-7\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp(  </span><br><span class=\"line\">    routes: &#123;    </span><br><span class=\"line\">        <span class=\"string\">&quot;/home&quot;</span>: (_) =&gt; Home(),   </span><br><span class=\"line\">        <span class=\"string\">&quot;/my&quot;</span>: (_) =&gt; My()    </span><br><span class=\"line\">    &#125;,   </span><br><span class=\"line\">    initialRoute: <span class=\"string\">&quot;/home&quot;</span>,  </span><br><span class=\"line\">    onGenerateRoute: (setting) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>; </span><br><span class=\"line\">    &#125;,  </span><br><span class=\"line\">    onUnknownRoute: (setting) &#123;   </span><br><span class=\"line\">        <span class=\"keyword\">return</span> MaterialPageRoute(builder: (_) =&gt; Home());  </span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、navigatorObservers\"><a href=\"#9、navigatorObservers\" class=\"headerlink\" title=\"9、navigatorObservers\"></a>9、navigatorObservers</h3><p>路由监听器，主要是就是监听页面路由堆栈的变化，当页面进行 <code>push</code> <code>pop</code> <code>remove</code> <code>replace</code> 等操作时会进行监听。</p>\n<h5 id=\"使用方法-8\"><a href=\"#使用方法-8\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    navigatorObservers: [ </span><br><span class=\"line\">        MyObserver() </span><br><span class=\"line\">    ], </span><br><span class=\"line\">) </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">NavigatorObserver</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"meta\">@override</span>  <span class=\"keyword\">void</span> didPush(Route route, Route previousRoute) &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">print</span>(route); </span><br><span class=\"line\">        <span class=\"built_in\">print</span>(previousRoute);   </span><br><span class=\"line\">        <span class=\"keyword\">super</span>.didPush(route, previousRoute); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、builder\"><a href=\"#10、builder\" class=\"headerlink\" title=\"10、builder\"></a>10、builder</h3><p>当构建 <code>Widget</code> 前调用，主要用于字体大小、主题颜色等配置</p>\n<h5 id=\"使用方法-9\"><a href=\"#使用方法-9\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp(  </span><br><span class=\"line\">    routes: &#123;    </span><br><span class=\"line\">        <span class=\"string\">&quot;/home&quot;</span>: (_) =&gt; Home(),  </span><br><span class=\"line\">        <span class=\"string\">&quot;/my&quot;</span>: (_) =&gt; My()  </span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    initialRoute: <span class=\"string\">&quot;/home&quot;</span>,   </span><br><span class=\"line\">    onGenerateRoute: (setting) &#123;   </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>; </span><br><span class=\"line\">    &#125;,  </span><br><span class=\"line\">    onUnknownRoute: (setting) &#123;    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> MaterialPageRoute(builder: (_) =&gt; Home());  </span><br><span class=\"line\">    &#125;, \t</span><br><span class=\"line\">    builder: (_, child) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">            appBar: AppBar(title: Text(<span class=\"string\">&quot;build&quot;</span>)), </span><br><span class=\"line\">            body: child,</span><br><span class=\"line\">        );  </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11、title\"><a href=\"#11、title\" class=\"headerlink\" title=\"11、title\"></a>11、title</h3><p>Android：任务管理器的程序快照之上 IOS: 程序切换管理器中</p>\n<h5 id=\"使用方法-10\"><a href=\"#使用方法-10\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    title: <span class=\"string\">&#x27;Flutter应用&#x27;</span>, </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12、onGenerateTitle\"><a href=\"#12、onGenerateTitle\" class=\"headerlink\" title=\"12、onGenerateTitle\"></a>12、onGenerateTitle</h3><p>如果非空，则调用此回调函数以生成应用程序的标题字符串，否则会使用 <code>title</code> 。每次重建页面是该方法就会回调执行。</p>\n<h5 id=\"使用方法-11\"><a href=\"#使用方法-11\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    title: <span class=\"string\">&#x27;Flutter应用&#x27;</span>, </span><br><span class=\"line\">    onGenerateTitle: (_) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;我的天&quot;</span>;   </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13、color\"><a href=\"#13、color\" class=\"headerlink\" title=\"13、color\"></a>13、color</h3><p>设置该值的在程序切换时应用图标的背景颜色，当应用图标为透明时。</p>\n<h5 id=\"使用方法-12\"><a href=\"#使用方法-12\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    color: Colors.blue,</span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14、theme\"><a href=\"#14、theme\" class=\"headerlink\" title=\"14、theme\"></a>14、theme</h3><p>如果指定了 <code>darkTheme</code> ，那么用于提供用户界面的深色版本。如果提供了 <code>darkTheme</code> ， <code>themeMode</code> 将控制将使用哪个主题。默认值是 <code>ThemeData.light()</code> 应用程序的主题颜色</p>\n<h5 id=\"使用方法-13\"><a href=\"#使用方法-13\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    theme: ThemeData(    </span><br><span class=\"line\">        <span class=\"comment\">// 主要颜色 </span></span><br><span class=\"line\">        primaryColor: Colors.red </span><br><span class=\"line\">    ),</span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15、darkTheme\"><a href=\"#15、darkTheme\" class=\"headerlink\" title=\"15、darkTheme\"></a>15、darkTheme</h3><p>应用程序深色主题颜色</p>\n<h5 id=\"使用方法-14\"><a href=\"#使用方法-14\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    theme: ThemeData(   </span><br><span class=\"line\">        <span class=\"comment\">// 主要颜色    </span></span><br><span class=\"line\">        primaryColor: Colors.red </span><br><span class=\"line\">    ),</span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16、highContrastTheme\"><a href=\"#16、highContrastTheme\" class=\"headerlink\" title=\"16、highContrastTheme\"></a>16、highContrastTheme</h3><p>当系统请求“高对比度”时使用的 <code>ThemeData</code> ，当该值为空时会用 <code>theme</code> 应用该主题</p>\n<h5 id=\"使用方法-15\"><a href=\"#使用方法-15\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    highContrastTheme: ThemeData(  </span><br><span class=\"line\">        primaryColor: Colors.pink </span><br><span class=\"line\">    ),</span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17、highContrastDarkTheme\"><a href=\"#17、highContrastDarkTheme\" class=\"headerlink\" title=\"17、highContrastDarkTheme\"></a>17、highContrastDarkTheme</h3><p>当系统再暗黑模式下请求“高对比度”时使用的 <code>ThemeData</code> ，当该值为空时会用 <code>darkTheme</code> 应用该主题。</p>\n<h5 id=\"使用方法-16\"><a href=\"#使用方法-16\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    highContrastDarkTheme: ThemeData(</span><br><span class=\"line\">        primaryColor: Colors.green</span><br><span class=\"line\">    ), </span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18、themeMode\"><a href=\"#18、themeMode\" class=\"headerlink\" title=\"18、themeMode\"></a>18、themeMode</h3><p>白天模式和暗黑模式模式切换，默认值为 <code>ThemeMode.system</code></p>\n<h5 id=\"使用方法-17\"><a href=\"#使用方法-17\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    themeMode: ThemeMode.dark</span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19、locale\"><a href=\"#19、locale\" class=\"headerlink\" title=\"19、locale\"></a>19、locale</h3><p>主要用于语言切换时，如果为 <code>null</code> 时使用系统区域</p>\n<h5 id=\"使用方法-18\"><a href=\"#使用方法-18\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp(  </span><br><span class=\"line\">    locale: Locale(<span class=\"string\">&#x27;zh&#x27;</span>, <span class=\"string\">&#x27;CN&#x27;</span>) <span class=\"comment\">// 中文简体 </span></span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20、localizationsDelegates\"><a href=\"#20、localizationsDelegates\" class=\"headerlink\" title=\"20、localizationsDelegates\"></a>20、localizationsDelegates</h3><p>本地化委托</p>\n<h5 id=\"使用方法-19\"><a href=\"#使用方法-19\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    locale: Locale(<span class=\"string\">&#x27;zh&#x27;</span>, <span class=\"string\">&#x27;CN&#x27;</span>) <span class=\"comment\">// 中文简体 </span></span><br><span class=\"line\">    localizationsDelegates: [  </span><br><span class=\"line\">        GlobalMaterialLocalizations.delegate,  </span><br><span class=\"line\">        GlobalWidgetsLocalizations.delegate, </span><br><span class=\"line\">    ],</span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"21、supportedLocales\"><a href=\"#21、supportedLocales\" class=\"headerlink\" title=\"21、supportedLocales\"></a>21、supportedLocales</h3><p>当前应用支持的 <code>Locale</code> 列表</p>\n<h5 id=\"使用方法-20\"><a href=\"#使用方法-20\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp(  </span><br><span class=\"line\">    locale: Locale(<span class=\"string\">&#x27;zh&#x27;</span>, <span class=\"string\">&#x27;CN&#x27;</span>), <span class=\"comment\">// 中文简体  </span></span><br><span class=\"line\">    supportedLocales: [    </span><br><span class=\"line\">        Locale(<span class=\"string\">&#x27;en&#x27;</span>, <span class=\"string\">&#x27;US&#x27;</span>), <span class=\"comment\">//美国英语    </span></span><br><span class=\"line\">        Locale(<span class=\"string\">&quot;zh&quot;</span>, <span class=\"string\">&#x27;CN&#x27;</span>), <span class=\"comment\">//中文简体  </span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"22、localeListResolutionCallback\"><a href=\"#22、localeListResolutionCallback\" class=\"headerlink\" title=\"22、localeListResolutionCallback\"></a>22、localeListResolutionCallback</h3><p>监听系统语言切换事件，一些安卓系统特性，可设置多语言列表，默认以第一个列表为默认语言</p>\n<h5 id=\"使用方法-21\"><a href=\"#使用方法-21\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp(  </span><br><span class=\"line\">    locale: Locale(<span class=\"string\">&#x27;zh&#x27;</span>, <span class=\"string\">&#x27;CN&#x27;</span>), <span class=\"comment\">// 中文简体  </span></span><br><span class=\"line\">    supportedLocales: [   </span><br><span class=\"line\">        Locale(<span class=\"string\">&#x27;en&#x27;</span>, <span class=\"string\">&#x27;US&#x27;</span>), <span class=\"comment\">//美国英语   </span></span><br><span class=\"line\">        Locale(<span class=\"string\">&quot;zh&quot;</span>, <span class=\"string\">&#x27;CN&#x27;</span>), <span class=\"comment\">//中文简体 </span></span><br><span class=\"line\">    ],  </span><br><span class=\"line\">    localeListResolutionCallback: (<span class=\"built_in\">List</span>&lt;Locale&gt; locales, <span class=\"built_in\">Iterable</span>&lt;Locale&gt; supportedLocales) </span><br><span class=\"line\">    &#123;    </span><br><span class=\"line\">        <span class=\"comment\">// 系统切换语言时调用    </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Locale(<span class=\"string\">&quot;zh&quot;</span>, <span class=\"string\">&#x27;CN&#x27;</span>); </span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"23、localeResolutionCallback\"><a href=\"#23、localeResolutionCallback\" class=\"headerlink\" title=\"23、localeResolutionCallback\"></a>23、localeResolutionCallback</h3><p>监听系统语言切换事件</p>\n<h5 id=\"使用方法-22\"><a href=\"#使用方法-22\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp(</span><br><span class=\"line\">    locale: Locale(<span class=\"string\">&#x27;zh&#x27;</span>, <span class=\"string\">&#x27;CN&#x27;</span>), <span class=\"comment\">// 中文简体  </span></span><br><span class=\"line\">    supportedLocales: [   </span><br><span class=\"line\">        Locale(<span class=\"string\">&#x27;en&#x27;</span>, <span class=\"string\">&#x27;US&#x27;</span>), <span class=\"comment\">//美国英语  </span></span><br><span class=\"line\">        Locale(<span class=\"string\">&quot;zh&quot;</span>, <span class=\"string\">&#x27;CN&#x27;</span>), <span class=\"comment\">//中文简体 </span></span><br><span class=\"line\">    ],  </span><br><span class=\"line\">    localeResolutionCallback: (Locale locale, <span class=\"built_in\">Iterable</span>&lt;Locale&gt; supportedLocales)&#123;   </span><br><span class=\"line\">        <span class=\"keyword\">return</span> Locale(<span class=\"string\">&quot;zh&quot;</span>, <span class=\"string\">&#x27;CN&#x27;</span>); </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"24、debugShowMaterialGrid\"><a href=\"#24、debugShowMaterialGrid\" class=\"headerlink\" title=\"24、debugShowMaterialGrid\"></a>24、debugShowMaterialGrid</h3><p>在 <code>debug</code> 模式下展示基线网格</p>\n<h5 id=\"使用方法-23\"><a href=\"#使用方法-23\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    debugShowMaterialGrid: <span class=\"keyword\">true</span></span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"25、showPerformanceOverlay\"><a href=\"#25、showPerformanceOverlay\" class=\"headerlink\" title=\"25、showPerformanceOverlay\"></a>25、showPerformanceOverlay</h3><p>显示性能叠加，开启此模式主要用于性能测试</p>\n<h5 id=\"使用方法-24\"><a href=\"#使用方法-24\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    showPerformanceOverlay: <span class=\"keyword\">true</span> </span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"26、checkerboardRasterCacheImages\"><a href=\"#26、checkerboardRasterCacheImages\" class=\"headerlink\" title=\"26、checkerboardRasterCacheImages\"></a>26、checkerboardRasterCacheImages</h3><p>打开栅格缓存图像的棋盘格</p>\n<h5 id=\"使用方法-25\"><a href=\"#使用方法-25\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp(</span><br><span class=\"line\">    checkerboardRasterCacheImages: <span class=\"keyword\">true</span></span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"27、checkerboardOffscreenLayers\"><a href=\"#27、checkerboardOffscreenLayers\" class=\"headerlink\" title=\"27、checkerboardOffscreenLayers\"></a>27、checkerboardOffscreenLayers</h3><p>打开渲染到屏幕外位图的层的棋盘格</p>\n<h5 id=\"使用方法-26\"><a href=\"#使用方法-26\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    checkerboardOffscreenLayers: <span class=\"keyword\">true</span></span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"28、showSemanticsDebugger\"><a href=\"#28、showSemanticsDebugger\" class=\"headerlink\" title=\"28、showSemanticsDebugger\"></a>28、showSemanticsDebugger</h3><p>打开显示可访问性信息的叠加层，展示组件之间的关系、占位大小</p>\n<h5 id=\"使用方法-27\"><a href=\"#使用方法-27\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp(</span><br><span class=\"line\">    showSemanticsDebugger: <span class=\"keyword\">true</span> </span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"29、debugShowCheckedModeBanner\"><a href=\"#29、debugShowCheckedModeBanner\" class=\"headerlink\" title=\"29、debugShowCheckedModeBanner\"></a>29、debugShowCheckedModeBanner</h3><p>调试显示检查模式横幅</p>\n<h5 id=\"使用方法-28\"><a href=\"#使用方法-28\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    debugShowCheckedModeBanner: <span class=\"keyword\">false</span></span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"30、shortcuts以及actions\"><a href=\"#30、shortcuts以及actions\" class=\"headerlink\" title=\"30、shortcuts以及actions\"></a>30、shortcuts以及actions</h3><p><code>shortcuts</code> 和 <code>actions</code> 是将物理键盘事件绑定到用户界面中的操作。 比如，要在您的应用程序中定义键盘快捷键，这里不做过多的描述，后面我会专门拿一个专题来讲解。</p>\n<h3 id=\"31、restorationScopeId\"><a href=\"#31、restorationScopeId\" class=\"headerlink\" title=\"31、restorationScopeId\"></a>31、restorationScopeId</h3><p>定义一个应用程序状态恢复的标识符，提供标识符会将 <a href=\"https://api.flutter.dev/flutter/widgets/RootRestorationScope-class.html\">RootRestorationScope</a> 插入 <code>widget</code> 层次结构，从而为后代 <code>widget</code> 启用状态恢复。还可以通过标识符使 <code>WidgetsApp</code> 构建的导航器恢复其状态（即恢复活动路由的历史堆栈），由于这里涉及的内容较多，后面会专门拿一个专题来讲解。</p>\n<h3 id=\"32、scrollBehavior\"><a href=\"#32、scrollBehavior\" class=\"headerlink\" title=\"32、scrollBehavior\"></a>32、scrollBehavior</h3><p>统一滚动行为设置，设置后子组件将返回对应的滚动行为</p>\n<h5 id=\"使用方法-29\"><a href=\"#使用方法-29\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    scrollBehavior: ScrollBehaviorModified()</span><br><span class=\"line\">)  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScrollBehaviorModified</span> <span class=\"keyword\">extends</span> <span class=\"title\">ScrollBehavior</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">const</span> ScrollBehaviorModified();</span><br><span class=\"line\">    <span class=\"meta\">@override</span>  ScrollPhysics getScrollPhysics(BuildContext context) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (getPlatform(context)) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">case</span> TargetPlatform.iOS:   </span><br><span class=\"line\">            <span class=\"keyword\">case</span> TargetPlatform.macOS:  </span><br><span class=\"line\">            <span class=\"keyword\">case</span> TargetPlatform.android:   </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">const</span> BouncingScrollPhysics();  </span><br><span class=\"line\">            <span class=\"keyword\">case</span> TargetPlatform.fuchsia:   </span><br><span class=\"line\">            <span class=\"keyword\">case</span> TargetPlatform.linux: </span><br><span class=\"line\">            <span class=\"keyword\">case</span> TargetPlatform.windows:     </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">const</span> ClampingScrollPhysics();  </span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"excerpt":"","more":"<h1 id=\"Flutter-MaterialApp详解\"><a href=\"#Flutter-MaterialApp详解\" class=\"headerlink\" title=\"Flutter-MaterialApp详解\"></a>Flutter-MaterialApp详解</h1><h2 id=\"Flutter整体结构图\"><a href=\"#Flutter整体结构图\" class=\"headerlink\" title=\"Flutter整体结构图\"></a>Flutter整体结构图</h2><p><img src=\"https://gitee.com/gaoxianglong/picgo/raw/master/img/20191129195736853.png\" alt=\"img\"></p>\n<h4 id=\"Flutter-Framework\"><a href=\"#Flutter-Framework\" class=\"headerlink\" title=\"Flutter Framework\"></a>Flutter Framework</h4><ul>\n<li><p>Foundation、Animation、Painting、Gestures被合成了一个Dart UI层，对应的是Flutter中 <code>dart:ui</code> 包，是Flutter引擎暴露的底层UI库，主要提供动画、手势、绘制能力。</p>\n</li>\n<li><p>Rendering层是一个抽象布局层，依赖于Dart UI层，Rendering层会构建一个UI树、当UI树有变化时，会计算出有变化的部分，然后更新UI树，最终绘制在屏幕上</p>\n</li>\n<li><p>Widgets层是Flutter提供的一套基础组件库</p>\n</li>\n<li><p>Material、Cupertino是Flutter提供了两种视觉风格的组件库（Android、iOS)</p>\n<h4 id=\"Flutter-Engine\"><a href=\"#Flutter-Engine\" class=\"headerlink\" title=\"Flutter Engine\"></a>Flutter Engine</h4><p>这是一个纯C++实现的SDK，主要执行相关的渲染、线程管理、平台事件等操作。其中包括了Skia引擎、Dart运行时、文字排版引擎等。在调用<code>dart:ui</code>库是，其实最终会走到Engine层，实现真正的绘制逻辑.</p>\n<h4 id=\"Flutter-Embedder\"><a href=\"#Flutter-Embedder\" class=\"headerlink\" title=\"Flutter Embedder\"></a>Flutter Embedder</h4><p>提供四个Task Runner，将引擎一直到平台中间层代码的渲染设置、原生插件、打包、线程管理、时间循环、交互操作等。</p>\n</li>\n<li><p>UI Runner 负责绑定渲染相关操作</p>\n</li>\n<li><p>GPU Runner 用户执行GPU指令</p>\n</li>\n<li><p>iOS Runner 处理图片数据、为GPU做准备的</p>\n</li>\n<li><p>Platform Runner 所有接口调用都使用该接口</p>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2></li>\n</ul>\n<p>本文中很多效果都没有截图，可通过视频教程查看 <a href=\"https://www.bilibili.com/video/BV1BM4y1L71Z?p=2\">视频教程地址</a></p>\n<h2 id=\"Material介绍\"><a href=\"#Material介绍\" class=\"headerlink\" title=\"Material介绍\"></a>Material介绍</h2><blockquote>\n<p>Material 组件（MDC）帮助开发者实现 <a href=\"https://material.io/design\">Material Design</a>。MDC 由谷歌团队的工程师和 UX 设计师创造，为 Android、iOS、Web 和 Flutter 提供很多美观实用的 UI 组件。</p>\n</blockquote>\n<h2 id=\"MaterialApp介绍\"><a href=\"#MaterialApp介绍\" class=\"headerlink\" title=\"MaterialApp介绍\"></a>MaterialApp介绍</h2><p><code>MaterialApp</code> 包含了许多的 <code>Widget</code> ，这些 <code>Widget</code> 通常是实现 <a href=\"https://material.io/design\">Material Design</a> 的应用程序所必须要的，包含的 <code>Widget</code> 可以在 <a href=\"https://flutter.dev/docs/development/ui/widgets/material\">Material Components widgets</a> 中查看所有。 了解基本的概念，接下来我们详细看一下 <code>MaterialApp</code> 具体怎么使用。</p>\n<h4 id=\"Material属性和说明\"><a href=\"#Material属性和说明\" class=\"headerlink\" title=\"Material属性和说明\"></a>Material属性和说明</h4><blockquote>\n<p>总共33个属性</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>字段</strong></th>\n<th><strong>属性</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">navigatorKey</td>\n<td>GlobalKey</td>\n<td>导航键</td>\n</tr>\n<tr>\n<td align=\"left\">scaffoldMessengerKey</td>\n<td>GlobalKey</td>\n<td>脚手架键</td>\n</tr>\n<tr>\n<td align=\"left\">home</td>\n<td>Widget</td>\n<td>主页，应用打开时显示的页面</td>\n</tr>\n<tr>\n<td align=\"left\">routes</td>\n<td>Map&lt;String, WidgetBuilder&gt;</td>\n<td>应用程序顶级路由表</td>\n</tr>\n<tr>\n<td align=\"left\">initialRoute</td>\n<td>String</td>\n<td>如果构建了导航器，则会显示第一个路由的名称</td>\n</tr>\n<tr>\n<td align=\"left\">onGenerateRoute</td>\n<td>RouteFactory</td>\n<td>路由管理拦截器</td>\n</tr>\n<tr>\n<td align=\"left\">onGenerateInitialRoutes</td>\n<td>InitialRouteListFactory</td>\n<td>生成初始化路由</td>\n</tr>\n<tr>\n<td align=\"left\">onUnknownRoute</td>\n<td>RouteFactory</td>\n<td>当onGenerateRoute无法生成路由时调用</td>\n</tr>\n<tr>\n<td align=\"left\">navigatorObservers</td>\n<td>List</td>\n<td>创建导航器的观察者列表</td>\n</tr>\n<tr>\n<td align=\"left\">builder</td>\n<td>TransitionBuilder</td>\n<td>在导航器上面插入小部件</td>\n</tr>\n<tr>\n<td align=\"left\">title</td>\n<td>String</td>\n<td>程序切换时显示的标题</td>\n</tr>\n<tr>\n<td align=\"left\">onGenerateTitle</td>\n<td>GenerateAppTitle</td>\n<td>程序切换时生成标题字符串</td>\n</tr>\n<tr>\n<td align=\"left\">color</td>\n<td>Color</td>\n<td>程序切换时应用图标背景颜色（仅安卓有效）</td>\n</tr>\n<tr>\n<td align=\"left\">theme</td>\n<td>ThemeData</td>\n<td>主题颜色</td>\n</tr>\n<tr>\n<td align=\"left\">darkTheme</td>\n<td>ThemeData</td>\n<td>暗黑模式主题颜色</td>\n</tr>\n<tr>\n<td align=\"left\">highContrastTheme</td>\n<td>ThemeData</td>\n<td>系统请求“高对比度”使用的主题</td>\n</tr>\n<tr>\n<td align=\"left\">highContrastDarkTheme</td>\n<td>ThemeData</td>\n<td>系统请求“高对比度”暗黑模式下使用的主题颜色</td>\n</tr>\n<tr>\n<td align=\"left\">themeMode</td>\n<td>ThemeMode</td>\n<td>使用哪种模式的主题（默认跟随系统）</td>\n</tr>\n<tr>\n<td align=\"left\">locale</td>\n<td>Locale</td>\n<td>初始区域设置</td>\n</tr>\n<tr>\n<td align=\"left\">localizationsDelegates</td>\n<td>Iterable<LocalizationsDelegate></td>\n<td>本地化代理</td>\n</tr>\n<tr>\n<td align=\"left\">localeListResolutionCallback</td>\n<td>LocaleListResolutionCallback</td>\n<td>失败或未提供设备的语言环境</td>\n</tr>\n<tr>\n<td align=\"left\">localeResolutionCallback</td>\n<td>LocaleResolutionCallback</td>\n<td>负责计算语言环境</td>\n</tr>\n<tr>\n<td align=\"left\">supportedLocales</td>\n<td>Iterable</td>\n<td>本地化地区列表</td>\n</tr>\n<tr>\n<td align=\"left\">debugShowMaterialGrid</td>\n<td>bool</td>\n<td>绘制基线网格叠加层（仅debug模式）</td>\n</tr>\n<tr>\n<td align=\"left\">showPerformanceOverlay</td>\n<td>bool</td>\n<td>显示性能叠加</td>\n</tr>\n<tr>\n<td align=\"left\">checkerboardRasterCacheImages</td>\n<td>bool</td>\n<td>打开栅格缓存图像的棋盘格。</td>\n</tr>\n<tr>\n<td align=\"left\">checkerboardOffscreenLayers</td>\n<td>bool</td>\n<td>打开渲染到屏幕外位图的层的棋盘格。</td>\n</tr>\n<tr>\n<td align=\"left\">showSemanticsDebugger</td>\n<td>bool</td>\n<td>打开显示可访问性信息的叠加层</td>\n</tr>\n<tr>\n<td align=\"left\">debugShowCheckedModeBanner</td>\n<td>bool</td>\n<td>调试显示检查模式横幅</td>\n</tr>\n<tr>\n<td align=\"left\">shortcuts</td>\n<td>Map&lt;LogicalKeySet, Intent&gt;</td>\n<td>应用程序意图的键盘快捷键的默认映射。</td>\n</tr>\n<tr>\n<td align=\"left\">actions</td>\n<td>Map&lt;Type, Action&gt;</td>\n<td>包含和定义用户操作的映射</td>\n</tr>\n<tr>\n<td align=\"left\">restorationScopeId</td>\n<td>String</td>\n<td>应用程序状态恢复的标识符</td>\n</tr>\n<tr>\n<td align=\"left\">scrollBehavior</td>\n<td>ScrollBehavior</td>\n<td>可滚动小部件的行为方式</td>\n</tr>\n</tbody></table>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><h5 id=\"创建一个MaterialApp\"><a href=\"#创建一个MaterialApp\" class=\"headerlink\" title=\"创建一个MaterialApp\"></a>创建一个MaterialApp</h5><blockquote>\n<p>MaterialApp(…)</p>\n</blockquote>\n<h5 id=\"创建一个使用-Router-而不是-Navigator-的-MaterialApp\"><a href=\"#创建一个使用-Router-而不是-Navigator-的-MaterialApp\" class=\"headerlink\" title=\"创建一个使用 Router 而不是 Navigator 的 MaterialApp\"></a>创建一个使用 Router 而不是 Navigator 的 MaterialApp</h5><blockquote>\n<p>MaterialApp.router(…)</p>\n</blockquote>\n<h2 id=\"属性详解\"><a href=\"#属性详解\" class=\"headerlink\" title=\"属性详解\"></a>属性详解</h2><h3 id=\"1、navigatorKey\"><a href=\"#1、navigatorKey\" class=\"headerlink\" title=\"1、navigatorKey\"></a>1、navigatorKey</h3><p><code>navigatorKey</code> 相当于 <code>Navigator.of(context)</code> ，如果应用程序想实现无 <code>context</code> 跳转，那么可以通过设置该key, 通过 <code>navigatorKey.currentState.overlay.context</code> 获取全局context。</p>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;NavigatorState&gt; _navigatorKey = GlobalKey(); </span><br><span class=\"line\">MaterialApp(  </span><br><span class=\"line\">    navigatorKey: _navigatorKey, </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、scaffoldMessengerKey\"><a href=\"#2、scaffoldMessengerKey\" class=\"headerlink\" title=\"2、scaffoldMessengerKey\"></a>2、scaffoldMessengerKey</h3><p>scaffoldMessengerKey<code>主要是管理后代的</code>Scaffolds<code>，可以实现无 </code>context<code>调用</code>snack bars</p>\n<h4 id=\"使用方法-1\"><a href=\"#使用方法-1\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;ScaffoldMessengerState&gt; _scaffoldKey = GlobalKey(); </span><br><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    scaffoldMessengerKey: _scaffoldKey, </span><br><span class=\"line\">);</span><br><span class=\"line\">_scaffoldKey.currentState.showSnackBar(</span><br><span class=\"line\">    SnackBar(content: Text(<span class=\"string\">&quot;show SnackBar&quot;</span>))</span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、home\"><a href=\"#3、home\" class=\"headerlink\" title=\"3、home\"></a>3、home</h3><p>程序进入后的第一个界面，传入一个 <code>Widget</code></p>\n<h5 id=\"使用方法-2\"><a href=\"#使用方法-2\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">... </span><br><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    home: Scaffold(...),</span><br><span class=\"line\">); </span><br><span class=\"line\">... </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、routes\"><a href=\"#4、routes\" class=\"headerlink\" title=\"4、routes\"></a>4、routes</h3><p>生成路由表，以键值对形式传入 <code>key</code> 为路由名字， <code>value</code> 为对应的<code>Widget</code></p>\n<h5 id=\"使用方法-3\"><a href=\"#使用方法-3\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    routes: &#123;   </span><br><span class=\"line\">        <span class=\"string\">&quot;/home&quot;</span>: (_) =&gt; Home(), </span><br><span class=\"line\">        <span class=\"string\">&quot;/my&quot;</span>: (_) =&gt; My()  </span><br><span class=\"line\">            <span class=\"comment\">//.... </span></span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、initialRoute\"><a href=\"#5、initialRoute\" class=\"headerlink\" title=\"5、initialRoute\"></a>5、initialRoute</h3><p>初始路由，如果设置了该参数并且在 <code>routes</code> 找到了对应的key，将会展示对应的 <code>Widget</code> ，否则展示 <code>home</code></p>\n<h5 id=\"使用方法-4\"><a href=\"#使用方法-4\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    routes: &#123;    </span><br><span class=\"line\">        <span class=\"string\">&quot;/home&quot;</span>: (_) =&gt; Home(),   </span><br><span class=\"line\">        <span class=\"string\">&quot;/my&quot;</span>: (_) =&gt; My()  </span><br><span class=\"line\">    &#125;,   </span><br><span class=\"line\">    initialRoute: <span class=\"string\">&quot;/home&quot;</span>, </span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、onGenerateRoute\"><a href=\"#6、onGenerateRoute\" class=\"headerlink\" title=\"6、onGenerateRoute\"></a>6、onGenerateRoute</h3><p>当跳转路由时，如果在 <code>routes</code> 找不到对应的 <code>key</code> ，会执行该回调，会调用会返回一个 <code>RouteSettings</code> ，该对象中有 <code>name</code> 路由名称、 <code>arguments</code> 路由参数。</p>\n<h5 id=\"使用方法-5\"><a href=\"#使用方法-5\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp(   </span><br><span class=\"line\">    routes: &#123;    </span><br><span class=\"line\">        <span class=\"string\">&quot;/home&quot;</span>: (_) =&gt; Home(),     </span><br><span class=\"line\">        <span class=\"string\">&quot;/my&quot;</span>: (_) =&gt; My()   </span><br><span class=\"line\">    &#125;,  </span><br><span class=\"line\">    initialRoute: <span class=\"string\">&quot;/home&quot;</span>,  </span><br><span class=\"line\">    onGenerateRoute: (setting) &#123;    </span><br><span class=\"line\">        <span class=\"comment\">// 这里可以做进一步的逻辑处理    </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> MaterialPageRoute(builder: (_) =&gt; Home()); </span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、onGenerateInitialRoutes\"><a href=\"#7、onGenerateInitialRoutes\" class=\"headerlink\" title=\"7、onGenerateInitialRoutes\"></a>7、onGenerateInitialRoutes</h3><p>如果提供了 <code>initialRoute</code> ，则用于生成初始路由的路由生成器回调，如果未设置此属性，则底层 <a href=\"http://navigator.ongenerateinitialroutes/\">Navigator.onGenerateInitialRoutes</a> 将默认为 <a href=\"https://api.flutter.dev/flutter/widgets/Navigator/defaultGenerateInitialRoutes.html\">Navigator.defaultGenerateInitialRoutes</a>。</p>\n<h5 id=\"使用方法-6\"><a href=\"#使用方法-6\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp(</span><br><span class=\"line\">    initialRoute: <span class=\"string\">&quot;/home&quot;</span>,  </span><br><span class=\"line\">    onGenerateInitialRoutes: (initialRoute) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> [   </span><br><span class=\"line\">            MaterialPageRoute(builder: (_) =&gt; Home()), </span><br><span class=\"line\">            MaterialPageRoute(builder: (_) =&gt; My()),   </span><br><span class=\"line\">        ];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、onUnknownRoute\"><a href=\"#8、onUnknownRoute\" class=\"headerlink\" title=\"8、onUnknownRoute\"></a>8、onUnknownRoute</h3><p>效果和 <code>onGenerateRoute</code> 一样，只是先走 <code>onGenerateRoute</code> ，如果无法生成路由时则在调用 <code>onUnknownRoute</code> 。</p>\n<h5 id=\"使用方法-7\"><a href=\"#使用方法-7\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp(  </span><br><span class=\"line\">    routes: &#123;    </span><br><span class=\"line\">        <span class=\"string\">&quot;/home&quot;</span>: (_) =&gt; Home(),   </span><br><span class=\"line\">        <span class=\"string\">&quot;/my&quot;</span>: (_) =&gt; My()    </span><br><span class=\"line\">    &#125;,   </span><br><span class=\"line\">    initialRoute: <span class=\"string\">&quot;/home&quot;</span>,  </span><br><span class=\"line\">    onGenerateRoute: (setting) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>; </span><br><span class=\"line\">    &#125;,  </span><br><span class=\"line\">    onUnknownRoute: (setting) &#123;   </span><br><span class=\"line\">        <span class=\"keyword\">return</span> MaterialPageRoute(builder: (_) =&gt; Home());  </span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、navigatorObservers\"><a href=\"#9、navigatorObservers\" class=\"headerlink\" title=\"9、navigatorObservers\"></a>9、navigatorObservers</h3><p>路由监听器，主要是就是监听页面路由堆栈的变化，当页面进行 <code>push</code> <code>pop</code> <code>remove</code> <code>replace</code> 等操作时会进行监听。</p>\n<h5 id=\"使用方法-8\"><a href=\"#使用方法-8\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    navigatorObservers: [ </span><br><span class=\"line\">        MyObserver() </span><br><span class=\"line\">    ], </span><br><span class=\"line\">) </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">NavigatorObserver</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"meta\">@override</span>  <span class=\"keyword\">void</span> didPush(Route route, Route previousRoute) &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">print</span>(route); </span><br><span class=\"line\">        <span class=\"built_in\">print</span>(previousRoute);   </span><br><span class=\"line\">        <span class=\"keyword\">super</span>.didPush(route, previousRoute); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、builder\"><a href=\"#10、builder\" class=\"headerlink\" title=\"10、builder\"></a>10、builder</h3><p>当构建 <code>Widget</code> 前调用，主要用于字体大小、主题颜色等配置</p>\n<h5 id=\"使用方法-9\"><a href=\"#使用方法-9\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp(  </span><br><span class=\"line\">    routes: &#123;    </span><br><span class=\"line\">        <span class=\"string\">&quot;/home&quot;</span>: (_) =&gt; Home(),  </span><br><span class=\"line\">        <span class=\"string\">&quot;/my&quot;</span>: (_) =&gt; My()  </span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    initialRoute: <span class=\"string\">&quot;/home&quot;</span>,   </span><br><span class=\"line\">    onGenerateRoute: (setting) &#123;   </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>; </span><br><span class=\"line\">    &#125;,  </span><br><span class=\"line\">    onUnknownRoute: (setting) &#123;    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> MaterialPageRoute(builder: (_) =&gt; Home());  </span><br><span class=\"line\">    &#125;, \t</span><br><span class=\"line\">    builder: (_, child) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">            appBar: AppBar(title: Text(<span class=\"string\">&quot;build&quot;</span>)), </span><br><span class=\"line\">            body: child,</span><br><span class=\"line\">        );  </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11、title\"><a href=\"#11、title\" class=\"headerlink\" title=\"11、title\"></a>11、title</h3><p>Android：任务管理器的程序快照之上 IOS: 程序切换管理器中</p>\n<h5 id=\"使用方法-10\"><a href=\"#使用方法-10\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    title: <span class=\"string\">&#x27;Flutter应用&#x27;</span>, </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12、onGenerateTitle\"><a href=\"#12、onGenerateTitle\" class=\"headerlink\" title=\"12、onGenerateTitle\"></a>12、onGenerateTitle</h3><p>如果非空，则调用此回调函数以生成应用程序的标题字符串，否则会使用 <code>title</code> 。每次重建页面是该方法就会回调执行。</p>\n<h5 id=\"使用方法-11\"><a href=\"#使用方法-11\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    title: <span class=\"string\">&#x27;Flutter应用&#x27;</span>, </span><br><span class=\"line\">    onGenerateTitle: (_) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;我的天&quot;</span>;   </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13、color\"><a href=\"#13、color\" class=\"headerlink\" title=\"13、color\"></a>13、color</h3><p>设置该值的在程序切换时应用图标的背景颜色，当应用图标为透明时。</p>\n<h5 id=\"使用方法-12\"><a href=\"#使用方法-12\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    color: Colors.blue,</span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14、theme\"><a href=\"#14、theme\" class=\"headerlink\" title=\"14、theme\"></a>14、theme</h3><p>如果指定了 <code>darkTheme</code> ，那么用于提供用户界面的深色版本。如果提供了 <code>darkTheme</code> ， <code>themeMode</code> 将控制将使用哪个主题。默认值是 <code>ThemeData.light()</code> 应用程序的主题颜色</p>\n<h5 id=\"使用方法-13\"><a href=\"#使用方法-13\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    theme: ThemeData(    </span><br><span class=\"line\">        <span class=\"comment\">// 主要颜色 </span></span><br><span class=\"line\">        primaryColor: Colors.red </span><br><span class=\"line\">    ),</span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15、darkTheme\"><a href=\"#15、darkTheme\" class=\"headerlink\" title=\"15、darkTheme\"></a>15、darkTheme</h3><p>应用程序深色主题颜色</p>\n<h5 id=\"使用方法-14\"><a href=\"#使用方法-14\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    theme: ThemeData(   </span><br><span class=\"line\">        <span class=\"comment\">// 主要颜色    </span></span><br><span class=\"line\">        primaryColor: Colors.red </span><br><span class=\"line\">    ),</span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16、highContrastTheme\"><a href=\"#16、highContrastTheme\" class=\"headerlink\" title=\"16、highContrastTheme\"></a>16、highContrastTheme</h3><p>当系统请求“高对比度”时使用的 <code>ThemeData</code> ，当该值为空时会用 <code>theme</code> 应用该主题</p>\n<h5 id=\"使用方法-15\"><a href=\"#使用方法-15\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    highContrastTheme: ThemeData(  </span><br><span class=\"line\">        primaryColor: Colors.pink </span><br><span class=\"line\">    ),</span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17、highContrastDarkTheme\"><a href=\"#17、highContrastDarkTheme\" class=\"headerlink\" title=\"17、highContrastDarkTheme\"></a>17、highContrastDarkTheme</h3><p>当系统再暗黑模式下请求“高对比度”时使用的 <code>ThemeData</code> ，当该值为空时会用 <code>darkTheme</code> 应用该主题。</p>\n<h5 id=\"使用方法-16\"><a href=\"#使用方法-16\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    highContrastDarkTheme: ThemeData(</span><br><span class=\"line\">        primaryColor: Colors.green</span><br><span class=\"line\">    ), </span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18、themeMode\"><a href=\"#18、themeMode\" class=\"headerlink\" title=\"18、themeMode\"></a>18、themeMode</h3><p>白天模式和暗黑模式模式切换，默认值为 <code>ThemeMode.system</code></p>\n<h5 id=\"使用方法-17\"><a href=\"#使用方法-17\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    themeMode: ThemeMode.dark</span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19、locale\"><a href=\"#19、locale\" class=\"headerlink\" title=\"19、locale\"></a>19、locale</h3><p>主要用于语言切换时，如果为 <code>null</code> 时使用系统区域</p>\n<h5 id=\"使用方法-18\"><a href=\"#使用方法-18\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp(  </span><br><span class=\"line\">    locale: Locale(<span class=\"string\">&#x27;zh&#x27;</span>, <span class=\"string\">&#x27;CN&#x27;</span>) <span class=\"comment\">// 中文简体 </span></span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20、localizationsDelegates\"><a href=\"#20、localizationsDelegates\" class=\"headerlink\" title=\"20、localizationsDelegates\"></a>20、localizationsDelegates</h3><p>本地化委托</p>\n<h5 id=\"使用方法-19\"><a href=\"#使用方法-19\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    locale: Locale(<span class=\"string\">&#x27;zh&#x27;</span>, <span class=\"string\">&#x27;CN&#x27;</span>) <span class=\"comment\">// 中文简体 </span></span><br><span class=\"line\">    localizationsDelegates: [  </span><br><span class=\"line\">        GlobalMaterialLocalizations.delegate,  </span><br><span class=\"line\">        GlobalWidgetsLocalizations.delegate, </span><br><span class=\"line\">    ],</span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"21、supportedLocales\"><a href=\"#21、supportedLocales\" class=\"headerlink\" title=\"21、supportedLocales\"></a>21、supportedLocales</h3><p>当前应用支持的 <code>Locale</code> 列表</p>\n<h5 id=\"使用方法-20\"><a href=\"#使用方法-20\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp(  </span><br><span class=\"line\">    locale: Locale(<span class=\"string\">&#x27;zh&#x27;</span>, <span class=\"string\">&#x27;CN&#x27;</span>), <span class=\"comment\">// 中文简体  </span></span><br><span class=\"line\">    supportedLocales: [    </span><br><span class=\"line\">        Locale(<span class=\"string\">&#x27;en&#x27;</span>, <span class=\"string\">&#x27;US&#x27;</span>), <span class=\"comment\">//美国英语    </span></span><br><span class=\"line\">        Locale(<span class=\"string\">&quot;zh&quot;</span>, <span class=\"string\">&#x27;CN&#x27;</span>), <span class=\"comment\">//中文简体  </span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"22、localeListResolutionCallback\"><a href=\"#22、localeListResolutionCallback\" class=\"headerlink\" title=\"22、localeListResolutionCallback\"></a>22、localeListResolutionCallback</h3><p>监听系统语言切换事件，一些安卓系统特性，可设置多语言列表，默认以第一个列表为默认语言</p>\n<h5 id=\"使用方法-21\"><a href=\"#使用方法-21\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp(  </span><br><span class=\"line\">    locale: Locale(<span class=\"string\">&#x27;zh&#x27;</span>, <span class=\"string\">&#x27;CN&#x27;</span>), <span class=\"comment\">// 中文简体  </span></span><br><span class=\"line\">    supportedLocales: [   </span><br><span class=\"line\">        Locale(<span class=\"string\">&#x27;en&#x27;</span>, <span class=\"string\">&#x27;US&#x27;</span>), <span class=\"comment\">//美国英语   </span></span><br><span class=\"line\">        Locale(<span class=\"string\">&quot;zh&quot;</span>, <span class=\"string\">&#x27;CN&#x27;</span>), <span class=\"comment\">//中文简体 </span></span><br><span class=\"line\">    ],  </span><br><span class=\"line\">    localeListResolutionCallback: (<span class=\"built_in\">List</span>&lt;Locale&gt; locales, <span class=\"built_in\">Iterable</span>&lt;Locale&gt; supportedLocales) </span><br><span class=\"line\">    &#123;    </span><br><span class=\"line\">        <span class=\"comment\">// 系统切换语言时调用    </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Locale(<span class=\"string\">&quot;zh&quot;</span>, <span class=\"string\">&#x27;CN&#x27;</span>); </span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"23、localeResolutionCallback\"><a href=\"#23、localeResolutionCallback\" class=\"headerlink\" title=\"23、localeResolutionCallback\"></a>23、localeResolutionCallback</h3><p>监听系统语言切换事件</p>\n<h5 id=\"使用方法-22\"><a href=\"#使用方法-22\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp(</span><br><span class=\"line\">    locale: Locale(<span class=\"string\">&#x27;zh&#x27;</span>, <span class=\"string\">&#x27;CN&#x27;</span>), <span class=\"comment\">// 中文简体  </span></span><br><span class=\"line\">    supportedLocales: [   </span><br><span class=\"line\">        Locale(<span class=\"string\">&#x27;en&#x27;</span>, <span class=\"string\">&#x27;US&#x27;</span>), <span class=\"comment\">//美国英语  </span></span><br><span class=\"line\">        Locale(<span class=\"string\">&quot;zh&quot;</span>, <span class=\"string\">&#x27;CN&#x27;</span>), <span class=\"comment\">//中文简体 </span></span><br><span class=\"line\">    ],  </span><br><span class=\"line\">    localeResolutionCallback: (Locale locale, <span class=\"built_in\">Iterable</span>&lt;Locale&gt; supportedLocales)&#123;   </span><br><span class=\"line\">        <span class=\"keyword\">return</span> Locale(<span class=\"string\">&quot;zh&quot;</span>, <span class=\"string\">&#x27;CN&#x27;</span>); </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"24、debugShowMaterialGrid\"><a href=\"#24、debugShowMaterialGrid\" class=\"headerlink\" title=\"24、debugShowMaterialGrid\"></a>24、debugShowMaterialGrid</h3><p>在 <code>debug</code> 模式下展示基线网格</p>\n<h5 id=\"使用方法-23\"><a href=\"#使用方法-23\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    debugShowMaterialGrid: <span class=\"keyword\">true</span></span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"25、showPerformanceOverlay\"><a href=\"#25、showPerformanceOverlay\" class=\"headerlink\" title=\"25、showPerformanceOverlay\"></a>25、showPerformanceOverlay</h3><p>显示性能叠加，开启此模式主要用于性能测试</p>\n<h5 id=\"使用方法-24\"><a href=\"#使用方法-24\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    showPerformanceOverlay: <span class=\"keyword\">true</span> </span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"26、checkerboardRasterCacheImages\"><a href=\"#26、checkerboardRasterCacheImages\" class=\"headerlink\" title=\"26、checkerboardRasterCacheImages\"></a>26、checkerboardRasterCacheImages</h3><p>打开栅格缓存图像的棋盘格</p>\n<h5 id=\"使用方法-25\"><a href=\"#使用方法-25\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp(</span><br><span class=\"line\">    checkerboardRasterCacheImages: <span class=\"keyword\">true</span></span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"27、checkerboardOffscreenLayers\"><a href=\"#27、checkerboardOffscreenLayers\" class=\"headerlink\" title=\"27、checkerboardOffscreenLayers\"></a>27、checkerboardOffscreenLayers</h3><p>打开渲染到屏幕外位图的层的棋盘格</p>\n<h5 id=\"使用方法-26\"><a href=\"#使用方法-26\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    checkerboardOffscreenLayers: <span class=\"keyword\">true</span></span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"28、showSemanticsDebugger\"><a href=\"#28、showSemanticsDebugger\" class=\"headerlink\" title=\"28、showSemanticsDebugger\"></a>28、showSemanticsDebugger</h3><p>打开显示可访问性信息的叠加层，展示组件之间的关系、占位大小</p>\n<h5 id=\"使用方法-27\"><a href=\"#使用方法-27\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp(</span><br><span class=\"line\">    showSemanticsDebugger: <span class=\"keyword\">true</span> </span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"29、debugShowCheckedModeBanner\"><a href=\"#29、debugShowCheckedModeBanner\" class=\"headerlink\" title=\"29、debugShowCheckedModeBanner\"></a>29、debugShowCheckedModeBanner</h3><p>调试显示检查模式横幅</p>\n<h5 id=\"使用方法-28\"><a href=\"#使用方法-28\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    debugShowCheckedModeBanner: <span class=\"keyword\">false</span></span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"30、shortcuts以及actions\"><a href=\"#30、shortcuts以及actions\" class=\"headerlink\" title=\"30、shortcuts以及actions\"></a>30、shortcuts以及actions</h3><p><code>shortcuts</code> 和 <code>actions</code> 是将物理键盘事件绑定到用户界面中的操作。 比如，要在您的应用程序中定义键盘快捷键，这里不做过多的描述，后面我会专门拿一个专题来讲解。</p>\n<h3 id=\"31、restorationScopeId\"><a href=\"#31、restorationScopeId\" class=\"headerlink\" title=\"31、restorationScopeId\"></a>31、restorationScopeId</h3><p>定义一个应用程序状态恢复的标识符，提供标识符会将 <a href=\"https://api.flutter.dev/flutter/widgets/RootRestorationScope-class.html\">RootRestorationScope</a> 插入 <code>widget</code> 层次结构，从而为后代 <code>widget</code> 启用状态恢复。还可以通过标识符使 <code>WidgetsApp</code> 构建的导航器恢复其状态（即恢复活动路由的历史堆栈），由于这里涉及的内容较多，后面会专门拿一个专题来讲解。</p>\n<h3 id=\"32、scrollBehavior\"><a href=\"#32、scrollBehavior\" class=\"headerlink\" title=\"32、scrollBehavior\"></a>32、scrollBehavior</h3><p>统一滚动行为设置，设置后子组件将返回对应的滚动行为</p>\n<h5 id=\"使用方法-29\"><a href=\"#使用方法-29\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp( </span><br><span class=\"line\">    scrollBehavior: ScrollBehaviorModified()</span><br><span class=\"line\">)  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScrollBehaviorModified</span> <span class=\"keyword\">extends</span> <span class=\"title\">ScrollBehavior</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">const</span> ScrollBehaviorModified();</span><br><span class=\"line\">    <span class=\"meta\">@override</span>  ScrollPhysics getScrollPhysics(BuildContext context) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (getPlatform(context)) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">case</span> TargetPlatform.iOS:   </span><br><span class=\"line\">            <span class=\"keyword\">case</span> TargetPlatform.macOS:  </span><br><span class=\"line\">            <span class=\"keyword\">case</span> TargetPlatform.android:   </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">const</span> BouncingScrollPhysics();  </span><br><span class=\"line\">            <span class=\"keyword\">case</span> TargetPlatform.fuchsia:   </span><br><span class=\"line\">            <span class=\"keyword\">case</span> TargetPlatform.linux: </span><br><span class=\"line\">            <span class=\"keyword\">case</span> TargetPlatform.windows:     </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">const</span> ClampingScrollPhysics();  </span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Flutter-Scaffold详解","date":"2021-09-18T01:25:34.000Z","description":"Flutter-Scaffold详解","top_img":"https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg","cover":"https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg","_content":"\n## Scaffold介绍\n\n`Scaffold` 我们通常俗称为脚手架，在前面的文章中我们说到，`Material` 组件（MDC）帮助开发者实现 [Material Design](https://material.io/design)，`Scaffold` 实现了基本的 [Material Design](https://material.io/design) 布局结构。在 `Material` 设计中定义的单个界面上的各种布局元素，在 Scaffold 中都支持。\n\n#### Scaffold在什么情况下使用\n\n在每一个页面中基本都需要用到`Scaffold` ，除非当你的页面不需要导航区，但仍希望您使用 `Scaffold` 来作为每个页面的顶级组件。\n\n## 示例代码\n\n本文中很多效果都没有截图，可通过视频教程查看 [视频教程地址](https://www.bilibili.com/video/BV1BM4y1L71Z?p=3)\n\n## Scaffold属性和说明\n\n> 总共23个属性\n\n| 字段                           | 属性                         | 描述                                                   |\n| ------------------------------ | ---------------------------- | ------------------------------------------------------ |\n| appBar                         | PreferredSizeWidget          | 显示脚手架的顶部导航区                                 |\n| body                           | Widget                       | 显示脚手架的主要内容                                   |\n| floatingActionButton           | Widget                       | 悬浮按钮，位于右下角                                   |\n| floatingActionButtonLocation   | FloatingActionButtonLocation | 决定悬浮按钮的位置                                     |\n| floatingActionButtonAnimator   | FloatingActionButtonAnimator | 决定悬浮按钮的动画                                     |\n| persistentFooterButtons        | List                         | 显示在脚手架底部的一组按钮                             |\n| drawer                         | Widget                       | 左侧抽屉菜单组件                                       |\n| onDrawerChanged                | DrawerCallback               | 左侧抽屉菜单改变事件回调                               |\n| endDrawer                      | Widget                       | 右侧抽屉菜单组件                                       |\n| onEndDrawerChanged             | DrawerCallback               | 右侧抽屉菜单改变事件回调                               |\n| bottomNavigationBar            | Widget                       | 底部导航条                                             |\n| bottomSheet                    | Widget                       | 持久在body下方，底部控件上方的控件                     |\n| backgroundColor                | Color                        | 脚手架背景颜色                                         |\n| resizeToAvoidBottomInset       | bool                         | 防止小组件重复                                         |\n| primary                        | bool                         | 脚手架是否延伸到顶部                                   |\n| drawerDragStartBehavior        | DragStartBehavior            | 检测手势行为方式，与drawer配合使用                     |\n| extendBody                     | bool                         | 是否延伸到底部                                         |\n| extendBodyBehindAppBar         | bool                         | 是否延伸到顶部，用于做半透明、毛玻璃效果的主要控制属性 |\n| drawerScrimColor               | Color                        | 侧边栏弹出时非遮盖层主页面的颜色                       |\n| drawerEdgeDragWidth            | double                       | 侧边栏弹出时非遮罩层的宽度                             |\n| drawerEnableOpenDragGesture    | bool                         | 左侧抽屉是否支持手势滑动                               |\n| endDrawerEnableOpenDragGesture | bool                         | 右侧抽屉是否支持手势滑动                               |\n| restorationId                  | String                       | 状态还原标识符                                         |\n\n## Scaffold属性详细使用\n\n### 1、appBar\n\n显示脚手架的顶部导航栏\n\n#### 使用方法\n\n```dart\nScaffold( \n    appBar: AppBar(   \n        title: Text(\"Scaffold\"),\n    ),\n); \n```\n\n### 2、body\n\n显示脚手架的主要内容\n\n#### 使用方法\n\n```dart\nScaffold(  \n    appBar: AppBar(  \n        title: Text(\"Scaffold\"), \n    ), \n    body: Center(  \n        child: Text(\"body\"), \n    ), \n); \n```\n\n### 3、floatingActionButton\n\n悬浮按钮，默认位于右小角\n\n#### 使用方法\n\n```dart\nScaffold(  \n    appBar: AppBar(  \t\n        title: Text(\"Scaffold\"), \n    ),  \n    body: Center(  \n        child: Text(\"body\"), \n    ),  \n    floatingActionButton: FloatingActionButton(  \n        onPressed: (){   \n            print(\"add\");  \n        },  \n        child: Icon(Icons.add) \n    ),\n); \n```\n\n### 4、floatingActionButtonLocation\n\n决定悬浮按钮的位置\n\n#### 使用方法\n\n```dart\nScaffold( \n    appBar: AppBar(  \t\n        title: Text(\"Scaffold\"), \n    ),  \n    body: Center(  \t\n        child: Text(\"body\"), \n    ),  \n    floatingActionButton: FloatingActionButton(  \n        onPressed: (){   \n            print(\"add\");  \n        },  \n        child: Icon(Icons.add) \n    ), \n    floatingActionButtonLocation: FloatingActionButtonLocation.miniCenterDocked,\n); \n```\n\n### 5、floatingActionButtonAnimator\n\n决定悬浮按钮的动画\n\n#### 使用方法\n\n```dart\nScaffold( \n    appBar: AppBar(  \n        title: Text(\"Scaffold\"), \n    ),  \n    body: Center(  \n        child: Text(\"body\"), \n    ), \n    floatingActionButton: FloatingActionButton( \n        onPressed: (){  \n            print(\"add\");   \n        },  \n        child: Icon(Icons.add) \n    ), \n    floatingActionButtonLocation:FloatingActionButtonLocation.miniCenterDocked,  \n    floatingActionButtonAnimator: FloatingActionButtonAnimator.scaling, \n); \n```\n\n### 6、persistentFooterButtons\n\n显示在脚手架底部的一组按钮\n\n#### 使用方法\n\n```dart\nScaffold(  \n    appBar: AppBar(  \t\n        title: Text(\"Scaffold\"), \n    ),  \n    body: Center(  \n        child: Text(\"body\"), \n    ), \n    persistentFooterButtons: [   \n        TextButton(\n            onPressed: (){}, \n            child: Text(\"Text1\")),  \n        TextButton(\n            onPressed: (){}, \n            child: Text(\"Text2\")), \n    ],\n); \n```\n\n### 7、drawer\n\n左侧抽屉菜单组件，如果需要自定义可通过设置 `Scaffold` 的 `key` 来操作手动打开侧边栏，代码如下\n\n#### 使用方法\n\n```dart\nGlobalKey<ScaffoldState> _scaffoldKey = GlobalKey(); \nScaffold( \n    key: _scaffoldKey, \n    appBar: AppBar( \n        title: Text(\"Scaffold\"), \n        leading: IconButton(\n            onPressed: (){    \n                _scaffoldKey.currentState.openDrawer(); \n            }, \n            icon: Icon(Icons.menu_open)), \n    ),\n    body: Center(  \n        child: Text(\"body\"),\n    ), \n    drawer: Drawer(   \n        child: Center(child: Text(\"draw\"),), \n    ) \n); \n```\n\n### 8、onDrawerChanged\n\n左侧抽屉菜单改变事件回调\n\n#### 使用方法\n\n```dart\nGlobalKey<ScaffoldState> _scaffoldKey = GlobalKey(); \nScaffold( \n    key: _scaffoldKey, \n    appBar: AppBar(  \n        title: Text(\"Scaffold\"),  \n        leading: IconButton(\n            onPressed: (){     \n                _scaffoldKey.currentState.openDrawer();  \n            }, \n            icon: Icon(Icons.menu_open)), \n    ),  \n    body: Center(  \n        child: Text(\"body\"), \n    ), \n    drawer: Drawer(  \n        child: Center(child: Text(\"draw\"),), \n    ), \n    onDrawerChanged: (isOpen) {\n        print(isOpen); \n    },\n); \n```\n\n### 9、endDrawer\n\n右侧抽屉菜单组件,功能和 `drawer` 一样，唯一的区别是一个在左侧，一个在右侧。\n\n#### 使用方法\n\n```dart\nGlobalKey<ScaffoldState> _scaffoldKey = GlobalKey();\nScaffold( \n    key: _scaffoldKey, \n    appBar: AppBar(  \n        title: Text(\"Scaffold\"),  \n        leading: IconButton(\n            onPressed: (){     \n                _scaffoldKey.currentState.openDrawer();   \n            }, \n            icon: Icon(Icons.menu_open)),\n    ), \n    body: Center(  \n        child: Text(\"body\"), \n    ),\n    endDrawer: Drawer(  \n        child: Center(child: Text(\"draw\"),), \n    ), \n); \n```\n\n### 10、onEndDrawerChanged\n\n右侧抽屉菜单改变事件回调，使用方式和 `onDrawerChanged` 一样。\n\n#### 使用方法\n\n```dart\nGlobalKey<ScaffoldState> _scaffoldKey = GlobalKey(); \nScaffold(  \n    key: _scaffoldKey,  \n    appBar: AppBar(  \t\n        title: Text(\"Scaffold\"),   \n        leading: IconButton(\n            onPressed: (){ \n                _scaffoldKey.currentState.openDrawer(); \n            },\n            icon: Icon(Icons.menu_open)), \n    ),  \n    body: Center(  \n        child: Text(\"body\"), \n    ),\n    endDrawer: Drawer(  \n        child: Center(child: Text(\"draw\"),),\n    ),  \n    onEndDrawerChanged: (isOpen) { \n        print(isOpen); \n    },\n); \n```\n\n### 11、bottomNavigationBar\n\n 底部导航条，常用于切换底部 `item`\n\n#### 使用方法\n\n```dart\nint _currentIndex = 0;  \nList<Widget> _pages = [  \n    Center(child: Text(\"tab1\"),), \n    Center(child: Text(\"tab2\"),), \n]; \nScaffold( \n    appBar: AppBar(  \n        title: Text(\"Scaffold\"),\n    ),\n    body: _pages[_currentIndex], \n    bottomNavigationBar: BottomNavigationBar( \n        items: [  \n            BottomNavigationBarItem(    \n                label: \"tab1\",   \n                icon: Icon(Icons.settings)  \n            ),    \n            BottomNavigationBarItem(    \n                label: \"tab2\",  \n                icon: Icon(Icons.settings)   \n            )  \n        ],  \n        currentIndex: _currentIndex, \n        onTap: (currentIndex) { \n            setState(() {   \n                _currentIndex = currentIndex;   \n            });  \n        }, \n    ), \n); \n```\n\n### 12、bottomSheet\n\n持久在body下方，底部控件上方的控件\n\n#### 使用方法\n\n```dart\nScaffold(  \n    appBar: AppBar(   \n        title: Text(\"Scaffold\"), \n    ),  \n    body: _pages[_currentIndex], \n    bottomSheet: Container(\n        child: Row( \n            children: [    \n                Expanded(child: TextField()),    \n                ElevatedButton(\n                    onPressed: (){}, \n                    child: Text(\"发送\"))   \n            ], \n        ),\n    ) \n); \n```\n\n### 13、backgroundColor\n\n脚手架背景颜色\n\n#### 使用方法\n\n```dart\nScaffold( \n    appBar: AppBar(   \n        title: Text(\"Scaffold\"), \n    ), \n    body: _pages[_currentIndex], \n    backgroundColor: Colors.pink, \n); \n```\n\n### 14、resizeToAvoidBottomInset\n\n防止组件重复，当键盘弹起时会挡住组件，该值设置为 `ture` 可防止键盘遮挡\n\n#### 使用方法\n\n```dart\nScaffold( \n    appBar: AppBar(  \n        title: Text(\"Scaffold\"), \n    ), \n    body: _pages[_currentIndex], \n    resizeToAvoidBottomInset: true, \n); \n```\n\n### 15、primary\n\n脚手架是否延伸到顶部\n\n#### 使用方法\n\n```dart\nScaffold(  \n    appBar: AppBar(  \n        title: Text(\"Scaffold\"), \n    ),  \n    body: _pages[_currentIndex],\n    primary: true, \n); \n```\n\n### 16、drawerDragStartBehavior\n\n拖动行为方式，与 `drawer `配合使用，用于打开和关闭抽屉的拖动行为将在检测到拖动手势时开始。 如果设置为 DragStartBehavior.down，它将在首次检测到 down 事件时开始。当拖动返回时会使用 `DragStartBehavior.down` 是有很明显的卡顿，建议使用 `DragStartBehavior.start`\n\n#### 使用方法\n\n```dart\nGlobalKey<ScaffoldState> _scaffoldKey = GlobalKey(); \nScaffold( \n    key: _scaffoldKey, \n    appBar: AppBar(  \n        title: Text(\"Scaffold\"), \n        leading: IconButton(\n            onPressed: (){     \n                _scaffoldKey.currentState.openDrawer();   \n            }, \n            icon: Icon(Icons.menu_open)),  \n    ),  \n    body: Center(  \n        child: Text(\"body\"), \n    ), \n    drawer: Drawer(  \n        child: Center(child: Text(\"draw\"),), \n    ),  \n    drawerDragStartBehavior: DragStartBehavior.start \n); \n```\n\n### 17、extendBody\n\n是否延伸到底部，主要用于做半透明效果。\n\n#### 使用方法\n\n```dart\nScaffold( \n    appBar: AppBar( \n        title: Text(\"Scaffold\"),\n    ), \n    body: _pages[_currentIndex],\n    extendBody: true, \n); \n```\n\n### 18、extendBodyBehindAppBar\n\n是否延伸到顶部，用于做半透明、毛玻璃效果的主要控制属性\n\n#### 使用方法\n\n```dart\nScaffold( \n    appBar: AppBar(   \n        title: Text(\"Scaffold\"), \n    ), \n    body: _pages[_currentIndex], \n    extendBodyBehindAppBar: true, \n); \n```\n\n### 19、drawerScrimColor\n\n侧边栏弹出时非遮盖层主页面的颜色\n\n#### 使用方法\n\n```dart\nGlobalKey<ScaffoldState> _scaffoldKey = GlobalKey(); \nScaffold(  \n    key: _scaffoldKey, \n    appBar: AppBar(  \t\n        title: Text(\"Scaffold\"),   \n        leading: IconButton(\n            onPressed: (){  \n                _scaffoldKey.currentState.openDrawer(); \n            }, \n            icon: Icon(Icons.menu_open)), \n    ), \n    body: Center(  \n        child: Text(\"body\"),  \n    ), \n    drawer: Drawer(  \n        child: Center(child: Text(\"draw\"),), \n    ), \n    drawerScrimColor: Colors.green,\n); \n```\n\n### 20、drawerEdgeDragWidth\n\n侧边栏弹出时非遮罩层的宽度，当滑动的距离小于该值时，遮罩层会弹出。默认值是20\n\n#### 使用方法\n\n```dart\nGlobalKey<ScaffoldState> _scaffoldKey = GlobalKey(); \nScaffold( \n    key: _scaffoldKey, \n    appBar: AppBar(  \n        title: Text(\"Scaffold\"),  \n        leading: IconButton(\n            onPressed: (){      \n                _scaffoldKey.currentState.openDrawer();  \n            },\n            icon: Icon(Icons.menu_open)), \n    ), \n    body: Center(  \n        child: Text(\"body\"), \n    ),  \n    drawer: Drawer( \n        child: Center(child: Text(\"draw\"),), \n    ),  \n    drawerScrimColor: Colors.green, \n    drawerEdgeDragWidth: 100,\n); \n```\n\n### 21、drawerEnableOpenDragGesture\n\n左侧抽屉是否支持手势滑动，如果设置为 `false` ，将不能通过侧滑手势滑出，默认`true`\n\n#### 使用方法\n\n```dart\nGlobalKey<ScaffoldState> _scaffoldKey = GlobalKey(); \nScaffold( \n    key: _scaffoldKey, \n    appBar: AppBar(   \n        title: Text(\"Scaffold\"),  \n        leading: IconButton(\n            onPressed: (){     \n                _scaffoldKey.currentState.openDrawer(); \n            }, \n            icon: Icon(Icons.menu_open)),\n    ), \n    body: Center( \n        child: Text(\"body\"), \n    ),  \n    drawer: Drawer(  \n        child: Center(child: Text(\"draw\"),), \n    ),  \n    drawerScrimColor: Colors.green,  \n    drawerEnableOpenDragGesture: false, \n); \n```\n\n### 22、endDrawerEnableOpenDragGesture\n\n右侧抽屉是否支持手势滑动，如果设置为 `false` ，将不能通过侧滑手势滑出，默认 `true`\n\n```dart\nGlobalKey<ScaffoldState> _scaffoldKey = GlobalKey(); \nScaffold( \n    key: _scaffoldKey, \n    appBar: AppBar(  \n        title: Text(\"Scaffold\"), \n        leading: IconButton(\n            onPressed: (){   \n                _scaffoldKey.currentState.openDrawer();   \n            }, \n            icon: Icon(Icons.menu_open)),  \n    ),  \n    body: Center(  \n        child: Text(\"body\"),\n    ),  \n    drawer: Drawer(  \n        child: Center(child: Text(\"draw\"),), \n    ),  \n    drawerScrimColor: Colors.green, \n    drawerEnableOpenDragGesture: false, \n    endDrawerEnableOpenDragGesture: false, \n); \n```\n\n### 23、restorationId\n\n状态还原标识符\n\n### 使用方法\n\n```dart\nGlobalKey<ScaffoldState> _scaffoldKey = GlobalKey();\nScaffold(  \n    key: _scaffoldKey,  \n    appBar: AppBar(   \n        title: Text(\"Scaffold\"),  \n        leading: IconButton(\n            onPressed: (){  \n                _scaffoldKey.currentState.openDrawer();   \n            }, \n            icon: Icon(Icons.menu_open)), \n    ),  \n    body: Center(  \n        child: Text(\"body\"), \n    ), \n    restorationId: \"scaffold\"\n); \n```\n\n## 总结\n\n以上是针对Scaffold的所有使用方法，最常用的属性有`appBar`、`body`，其他属性都是在特定的情况才会使用。\n","source":"_posts/Flutter-Scaffold.md","raw":"---\ntitle: Flutter-Scaffold详解\ndate: 2021-09-18 09:25:34\ntags: [笔记]\ncategories: flutter\ndescription: Flutter-Scaffold详解\ntop_img: https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg\ncover: https://gitee.com/gaoxianglong/picgo/raw/master/img/f3b8af27140c9ac90ab83012cec99bc746546e28.jpg\n---\n\n## Scaffold介绍\n\n`Scaffold` 我们通常俗称为脚手架，在前面的文章中我们说到，`Material` 组件（MDC）帮助开发者实现 [Material Design](https://material.io/design)，`Scaffold` 实现了基本的 [Material Design](https://material.io/design) 布局结构。在 `Material` 设计中定义的单个界面上的各种布局元素，在 Scaffold 中都支持。\n\n#### Scaffold在什么情况下使用\n\n在每一个页面中基本都需要用到`Scaffold` ，除非当你的页面不需要导航区，但仍希望您使用 `Scaffold` 来作为每个页面的顶级组件。\n\n## 示例代码\n\n本文中很多效果都没有截图，可通过视频教程查看 [视频教程地址](https://www.bilibili.com/video/BV1BM4y1L71Z?p=3)\n\n## Scaffold属性和说明\n\n> 总共23个属性\n\n| 字段                           | 属性                         | 描述                                                   |\n| ------------------------------ | ---------------------------- | ------------------------------------------------------ |\n| appBar                         | PreferredSizeWidget          | 显示脚手架的顶部导航区                                 |\n| body                           | Widget                       | 显示脚手架的主要内容                                   |\n| floatingActionButton           | Widget                       | 悬浮按钮，位于右下角                                   |\n| floatingActionButtonLocation   | FloatingActionButtonLocation | 决定悬浮按钮的位置                                     |\n| floatingActionButtonAnimator   | FloatingActionButtonAnimator | 决定悬浮按钮的动画                                     |\n| persistentFooterButtons        | List                         | 显示在脚手架底部的一组按钮                             |\n| drawer                         | Widget                       | 左侧抽屉菜单组件                                       |\n| onDrawerChanged                | DrawerCallback               | 左侧抽屉菜单改变事件回调                               |\n| endDrawer                      | Widget                       | 右侧抽屉菜单组件                                       |\n| onEndDrawerChanged             | DrawerCallback               | 右侧抽屉菜单改变事件回调                               |\n| bottomNavigationBar            | Widget                       | 底部导航条                                             |\n| bottomSheet                    | Widget                       | 持久在body下方，底部控件上方的控件                     |\n| backgroundColor                | Color                        | 脚手架背景颜色                                         |\n| resizeToAvoidBottomInset       | bool                         | 防止小组件重复                                         |\n| primary                        | bool                         | 脚手架是否延伸到顶部                                   |\n| drawerDragStartBehavior        | DragStartBehavior            | 检测手势行为方式，与drawer配合使用                     |\n| extendBody                     | bool                         | 是否延伸到底部                                         |\n| extendBodyBehindAppBar         | bool                         | 是否延伸到顶部，用于做半透明、毛玻璃效果的主要控制属性 |\n| drawerScrimColor               | Color                        | 侧边栏弹出时非遮盖层主页面的颜色                       |\n| drawerEdgeDragWidth            | double                       | 侧边栏弹出时非遮罩层的宽度                             |\n| drawerEnableOpenDragGesture    | bool                         | 左侧抽屉是否支持手势滑动                               |\n| endDrawerEnableOpenDragGesture | bool                         | 右侧抽屉是否支持手势滑动                               |\n| restorationId                  | String                       | 状态还原标识符                                         |\n\n## Scaffold属性详细使用\n\n### 1、appBar\n\n显示脚手架的顶部导航栏\n\n#### 使用方法\n\n```dart\nScaffold( \n    appBar: AppBar(   \n        title: Text(\"Scaffold\"),\n    ),\n); \n```\n\n### 2、body\n\n显示脚手架的主要内容\n\n#### 使用方法\n\n```dart\nScaffold(  \n    appBar: AppBar(  \n        title: Text(\"Scaffold\"), \n    ), \n    body: Center(  \n        child: Text(\"body\"), \n    ), \n); \n```\n\n### 3、floatingActionButton\n\n悬浮按钮，默认位于右小角\n\n#### 使用方法\n\n```dart\nScaffold(  \n    appBar: AppBar(  \t\n        title: Text(\"Scaffold\"), \n    ),  \n    body: Center(  \n        child: Text(\"body\"), \n    ),  \n    floatingActionButton: FloatingActionButton(  \n        onPressed: (){   \n            print(\"add\");  \n        },  \n        child: Icon(Icons.add) \n    ),\n); \n```\n\n### 4、floatingActionButtonLocation\n\n决定悬浮按钮的位置\n\n#### 使用方法\n\n```dart\nScaffold( \n    appBar: AppBar(  \t\n        title: Text(\"Scaffold\"), \n    ),  \n    body: Center(  \t\n        child: Text(\"body\"), \n    ),  \n    floatingActionButton: FloatingActionButton(  \n        onPressed: (){   \n            print(\"add\");  \n        },  \n        child: Icon(Icons.add) \n    ), \n    floatingActionButtonLocation: FloatingActionButtonLocation.miniCenterDocked,\n); \n```\n\n### 5、floatingActionButtonAnimator\n\n决定悬浮按钮的动画\n\n#### 使用方法\n\n```dart\nScaffold( \n    appBar: AppBar(  \n        title: Text(\"Scaffold\"), \n    ),  \n    body: Center(  \n        child: Text(\"body\"), \n    ), \n    floatingActionButton: FloatingActionButton( \n        onPressed: (){  \n            print(\"add\");   \n        },  \n        child: Icon(Icons.add) \n    ), \n    floatingActionButtonLocation:FloatingActionButtonLocation.miniCenterDocked,  \n    floatingActionButtonAnimator: FloatingActionButtonAnimator.scaling, \n); \n```\n\n### 6、persistentFooterButtons\n\n显示在脚手架底部的一组按钮\n\n#### 使用方法\n\n```dart\nScaffold(  \n    appBar: AppBar(  \t\n        title: Text(\"Scaffold\"), \n    ),  \n    body: Center(  \n        child: Text(\"body\"), \n    ), \n    persistentFooterButtons: [   \n        TextButton(\n            onPressed: (){}, \n            child: Text(\"Text1\")),  \n        TextButton(\n            onPressed: (){}, \n            child: Text(\"Text2\")), \n    ],\n); \n```\n\n### 7、drawer\n\n左侧抽屉菜单组件，如果需要自定义可通过设置 `Scaffold` 的 `key` 来操作手动打开侧边栏，代码如下\n\n#### 使用方法\n\n```dart\nGlobalKey<ScaffoldState> _scaffoldKey = GlobalKey(); \nScaffold( \n    key: _scaffoldKey, \n    appBar: AppBar( \n        title: Text(\"Scaffold\"), \n        leading: IconButton(\n            onPressed: (){    \n                _scaffoldKey.currentState.openDrawer(); \n            }, \n            icon: Icon(Icons.menu_open)), \n    ),\n    body: Center(  \n        child: Text(\"body\"),\n    ), \n    drawer: Drawer(   \n        child: Center(child: Text(\"draw\"),), \n    ) \n); \n```\n\n### 8、onDrawerChanged\n\n左侧抽屉菜单改变事件回调\n\n#### 使用方法\n\n```dart\nGlobalKey<ScaffoldState> _scaffoldKey = GlobalKey(); \nScaffold( \n    key: _scaffoldKey, \n    appBar: AppBar(  \n        title: Text(\"Scaffold\"),  \n        leading: IconButton(\n            onPressed: (){     \n                _scaffoldKey.currentState.openDrawer();  \n            }, \n            icon: Icon(Icons.menu_open)), \n    ),  \n    body: Center(  \n        child: Text(\"body\"), \n    ), \n    drawer: Drawer(  \n        child: Center(child: Text(\"draw\"),), \n    ), \n    onDrawerChanged: (isOpen) {\n        print(isOpen); \n    },\n); \n```\n\n### 9、endDrawer\n\n右侧抽屉菜单组件,功能和 `drawer` 一样，唯一的区别是一个在左侧，一个在右侧。\n\n#### 使用方法\n\n```dart\nGlobalKey<ScaffoldState> _scaffoldKey = GlobalKey();\nScaffold( \n    key: _scaffoldKey, \n    appBar: AppBar(  \n        title: Text(\"Scaffold\"),  \n        leading: IconButton(\n            onPressed: (){     \n                _scaffoldKey.currentState.openDrawer();   \n            }, \n            icon: Icon(Icons.menu_open)),\n    ), \n    body: Center(  \n        child: Text(\"body\"), \n    ),\n    endDrawer: Drawer(  \n        child: Center(child: Text(\"draw\"),), \n    ), \n); \n```\n\n### 10、onEndDrawerChanged\n\n右侧抽屉菜单改变事件回调，使用方式和 `onDrawerChanged` 一样。\n\n#### 使用方法\n\n```dart\nGlobalKey<ScaffoldState> _scaffoldKey = GlobalKey(); \nScaffold(  \n    key: _scaffoldKey,  \n    appBar: AppBar(  \t\n        title: Text(\"Scaffold\"),   \n        leading: IconButton(\n            onPressed: (){ \n                _scaffoldKey.currentState.openDrawer(); \n            },\n            icon: Icon(Icons.menu_open)), \n    ),  \n    body: Center(  \n        child: Text(\"body\"), \n    ),\n    endDrawer: Drawer(  \n        child: Center(child: Text(\"draw\"),),\n    ),  \n    onEndDrawerChanged: (isOpen) { \n        print(isOpen); \n    },\n); \n```\n\n### 11、bottomNavigationBar\n\n 底部导航条，常用于切换底部 `item`\n\n#### 使用方法\n\n```dart\nint _currentIndex = 0;  \nList<Widget> _pages = [  \n    Center(child: Text(\"tab1\"),), \n    Center(child: Text(\"tab2\"),), \n]; \nScaffold( \n    appBar: AppBar(  \n        title: Text(\"Scaffold\"),\n    ),\n    body: _pages[_currentIndex], \n    bottomNavigationBar: BottomNavigationBar( \n        items: [  \n            BottomNavigationBarItem(    \n                label: \"tab1\",   \n                icon: Icon(Icons.settings)  \n            ),    \n            BottomNavigationBarItem(    \n                label: \"tab2\",  \n                icon: Icon(Icons.settings)   \n            )  \n        ],  \n        currentIndex: _currentIndex, \n        onTap: (currentIndex) { \n            setState(() {   \n                _currentIndex = currentIndex;   \n            });  \n        }, \n    ), \n); \n```\n\n### 12、bottomSheet\n\n持久在body下方，底部控件上方的控件\n\n#### 使用方法\n\n```dart\nScaffold(  \n    appBar: AppBar(   \n        title: Text(\"Scaffold\"), \n    ),  \n    body: _pages[_currentIndex], \n    bottomSheet: Container(\n        child: Row( \n            children: [    \n                Expanded(child: TextField()),    \n                ElevatedButton(\n                    onPressed: (){}, \n                    child: Text(\"发送\"))   \n            ], \n        ),\n    ) \n); \n```\n\n### 13、backgroundColor\n\n脚手架背景颜色\n\n#### 使用方法\n\n```dart\nScaffold( \n    appBar: AppBar(   \n        title: Text(\"Scaffold\"), \n    ), \n    body: _pages[_currentIndex], \n    backgroundColor: Colors.pink, \n); \n```\n\n### 14、resizeToAvoidBottomInset\n\n防止组件重复，当键盘弹起时会挡住组件，该值设置为 `ture` 可防止键盘遮挡\n\n#### 使用方法\n\n```dart\nScaffold( \n    appBar: AppBar(  \n        title: Text(\"Scaffold\"), \n    ), \n    body: _pages[_currentIndex], \n    resizeToAvoidBottomInset: true, \n); \n```\n\n### 15、primary\n\n脚手架是否延伸到顶部\n\n#### 使用方法\n\n```dart\nScaffold(  \n    appBar: AppBar(  \n        title: Text(\"Scaffold\"), \n    ),  \n    body: _pages[_currentIndex],\n    primary: true, \n); \n```\n\n### 16、drawerDragStartBehavior\n\n拖动行为方式，与 `drawer `配合使用，用于打开和关闭抽屉的拖动行为将在检测到拖动手势时开始。 如果设置为 DragStartBehavior.down，它将在首次检测到 down 事件时开始。当拖动返回时会使用 `DragStartBehavior.down` 是有很明显的卡顿，建议使用 `DragStartBehavior.start`\n\n#### 使用方法\n\n```dart\nGlobalKey<ScaffoldState> _scaffoldKey = GlobalKey(); \nScaffold( \n    key: _scaffoldKey, \n    appBar: AppBar(  \n        title: Text(\"Scaffold\"), \n        leading: IconButton(\n            onPressed: (){     \n                _scaffoldKey.currentState.openDrawer();   \n            }, \n            icon: Icon(Icons.menu_open)),  \n    ),  \n    body: Center(  \n        child: Text(\"body\"), \n    ), \n    drawer: Drawer(  \n        child: Center(child: Text(\"draw\"),), \n    ),  \n    drawerDragStartBehavior: DragStartBehavior.start \n); \n```\n\n### 17、extendBody\n\n是否延伸到底部，主要用于做半透明效果。\n\n#### 使用方法\n\n```dart\nScaffold( \n    appBar: AppBar( \n        title: Text(\"Scaffold\"),\n    ), \n    body: _pages[_currentIndex],\n    extendBody: true, \n); \n```\n\n### 18、extendBodyBehindAppBar\n\n是否延伸到顶部，用于做半透明、毛玻璃效果的主要控制属性\n\n#### 使用方法\n\n```dart\nScaffold( \n    appBar: AppBar(   \n        title: Text(\"Scaffold\"), \n    ), \n    body: _pages[_currentIndex], \n    extendBodyBehindAppBar: true, \n); \n```\n\n### 19、drawerScrimColor\n\n侧边栏弹出时非遮盖层主页面的颜色\n\n#### 使用方法\n\n```dart\nGlobalKey<ScaffoldState> _scaffoldKey = GlobalKey(); \nScaffold(  \n    key: _scaffoldKey, \n    appBar: AppBar(  \t\n        title: Text(\"Scaffold\"),   \n        leading: IconButton(\n            onPressed: (){  \n                _scaffoldKey.currentState.openDrawer(); \n            }, \n            icon: Icon(Icons.menu_open)), \n    ), \n    body: Center(  \n        child: Text(\"body\"),  \n    ), \n    drawer: Drawer(  \n        child: Center(child: Text(\"draw\"),), \n    ), \n    drawerScrimColor: Colors.green,\n); \n```\n\n### 20、drawerEdgeDragWidth\n\n侧边栏弹出时非遮罩层的宽度，当滑动的距离小于该值时，遮罩层会弹出。默认值是20\n\n#### 使用方法\n\n```dart\nGlobalKey<ScaffoldState> _scaffoldKey = GlobalKey(); \nScaffold( \n    key: _scaffoldKey, \n    appBar: AppBar(  \n        title: Text(\"Scaffold\"),  \n        leading: IconButton(\n            onPressed: (){      \n                _scaffoldKey.currentState.openDrawer();  \n            },\n            icon: Icon(Icons.menu_open)), \n    ), \n    body: Center(  \n        child: Text(\"body\"), \n    ),  \n    drawer: Drawer( \n        child: Center(child: Text(\"draw\"),), \n    ),  \n    drawerScrimColor: Colors.green, \n    drawerEdgeDragWidth: 100,\n); \n```\n\n### 21、drawerEnableOpenDragGesture\n\n左侧抽屉是否支持手势滑动，如果设置为 `false` ，将不能通过侧滑手势滑出，默认`true`\n\n#### 使用方法\n\n```dart\nGlobalKey<ScaffoldState> _scaffoldKey = GlobalKey(); \nScaffold( \n    key: _scaffoldKey, \n    appBar: AppBar(   \n        title: Text(\"Scaffold\"),  \n        leading: IconButton(\n            onPressed: (){     \n                _scaffoldKey.currentState.openDrawer(); \n            }, \n            icon: Icon(Icons.menu_open)),\n    ), \n    body: Center( \n        child: Text(\"body\"), \n    ),  \n    drawer: Drawer(  \n        child: Center(child: Text(\"draw\"),), \n    ),  \n    drawerScrimColor: Colors.green,  \n    drawerEnableOpenDragGesture: false, \n); \n```\n\n### 22、endDrawerEnableOpenDragGesture\n\n右侧抽屉是否支持手势滑动，如果设置为 `false` ，将不能通过侧滑手势滑出，默认 `true`\n\n```dart\nGlobalKey<ScaffoldState> _scaffoldKey = GlobalKey(); \nScaffold( \n    key: _scaffoldKey, \n    appBar: AppBar(  \n        title: Text(\"Scaffold\"), \n        leading: IconButton(\n            onPressed: (){   \n                _scaffoldKey.currentState.openDrawer();   \n            }, \n            icon: Icon(Icons.menu_open)),  \n    ),  \n    body: Center(  \n        child: Text(\"body\"),\n    ),  \n    drawer: Drawer(  \n        child: Center(child: Text(\"draw\"),), \n    ),  \n    drawerScrimColor: Colors.green, \n    drawerEnableOpenDragGesture: false, \n    endDrawerEnableOpenDragGesture: false, \n); \n```\n\n### 23、restorationId\n\n状态还原标识符\n\n### 使用方法\n\n```dart\nGlobalKey<ScaffoldState> _scaffoldKey = GlobalKey();\nScaffold(  \n    key: _scaffoldKey,  \n    appBar: AppBar(   \n        title: Text(\"Scaffold\"),  \n        leading: IconButton(\n            onPressed: (){  \n                _scaffoldKey.currentState.openDrawer();   \n            }, \n            icon: Icon(Icons.menu_open)), \n    ),  \n    body: Center(  \n        child: Text(\"body\"), \n    ), \n    restorationId: \"scaffold\"\n); \n```\n\n## 总结\n\n以上是针对Scaffold的所有使用方法，最常用的属性有`appBar`、`body`，其他属性都是在特定的情况才会使用。\n","slug":"Flutter-Scaffold","published":1,"updated":"2021-09-18T01:44:19.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktpg91z9000a84uxa2378foo","content":"<h2 id=\"Scaffold介绍\"><a href=\"#Scaffold介绍\" class=\"headerlink\" title=\"Scaffold介绍\"></a>Scaffold介绍</h2><p><code>Scaffold</code> 我们通常俗称为脚手架，在前面的文章中我们说到，<code>Material</code> 组件（MDC）帮助开发者实现 <a href=\"https://material.io/design\">Material Design</a>，<code>Scaffold</code> 实现了基本的 <a href=\"https://material.io/design\">Material Design</a> 布局结构。在 <code>Material</code> 设计中定义的单个界面上的各种布局元素，在 Scaffold 中都支持。</p>\n<h4 id=\"Scaffold在什么情况下使用\"><a href=\"#Scaffold在什么情况下使用\" class=\"headerlink\" title=\"Scaffold在什么情况下使用\"></a>Scaffold在什么情况下使用</h4><p>在每一个页面中基本都需要用到<code>Scaffold</code> ，除非当你的页面不需要导航区，但仍希望您使用 <code>Scaffold</code> 来作为每个页面的顶级组件。</p>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><p>本文中很多效果都没有截图，可通过视频教程查看 <a href=\"https://www.bilibili.com/video/BV1BM4y1L71Z?p=3\">视频教程地址</a></p>\n<h2 id=\"Scaffold属性和说明\"><a href=\"#Scaffold属性和说明\" class=\"headerlink\" title=\"Scaffold属性和说明\"></a>Scaffold属性和说明</h2><blockquote>\n<p>总共23个属性</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>appBar</td>\n<td>PreferredSizeWidget</td>\n<td>显示脚手架的顶部导航区</td>\n</tr>\n<tr>\n<td>body</td>\n<td>Widget</td>\n<td>显示脚手架的主要内容</td>\n</tr>\n<tr>\n<td>floatingActionButton</td>\n<td>Widget</td>\n<td>悬浮按钮，位于右下角</td>\n</tr>\n<tr>\n<td>floatingActionButtonLocation</td>\n<td>FloatingActionButtonLocation</td>\n<td>决定悬浮按钮的位置</td>\n</tr>\n<tr>\n<td>floatingActionButtonAnimator</td>\n<td>FloatingActionButtonAnimator</td>\n<td>决定悬浮按钮的动画</td>\n</tr>\n<tr>\n<td>persistentFooterButtons</td>\n<td>List</td>\n<td>显示在脚手架底部的一组按钮</td>\n</tr>\n<tr>\n<td>drawer</td>\n<td>Widget</td>\n<td>左侧抽屉菜单组件</td>\n</tr>\n<tr>\n<td>onDrawerChanged</td>\n<td>DrawerCallback</td>\n<td>左侧抽屉菜单改变事件回调</td>\n</tr>\n<tr>\n<td>endDrawer</td>\n<td>Widget</td>\n<td>右侧抽屉菜单组件</td>\n</tr>\n<tr>\n<td>onEndDrawerChanged</td>\n<td>DrawerCallback</td>\n<td>右侧抽屉菜单改变事件回调</td>\n</tr>\n<tr>\n<td>bottomNavigationBar</td>\n<td>Widget</td>\n<td>底部导航条</td>\n</tr>\n<tr>\n<td>bottomSheet</td>\n<td>Widget</td>\n<td>持久在body下方，底部控件上方的控件</td>\n</tr>\n<tr>\n<td>backgroundColor</td>\n<td>Color</td>\n<td>脚手架背景颜色</td>\n</tr>\n<tr>\n<td>resizeToAvoidBottomInset</td>\n<td>bool</td>\n<td>防止小组件重复</td>\n</tr>\n<tr>\n<td>primary</td>\n<td>bool</td>\n<td>脚手架是否延伸到顶部</td>\n</tr>\n<tr>\n<td>drawerDragStartBehavior</td>\n<td>DragStartBehavior</td>\n<td>检测手势行为方式，与drawer配合使用</td>\n</tr>\n<tr>\n<td>extendBody</td>\n<td>bool</td>\n<td>是否延伸到底部</td>\n</tr>\n<tr>\n<td>extendBodyBehindAppBar</td>\n<td>bool</td>\n<td>是否延伸到顶部，用于做半透明、毛玻璃效果的主要控制属性</td>\n</tr>\n<tr>\n<td>drawerScrimColor</td>\n<td>Color</td>\n<td>侧边栏弹出时非遮盖层主页面的颜色</td>\n</tr>\n<tr>\n<td>drawerEdgeDragWidth</td>\n<td>double</td>\n<td>侧边栏弹出时非遮罩层的宽度</td>\n</tr>\n<tr>\n<td>drawerEnableOpenDragGesture</td>\n<td>bool</td>\n<td>左侧抽屉是否支持手势滑动</td>\n</tr>\n<tr>\n<td>endDrawerEnableOpenDragGesture</td>\n<td>bool</td>\n<td>右侧抽屉是否支持手势滑动</td>\n</tr>\n<tr>\n<td>restorationId</td>\n<td>String</td>\n<td>状态还原标识符</td>\n</tr>\n</tbody></table>\n<h2 id=\"Scaffold属性详细使用\"><a href=\"#Scaffold属性详细使用\" class=\"headerlink\" title=\"Scaffold属性详细使用\"></a>Scaffold属性详细使用</h2><h3 id=\"1、appBar\"><a href=\"#1、appBar\" class=\"headerlink\" title=\"1、appBar\"></a>1、appBar</h3><p>显示脚手架的顶部导航栏</p>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold( </span><br><span class=\"line\">    appBar: AppBar(   </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、body\"><a href=\"#2、body\" class=\"headerlink\" title=\"2、body\"></a>2、body</h3><p>显示脚手架的主要内容</p>\n<h4 id=\"使用方法-1\"><a href=\"#使用方法-1\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold(  </span><br><span class=\"line\">    appBar: AppBar(  </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、floatingActionButton\"><a href=\"#3、floatingActionButton\" class=\"headerlink\" title=\"3、floatingActionButton\"></a>3、floatingActionButton</h3><p>悬浮按钮，默认位于右小角</p>\n<h4 id=\"使用方法-2\"><a href=\"#使用方法-2\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold(  </span><br><span class=\"line\">    appBar: AppBar(  \t</span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    floatingActionButton: FloatingActionButton(  </span><br><span class=\"line\">        onPressed: ()&#123;   </span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;add&quot;</span>);  </span><br><span class=\"line\">        &#125;,  </span><br><span class=\"line\">        child: Icon(Icons.add) </span><br><span class=\"line\">    ),</span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、floatingActionButtonLocation\"><a href=\"#4、floatingActionButtonLocation\" class=\"headerlink\" title=\"4、floatingActionButtonLocation\"></a>4、floatingActionButtonLocation</h3><p>决定悬浮按钮的位置</p>\n<h4 id=\"使用方法-3\"><a href=\"#使用方法-3\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold( </span><br><span class=\"line\">    appBar: AppBar(  \t</span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    body: Center(  \t</span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    floatingActionButton: FloatingActionButton(  </span><br><span class=\"line\">        onPressed: ()&#123;   </span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;add&quot;</span>);  </span><br><span class=\"line\">        &#125;,  </span><br><span class=\"line\">        child: Icon(Icons.add) </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    floatingActionButtonLocation: FloatingActionButtonLocation.miniCenterDocked,</span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、floatingActionButtonAnimator\"><a href=\"#5、floatingActionButtonAnimator\" class=\"headerlink\" title=\"5、floatingActionButtonAnimator\"></a>5、floatingActionButtonAnimator</h3><p>决定悬浮按钮的动画</p>\n<h4 id=\"使用方法-4\"><a href=\"#使用方法-4\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold( </span><br><span class=\"line\">    appBar: AppBar(  </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    floatingActionButton: FloatingActionButton( </span><br><span class=\"line\">        onPressed: ()&#123;  </span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;add&quot;</span>);   </span><br><span class=\"line\">        &#125;,  </span><br><span class=\"line\">        child: Icon(Icons.add) </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    floatingActionButtonLocation:FloatingActionButtonLocation.miniCenterDocked,  </span><br><span class=\"line\">    floatingActionButtonAnimator: FloatingActionButtonAnimator.scaling, </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、persistentFooterButtons\"><a href=\"#6、persistentFooterButtons\" class=\"headerlink\" title=\"6、persistentFooterButtons\"></a>6、persistentFooterButtons</h3><p>显示在脚手架底部的一组按钮</p>\n<h4 id=\"使用方法-5\"><a href=\"#使用方法-5\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold(  </span><br><span class=\"line\">    appBar: AppBar(  \t</span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    persistentFooterButtons: [   </span><br><span class=\"line\">        TextButton(</span><br><span class=\"line\">            onPressed: ()&#123;&#125;, </span><br><span class=\"line\">            child: Text(<span class=\"string\">&quot;Text1&quot;</span>)),  </span><br><span class=\"line\">        TextButton(</span><br><span class=\"line\">            onPressed: ()&#123;&#125;, </span><br><span class=\"line\">            child: Text(<span class=\"string\">&quot;Text2&quot;</span>)), </span><br><span class=\"line\">    ],</span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、drawer\"><a href=\"#7、drawer\" class=\"headerlink\" title=\"7、drawer\"></a>7、drawer</h3><p>左侧抽屉菜单组件，如果需要自定义可通过设置 <code>Scaffold</code> 的 <code>key</code> 来操作手动打开侧边栏，代码如下</p>\n<h4 id=\"使用方法-6\"><a href=\"#使用方法-6\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class=\"line\">Scaffold( </span><br><span class=\"line\">    key: _scaffoldKey, </span><br><span class=\"line\">    appBar: AppBar( </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">        leading: IconButton(</span><br><span class=\"line\">            onPressed: ()&#123;    </span><br><span class=\"line\">                _scaffoldKey.currentState.openDrawer(); </span><br><span class=\"line\">            &#125;, </span><br><span class=\"line\">            icon: Icon(Icons.menu_open)), </span><br><span class=\"line\">    ),</span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>),</span><br><span class=\"line\">    ), </span><br><span class=\"line\">    drawer: Drawer(   </span><br><span class=\"line\">        child: Center(child: Text(<span class=\"string\">&quot;draw&quot;</span>),), </span><br><span class=\"line\">    ) </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、onDrawerChanged\"><a href=\"#8、onDrawerChanged\" class=\"headerlink\" title=\"8、onDrawerChanged\"></a>8、onDrawerChanged</h3><p>左侧抽屉菜单改变事件回调</p>\n<h4 id=\"使用方法-7\"><a href=\"#使用方法-7\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class=\"line\">Scaffold( </span><br><span class=\"line\">    key: _scaffoldKey, </span><br><span class=\"line\">    appBar: AppBar(  </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>),  </span><br><span class=\"line\">        leading: IconButton(</span><br><span class=\"line\">            onPressed: ()&#123;     </span><br><span class=\"line\">                _scaffoldKey.currentState.openDrawer();  </span><br><span class=\"line\">            &#125;, </span><br><span class=\"line\">            icon: Icon(Icons.menu_open)), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    drawer: Drawer(  </span><br><span class=\"line\">        child: Center(child: Text(<span class=\"string\">&quot;draw&quot;</span>),), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    onDrawerChanged: (isOpen) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(isOpen); </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、endDrawer\"><a href=\"#9、endDrawer\" class=\"headerlink\" title=\"9、endDrawer\"></a>9、endDrawer</h3><p>右侧抽屉菜单组件,功能和 <code>drawer</code> 一样，唯一的区别是一个在左侧，一个在右侧。</p>\n<h4 id=\"使用方法-8\"><a href=\"#使用方法-8\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey();</span><br><span class=\"line\">Scaffold( </span><br><span class=\"line\">    key: _scaffoldKey, </span><br><span class=\"line\">    appBar: AppBar(  </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>),  </span><br><span class=\"line\">        leading: IconButton(</span><br><span class=\"line\">            onPressed: ()&#123;     </span><br><span class=\"line\">                _scaffoldKey.currentState.openDrawer();   </span><br><span class=\"line\">            &#125;, </span><br><span class=\"line\">            icon: Icon(Icons.menu_open)),</span><br><span class=\"line\">    ), </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ),</span><br><span class=\"line\">    endDrawer: Drawer(  </span><br><span class=\"line\">        child: Center(child: Text(<span class=\"string\">&quot;draw&quot;</span>),), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、onEndDrawerChanged\"><a href=\"#10、onEndDrawerChanged\" class=\"headerlink\" title=\"10、onEndDrawerChanged\"></a>10、onEndDrawerChanged</h3><p>右侧抽屉菜单改变事件回调，使用方式和 <code>onDrawerChanged</code> 一样。</p>\n<h4 id=\"使用方法-9\"><a href=\"#使用方法-9\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class=\"line\">Scaffold(  </span><br><span class=\"line\">    key: _scaffoldKey,  </span><br><span class=\"line\">    appBar: AppBar(  \t</span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>),   </span><br><span class=\"line\">        leading: IconButton(</span><br><span class=\"line\">            onPressed: ()&#123; </span><br><span class=\"line\">                _scaffoldKey.currentState.openDrawer(); </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            icon: Icon(Icons.menu_open)), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ),</span><br><span class=\"line\">    endDrawer: Drawer(  </span><br><span class=\"line\">        child: Center(child: Text(<span class=\"string\">&quot;draw&quot;</span>),),</span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    onEndDrawerChanged: (isOpen) &#123; </span><br><span class=\"line\">        <span class=\"built_in\">print</span>(isOpen); </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11、bottomNavigationBar\"><a href=\"#11、bottomNavigationBar\" class=\"headerlink\" title=\"11、bottomNavigationBar\"></a>11、bottomNavigationBar</h3><p> 底部导航条，常用于切换底部 <code>item</code></p>\n<h4 id=\"使用方法-10\"><a href=\"#使用方法-10\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> _currentIndex = <span class=\"number\">0</span>;  </span><br><span class=\"line\"><span class=\"built_in\">List</span>&lt;Widget&gt; _pages = [  </span><br><span class=\"line\">    Center(child: Text(<span class=\"string\">&quot;tab1&quot;</span>),), </span><br><span class=\"line\">    Center(child: Text(<span class=\"string\">&quot;tab2&quot;</span>),), </span><br><span class=\"line\">]; </span><br><span class=\"line\">Scaffold( </span><br><span class=\"line\">    appBar: AppBar(  </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    body: _pages[_currentIndex], </span><br><span class=\"line\">    bottomNavigationBar: BottomNavigationBar( </span><br><span class=\"line\">        items: [  </span><br><span class=\"line\">            BottomNavigationBarItem(    </span><br><span class=\"line\">                label: <span class=\"string\">&quot;tab1&quot;</span>,   </span><br><span class=\"line\">                icon: Icon(Icons.settings)  </span><br><span class=\"line\">            ),    </span><br><span class=\"line\">            BottomNavigationBarItem(    </span><br><span class=\"line\">                label: <span class=\"string\">&quot;tab2&quot;</span>,  </span><br><span class=\"line\">                icon: Icon(Icons.settings)   </span><br><span class=\"line\">            )  </span><br><span class=\"line\">        ],  </span><br><span class=\"line\">        currentIndex: _currentIndex, </span><br><span class=\"line\">        onTap: (currentIndex) &#123; </span><br><span class=\"line\">            setState(() &#123;   </span><br><span class=\"line\">                _currentIndex = currentIndex;   </span><br><span class=\"line\">            &#125;);  </span><br><span class=\"line\">        &#125;, </span><br><span class=\"line\">    ), </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12、bottomSheet\"><a href=\"#12、bottomSheet\" class=\"headerlink\" title=\"12、bottomSheet\"></a>12、bottomSheet</h3><p>持久在body下方，底部控件上方的控件</p>\n<h4 id=\"使用方法-11\"><a href=\"#使用方法-11\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold(  </span><br><span class=\"line\">    appBar: AppBar(   </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    body: _pages[_currentIndex], </span><br><span class=\"line\">    bottomSheet: Container(</span><br><span class=\"line\">        child: Row( </span><br><span class=\"line\">            children: [    </span><br><span class=\"line\">                Expanded(child: TextField()),    </span><br><span class=\"line\">                ElevatedButton(</span><br><span class=\"line\">                    onPressed: ()&#123;&#125;, </span><br><span class=\"line\">                    child: Text(<span class=\"string\">&quot;发送&quot;</span>))   </span><br><span class=\"line\">            ], </span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ) </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13、backgroundColor\"><a href=\"#13、backgroundColor\" class=\"headerlink\" title=\"13、backgroundColor\"></a>13、backgroundColor</h3><p>脚手架背景颜色</p>\n<h4 id=\"使用方法-12\"><a href=\"#使用方法-12\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold( </span><br><span class=\"line\">    appBar: AppBar(   </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    body: _pages[_currentIndex], </span><br><span class=\"line\">    backgroundColor: Colors.pink, </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14、resizeToAvoidBottomInset\"><a href=\"#14、resizeToAvoidBottomInset\" class=\"headerlink\" title=\"14、resizeToAvoidBottomInset\"></a>14、resizeToAvoidBottomInset</h3><p>防止组件重复，当键盘弹起时会挡住组件，该值设置为 <code>ture</code> 可防止键盘遮挡</p>\n<h4 id=\"使用方法-13\"><a href=\"#使用方法-13\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold( </span><br><span class=\"line\">    appBar: AppBar(  </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    body: _pages[_currentIndex], </span><br><span class=\"line\">    resizeToAvoidBottomInset: <span class=\"keyword\">true</span>, </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15、primary\"><a href=\"#15、primary\" class=\"headerlink\" title=\"15、primary\"></a>15、primary</h3><p>脚手架是否延伸到顶部</p>\n<h4 id=\"使用方法-14\"><a href=\"#使用方法-14\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold(  </span><br><span class=\"line\">    appBar: AppBar(  </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    body: _pages[_currentIndex],</span><br><span class=\"line\">    primary: <span class=\"keyword\">true</span>, </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16、drawerDragStartBehavior\"><a href=\"#16、drawerDragStartBehavior\" class=\"headerlink\" title=\"16、drawerDragStartBehavior\"></a>16、drawerDragStartBehavior</h3><p>拖动行为方式，与 <code>drawer </code>配合使用，用于打开和关闭抽屉的拖动行为将在检测到拖动手势时开始。 如果设置为 DragStartBehavior.down，它将在首次检测到 down 事件时开始。当拖动返回时会使用 <code>DragStartBehavior.down</code> 是有很明显的卡顿，建议使用 <code>DragStartBehavior.start</code></p>\n<h4 id=\"使用方法-15\"><a href=\"#使用方法-15\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class=\"line\">Scaffold( </span><br><span class=\"line\">    key: _scaffoldKey, </span><br><span class=\"line\">    appBar: AppBar(  </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">        leading: IconButton(</span><br><span class=\"line\">            onPressed: ()&#123;     </span><br><span class=\"line\">                _scaffoldKey.currentState.openDrawer();   </span><br><span class=\"line\">            &#125;, </span><br><span class=\"line\">            icon: Icon(Icons.menu_open)),  </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    drawer: Drawer(  </span><br><span class=\"line\">        child: Center(child: Text(<span class=\"string\">&quot;draw&quot;</span>),), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    drawerDragStartBehavior: DragStartBehavior.start </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17、extendBody\"><a href=\"#17、extendBody\" class=\"headerlink\" title=\"17、extendBody\"></a>17、extendBody</h3><p>是否延伸到底部，主要用于做半透明效果。</p>\n<h4 id=\"使用方法-16\"><a href=\"#使用方法-16\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold( </span><br><span class=\"line\">    appBar: AppBar( </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>),</span><br><span class=\"line\">    ), </span><br><span class=\"line\">    body: _pages[_currentIndex],</span><br><span class=\"line\">    extendBody: <span class=\"keyword\">true</span>, </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18、extendBodyBehindAppBar\"><a href=\"#18、extendBodyBehindAppBar\" class=\"headerlink\" title=\"18、extendBodyBehindAppBar\"></a>18、extendBodyBehindAppBar</h3><p>是否延伸到顶部，用于做半透明、毛玻璃效果的主要控制属性</p>\n<h4 id=\"使用方法-17\"><a href=\"#使用方法-17\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold( </span><br><span class=\"line\">    appBar: AppBar(   </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    body: _pages[_currentIndex], </span><br><span class=\"line\">    extendBodyBehindAppBar: <span class=\"keyword\">true</span>, </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19、drawerScrimColor\"><a href=\"#19、drawerScrimColor\" class=\"headerlink\" title=\"19、drawerScrimColor\"></a>19、drawerScrimColor</h3><p>侧边栏弹出时非遮盖层主页面的颜色</p>\n<h4 id=\"使用方法-18\"><a href=\"#使用方法-18\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class=\"line\">Scaffold(  </span><br><span class=\"line\">    key: _scaffoldKey, </span><br><span class=\"line\">    appBar: AppBar(  \t</span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>),   </span><br><span class=\"line\">        leading: IconButton(</span><br><span class=\"line\">            onPressed: ()&#123;  </span><br><span class=\"line\">                _scaffoldKey.currentState.openDrawer(); </span><br><span class=\"line\">            &#125;, </span><br><span class=\"line\">            icon: Icon(Icons.menu_open)), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>),  </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    drawer: Drawer(  </span><br><span class=\"line\">        child: Center(child: Text(<span class=\"string\">&quot;draw&quot;</span>),), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    drawerScrimColor: Colors.green,</span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20、drawerEdgeDragWidth\"><a href=\"#20、drawerEdgeDragWidth\" class=\"headerlink\" title=\"20、drawerEdgeDragWidth\"></a>20、drawerEdgeDragWidth</h3><p>侧边栏弹出时非遮罩层的宽度，当滑动的距离小于该值时，遮罩层会弹出。默认值是20</p>\n<h4 id=\"使用方法-19\"><a href=\"#使用方法-19\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class=\"line\">Scaffold( </span><br><span class=\"line\">    key: _scaffoldKey, </span><br><span class=\"line\">    appBar: AppBar(  </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>),  </span><br><span class=\"line\">        leading: IconButton(</span><br><span class=\"line\">            onPressed: ()&#123;      </span><br><span class=\"line\">                _scaffoldKey.currentState.openDrawer();  </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            icon: Icon(Icons.menu_open)), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    drawer: Drawer( </span><br><span class=\"line\">        child: Center(child: Text(<span class=\"string\">&quot;draw&quot;</span>),), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    drawerScrimColor: Colors.green, </span><br><span class=\"line\">    drawerEdgeDragWidth: <span class=\"number\">100</span>,</span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"21、drawerEnableOpenDragGesture\"><a href=\"#21、drawerEnableOpenDragGesture\" class=\"headerlink\" title=\"21、drawerEnableOpenDragGesture\"></a>21、drawerEnableOpenDragGesture</h3><p>左侧抽屉是否支持手势滑动，如果设置为 <code>false</code> ，将不能通过侧滑手势滑出，默认<code>true</code></p>\n<h4 id=\"使用方法-20\"><a href=\"#使用方法-20\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class=\"line\">Scaffold( </span><br><span class=\"line\">    key: _scaffoldKey, </span><br><span class=\"line\">    appBar: AppBar(   </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>),  </span><br><span class=\"line\">        leading: IconButton(</span><br><span class=\"line\">            onPressed: ()&#123;     </span><br><span class=\"line\">                _scaffoldKey.currentState.openDrawer(); </span><br><span class=\"line\">            &#125;, </span><br><span class=\"line\">            icon: Icon(Icons.menu_open)),</span><br><span class=\"line\">    ), </span><br><span class=\"line\">    body: Center( </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    drawer: Drawer(  </span><br><span class=\"line\">        child: Center(child: Text(<span class=\"string\">&quot;draw&quot;</span>),), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    drawerScrimColor: Colors.green,  </span><br><span class=\"line\">    drawerEnableOpenDragGesture: <span class=\"keyword\">false</span>, </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"22、endDrawerEnableOpenDragGesture\"><a href=\"#22、endDrawerEnableOpenDragGesture\" class=\"headerlink\" title=\"22、endDrawerEnableOpenDragGesture\"></a>22、endDrawerEnableOpenDragGesture</h3><p>右侧抽屉是否支持手势滑动，如果设置为 <code>false</code> ，将不能通过侧滑手势滑出，默认 <code>true</code></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class=\"line\">Scaffold( </span><br><span class=\"line\">    key: _scaffoldKey, </span><br><span class=\"line\">    appBar: AppBar(  </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">        leading: IconButton(</span><br><span class=\"line\">            onPressed: ()&#123;   </span><br><span class=\"line\">                _scaffoldKey.currentState.openDrawer();   </span><br><span class=\"line\">            &#125;, </span><br><span class=\"line\">            icon: Icon(Icons.menu_open)),  </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>),</span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    drawer: Drawer(  </span><br><span class=\"line\">        child: Center(child: Text(<span class=\"string\">&quot;draw&quot;</span>),), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    drawerScrimColor: Colors.green, </span><br><span class=\"line\">    drawerEnableOpenDragGesture: <span class=\"keyword\">false</span>, </span><br><span class=\"line\">    endDrawerEnableOpenDragGesture: <span class=\"keyword\">false</span>, </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"23、restorationId\"><a href=\"#23、restorationId\" class=\"headerlink\" title=\"23、restorationId\"></a>23、restorationId</h3><p>状态还原标识符</p>\n<h3 id=\"使用方法-21\"><a href=\"#使用方法-21\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey();</span><br><span class=\"line\">Scaffold(  </span><br><span class=\"line\">    key: _scaffoldKey,  </span><br><span class=\"line\">    appBar: AppBar(   </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>),  </span><br><span class=\"line\">        leading: IconButton(</span><br><span class=\"line\">            onPressed: ()&#123;  </span><br><span class=\"line\">                _scaffoldKey.currentState.openDrawer();   </span><br><span class=\"line\">            &#125;, </span><br><span class=\"line\">            icon: Icon(Icons.menu_open)), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    restorationId: <span class=\"string\">&quot;scaffold&quot;</span></span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上是针对Scaffold的所有使用方法，最常用的属性有<code>appBar</code>、<code>body</code>，其他属性都是在特定的情况才会使用。</p>\n","site":{"data":{"_config.butterfly":{"title":"Hexo","subtitle":"","description":"","keywords":null,"author":"John Doe","language":"en","timezone":"","url":"http://example.com","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":"","wrap":true,"hljs":false},"prismjs":{"enable":false,"preprocess":true,"line_number":true,"tab_replace":""},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"meta_generator":true,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","updated_option":"mtime","per_page":10,"pagination_dir":"page","include":null,"exclude":null,"ignore":null,"theme":"Butterfly","deploy":{"type":""}},"link":{"class":{"class_name":"友情链接","link_list":{"1":{"name":"搭建教程","link":"https://www.antmoe.com/posts/75a6347a/","avatar":"https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg","descr":"一个收藏回忆与分享技术的地方！"},"2":{"name":"没想到","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"test"}}},"class2":{"class_name":"链接无效","link_list":{"1":{"name":"test","link":"https://blog.xxx.com","avatar":"https://img.antmoe.com/avatar.png","descr":"test"},"2":{"name":"test","link":"https://www.axxxx.cn/","avatar":"https://img.antmoe.com/avatar.png","descr":"test"}}}}}},"excerpt":"","more":"<h2 id=\"Scaffold介绍\"><a href=\"#Scaffold介绍\" class=\"headerlink\" title=\"Scaffold介绍\"></a>Scaffold介绍</h2><p><code>Scaffold</code> 我们通常俗称为脚手架，在前面的文章中我们说到，<code>Material</code> 组件（MDC）帮助开发者实现 <a href=\"https://material.io/design\">Material Design</a>，<code>Scaffold</code> 实现了基本的 <a href=\"https://material.io/design\">Material Design</a> 布局结构。在 <code>Material</code> 设计中定义的单个界面上的各种布局元素，在 Scaffold 中都支持。</p>\n<h4 id=\"Scaffold在什么情况下使用\"><a href=\"#Scaffold在什么情况下使用\" class=\"headerlink\" title=\"Scaffold在什么情况下使用\"></a>Scaffold在什么情况下使用</h4><p>在每一个页面中基本都需要用到<code>Scaffold</code> ，除非当你的页面不需要导航区，但仍希望您使用 <code>Scaffold</code> 来作为每个页面的顶级组件。</p>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><p>本文中很多效果都没有截图，可通过视频教程查看 <a href=\"https://www.bilibili.com/video/BV1BM4y1L71Z?p=3\">视频教程地址</a></p>\n<h2 id=\"Scaffold属性和说明\"><a href=\"#Scaffold属性和说明\" class=\"headerlink\" title=\"Scaffold属性和说明\"></a>Scaffold属性和说明</h2><blockquote>\n<p>总共23个属性</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>appBar</td>\n<td>PreferredSizeWidget</td>\n<td>显示脚手架的顶部导航区</td>\n</tr>\n<tr>\n<td>body</td>\n<td>Widget</td>\n<td>显示脚手架的主要内容</td>\n</tr>\n<tr>\n<td>floatingActionButton</td>\n<td>Widget</td>\n<td>悬浮按钮，位于右下角</td>\n</tr>\n<tr>\n<td>floatingActionButtonLocation</td>\n<td>FloatingActionButtonLocation</td>\n<td>决定悬浮按钮的位置</td>\n</tr>\n<tr>\n<td>floatingActionButtonAnimator</td>\n<td>FloatingActionButtonAnimator</td>\n<td>决定悬浮按钮的动画</td>\n</tr>\n<tr>\n<td>persistentFooterButtons</td>\n<td>List</td>\n<td>显示在脚手架底部的一组按钮</td>\n</tr>\n<tr>\n<td>drawer</td>\n<td>Widget</td>\n<td>左侧抽屉菜单组件</td>\n</tr>\n<tr>\n<td>onDrawerChanged</td>\n<td>DrawerCallback</td>\n<td>左侧抽屉菜单改变事件回调</td>\n</tr>\n<tr>\n<td>endDrawer</td>\n<td>Widget</td>\n<td>右侧抽屉菜单组件</td>\n</tr>\n<tr>\n<td>onEndDrawerChanged</td>\n<td>DrawerCallback</td>\n<td>右侧抽屉菜单改变事件回调</td>\n</tr>\n<tr>\n<td>bottomNavigationBar</td>\n<td>Widget</td>\n<td>底部导航条</td>\n</tr>\n<tr>\n<td>bottomSheet</td>\n<td>Widget</td>\n<td>持久在body下方，底部控件上方的控件</td>\n</tr>\n<tr>\n<td>backgroundColor</td>\n<td>Color</td>\n<td>脚手架背景颜色</td>\n</tr>\n<tr>\n<td>resizeToAvoidBottomInset</td>\n<td>bool</td>\n<td>防止小组件重复</td>\n</tr>\n<tr>\n<td>primary</td>\n<td>bool</td>\n<td>脚手架是否延伸到顶部</td>\n</tr>\n<tr>\n<td>drawerDragStartBehavior</td>\n<td>DragStartBehavior</td>\n<td>检测手势行为方式，与drawer配合使用</td>\n</tr>\n<tr>\n<td>extendBody</td>\n<td>bool</td>\n<td>是否延伸到底部</td>\n</tr>\n<tr>\n<td>extendBodyBehindAppBar</td>\n<td>bool</td>\n<td>是否延伸到顶部，用于做半透明、毛玻璃效果的主要控制属性</td>\n</tr>\n<tr>\n<td>drawerScrimColor</td>\n<td>Color</td>\n<td>侧边栏弹出时非遮盖层主页面的颜色</td>\n</tr>\n<tr>\n<td>drawerEdgeDragWidth</td>\n<td>double</td>\n<td>侧边栏弹出时非遮罩层的宽度</td>\n</tr>\n<tr>\n<td>drawerEnableOpenDragGesture</td>\n<td>bool</td>\n<td>左侧抽屉是否支持手势滑动</td>\n</tr>\n<tr>\n<td>endDrawerEnableOpenDragGesture</td>\n<td>bool</td>\n<td>右侧抽屉是否支持手势滑动</td>\n</tr>\n<tr>\n<td>restorationId</td>\n<td>String</td>\n<td>状态还原标识符</td>\n</tr>\n</tbody></table>\n<h2 id=\"Scaffold属性详细使用\"><a href=\"#Scaffold属性详细使用\" class=\"headerlink\" title=\"Scaffold属性详细使用\"></a>Scaffold属性详细使用</h2><h3 id=\"1、appBar\"><a href=\"#1、appBar\" class=\"headerlink\" title=\"1、appBar\"></a>1、appBar</h3><p>显示脚手架的顶部导航栏</p>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold( </span><br><span class=\"line\">    appBar: AppBar(   </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、body\"><a href=\"#2、body\" class=\"headerlink\" title=\"2、body\"></a>2、body</h3><p>显示脚手架的主要内容</p>\n<h4 id=\"使用方法-1\"><a href=\"#使用方法-1\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold(  </span><br><span class=\"line\">    appBar: AppBar(  </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、floatingActionButton\"><a href=\"#3、floatingActionButton\" class=\"headerlink\" title=\"3、floatingActionButton\"></a>3、floatingActionButton</h3><p>悬浮按钮，默认位于右小角</p>\n<h4 id=\"使用方法-2\"><a href=\"#使用方法-2\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold(  </span><br><span class=\"line\">    appBar: AppBar(  \t</span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    floatingActionButton: FloatingActionButton(  </span><br><span class=\"line\">        onPressed: ()&#123;   </span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;add&quot;</span>);  </span><br><span class=\"line\">        &#125;,  </span><br><span class=\"line\">        child: Icon(Icons.add) </span><br><span class=\"line\">    ),</span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、floatingActionButtonLocation\"><a href=\"#4、floatingActionButtonLocation\" class=\"headerlink\" title=\"4、floatingActionButtonLocation\"></a>4、floatingActionButtonLocation</h3><p>决定悬浮按钮的位置</p>\n<h4 id=\"使用方法-3\"><a href=\"#使用方法-3\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold( </span><br><span class=\"line\">    appBar: AppBar(  \t</span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    body: Center(  \t</span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    floatingActionButton: FloatingActionButton(  </span><br><span class=\"line\">        onPressed: ()&#123;   </span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;add&quot;</span>);  </span><br><span class=\"line\">        &#125;,  </span><br><span class=\"line\">        child: Icon(Icons.add) </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    floatingActionButtonLocation: FloatingActionButtonLocation.miniCenterDocked,</span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、floatingActionButtonAnimator\"><a href=\"#5、floatingActionButtonAnimator\" class=\"headerlink\" title=\"5、floatingActionButtonAnimator\"></a>5、floatingActionButtonAnimator</h3><p>决定悬浮按钮的动画</p>\n<h4 id=\"使用方法-4\"><a href=\"#使用方法-4\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold( </span><br><span class=\"line\">    appBar: AppBar(  </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    floatingActionButton: FloatingActionButton( </span><br><span class=\"line\">        onPressed: ()&#123;  </span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;add&quot;</span>);   </span><br><span class=\"line\">        &#125;,  </span><br><span class=\"line\">        child: Icon(Icons.add) </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    floatingActionButtonLocation:FloatingActionButtonLocation.miniCenterDocked,  </span><br><span class=\"line\">    floatingActionButtonAnimator: FloatingActionButtonAnimator.scaling, </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、persistentFooterButtons\"><a href=\"#6、persistentFooterButtons\" class=\"headerlink\" title=\"6、persistentFooterButtons\"></a>6、persistentFooterButtons</h3><p>显示在脚手架底部的一组按钮</p>\n<h4 id=\"使用方法-5\"><a href=\"#使用方法-5\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold(  </span><br><span class=\"line\">    appBar: AppBar(  \t</span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    persistentFooterButtons: [   </span><br><span class=\"line\">        TextButton(</span><br><span class=\"line\">            onPressed: ()&#123;&#125;, </span><br><span class=\"line\">            child: Text(<span class=\"string\">&quot;Text1&quot;</span>)),  </span><br><span class=\"line\">        TextButton(</span><br><span class=\"line\">            onPressed: ()&#123;&#125;, </span><br><span class=\"line\">            child: Text(<span class=\"string\">&quot;Text2&quot;</span>)), </span><br><span class=\"line\">    ],</span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、drawer\"><a href=\"#7、drawer\" class=\"headerlink\" title=\"7、drawer\"></a>7、drawer</h3><p>左侧抽屉菜单组件，如果需要自定义可通过设置 <code>Scaffold</code> 的 <code>key</code> 来操作手动打开侧边栏，代码如下</p>\n<h4 id=\"使用方法-6\"><a href=\"#使用方法-6\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class=\"line\">Scaffold( </span><br><span class=\"line\">    key: _scaffoldKey, </span><br><span class=\"line\">    appBar: AppBar( </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">        leading: IconButton(</span><br><span class=\"line\">            onPressed: ()&#123;    </span><br><span class=\"line\">                _scaffoldKey.currentState.openDrawer(); </span><br><span class=\"line\">            &#125;, </span><br><span class=\"line\">            icon: Icon(Icons.menu_open)), </span><br><span class=\"line\">    ),</span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>),</span><br><span class=\"line\">    ), </span><br><span class=\"line\">    drawer: Drawer(   </span><br><span class=\"line\">        child: Center(child: Text(<span class=\"string\">&quot;draw&quot;</span>),), </span><br><span class=\"line\">    ) </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、onDrawerChanged\"><a href=\"#8、onDrawerChanged\" class=\"headerlink\" title=\"8、onDrawerChanged\"></a>8、onDrawerChanged</h3><p>左侧抽屉菜单改变事件回调</p>\n<h4 id=\"使用方法-7\"><a href=\"#使用方法-7\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class=\"line\">Scaffold( </span><br><span class=\"line\">    key: _scaffoldKey, </span><br><span class=\"line\">    appBar: AppBar(  </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>),  </span><br><span class=\"line\">        leading: IconButton(</span><br><span class=\"line\">            onPressed: ()&#123;     </span><br><span class=\"line\">                _scaffoldKey.currentState.openDrawer();  </span><br><span class=\"line\">            &#125;, </span><br><span class=\"line\">            icon: Icon(Icons.menu_open)), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    drawer: Drawer(  </span><br><span class=\"line\">        child: Center(child: Text(<span class=\"string\">&quot;draw&quot;</span>),), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    onDrawerChanged: (isOpen) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(isOpen); </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、endDrawer\"><a href=\"#9、endDrawer\" class=\"headerlink\" title=\"9、endDrawer\"></a>9、endDrawer</h3><p>右侧抽屉菜单组件,功能和 <code>drawer</code> 一样，唯一的区别是一个在左侧，一个在右侧。</p>\n<h4 id=\"使用方法-8\"><a href=\"#使用方法-8\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey();</span><br><span class=\"line\">Scaffold( </span><br><span class=\"line\">    key: _scaffoldKey, </span><br><span class=\"line\">    appBar: AppBar(  </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>),  </span><br><span class=\"line\">        leading: IconButton(</span><br><span class=\"line\">            onPressed: ()&#123;     </span><br><span class=\"line\">                _scaffoldKey.currentState.openDrawer();   </span><br><span class=\"line\">            &#125;, </span><br><span class=\"line\">            icon: Icon(Icons.menu_open)),</span><br><span class=\"line\">    ), </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ),</span><br><span class=\"line\">    endDrawer: Drawer(  </span><br><span class=\"line\">        child: Center(child: Text(<span class=\"string\">&quot;draw&quot;</span>),), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、onEndDrawerChanged\"><a href=\"#10、onEndDrawerChanged\" class=\"headerlink\" title=\"10、onEndDrawerChanged\"></a>10、onEndDrawerChanged</h3><p>右侧抽屉菜单改变事件回调，使用方式和 <code>onDrawerChanged</code> 一样。</p>\n<h4 id=\"使用方法-9\"><a href=\"#使用方法-9\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class=\"line\">Scaffold(  </span><br><span class=\"line\">    key: _scaffoldKey,  </span><br><span class=\"line\">    appBar: AppBar(  \t</span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>),   </span><br><span class=\"line\">        leading: IconButton(</span><br><span class=\"line\">            onPressed: ()&#123; </span><br><span class=\"line\">                _scaffoldKey.currentState.openDrawer(); </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            icon: Icon(Icons.menu_open)), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ),</span><br><span class=\"line\">    endDrawer: Drawer(  </span><br><span class=\"line\">        child: Center(child: Text(<span class=\"string\">&quot;draw&quot;</span>),),</span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    onEndDrawerChanged: (isOpen) &#123; </span><br><span class=\"line\">        <span class=\"built_in\">print</span>(isOpen); </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11、bottomNavigationBar\"><a href=\"#11、bottomNavigationBar\" class=\"headerlink\" title=\"11、bottomNavigationBar\"></a>11、bottomNavigationBar</h3><p> 底部导航条，常用于切换底部 <code>item</code></p>\n<h4 id=\"使用方法-10\"><a href=\"#使用方法-10\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> _currentIndex = <span class=\"number\">0</span>;  </span><br><span class=\"line\"><span class=\"built_in\">List</span>&lt;Widget&gt; _pages = [  </span><br><span class=\"line\">    Center(child: Text(<span class=\"string\">&quot;tab1&quot;</span>),), </span><br><span class=\"line\">    Center(child: Text(<span class=\"string\">&quot;tab2&quot;</span>),), </span><br><span class=\"line\">]; </span><br><span class=\"line\">Scaffold( </span><br><span class=\"line\">    appBar: AppBar(  </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    body: _pages[_currentIndex], </span><br><span class=\"line\">    bottomNavigationBar: BottomNavigationBar( </span><br><span class=\"line\">        items: [  </span><br><span class=\"line\">            BottomNavigationBarItem(    </span><br><span class=\"line\">                label: <span class=\"string\">&quot;tab1&quot;</span>,   </span><br><span class=\"line\">                icon: Icon(Icons.settings)  </span><br><span class=\"line\">            ),    </span><br><span class=\"line\">            BottomNavigationBarItem(    </span><br><span class=\"line\">                label: <span class=\"string\">&quot;tab2&quot;</span>,  </span><br><span class=\"line\">                icon: Icon(Icons.settings)   </span><br><span class=\"line\">            )  </span><br><span class=\"line\">        ],  </span><br><span class=\"line\">        currentIndex: _currentIndex, </span><br><span class=\"line\">        onTap: (currentIndex) &#123; </span><br><span class=\"line\">            setState(() &#123;   </span><br><span class=\"line\">                _currentIndex = currentIndex;   </span><br><span class=\"line\">            &#125;);  </span><br><span class=\"line\">        &#125;, </span><br><span class=\"line\">    ), </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12、bottomSheet\"><a href=\"#12、bottomSheet\" class=\"headerlink\" title=\"12、bottomSheet\"></a>12、bottomSheet</h3><p>持久在body下方，底部控件上方的控件</p>\n<h4 id=\"使用方法-11\"><a href=\"#使用方法-11\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold(  </span><br><span class=\"line\">    appBar: AppBar(   </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    body: _pages[_currentIndex], </span><br><span class=\"line\">    bottomSheet: Container(</span><br><span class=\"line\">        child: Row( </span><br><span class=\"line\">            children: [    </span><br><span class=\"line\">                Expanded(child: TextField()),    </span><br><span class=\"line\">                ElevatedButton(</span><br><span class=\"line\">                    onPressed: ()&#123;&#125;, </span><br><span class=\"line\">                    child: Text(<span class=\"string\">&quot;发送&quot;</span>))   </span><br><span class=\"line\">            ], </span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ) </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13、backgroundColor\"><a href=\"#13、backgroundColor\" class=\"headerlink\" title=\"13、backgroundColor\"></a>13、backgroundColor</h3><p>脚手架背景颜色</p>\n<h4 id=\"使用方法-12\"><a href=\"#使用方法-12\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold( </span><br><span class=\"line\">    appBar: AppBar(   </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    body: _pages[_currentIndex], </span><br><span class=\"line\">    backgroundColor: Colors.pink, </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14、resizeToAvoidBottomInset\"><a href=\"#14、resizeToAvoidBottomInset\" class=\"headerlink\" title=\"14、resizeToAvoidBottomInset\"></a>14、resizeToAvoidBottomInset</h3><p>防止组件重复，当键盘弹起时会挡住组件，该值设置为 <code>ture</code> 可防止键盘遮挡</p>\n<h4 id=\"使用方法-13\"><a href=\"#使用方法-13\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold( </span><br><span class=\"line\">    appBar: AppBar(  </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    body: _pages[_currentIndex], </span><br><span class=\"line\">    resizeToAvoidBottomInset: <span class=\"keyword\">true</span>, </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15、primary\"><a href=\"#15、primary\" class=\"headerlink\" title=\"15、primary\"></a>15、primary</h3><p>脚手架是否延伸到顶部</p>\n<h4 id=\"使用方法-14\"><a href=\"#使用方法-14\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold(  </span><br><span class=\"line\">    appBar: AppBar(  </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    body: _pages[_currentIndex],</span><br><span class=\"line\">    primary: <span class=\"keyword\">true</span>, </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16、drawerDragStartBehavior\"><a href=\"#16、drawerDragStartBehavior\" class=\"headerlink\" title=\"16、drawerDragStartBehavior\"></a>16、drawerDragStartBehavior</h3><p>拖动行为方式，与 <code>drawer </code>配合使用，用于打开和关闭抽屉的拖动行为将在检测到拖动手势时开始。 如果设置为 DragStartBehavior.down，它将在首次检测到 down 事件时开始。当拖动返回时会使用 <code>DragStartBehavior.down</code> 是有很明显的卡顿，建议使用 <code>DragStartBehavior.start</code></p>\n<h4 id=\"使用方法-15\"><a href=\"#使用方法-15\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class=\"line\">Scaffold( </span><br><span class=\"line\">    key: _scaffoldKey, </span><br><span class=\"line\">    appBar: AppBar(  </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">        leading: IconButton(</span><br><span class=\"line\">            onPressed: ()&#123;     </span><br><span class=\"line\">                _scaffoldKey.currentState.openDrawer();   </span><br><span class=\"line\">            &#125;, </span><br><span class=\"line\">            icon: Icon(Icons.menu_open)),  </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    drawer: Drawer(  </span><br><span class=\"line\">        child: Center(child: Text(<span class=\"string\">&quot;draw&quot;</span>),), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    drawerDragStartBehavior: DragStartBehavior.start </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17、extendBody\"><a href=\"#17、extendBody\" class=\"headerlink\" title=\"17、extendBody\"></a>17、extendBody</h3><p>是否延伸到底部，主要用于做半透明效果。</p>\n<h4 id=\"使用方法-16\"><a href=\"#使用方法-16\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold( </span><br><span class=\"line\">    appBar: AppBar( </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>),</span><br><span class=\"line\">    ), </span><br><span class=\"line\">    body: _pages[_currentIndex],</span><br><span class=\"line\">    extendBody: <span class=\"keyword\">true</span>, </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18、extendBodyBehindAppBar\"><a href=\"#18、extendBodyBehindAppBar\" class=\"headerlink\" title=\"18、extendBodyBehindAppBar\"></a>18、extendBodyBehindAppBar</h3><p>是否延伸到顶部，用于做半透明、毛玻璃效果的主要控制属性</p>\n<h4 id=\"使用方法-17\"><a href=\"#使用方法-17\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold( </span><br><span class=\"line\">    appBar: AppBar(   </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    body: _pages[_currentIndex], </span><br><span class=\"line\">    extendBodyBehindAppBar: <span class=\"keyword\">true</span>, </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19、drawerScrimColor\"><a href=\"#19、drawerScrimColor\" class=\"headerlink\" title=\"19、drawerScrimColor\"></a>19、drawerScrimColor</h3><p>侧边栏弹出时非遮盖层主页面的颜色</p>\n<h4 id=\"使用方法-18\"><a href=\"#使用方法-18\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class=\"line\">Scaffold(  </span><br><span class=\"line\">    key: _scaffoldKey, </span><br><span class=\"line\">    appBar: AppBar(  \t</span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>),   </span><br><span class=\"line\">        leading: IconButton(</span><br><span class=\"line\">            onPressed: ()&#123;  </span><br><span class=\"line\">                _scaffoldKey.currentState.openDrawer(); </span><br><span class=\"line\">            &#125;, </span><br><span class=\"line\">            icon: Icon(Icons.menu_open)), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>),  </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    drawer: Drawer(  </span><br><span class=\"line\">        child: Center(child: Text(<span class=\"string\">&quot;draw&quot;</span>),), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    drawerScrimColor: Colors.green,</span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20、drawerEdgeDragWidth\"><a href=\"#20、drawerEdgeDragWidth\" class=\"headerlink\" title=\"20、drawerEdgeDragWidth\"></a>20、drawerEdgeDragWidth</h3><p>侧边栏弹出时非遮罩层的宽度，当滑动的距离小于该值时，遮罩层会弹出。默认值是20</p>\n<h4 id=\"使用方法-19\"><a href=\"#使用方法-19\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class=\"line\">Scaffold( </span><br><span class=\"line\">    key: _scaffoldKey, </span><br><span class=\"line\">    appBar: AppBar(  </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>),  </span><br><span class=\"line\">        leading: IconButton(</span><br><span class=\"line\">            onPressed: ()&#123;      </span><br><span class=\"line\">                _scaffoldKey.currentState.openDrawer();  </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            icon: Icon(Icons.menu_open)), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    drawer: Drawer( </span><br><span class=\"line\">        child: Center(child: Text(<span class=\"string\">&quot;draw&quot;</span>),), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    drawerScrimColor: Colors.green, </span><br><span class=\"line\">    drawerEdgeDragWidth: <span class=\"number\">100</span>,</span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"21、drawerEnableOpenDragGesture\"><a href=\"#21、drawerEnableOpenDragGesture\" class=\"headerlink\" title=\"21、drawerEnableOpenDragGesture\"></a>21、drawerEnableOpenDragGesture</h3><p>左侧抽屉是否支持手势滑动，如果设置为 <code>false</code> ，将不能通过侧滑手势滑出，默认<code>true</code></p>\n<h4 id=\"使用方法-20\"><a href=\"#使用方法-20\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class=\"line\">Scaffold( </span><br><span class=\"line\">    key: _scaffoldKey, </span><br><span class=\"line\">    appBar: AppBar(   </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>),  </span><br><span class=\"line\">        leading: IconButton(</span><br><span class=\"line\">            onPressed: ()&#123;     </span><br><span class=\"line\">                _scaffoldKey.currentState.openDrawer(); </span><br><span class=\"line\">            &#125;, </span><br><span class=\"line\">            icon: Icon(Icons.menu_open)),</span><br><span class=\"line\">    ), </span><br><span class=\"line\">    body: Center( </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    drawer: Drawer(  </span><br><span class=\"line\">        child: Center(child: Text(<span class=\"string\">&quot;draw&quot;</span>),), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    drawerScrimColor: Colors.green,  </span><br><span class=\"line\">    drawerEnableOpenDragGesture: <span class=\"keyword\">false</span>, </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"22、endDrawerEnableOpenDragGesture\"><a href=\"#22、endDrawerEnableOpenDragGesture\" class=\"headerlink\" title=\"22、endDrawerEnableOpenDragGesture\"></a>22、endDrawerEnableOpenDragGesture</h3><p>右侧抽屉是否支持手势滑动，如果设置为 <code>false</code> ，将不能通过侧滑手势滑出，默认 <code>true</code></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class=\"line\">Scaffold( </span><br><span class=\"line\">    key: _scaffoldKey, </span><br><span class=\"line\">    appBar: AppBar(  </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>), </span><br><span class=\"line\">        leading: IconButton(</span><br><span class=\"line\">            onPressed: ()&#123;   </span><br><span class=\"line\">                _scaffoldKey.currentState.openDrawer();   </span><br><span class=\"line\">            &#125;, </span><br><span class=\"line\">            icon: Icon(Icons.menu_open)),  </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>),</span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    drawer: Drawer(  </span><br><span class=\"line\">        child: Center(child: Text(<span class=\"string\">&quot;draw&quot;</span>),), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    drawerScrimColor: Colors.green, </span><br><span class=\"line\">    drawerEnableOpenDragGesture: <span class=\"keyword\">false</span>, </span><br><span class=\"line\">    endDrawerEnableOpenDragGesture: <span class=\"keyword\">false</span>, </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"23、restorationId\"><a href=\"#23、restorationId\" class=\"headerlink\" title=\"23、restorationId\"></a>23、restorationId</h3><p>状态还原标识符</p>\n<h3 id=\"使用方法-21\"><a href=\"#使用方法-21\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey();</span><br><span class=\"line\">Scaffold(  </span><br><span class=\"line\">    key: _scaffoldKey,  </span><br><span class=\"line\">    appBar: AppBar(   </span><br><span class=\"line\">        title: Text(<span class=\"string\">&quot;Scaffold&quot;</span>),  </span><br><span class=\"line\">        leading: IconButton(</span><br><span class=\"line\">            onPressed: ()&#123;  </span><br><span class=\"line\">                _scaffoldKey.currentState.openDrawer();   </span><br><span class=\"line\">            &#125;, </span><br><span class=\"line\">            icon: Icon(Icons.menu_open)), </span><br><span class=\"line\">    ),  </span><br><span class=\"line\">    body: Center(  </span><br><span class=\"line\">        child: Text(<span class=\"string\">&quot;body&quot;</span>), </span><br><span class=\"line\">    ), </span><br><span class=\"line\">    restorationId: <span class=\"string\">&quot;scaffold&quot;</span></span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上是针对Scaffold的所有使用方法，最常用的属性有<code>appBar</code>、<code>body</code>，其他属性都是在特定的情况才会使用。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cksx03ih800019cu9g9qaef9b","category_id":"cksx03ihd00049cu975486bp6","_id":"cksx03ihj000d9cu9gi618jda"},{"post_id":"cksx03ihb00039cu9gvmwbyqn","category_id":"cksx03ihd00049cu975486bp6","_id":"cksx03ihl000h9cu9dl3f497o"},{"post_id":"cksx03kn2000m9cu9816keurt","category_id":"cksx03kn3000n9cu97pp96z0f","_id":"cksx03kn4000q9cu90ij432fh"},{"post_id":"ckt0vl5ft0004ocu930b8boff","category_id":"ckt0vl5fq0002ocu901wo5o7h","_id":"ckt0vl5fw0007ocu9a4wn3kqo"},{"post_id":"ckt0vl5f80000ocu9e9p059zw","category_id":"ckt0vl5fq0002ocu901wo5o7h","_id":"ckt0vl5fx0009ocu9hp78ajie"},{"post_id":"ckt0vl5fo0001ocu9hm4s6q2a","category_id":"ckt0vl5fq0002ocu901wo5o7h","_id":"ckt0vl5fx000bocu957fs1xfp"},{"post_id":"cktnr5v000000k0uxa4hxcex5","category_id":"ckt0vl5fq0002ocu901wo5o7h","_id":"cktnr5v0a0005k0uxcj2rcxau"},{"post_id":"cktnr5v0c0009k0ux1q03gvtp","category_id":"ckt0vl5fq0002ocu901wo5o7h","_id":"cktnr5v0i000fk0ux8esc3ory"},{"post_id":"cktnr5v0d000ak0ux2abhhf4m","category_id":"ckt0vl5fq0002ocu901wo5o7h","_id":"cktnr5v0l000kk0ux56mo5ysn"},{"post_id":"cktnr5v0h000ek0ux8cxm717m","category_id":"ckt0vl5fq0002ocu901wo5o7h","_id":"cktnr5v0n000nk0uxgg6b9zsc"},{"post_id":"cktnr5v0k000jk0ux8qpz55is","category_id":"ckt0vl5fq0002ocu901wo5o7h","_id":"cktnr5v0n000pk0ux2yqa8cwn"},{"post_id":"cktnr5v0f000ck0uxcahs8wt6","category_id":"cktnr5v0j000gk0ux164732kq","_id":"cktnr5v0o000rk0uxf13g8me2"},{"post_id":"cktpg91yl000084ux5ha32jkp","category_id":"cktnr5v0j000gk0ux164732kq","_id":"cktpg91yx000284uxexavcoi6"},{"post_id":"cktpg91z5000384ux55rp0med","category_id":"cktnr5v0j000gk0ux164732kq","_id":"cktpg91z8000784uxca7jflfo"},{"post_id":"cktpg91z6000484uxel5t72jg","category_id":"cktnr5v0j000gk0ux164732kq","_id":"cktpg91z8000884ux6wjbag8u"},{"post_id":"cktpg91z9000984ux1kuj69a7","category_id":"cktnr5v0j000gk0ux164732kq","_id":"cktpg91za000d84uxbgz2dm5a"},{"post_id":"cktpg91z9000a84uxa2378foo","category_id":"cktnr5v0j000gk0ux164732kq","_id":"cktpg91zb000e84uxg5gn89bm"},{"post_id":"cktnr5v040001k0ux1e4a7pla","category_id":"ckt0vl5fq0002ocu901wo5o7h","_id":"cktpgcn7r000f84ux9z1r6lrt"}],"PostTag":[{"post_id":"cksx03ih800019cu9g9qaef9b","tag_id":"cksx03ihe00059cu97yjm05z0","_id":"cksx03ihk000g9cu9aaq62oga"},{"post_id":"cksx03ih800019cu9g9qaef9b","tag_id":"cksx03ihg000a9cu97qn85ygn","_id":"cksx03ihl000i9cu985skb41v"},{"post_id":"cksx03ihb00039cu9gvmwbyqn","tag_id":"cksx03ihj000e9cu9hnre6mml","_id":"cksx03ihl000k9cu91xydb1yz"},{"post_id":"cksx03ihb00039cu9gvmwbyqn","tag_id":"cksx03ihl000j9cu96g0eb077","_id":"cksx03ihl000l9cu90xfa1oyv"},{"post_id":"cksx03kn2000m9cu9816keurt","tag_id":"cksx03kn4000o9cu949952hjy","_id":"cksx03kn4000p9cu96sd22ihi"},{"post_id":"ckt0vl5f80000ocu9e9p059zw","tag_id":"ckt0vl5fr0003ocu9hzqdd9kd","_id":"ckt0vl5fx000aocu9by0w94ra"},{"post_id":"ckt0vl5f80000ocu9e9p059zw","tag_id":"ckt0vl5fv0006ocu90giu533l","_id":"ckt0vl5fx000cocu9f6j7htxh"},{"post_id":"ckt0vl5fo0001ocu9hm4s6q2a","tag_id":"ckt0vl5fr0003ocu9hzqdd9kd","_id":"ckt0vl5fy000focu9bvwgbr3h"},{"post_id":"ckt0vl5fo0001ocu9hm4s6q2a","tag_id":"ckt0vl5fx000docu9eiw3eobx","_id":"ckt0vl5fy000gocu9gzsh6cpt"},{"post_id":"ckt0vl5ft0004ocu930b8boff","tag_id":"ckt0vl5fr0003ocu9hzqdd9kd","_id":"ckt0vl5fy000hocu909ptcjjt"},{"post_id":"ckt0vl5ft0004ocu930b8boff","tag_id":"ckt0vl5fy000eocu97m2qdypm","_id":"ckt0vl5fy000iocu968wh2hj8"},{"post_id":"cktnr5v000000k0uxa4hxcex5","tag_id":"ckt0vl5fr0003ocu9hzqdd9kd","_id":"cktnr5v060002k0ux61wz85xg"},{"post_id":"cktnr5v000000k0uxa4hxcex5","tag_id":"ckt0vl5fx000docu9eiw3eobx","_id":"cktnr5v090004k0ux4kzy025o"},{"post_id":"cktnr5v040001k0ux1e4a7pla","tag_id":"ckt0vl5fr0003ocu9hzqdd9kd","_id":"cktnr5v0a0006k0ux4pow43jw"},{"post_id":"cktnr5v040001k0ux1e4a7pla","tag_id":"ckt0vl5fx000docu9eiw3eobx","_id":"cktnr5v0a0007k0uxa0y349ih"},{"post_id":"cktnr5v0c0009k0ux1q03gvtp","tag_id":"ckt0vl5fr0003ocu9hzqdd9kd","_id":"cktnr5v0f000bk0uxgr2vgl5k"},{"post_id":"cktnr5v0c0009k0ux1q03gvtp","tag_id":"ckt0vl5fv0006ocu90giu533l","_id":"cktnr5v0h000dk0uxb84hbofp"},{"post_id":"cktnr5v0d000ak0ux2abhhf4m","tag_id":"ckt0vl5fr0003ocu9hzqdd9kd","_id":"cktnr5v0k000ik0ux52236auh"},{"post_id":"cktnr5v0d000ak0ux2abhhf4m","tag_id":"ckt0vl5fv0006ocu90giu533l","_id":"cktnr5v0m000lk0uxevuhboo3"},{"post_id":"cktnr5v0h000ek0ux8cxm717m","tag_id":"ckt0vl5fr0003ocu9hzqdd9kd","_id":"cktnr5v0n000mk0uxgmneamum"},{"post_id":"cktnr5v0h000ek0ux8cxm717m","tag_id":"ckt0vl5fy000eocu97m2qdypm","_id":"cktnr5v0n000ok0ux0ohw6jmq"},{"post_id":"cktnr5v0k000jk0ux8qpz55is","tag_id":"ckt0vl5fr0003ocu9hzqdd9kd","_id":"cktnr5v0o000qk0uxetlu0ih7"},{"post_id":"cktnr5v0k000jk0ux8qpz55is","tag_id":"ckt0vl5fy000eocu97m2qdypm","_id":"cktnr5v0o000sk0ux8k1z1jdc"},{"post_id":"cktnr5v0f000ck0uxcahs8wt6","tag_id":"cktnr5v0j000hk0ux6sbkdeac","_id":"cktnr5v0o000tk0ux99t3cted"},{"post_id":"cktpg91yl000084ux5ha32jkp","tag_id":"cktnr5v0j000hk0ux6sbkdeac","_id":"cktpg91yw000184uxdl456fx7"},{"post_id":"cktpg91z5000384ux55rp0med","tag_id":"cktnr5v0j000hk0ux6sbkdeac","_id":"cktpg91z7000584ux1bvue485"},{"post_id":"cktpg91z6000484uxel5t72jg","tag_id":"cktnr5v0j000hk0ux6sbkdeac","_id":"cktpg91z8000684ux5j9z7j27"},{"post_id":"cktpg91z9000984ux1kuj69a7","tag_id":"cktnr5v0j000hk0ux6sbkdeac","_id":"cktpg91za000b84uxhuxpd74r"},{"post_id":"cktpg91z9000a84uxa2378foo","tag_id":"cktnr5v0j000hk0ux6sbkdeac","_id":"cktpg91za000c84ux0w1386v8"}],"Tag":[{"name":"android","_id":"cksx03ihe00059cu97yjm05z0"},{"name":"drawable","_id":"cksx03ihg000a9cu97qn85ygn"},{"name":"hexo","_id":"cksx03ihj000e9cu9hnre6mml"},{"name":"主题","_id":"cksx03ihl000j9cu96g0eb077"},{"name":"javaweb","_id":"cksx03kn4000o9cu949952hjy"},{"name":"教材","_id":"ckt0vl5fr0003ocu9hzqdd9kd"},{"name":"阶段三","_id":"ckt0vl5fv0006ocu90giu533l"},{"name":"阶段一","_id":"ckt0vl5fx000docu9eiw3eobx"},{"name":"阶段二","_id":"ckt0vl5fy000eocu97m2qdypm"},{"name":"笔记","_id":"cktnr5v0j000hk0ux6sbkdeac"}]}}