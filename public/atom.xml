<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>衤羊</title>
  <icon>https://www.gravatar.com/avatar/df9fee9f16ad4f234ca4b8df1bfde2bd</icon>
  <subtitle>衤羊</subtitle>
  <link href="http://gaoxianglong.gitee.io/yisheep/atom.xml" rel="self"/>
  
  <link href="http://gaoxianglong.gitee.io/yisheep/"/>
  <updated>2021-09-18T02:34:48.848Z</updated>
  <id>http://gaoxianglong.gitee.io/yisheep/</id>
  
  <author>
    <name>衤羊</name>
    <email>1766816333@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter-AppBar详解</title>
    <link href="http://gaoxianglong.gitee.io/yisheep/2021/09/18/Flutter-AppBar/"/>
    <id>http://gaoxianglong.gitee.io/yisheep/2021/09/18/Flutter-AppBar/</id>
    <published>2021-09-18T02:22:13.000Z</published>
    <updated>2021-09-18T02:34:48.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flutter-AppBar详解"><a href="#Flutter-AppBar详解" class="headerlink" title="Flutter-AppBar详解"></a>Flutter-AppBar详解</h1><h2 id="AppBar介绍"><a href="#AppBar介绍" class="headerlink" title="AppBar介绍"></a>AppBar介绍</h2><p>AppBar是基于Material Design设计风格的应用栏，一般使用在Scaffold内部，作为顶部导航栏。</p><h4 id="为什么需要AppBar"><a href="#为什么需要AppBar" class="headerlink" title="为什么需要AppBar"></a>为什么需要AppBar</h4><p>1、因为导航栏里面一般由左侧功能键（返回键、菜单键）、标题、右侧功能键组成，而AppBar里面内置封装了这些组件，使用起来非常方便。</p><p>2、可以做一些特殊的导航栏，比如可滚动的导航栏。</p><p>3、根据环境 <code>MediaQuery</code> 的填充插入内容，以避免系统 <code>UI</code> 入侵。</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>本文中很多效果都没有截图，可下载源代码运行项目 <a href="https://github.com/JunAILiang/flutter_code">源代码地址</a>，或者通过视频教程查看 <a href="https://www.bilibili.com/video/BV1BM4y1L71Z?p=4">视频教程地址</a></p><h2 id="AppBar属性和说明"><a href="#AppBar属性和说明" class="headerlink" title="AppBar属性和说明"></a>AppBar属性和说明</h2><blockquote><p>总共28个属性</p></blockquote><table><thead><tr><th>字段</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>key</td><td>Key</td><td>当组件在组件树中移动时使用Key可以保持组件之前状态</td></tr><tr><td>leading</td><td>Widget</td><td>通常情况下返回一个返回键（IconButton)</td></tr><tr><td>leadingWidth</td><td>double</td><td>左侧leading的宽度，默认56</td></tr><tr><td>automaticallyImplyLeading</td><td>bool</td><td>和leading配合使用，如果为true并且leading为空的情况下，会自动配置返回键</td></tr><tr><td>title</td><td>Widget</td><td>导航栏的标题</td></tr><tr><td>centerTitle</td><td>bool</td><td>标题是否居中，不同操作系统默认显示位置不一样</td></tr><tr><td>actions</td><td>List</td><td>一个Widget列表</td></tr><tr><td>bottom</td><td>PreferredSizeWidget</td><td>出现在导航栏底部的控件</td></tr><tr><td>elevation</td><td>double</td><td>控制导航栏下方阴影的大小</td></tr><tr><td>shadowColor</td><td>Color</td><td>控制导航栏下方阴影的颜色</td></tr><tr><td>shape</td><td>ShapeBorder</td><td>导航栏的形状以及阴影</td></tr><tr><td>backgroundColor</td><td>Color</td><td>导航栏的背景颜色</td></tr><tr><td>foregroundColor</td><td>Color</td><td>导航栏中文本和图标的颜色</td></tr><tr><td>backwardsCompatibility</td><td>bool</td><td>与foregroundColor配合使用</td></tr><tr><td>iconTheme</td><td>IconThemeData</td><td>导航栏图标的颜色、透明度、大小的配置</td></tr><tr><td>actionsIconTheme</td><td>IconThemeData</td><td>导航栏右侧图标的颜色、透明度、大小的配置</td></tr><tr><td>textTheme</td><td>TextTheme</td><td>导航栏文本的排版样式</td></tr><tr><td>primary</td><td>bool</td><td>导航栏是否显示在屏幕顶部</td></tr><tr><td>excludeHeaderSemantics</td><td>bool</td><td>标题是否应该用 [Semantics] 包裹，默认false</td></tr><tr><td>titleSpacing</td><td>double</td><td>title内容的间距</td></tr><tr><td>toolbarOpacity</td><td>double</td><td>导航栏的透明度</td></tr><tr><td>bottomOpacity</td><td>double</td><td>导航栏底部的透明度</td></tr><tr><td>toolbarHeight</td><td>double</td><td>导航栏的高度，默认kToolbarHeight</td></tr><tr><td>toolbarTextStyle</td><td>TextStyle</td><td>导航栏图标的颜色</td></tr><tr><td>titleTextStyle</td><td>TextStyle</td><td>导航栏标题的默认颜色</td></tr><tr><td>flexibleSpace</td><td>Widget</td><td>堆叠在工具栏和选项卡栏的后面</td></tr><tr><td>systemOverlayStyle</td><td>SystemUiOverlayStyle</td><td>叠加层的样式</td></tr><tr><td>brightness</td><td>Brightness</td><td>导航栏的亮度，改属性已废弃，用systemOverlayStyle代替</td></tr></tbody></table><h2 id="AppBar详细使用"><a href="#AppBar详细使用" class="headerlink" title="AppBar详细使用"></a>AppBar详细使用</h2><h3 id="1、key"><a href="#1、key" class="headerlink" title="1、key"></a>1、key</h3><p><code>key</code> 是用来作为<code>Widget</code> 、<code>Element</code> 和 <code>SemanticsNode</code> 的标识，当组件在组件树中移动时使用Key可以保持组件之前状态。</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GlobalKey _appBarKey = GlobalKey(); </span><br><span class="line"><span class="meta">@override</span> Widget build(BuildContext context) &#123; </span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">        appBar: AppBar(    </span><br><span class="line">            key: _appBarKey,  </span><br><span class="line">        ), </span><br><span class="line">    );</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="2、leading"><a href="#2、leading" class="headerlink" title="2、leading"></a>2、leading</h3><p>appBar<code>左侧显示的一个</code>Widget<code>，一般显示返回键 </code>Icon<code>或</code>IconButton</p><h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span> Widget build(BuildContext context) &#123; </span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">        appBar: AppBar(  </span><br><span class="line">            leading: IconButton(      </span><br><span class="line">                onPressed: ()&#123;     </span><br><span class="line">                    Navigator.pop(context);  </span><br><span class="line">                &#125;,       </span><br><span class="line">                icon: Icon(</span><br><span class="line">                    Icons.arrow_back_sharp,</span><br><span class="line">                    color: Colors.white,</span><br><span class="line">                )    </span><br><span class="line">            ),  </span><br><span class="line">        ), </span><br><span class="line">    ); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="3、leadingWidth"><a href="#3、leadingWidth" class="headerlink" title="3、leadingWidth"></a>3、leadingWidth</h3><p>左侧leading的宽度，默认56</p><h4 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span> Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(  </span><br><span class="line">        appBar: AppBar(    </span><br><span class="line">            leading: IconButton(   </span><br><span class="line">                onPressed: ()&#123;       </span><br><span class="line">                    Navigator.pop(context);    </span><br><span class="line">                &#125;,        </span><br><span class="line">                icon: Icon(</span><br><span class="line">                    Icons.arrow_back_sharp,</span><br><span class="line">                    color: Colors.white,</span><br><span class="line">                )   </span><br><span class="line">            ),  </span><br><span class="line">            leadingWidth: <span class="number">60</span>,  </span><br><span class="line">        ), </span><br><span class="line">    ); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="4、automaticallyImplyLeading"><a href="#4、automaticallyImplyLeading" class="headerlink" title="4、automaticallyImplyLeading"></a>4、automaticallyImplyLeading</h3><p>当<code>leading</code> 未配置时，在二级页面下会自动展示一个返回键，默认值为 <code>true</code></p><h4 id="使用方法-3"><a href="#使用方法-3" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span> Widget build(BuildContext context) &#123; </span><br><span class="line">    <span class="keyword">return</span> Scaffold(   </span><br><span class="line">        appBar: AppBar(    </span><br><span class="line">            automaticallyImplyLeading: <span class="keyword">false</span>,   </span><br><span class="line">        ),  </span><br><span class="line">    ); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="5、title"><a href="#5、title" class="headerlink" title="5、title"></a>5、title</h3><p>导航栏的标题，一般是显示当前页面的标题文字</p><h4 id="使用方法-4"><a href="#使用方法-4" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span> Widget build(BuildContext context) &#123; </span><br><span class="line">    <span class="keyword">return</span> Scaffold(  </span><br><span class="line">        appBar: AppBar( </span><br><span class="line">            title: Text(<span class="string">&quot;AppBarExample&quot;</span>), </span><br><span class="line">        ),  </span><br><span class="line">    );</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="6、centerTitle"><a href="#6、centerTitle" class="headerlink" title="6、centerTitle"></a>6、centerTitle</h3><p>标题是否居中，不同操作系统默认显示位置不一样，安卓默认显示在左侧，苹果默认显示在中间</p><h4 id="使用方法-5"><a href="#使用方法-5" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span> Widget build(BuildContext context) &#123;  </span><br><span class="line">    <span class="keyword">return</span> Scaffold(   </span><br><span class="line">        appBar: AppBar(   </span><br><span class="line">            title: Text(<span class="string">&quot;AppBarExample&quot;</span>),  </span><br><span class="line">            centerTitle: <span class="keyword">true</span>,  </span><br><span class="line">        ),  </span><br><span class="line">    );</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="7、actions"><a href="#7、actions" class="headerlink" title="7、actions"></a>7、actions</h3><p>一个 <code>Widget</code> 列表，代表 <code>Toolbar</code> 中所显示的菜单，对于常用的菜单，通常使用 <code>IconButton</code> 来表示；对于不常用的菜单通常使用 <code>PopupMenuButton</code> 来显示为三个点，点击后弹出二级菜单</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span> Widget build(BuildContext context) &#123;  </span><br><span class="line">    <span class="keyword">return</span> Scaffold(   </span><br><span class="line">        appBar: AppBar(     </span><br><span class="line">            actions: [      </span><br><span class="line">                IconButton(      </span><br><span class="line">                    onPressed: ()&#123;&#125;,    </span><br><span class="line">                    tooltip: <span class="string">&quot;扫一扫&quot;</span>,   </span><br><span class="line">                    icon: Icon(Icons.qr_code_scanner),  </span><br><span class="line">                ),      </span><br><span class="line">                IconButton(    </span><br><span class="line">                    onPressed: ()&#123;&#125;,     </span><br><span class="line">                    tooltip: <span class="string">&quot;添加&quot;</span>,      </span><br><span class="line">                    icon: Icon(Icons.add),     </span><br><span class="line">                )     </span><br><span class="line">            ],  </span><br><span class="line">        ), </span><br><span class="line">    ); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="8、bottom"><a href="#8、bottom" class="headerlink" title="8、bottom"></a>8、bottom</h3><p>出现在应用栏底部的控件，一般是 <code>TabBar</code></p><h4 id="使用方法-6"><a href="#使用方法-6" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppBarExample</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">    <span class="meta">@override</span>  _AppBarExampleState createState() =&gt; _AppBarExampleState(); </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AppBarExampleState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AppBarExample</span>&gt; <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span></span>&#123;</span><br><span class="line">    TabController _tabController; </span><br><span class="line">    <span class="meta">@override</span>  <span class="keyword">void</span> initState() &#123; </span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> implement initState   </span></span><br><span class="line">        <span class="keyword">super</span>.initState();  </span><br><span class="line">        _tabController = TabController(length: <span class="number">2</span>, vsync: <span class="keyword">this</span>); </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@override</span>  Widget build(BuildContext context) &#123;  </span><br><span class="line">        <span class="keyword">return</span> Scaffold(   </span><br><span class="line">            appBar: AppBar(   </span><br><span class="line">                bottom: TabBar(       </span><br><span class="line">                    controller: _tabController,  </span><br><span class="line">                    tabs: [     </span><br><span class="line">                        Tab(</span><br><span class="line">                            text: <span class="string">&quot;火车&quot;</span>, </span><br><span class="line">                            icon: Icon(Icons.bus_alert),</span><br><span class="line">                        ),      </span><br><span class="line">                        Tab(</span><br><span class="line">                            text: <span class="string">&quot;汽车&quot;</span>, </span><br><span class="line">                            icon: Icon(Icons.bus_alert),</span><br><span class="line">                        )      </span><br><span class="line">                    ],     </span><br><span class="line">                ),  </span><br><span class="line">            ),    </span><br><span class="line">        ); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="9、elevation"><a href="#9、elevation" class="headerlink" title="9、elevation"></a>9、elevation</h3><p>控制应用栏下方阴影的大小，这个值不能是一个负值。</p><h4 id="使用方法-7"><a href="#使用方法-7" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span> Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(  </span><br><span class="line">        appBar: AppBar(   </span><br><span class="line">            elevation: <span class="number">10</span>,   </span><br><span class="line">        ),</span><br><span class="line">    ); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="10、shadowColor"><a href="#10、shadowColor" class="headerlink" title="10、shadowColor"></a>10、shadowColor</h3><p>控制导航栏下方阴影的颜色</p><h4 id="使用方法-8"><a href="#使用方法-8" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span> Widget build(BuildContext context) &#123;  </span><br><span class="line">    <span class="keyword">return</span> Scaffold(    </span><br><span class="line">        appBar: AppBar(     </span><br><span class="line">            elevation: <span class="number">10</span>,   </span><br><span class="line">            shadowColor: Colors.green, </span><br><span class="line">        ),</span><br><span class="line">    );</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="11、shape"><a href="#11、shape" class="headerlink" title="11、shape"></a>11、shape</h3><p>导航栏的形状以及阴影</p><h4 id="使用方法-9"><a href="#使用方法-9" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span> Widget build(BuildContext context) &#123; </span><br><span class="line">    <span class="keyword">return</span> Scaffold(   </span><br><span class="line">        appBar: AppBar(    </span><br><span class="line">            elevation: <span class="number">10</span>,     </span><br><span class="line">            shadowColor: Colors.green,  </span><br><span class="line">            shape: RoundedRectangleBorder(   </span><br><span class="line">                side: BorderSide(     </span><br><span class="line">                    color: Colors.red,     </span><br><span class="line">                    width: <span class="number">5</span>     </span><br><span class="line">                )    </span><br><span class="line">            )  </span><br><span class="line">        ), </span><br><span class="line">    ); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="12、backgroundColor"><a href="#12、backgroundColor" class="headerlink" title="12、backgroundColor"></a>12、backgroundColor</h3><p>导航栏的背景颜色</p><h4 id="使用方法-10"><a href="#使用方法-10" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span> Widget build(BuildContext context) &#123; </span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">        appBar: AppBar(     </span><br><span class="line">            backgroundColor: Colors.orange, </span><br><span class="line">        ), </span><br><span class="line">    ); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="13、foregroundColor"><a href="#13、foregroundColor" class="headerlink" title="13、foregroundColor"></a>13、foregroundColor</h3><p>导航栏中文本和图标的颜色</p><h4 id="使用方法-11"><a href="#使用方法-11" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span> Widget build(BuildContext context) &#123; </span><br><span class="line">    <span class="keyword">return</span> Scaffold(  </span><br><span class="line">        appBar: AppBar(  </span><br><span class="line">            foregroundColor: Colors.black, </span><br><span class="line">        ), </span><br><span class="line">    ); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="14、backwardsCompatibility"><a href="#14、backwardsCompatibility" class="headerlink" title="14、backwardsCompatibility"></a>14、backwardsCompatibility</h3><p>与foregroundColor配合使用</p><h3 id="使用方法-12"><a href="#使用方法-12" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span> Widget build(BuildContext context) &#123;  </span><br><span class="line">    <span class="keyword">return</span> Scaffold(   </span><br><span class="line">        appBar: AppBar(    </span><br><span class="line">            foregroundColor: Colors.black,  </span><br><span class="line">            backwardsCompatibility: <span class="keyword">true</span>,   </span><br><span class="line">        ), </span><br><span class="line">    ); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="15、iconTheme"><a href="#15、iconTheme" class="headerlink" title="15、iconTheme"></a>15、iconTheme</h3><p>导航栏图标的颜色、透明度、大小的配置</p><h3 id="使用方法-13"><a href="#使用方法-13" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span> Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(  </span><br><span class="line">        appBar: AppBar(    </span><br><span class="line">            leading: IconButton(     </span><br><span class="line">                onPressed: ()&#123;  </span><br><span class="line">                    Navigator.pop(context);    </span><br><span class="line">                &#125;,       </span><br><span class="line">                icon: Icon(Icons.arrow_back_sharp, color: Colors.white,)   </span><br><span class="line">            ),    </span><br><span class="line">            iconTheme: IconThemeData(     </span><br><span class="line">                color: Colors.orange,   </span><br><span class="line">                opacity: <span class="number">1</span>,    </span><br><span class="line">                size: <span class="number">50</span>    </span><br><span class="line">            ), </span><br><span class="line">        ), </span><br><span class="line">    );</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="16、actionsIconTheme"><a href="#16、actionsIconTheme" class="headerlink" title="16、actionsIconTheme"></a>16、actionsIconTheme</h3><p>导航栏右侧图标的颜色、透明度、大小的配置</p><h3 id="使用方法-14"><a href="#使用方法-14" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span> Widget build(BuildContext context) &#123; </span><br><span class="line">    <span class="keyword">return</span> Scaffold(  </span><br><span class="line">        appBar: AppBar(   </span><br><span class="line">            actions: [     </span><br><span class="line">                IconButton(      </span><br><span class="line">                    onPressed: ()&#123;&#125;,    </span><br><span class="line">                    tooltip: <span class="string">&quot;扫一扫&quot;</span>,    </span><br><span class="line">                    icon: Icon(Icons.qr_code_scanner),   </span><br><span class="line">                ),      </span><br><span class="line">                IconButton(   </span><br><span class="line">                    onPressed: ()&#123;&#125;,      </span><br><span class="line">                    tooltip: <span class="string">&quot;添加&quot;</span>,     </span><br><span class="line">                    icon: Icon(Icons.add),    </span><br><span class="line">                )    </span><br><span class="line">            ],   </span><br><span class="line">            actionsIconTheme: IconThemeData(  </span><br><span class="line">                color: Colors.purple,  </span><br><span class="line">            ),  </span><br><span class="line">        ),  </span><br><span class="line">    ); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="17、textTheme"><a href="#17、textTheme" class="headerlink" title="17、textTheme"></a>17、textTheme</h3><p>导航栏文本的排版样式，默认使用<code>ThemeData.primaryTextTheme</code></p><h3 id="18、primary"><a href="#18、primary" class="headerlink" title="18、primary"></a>18、primary</h3><p>导航栏是否显示在屏幕顶部</p><h4 id="使用方法-15"><a href="#使用方法-15" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span> Widget build(BuildContext context) &#123; </span><br><span class="line">    <span class="keyword">return</span> Scaffold( </span><br><span class="line">        appBar: AppBar(    </span><br><span class="line">            backrogoundColor: Colors.black, </span><br><span class="line">            primary: <span class="keyword">true</span>,  </span><br><span class="line">        ), </span><br><span class="line">    ); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="19、excludeHeaderSemantics"><a href="#19、excludeHeaderSemantics" class="headerlink" title="19、excludeHeaderSemantics"></a>19、excludeHeaderSemantics</h3><p>标题是否应该用 [Semantics] 包裹，默认false</p><h4 id="使用方法-16"><a href="#使用方法-16" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span> Widget build(BuildContext context) &#123;  </span><br><span class="line">    <span class="keyword">return</span> Scaffold(  </span><br><span class="line">        appBar: AppBar(    </span><br><span class="line">            backrogoundColor: Colors.black,   </span><br><span class="line">            primary: <span class="keyword">true</span>,  </span><br><span class="line">            excludeHeaderSemantics: <span class="keyword">true</span>,  </span><br><span class="line">        ), </span><br><span class="line">    ); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="20、titleSpacing"><a href="#20、titleSpacing" class="headerlink" title="20、titleSpacing"></a>20、titleSpacing</h3><p>标题内容的间距，如果为0，将占用全部空间</p><h4 id="使用方法-17"><a href="#使用方法-17" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span> Widget build(BuildContext context) &#123; </span><br><span class="line">    <span class="keyword">return</span> Scaffold(  </span><br><span class="line">        appBar: AppBar(   </span><br><span class="line">            title: Text(<span class="string">&quot;AppBarExample&quot;</span>), </span><br><span class="line">            centerTitle: <span class="keyword">true</span>,    </span><br><span class="line">            titleSpacing: <span class="number">0</span>,  </span><br><span class="line">        ), </span><br><span class="line">    ); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="21、toolbarOpacity"><a href="#21、toolbarOpacity" class="headerlink" title="21、toolbarOpacity"></a>21、toolbarOpacity</h3><p>导航栏的透明度</p><h4 id="使用方法-18"><a href="#使用方法-18" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span> Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(  </span><br><span class="line">        appBar: AppBar(     </span><br><span class="line">            backrogoundColor: Colors.black,  </span><br><span class="line">            toolbarOpacity: <span class="number">0.5</span>,   </span><br><span class="line">        ), </span><br><span class="line">    );</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="22、bottomOpacity"><a href="#22、bottomOpacity" class="headerlink" title="22、bottomOpacity"></a>22、bottomOpacity</h3><p>导航栏底部的透明度</p><h4 id="使用方法-19"><a href="#使用方法-19" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppBarExample</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@override</span>  _AppBarExampleState createState() =&gt; _AppBarExampleState(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AppBarExampleState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AppBarExample</span>&gt; <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span></span>&#123; </span><br><span class="line">    TabController _tabController;  </span><br><span class="line">    <span class="meta">@override</span>  <span class="keyword">void</span> initState() &#123; </span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> implement initState   </span></span><br><span class="line">        <span class="keyword">super</span>.initState();   </span><br><span class="line">        _tabController = TabController(length: <span class="number">2</span>, vsync: <span class="keyword">this</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="meta">@override</span>  Widget build(BuildContext context) &#123; </span><br><span class="line">        <span class="keyword">return</span> Scaffold(    </span><br><span class="line">            appBar: AppBar(      </span><br><span class="line">                bottom: TabBar(     </span><br><span class="line">                    controller: _tabController,       </span><br><span class="line">                    tabs: [           </span><br><span class="line">                        Tab(text: <span class="string">&quot;火车&quot;</span>, icon: Icon(Icons.bus_alert),),   </span><br><span class="line">                        Tab(text: <span class="string">&quot;汽车&quot;</span>, icon: Icon(Icons.bus_alert),)     </span><br><span class="line">                    ],     </span><br><span class="line">                ), </span><br><span class="line">                bottomOpacity: <span class="number">0.5</span>,   </span><br><span class="line">            ),   </span><br><span class="line">        ); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="23、toolbarHeight"><a href="#23、toolbarHeight" class="headerlink" title="23、toolbarHeight"></a>23、toolbarHeight</h3><p>导航栏的高度，默认kToolbarHeight</p><h4 id="使用方法-20"><a href="#使用方法-20" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span> Widget build(BuildContext context) &#123; </span><br><span class="line">    <span class="keyword">return</span> Scaffold( </span><br><span class="line">        appBar: AppBar(  </span><br><span class="line">            backrogoundColor: Colors.black,  </span><br><span class="line">            toolbarHeight: <span class="number">200</span>,</span><br><span class="line">        ),</span><br><span class="line">    ); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="24、toolbarTextStyle"><a href="#24、toolbarTextStyle" class="headerlink" title="24、toolbarTextStyle"></a>24、toolbarTextStyle</h3><p>导航栏图标的颜色</p><h4 id="使用方法-21"><a href="#使用方法-21" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span> Widget build(BuildContext context) &#123; </span><br><span class="line">    <span class="keyword">return</span> Scaffold(  </span><br><span class="line">        appBar: AppBar(    </span><br><span class="line">            leading: IconButton(   </span><br><span class="line">                onPressed: ()&#123;  </span><br><span class="line">                    Navigator.pop(context);  </span><br><span class="line">                &#125;,        </span><br><span class="line">                icon: Icon(Icons.arrow_back_sharp, color: Colors.white,)  </span><br><span class="line">            ),    </span><br><span class="line">            toolbarTextStyle: TextStyle(     </span><br><span class="line">                color: Colors.black   </span><br><span class="line">            ),  </span><br><span class="line">        ),  </span><br><span class="line">    );</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="25、titleTextStyle"><a href="#25、titleTextStyle" class="headerlink" title="25、titleTextStyle"></a>25、titleTextStyle</h3><p>导航栏标题的默认颜色</p><h4 id="使用方法-22"><a href="#使用方法-22" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span> Widget build(BuildContext context) &#123; </span><br><span class="line">    <span class="keyword">return</span> Scaffold(  </span><br><span class="line">        appBar: AppBar(   </span><br><span class="line">            title: Text(<span class="string">&quot;AppBarExample&quot;</span>),  </span><br><span class="line">            centerTitle: <span class="keyword">true</span>,    </span><br><span class="line">            titleSpacing: <span class="number">0</span>,    </span><br><span class="line">            titleTextStyle: TextStyle(  </span><br><span class="line">                color: Colors.red    </span><br><span class="line">            ),   </span><br><span class="line">        ), </span><br><span class="line">    ); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="26、flexibleSpace、systemOverlayStyle、brightness"><a href="#26、flexibleSpace、systemOverlayStyle、brightness" class="headerlink" title="26、flexibleSpace、systemOverlayStyle、brightness"></a>26、flexibleSpace、systemOverlayStyle、brightness</h3><p><code>flexibleSpace</code> 以及 <code>systemOverlayStyle</code> 一般都是在配合 <code>SliverAppBar</code> 使用的，这里不做过多的描述。而 <code>brightness</code> 已经废弃，用 <code>systemOverlayStyle</code> 代替。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上是针对 <code>AppBar</code> 的所有使用方法，最常用的属有<code>leading</code>、<code>title</code>、<code>actions</code>、<code>centerTitle</code>、<code>bottom</code>、<code>backgroundColor</code>，其他属性都是在特定的情况才会使用。</p>]]></content>
    
    
    <summary type="html">Flutter-AppBar详解</summary>
    
    
    
    <category term="flutter" scheme="http://gaoxianglong.gitee.io/yisheep/categories/flutter/"/>
    
    
    <category term="笔记" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-Scaffold详解</title>
    <link href="http://gaoxianglong.gitee.io/yisheep/2021/09/18/Flutter-Scaffold/"/>
    <id>http://gaoxianglong.gitee.io/yisheep/2021/09/18/Flutter-Scaffold/</id>
    <published>2021-09-18T01:25:34.000Z</published>
    <updated>2021-09-18T01:44:19.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Scaffold介绍"><a href="#Scaffold介绍" class="headerlink" title="Scaffold介绍"></a>Scaffold介绍</h2><p><code>Scaffold</code> 我们通常俗称为脚手架，在前面的文章中我们说到，<code>Material</code> 组件（MDC）帮助开发者实现 <a href="https://material.io/design">Material Design</a>，<code>Scaffold</code> 实现了基本的 <a href="https://material.io/design">Material Design</a> 布局结构。在 <code>Material</code> 设计中定义的单个界面上的各种布局元素，在 Scaffold 中都支持。</p><h4 id="Scaffold在什么情况下使用"><a href="#Scaffold在什么情况下使用" class="headerlink" title="Scaffold在什么情况下使用"></a>Scaffold在什么情况下使用</h4><p>在每一个页面中基本都需要用到<code>Scaffold</code> ，除非当你的页面不需要导航区，但仍希望您使用 <code>Scaffold</code> 来作为每个页面的顶级组件。</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>本文中很多效果都没有截图，可通过视频教程查看 <a href="https://www.bilibili.com/video/BV1BM4y1L71Z?p=3">视频教程地址</a></p><h2 id="Scaffold属性和说明"><a href="#Scaffold属性和说明" class="headerlink" title="Scaffold属性和说明"></a>Scaffold属性和说明</h2><blockquote><p>总共23个属性</p></blockquote><table><thead><tr><th>字段</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>appBar</td><td>PreferredSizeWidget</td><td>显示脚手架的顶部导航区</td></tr><tr><td>body</td><td>Widget</td><td>显示脚手架的主要内容</td></tr><tr><td>floatingActionButton</td><td>Widget</td><td>悬浮按钮，位于右下角</td></tr><tr><td>floatingActionButtonLocation</td><td>FloatingActionButtonLocation</td><td>决定悬浮按钮的位置</td></tr><tr><td>floatingActionButtonAnimator</td><td>FloatingActionButtonAnimator</td><td>决定悬浮按钮的动画</td></tr><tr><td>persistentFooterButtons</td><td>List</td><td>显示在脚手架底部的一组按钮</td></tr><tr><td>drawer</td><td>Widget</td><td>左侧抽屉菜单组件</td></tr><tr><td>onDrawerChanged</td><td>DrawerCallback</td><td>左侧抽屉菜单改变事件回调</td></tr><tr><td>endDrawer</td><td>Widget</td><td>右侧抽屉菜单组件</td></tr><tr><td>onEndDrawerChanged</td><td>DrawerCallback</td><td>右侧抽屉菜单改变事件回调</td></tr><tr><td>bottomNavigationBar</td><td>Widget</td><td>底部导航条</td></tr><tr><td>bottomSheet</td><td>Widget</td><td>持久在body下方，底部控件上方的控件</td></tr><tr><td>backgroundColor</td><td>Color</td><td>脚手架背景颜色</td></tr><tr><td>resizeToAvoidBottomInset</td><td>bool</td><td>防止小组件重复</td></tr><tr><td>primary</td><td>bool</td><td>脚手架是否延伸到顶部</td></tr><tr><td>drawerDragStartBehavior</td><td>DragStartBehavior</td><td>检测手势行为方式，与drawer配合使用</td></tr><tr><td>extendBody</td><td>bool</td><td>是否延伸到底部</td></tr><tr><td>extendBodyBehindAppBar</td><td>bool</td><td>是否延伸到顶部，用于做半透明、毛玻璃效果的主要控制属性</td></tr><tr><td>drawerScrimColor</td><td>Color</td><td>侧边栏弹出时非遮盖层主页面的颜色</td></tr><tr><td>drawerEdgeDragWidth</td><td>double</td><td>侧边栏弹出时非遮罩层的宽度</td></tr><tr><td>drawerEnableOpenDragGesture</td><td>bool</td><td>左侧抽屉是否支持手势滑动</td></tr><tr><td>endDrawerEnableOpenDragGesture</td><td>bool</td><td>右侧抽屉是否支持手势滑动</td></tr><tr><td>restorationId</td><td>String</td><td>状态还原标识符</td></tr></tbody></table><h2 id="Scaffold属性详细使用"><a href="#Scaffold属性详细使用" class="headerlink" title="Scaffold属性详细使用"></a>Scaffold属性详细使用</h2><h3 id="1、appBar"><a href="#1、appBar" class="headerlink" title="1、appBar"></a>1、appBar</h3><p>显示脚手架的顶部导航栏</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Scaffold( </span><br><span class="line">    appBar: AppBar(   </span><br><span class="line">        title: Text(<span class="string">&quot;Scaffold&quot;</span>),</span><br><span class="line">    ),</span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="2、body"><a href="#2、body" class="headerlink" title="2、body"></a>2、body</h3><p>显示脚手架的主要内容</p><h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Scaffold(  </span><br><span class="line">    appBar: AppBar(  </span><br><span class="line">        title: Text(<span class="string">&quot;Scaffold&quot;</span>), </span><br><span class="line">    ), </span><br><span class="line">    body: Center(  </span><br><span class="line">        child: Text(<span class="string">&quot;body&quot;</span>), </span><br><span class="line">    ), </span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="3、floatingActionButton"><a href="#3、floatingActionButton" class="headerlink" title="3、floatingActionButton"></a>3、floatingActionButton</h3><p>悬浮按钮，默认位于右小角</p><h4 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Scaffold(  </span><br><span class="line">    appBar: AppBar(  </span><br><span class="line">        title: Text(<span class="string">&quot;Scaffold&quot;</span>), </span><br><span class="line">    ),  </span><br><span class="line">    body: Center(  </span><br><span class="line">        child: Text(<span class="string">&quot;body&quot;</span>), </span><br><span class="line">    ),  </span><br><span class="line">    floatingActionButton: FloatingActionButton(  </span><br><span class="line">        onPressed: ()&#123;   </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;add&quot;</span>);  </span><br><span class="line">        &#125;,  </span><br><span class="line">        child: Icon(Icons.add) </span><br><span class="line">    ),</span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="4、floatingActionButtonLocation"><a href="#4、floatingActionButtonLocation" class="headerlink" title="4、floatingActionButtonLocation"></a>4、floatingActionButtonLocation</h3><p>决定悬浮按钮的位置</p><h4 id="使用方法-3"><a href="#使用方法-3" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Scaffold( </span><br><span class="line">    appBar: AppBar(  </span><br><span class="line">        title: Text(<span class="string">&quot;Scaffold&quot;</span>), </span><br><span class="line">    ),  </span><br><span class="line">    body: Center(  </span><br><span class="line">        child: Text(<span class="string">&quot;body&quot;</span>), </span><br><span class="line">    ),  </span><br><span class="line">    floatingActionButton: FloatingActionButton(  </span><br><span class="line">        onPressed: ()&#123;   </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;add&quot;</span>);  </span><br><span class="line">        &#125;,  </span><br><span class="line">        child: Icon(Icons.add) </span><br><span class="line">    ), </span><br><span class="line">    floatingActionButtonLocation: FloatingActionButtonLocation.miniCenterDocked,</span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="5、floatingActionButtonAnimator"><a href="#5、floatingActionButtonAnimator" class="headerlink" title="5、floatingActionButtonAnimator"></a>5、floatingActionButtonAnimator</h3><p>决定悬浮按钮的动画</p><h4 id="使用方法-4"><a href="#使用方法-4" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Scaffold( </span><br><span class="line">    appBar: AppBar(  </span><br><span class="line">        title: Text(<span class="string">&quot;Scaffold&quot;</span>), </span><br><span class="line">    ),  </span><br><span class="line">    body: Center(  </span><br><span class="line">        child: Text(<span class="string">&quot;body&quot;</span>), </span><br><span class="line">    ), </span><br><span class="line">    floatingActionButton: FloatingActionButton( </span><br><span class="line">        onPressed: ()&#123;  </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;add&quot;</span>);   </span><br><span class="line">        &#125;,  </span><br><span class="line">        child: Icon(Icons.add) </span><br><span class="line">    ), </span><br><span class="line">    floatingActionButtonLocation:FloatingActionButtonLocation.miniCenterDocked,  </span><br><span class="line">    floatingActionButtonAnimator: FloatingActionButtonAnimator.scaling, </span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="6、persistentFooterButtons"><a href="#6、persistentFooterButtons" class="headerlink" title="6、persistentFooterButtons"></a>6、persistentFooterButtons</h3><p>显示在脚手架底部的一组按钮</p><h4 id="使用方法-5"><a href="#使用方法-5" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Scaffold(  </span><br><span class="line">    appBar: AppBar(  </span><br><span class="line">        title: Text(<span class="string">&quot;Scaffold&quot;</span>), </span><br><span class="line">    ),  </span><br><span class="line">    body: Center(  </span><br><span class="line">        child: Text(<span class="string">&quot;body&quot;</span>), </span><br><span class="line">    ), </span><br><span class="line">    persistentFooterButtons: [   </span><br><span class="line">        TextButton(</span><br><span class="line">            onPressed: ()&#123;&#125;, </span><br><span class="line">            child: Text(<span class="string">&quot;Text1&quot;</span>)),  </span><br><span class="line">        TextButton(</span><br><span class="line">            onPressed: ()&#123;&#125;, </span><br><span class="line">            child: Text(<span class="string">&quot;Text2&quot;</span>)), </span><br><span class="line">    ],</span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="7、drawer"><a href="#7、drawer" class="headerlink" title="7、drawer"></a>7、drawer</h3><p>左侧抽屉菜单组件，如果需要自定义可通过设置 <code>Scaffold</code> 的 <code>key</code> 来操作手动打开侧边栏，代码如下</p><h4 id="使用方法-6"><a href="#使用方法-6" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class="line">Scaffold( </span><br><span class="line">    key: _scaffoldKey, </span><br><span class="line">    appBar: AppBar( </span><br><span class="line">        title: Text(<span class="string">&quot;Scaffold&quot;</span>), </span><br><span class="line">        leading: IconButton(</span><br><span class="line">            onPressed: ()&#123;    </span><br><span class="line">                _scaffoldKey.currentState.openDrawer(); </span><br><span class="line">            &#125;, </span><br><span class="line">            icon: Icon(Icons.menu_open)), </span><br><span class="line">    ),</span><br><span class="line">    body: Center(  </span><br><span class="line">        child: Text(<span class="string">&quot;body&quot;</span>),</span><br><span class="line">    ), </span><br><span class="line">    drawer: Drawer(   </span><br><span class="line">        child: Center(child: Text(<span class="string">&quot;draw&quot;</span>),), </span><br><span class="line">    ) </span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="8、onDrawerChanged"><a href="#8、onDrawerChanged" class="headerlink" title="8、onDrawerChanged"></a>8、onDrawerChanged</h3><p>左侧抽屉菜单改变事件回调</p><h4 id="使用方法-7"><a href="#使用方法-7" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class="line">Scaffold( </span><br><span class="line">    key: _scaffoldKey, </span><br><span class="line">    appBar: AppBar(  </span><br><span class="line">        title: Text(<span class="string">&quot;Scaffold&quot;</span>),  </span><br><span class="line">        leading: IconButton(</span><br><span class="line">            onPressed: ()&#123;     </span><br><span class="line">                _scaffoldKey.currentState.openDrawer();  </span><br><span class="line">            &#125;, </span><br><span class="line">            icon: Icon(Icons.menu_open)), </span><br><span class="line">    ),  </span><br><span class="line">    body: Center(  </span><br><span class="line">        child: Text(<span class="string">&quot;body&quot;</span>), </span><br><span class="line">    ), </span><br><span class="line">    drawer: Drawer(  </span><br><span class="line">        child: Center(child: Text(<span class="string">&quot;draw&quot;</span>),), </span><br><span class="line">    ), </span><br><span class="line">    onDrawerChanged: (isOpen) &#123;</span><br><span class="line">        <span class="built_in">print</span>(isOpen); </span><br><span class="line">    &#125;,</span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="9、endDrawer"><a href="#9、endDrawer" class="headerlink" title="9、endDrawer"></a>9、endDrawer</h3><p>右侧抽屉菜单组件,功能和 <code>drawer</code> 一样，唯一的区别是一个在左侧，一个在右侧。</p><h4 id="使用方法-8"><a href="#使用方法-8" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey();</span><br><span class="line">Scaffold( </span><br><span class="line">    key: _scaffoldKey, </span><br><span class="line">    appBar: AppBar(  </span><br><span class="line">        title: Text(<span class="string">&quot;Scaffold&quot;</span>),  </span><br><span class="line">        leading: IconButton(</span><br><span class="line">            onPressed: ()&#123;     </span><br><span class="line">                _scaffoldKey.currentState.openDrawer();   </span><br><span class="line">            &#125;, </span><br><span class="line">            icon: Icon(Icons.menu_open)),</span><br><span class="line">    ), </span><br><span class="line">    body: Center(  </span><br><span class="line">        child: Text(<span class="string">&quot;body&quot;</span>), </span><br><span class="line">    ),</span><br><span class="line">    endDrawer: Drawer(  </span><br><span class="line">        child: Center(child: Text(<span class="string">&quot;draw&quot;</span>),), </span><br><span class="line">    ), </span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="10、onEndDrawerChanged"><a href="#10、onEndDrawerChanged" class="headerlink" title="10、onEndDrawerChanged"></a>10、onEndDrawerChanged</h3><p>右侧抽屉菜单改变事件回调，使用方式和 <code>onDrawerChanged</code> 一样。</p><h4 id="使用方法-9"><a href="#使用方法-9" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class="line">Scaffold(  </span><br><span class="line">    key: _scaffoldKey,  </span><br><span class="line">    appBar: AppBar(  </span><br><span class="line">        title: Text(<span class="string">&quot;Scaffold&quot;</span>),   </span><br><span class="line">        leading: IconButton(</span><br><span class="line">            onPressed: ()&#123; </span><br><span class="line">                _scaffoldKey.currentState.openDrawer(); </span><br><span class="line">            &#125;,</span><br><span class="line">            icon: Icon(Icons.menu_open)), </span><br><span class="line">    ),  </span><br><span class="line">    body: Center(  </span><br><span class="line">        child: Text(<span class="string">&quot;body&quot;</span>), </span><br><span class="line">    ),</span><br><span class="line">    endDrawer: Drawer(  </span><br><span class="line">        child: Center(child: Text(<span class="string">&quot;draw&quot;</span>),),</span><br><span class="line">    ),  </span><br><span class="line">    onEndDrawerChanged: (isOpen) &#123; </span><br><span class="line">        <span class="built_in">print</span>(isOpen); </span><br><span class="line">    &#125;,</span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="11、bottomNavigationBar"><a href="#11、bottomNavigationBar" class="headerlink" title="11、bottomNavigationBar"></a>11、bottomNavigationBar</h3><p> 底部导航条，常用于切换底部 <code>item</code></p><h4 id="使用方法-10"><a href="#使用方法-10" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> _currentIndex = <span class="number">0</span>;  </span><br><span class="line"><span class="built_in">List</span>&lt;Widget&gt; _pages = [  </span><br><span class="line">    Center(child: Text(<span class="string">&quot;tab1&quot;</span>),), </span><br><span class="line">    Center(child: Text(<span class="string">&quot;tab2&quot;</span>),), </span><br><span class="line">]; </span><br><span class="line">Scaffold( </span><br><span class="line">    appBar: AppBar(  </span><br><span class="line">        title: Text(<span class="string">&quot;Scaffold&quot;</span>),</span><br><span class="line">    ),</span><br><span class="line">    body: _pages[_currentIndex], </span><br><span class="line">    bottomNavigationBar: BottomNavigationBar( </span><br><span class="line">        items: [  </span><br><span class="line">            BottomNavigationBarItem(    </span><br><span class="line">                label: <span class="string">&quot;tab1&quot;</span>,   </span><br><span class="line">                icon: Icon(Icons.settings)  </span><br><span class="line">            ),    </span><br><span class="line">            BottomNavigationBarItem(    </span><br><span class="line">                label: <span class="string">&quot;tab2&quot;</span>,  </span><br><span class="line">                icon: Icon(Icons.settings)   </span><br><span class="line">            )  </span><br><span class="line">        ],  </span><br><span class="line">        currentIndex: _currentIndex, </span><br><span class="line">        onTap: (currentIndex) &#123; </span><br><span class="line">            setState(() &#123;   </span><br><span class="line">                _currentIndex = currentIndex;   </span><br><span class="line">            &#125;);  </span><br><span class="line">        &#125;, </span><br><span class="line">    ), </span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="12、bottomSheet"><a href="#12、bottomSheet" class="headerlink" title="12、bottomSheet"></a>12、bottomSheet</h3><p>持久在body下方，底部控件上方的控件</p><h4 id="使用方法-11"><a href="#使用方法-11" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Scaffold(  </span><br><span class="line">    appBar: AppBar(   </span><br><span class="line">        title: Text(<span class="string">&quot;Scaffold&quot;</span>), </span><br><span class="line">    ),  </span><br><span class="line">    body: _pages[_currentIndex], </span><br><span class="line">    bottomSheet: Container(</span><br><span class="line">        child: Row( </span><br><span class="line">            children: [    </span><br><span class="line">                Expanded(child: TextField()),    </span><br><span class="line">                ElevatedButton(</span><br><span class="line">                    onPressed: ()&#123;&#125;, </span><br><span class="line">                    child: Text(<span class="string">&quot;发送&quot;</span>))   </span><br><span class="line">            ], </span><br><span class="line">        ),</span><br><span class="line">    ) </span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="13、backgroundColor"><a href="#13、backgroundColor" class="headerlink" title="13、backgroundColor"></a>13、backgroundColor</h3><p>脚手架背景颜色</p><h4 id="使用方法-12"><a href="#使用方法-12" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Scaffold( </span><br><span class="line">    appBar: AppBar(   </span><br><span class="line">        title: Text(<span class="string">&quot;Scaffold&quot;</span>), </span><br><span class="line">    ), </span><br><span class="line">    body: _pages[_currentIndex], </span><br><span class="line">    backgroundColor: Colors.pink, </span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="14、resizeToAvoidBottomInset"><a href="#14、resizeToAvoidBottomInset" class="headerlink" title="14、resizeToAvoidBottomInset"></a>14、resizeToAvoidBottomInset</h3><p>防止组件重复，当键盘弹起时会挡住组件，该值设置为 <code>ture</code> 可防止键盘遮挡</p><h4 id="使用方法-13"><a href="#使用方法-13" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Scaffold( </span><br><span class="line">    appBar: AppBar(  </span><br><span class="line">        title: Text(<span class="string">&quot;Scaffold&quot;</span>), </span><br><span class="line">    ), </span><br><span class="line">    body: _pages[_currentIndex], </span><br><span class="line">    resizeToAvoidBottomInset: <span class="keyword">true</span>, </span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="15、primary"><a href="#15、primary" class="headerlink" title="15、primary"></a>15、primary</h3><p>脚手架是否延伸到顶部</p><h4 id="使用方法-14"><a href="#使用方法-14" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Scaffold(  </span><br><span class="line">    appBar: AppBar(  </span><br><span class="line">        title: Text(<span class="string">&quot;Scaffold&quot;</span>), </span><br><span class="line">    ),  </span><br><span class="line">    body: _pages[_currentIndex],</span><br><span class="line">    primary: <span class="keyword">true</span>, </span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="16、drawerDragStartBehavior"><a href="#16、drawerDragStartBehavior" class="headerlink" title="16、drawerDragStartBehavior"></a>16、drawerDragStartBehavior</h3><p>拖动行为方式，与 <code>drawer </code>配合使用，用于打开和关闭抽屉的拖动行为将在检测到拖动手势时开始。 如果设置为 DragStartBehavior.down，它将在首次检测到 down 事件时开始。当拖动返回时会使用 <code>DragStartBehavior.down</code> 是有很明显的卡顿，建议使用 <code>DragStartBehavior.start</code></p><h4 id="使用方法-15"><a href="#使用方法-15" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class="line">Scaffold( </span><br><span class="line">    key: _scaffoldKey, </span><br><span class="line">    appBar: AppBar(  </span><br><span class="line">        title: Text(<span class="string">&quot;Scaffold&quot;</span>), </span><br><span class="line">        leading: IconButton(</span><br><span class="line">            onPressed: ()&#123;     </span><br><span class="line">                _scaffoldKey.currentState.openDrawer();   </span><br><span class="line">            &#125;, </span><br><span class="line">            icon: Icon(Icons.menu_open)),  </span><br><span class="line">    ),  </span><br><span class="line">    body: Center(  </span><br><span class="line">        child: Text(<span class="string">&quot;body&quot;</span>), </span><br><span class="line">    ), </span><br><span class="line">    drawer: Drawer(  </span><br><span class="line">        child: Center(child: Text(<span class="string">&quot;draw&quot;</span>),), </span><br><span class="line">    ),  </span><br><span class="line">    drawerDragStartBehavior: DragStartBehavior.start </span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="17、extendBody"><a href="#17、extendBody" class="headerlink" title="17、extendBody"></a>17、extendBody</h3><p>是否延伸到底部，主要用于做半透明效果。</p><h4 id="使用方法-16"><a href="#使用方法-16" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Scaffold( </span><br><span class="line">    appBar: AppBar( </span><br><span class="line">        title: Text(<span class="string">&quot;Scaffold&quot;</span>),</span><br><span class="line">    ), </span><br><span class="line">    body: _pages[_currentIndex],</span><br><span class="line">    extendBody: <span class="keyword">true</span>, </span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="18、extendBodyBehindAppBar"><a href="#18、extendBodyBehindAppBar" class="headerlink" title="18、extendBodyBehindAppBar"></a>18、extendBodyBehindAppBar</h3><p>是否延伸到顶部，用于做半透明、毛玻璃效果的主要控制属性</p><h4 id="使用方法-17"><a href="#使用方法-17" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Scaffold( </span><br><span class="line">    appBar: AppBar(   </span><br><span class="line">        title: Text(<span class="string">&quot;Scaffold&quot;</span>), </span><br><span class="line">    ), </span><br><span class="line">    body: _pages[_currentIndex], </span><br><span class="line">    extendBodyBehindAppBar: <span class="keyword">true</span>, </span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="19、drawerScrimColor"><a href="#19、drawerScrimColor" class="headerlink" title="19、drawerScrimColor"></a>19、drawerScrimColor</h3><p>侧边栏弹出时非遮盖层主页面的颜色</p><h4 id="使用方法-18"><a href="#使用方法-18" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class="line">Scaffold(  </span><br><span class="line">    key: _scaffoldKey, </span><br><span class="line">    appBar: AppBar(  </span><br><span class="line">        title: Text(<span class="string">&quot;Scaffold&quot;</span>),   </span><br><span class="line">        leading: IconButton(</span><br><span class="line">            onPressed: ()&#123;  </span><br><span class="line">                _scaffoldKey.currentState.openDrawer(); </span><br><span class="line">            &#125;, </span><br><span class="line">            icon: Icon(Icons.menu_open)), </span><br><span class="line">    ), </span><br><span class="line">    body: Center(  </span><br><span class="line">        child: Text(<span class="string">&quot;body&quot;</span>),  </span><br><span class="line">    ), </span><br><span class="line">    drawer: Drawer(  </span><br><span class="line">        child: Center(child: Text(<span class="string">&quot;draw&quot;</span>),), </span><br><span class="line">    ), </span><br><span class="line">    drawerScrimColor: Colors.green,</span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="20、drawerEdgeDragWidth"><a href="#20、drawerEdgeDragWidth" class="headerlink" title="20、drawerEdgeDragWidth"></a>20、drawerEdgeDragWidth</h3><p>侧边栏弹出时非遮罩层的宽度，当滑动的距离小于该值时，遮罩层会弹出。默认值是20</p><h4 id="使用方法-19"><a href="#使用方法-19" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class="line">Scaffold( </span><br><span class="line">    key: _scaffoldKey, </span><br><span class="line">    appBar: AppBar(  </span><br><span class="line">        title: Text(<span class="string">&quot;Scaffold&quot;</span>),  </span><br><span class="line">        leading: IconButton(</span><br><span class="line">            onPressed: ()&#123;      </span><br><span class="line">                _scaffoldKey.currentState.openDrawer();  </span><br><span class="line">            &#125;,</span><br><span class="line">            icon: Icon(Icons.menu_open)), </span><br><span class="line">    ), </span><br><span class="line">    body: Center(  </span><br><span class="line">        child: Text(<span class="string">&quot;body&quot;</span>), </span><br><span class="line">    ),  </span><br><span class="line">    drawer: Drawer( </span><br><span class="line">        child: Center(child: Text(<span class="string">&quot;draw&quot;</span>),), </span><br><span class="line">    ),  </span><br><span class="line">    drawerScrimColor: Colors.green, </span><br><span class="line">    drawerEdgeDragWidth: <span class="number">100</span>,</span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="21、drawerEnableOpenDragGesture"><a href="#21、drawerEnableOpenDragGesture" class="headerlink" title="21、drawerEnableOpenDragGesture"></a>21、drawerEnableOpenDragGesture</h3><p>左侧抽屉是否支持手势滑动，如果设置为 <code>false</code> ，将不能通过侧滑手势滑出，默认<code>true</code></p><h4 id="使用方法-20"><a href="#使用方法-20" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class="line">Scaffold( </span><br><span class="line">    key: _scaffoldKey, </span><br><span class="line">    appBar: AppBar(   </span><br><span class="line">        title: Text(<span class="string">&quot;Scaffold&quot;</span>),  </span><br><span class="line">        leading: IconButton(</span><br><span class="line">            onPressed: ()&#123;     </span><br><span class="line">                _scaffoldKey.currentState.openDrawer(); </span><br><span class="line">            &#125;, </span><br><span class="line">            icon: Icon(Icons.menu_open)),</span><br><span class="line">    ), </span><br><span class="line">    body: Center( </span><br><span class="line">        child: Text(<span class="string">&quot;body&quot;</span>), </span><br><span class="line">    ),  </span><br><span class="line">    drawer: Drawer(  </span><br><span class="line">        child: Center(child: Text(<span class="string">&quot;draw&quot;</span>),), </span><br><span class="line">    ),  </span><br><span class="line">    drawerScrimColor: Colors.green,  </span><br><span class="line">    drawerEnableOpenDragGesture: <span class="keyword">false</span>, </span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="22、endDrawerEnableOpenDragGesture"><a href="#22、endDrawerEnableOpenDragGesture" class="headerlink" title="22、endDrawerEnableOpenDragGesture"></a>22、endDrawerEnableOpenDragGesture</h3><p>右侧抽屉是否支持手势滑动，如果设置为 <code>false</code> ，将不能通过侧滑手势滑出，默认 <code>true</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey(); </span><br><span class="line">Scaffold( </span><br><span class="line">    key: _scaffoldKey, </span><br><span class="line">    appBar: AppBar(  </span><br><span class="line">        title: Text(<span class="string">&quot;Scaffold&quot;</span>), </span><br><span class="line">        leading: IconButton(</span><br><span class="line">            onPressed: ()&#123;   </span><br><span class="line">                _scaffoldKey.currentState.openDrawer();   </span><br><span class="line">            &#125;, </span><br><span class="line">            icon: Icon(Icons.menu_open)),  </span><br><span class="line">    ),  </span><br><span class="line">    body: Center(  </span><br><span class="line">        child: Text(<span class="string">&quot;body&quot;</span>),</span><br><span class="line">    ),  </span><br><span class="line">    drawer: Drawer(  </span><br><span class="line">        child: Center(child: Text(<span class="string">&quot;draw&quot;</span>),), </span><br><span class="line">    ),  </span><br><span class="line">    drawerScrimColor: Colors.green, </span><br><span class="line">    drawerEnableOpenDragGesture: <span class="keyword">false</span>, </span><br><span class="line">    endDrawerEnableOpenDragGesture: <span class="keyword">false</span>, </span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="23、restorationId"><a href="#23、restorationId" class="headerlink" title="23、restorationId"></a>23、restorationId</h3><p>状态还原标识符</p><h3 id="使用方法-21"><a href="#使用方法-21" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = GlobalKey();</span><br><span class="line">Scaffold(  </span><br><span class="line">    key: _scaffoldKey,  </span><br><span class="line">    appBar: AppBar(   </span><br><span class="line">        title: Text(<span class="string">&quot;Scaffold&quot;</span>),  </span><br><span class="line">        leading: IconButton(</span><br><span class="line">            onPressed: ()&#123;  </span><br><span class="line">                _scaffoldKey.currentState.openDrawer();   </span><br><span class="line">            &#125;, </span><br><span class="line">            icon: Icon(Icons.menu_open)), </span><br><span class="line">    ),  </span><br><span class="line">    body: Center(  </span><br><span class="line">        child: Text(<span class="string">&quot;body&quot;</span>), </span><br><span class="line">    ), </span><br><span class="line">    restorationId: <span class="string">&quot;scaffold&quot;</span></span><br><span class="line">); </span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上是针对Scaffold的所有使用方法，最常用的属性有<code>appBar</code>、<code>body</code>，其他属性都是在特定的情况才会使用。</p>]]></content>
    
    
    <summary type="html">Flutter-Scaffold详解</summary>
    
    
    
    <category term="flutter" scheme="http://gaoxianglong.gitee.io/yisheep/categories/flutter/"/>
    
    
    <category term="笔记" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-MaterialApp详解</title>
    <link href="http://gaoxianglong.gitee.io/yisheep/2021/09/18/Flutter-MaterialApp/"/>
    <id>http://gaoxianglong.gitee.io/yisheep/2021/09/18/Flutter-MaterialApp/</id>
    <published>2021-09-18T00:48:33.000Z</published>
    <updated>2021-09-18T01:27:08.121Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flutter-MaterialApp详解"><a href="#Flutter-MaterialApp详解" class="headerlink" title="Flutter-MaterialApp详解"></a>Flutter-MaterialApp详解</h1><h2 id="Flutter整体结构图"><a href="#Flutter整体结构图" class="headerlink" title="Flutter整体结构图"></a>Flutter整体结构图</h2><p><img src="https://gitee.com/gaoxianglong/picgo/raw/master/img/20191129195736853.png" alt="img"></p><h4 id="Flutter-Framework"><a href="#Flutter-Framework" class="headerlink" title="Flutter Framework"></a>Flutter Framework</h4><ul><li><p>Foundation、Animation、Painting、Gestures被合成了一个Dart UI层，对应的是Flutter中 <code>dart:ui</code> 包，是Flutter引擎暴露的底层UI库，主要提供动画、手势、绘制能力。</p></li><li><p>Rendering层是一个抽象布局层，依赖于Dart UI层，Rendering层会构建一个UI树、当UI树有变化时，会计算出有变化的部分，然后更新UI树，最终绘制在屏幕上</p></li><li><p>Widgets层是Flutter提供的一套基础组件库</p></li><li><p>Material、Cupertino是Flutter提供了两种视觉风格的组件库（Android、iOS)</p><h4 id="Flutter-Engine"><a href="#Flutter-Engine" class="headerlink" title="Flutter Engine"></a>Flutter Engine</h4><p>这是一个纯C++实现的SDK，主要执行相关的渲染、线程管理、平台事件等操作。其中包括了Skia引擎、Dart运行时、文字排版引擎等。在调用<code>dart:ui</code>库是，其实最终会走到Engine层，实现真正的绘制逻辑.</p><h4 id="Flutter-Embedder"><a href="#Flutter-Embedder" class="headerlink" title="Flutter Embedder"></a>Flutter Embedder</h4><p>提供四个Task Runner，将引擎一直到平台中间层代码的渲染设置、原生插件、打包、线程管理、时间循环、交互操作等。</p></li><li><p>UI Runner 负责绑定渲染相关操作</p></li><li><p>GPU Runner 用户执行GPU指令</p></li><li><p>iOS Runner 处理图片数据、为GPU做准备的</p></li><li><p>Platform Runner 所有接口调用都使用该接口</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2></li></ul><p>本文中很多效果都没有截图，可通过视频教程查看 <a href="https://www.bilibili.com/video/BV1BM4y1L71Z?p=2">视频教程地址</a></p><h2 id="Material介绍"><a href="#Material介绍" class="headerlink" title="Material介绍"></a>Material介绍</h2><blockquote><p>Material 组件（MDC）帮助开发者实现 <a href="https://material.io/design">Material Design</a>。MDC 由谷歌团队的工程师和 UX 设计师创造，为 Android、iOS、Web 和 Flutter 提供很多美观实用的 UI 组件。</p></blockquote><h2 id="MaterialApp介绍"><a href="#MaterialApp介绍" class="headerlink" title="MaterialApp介绍"></a>MaterialApp介绍</h2><p><code>MaterialApp</code> 包含了许多的 <code>Widget</code> ，这些 <code>Widget</code> 通常是实现 <a href="https://material.io/design">Material Design</a> 的应用程序所必须要的，包含的 <code>Widget</code> 可以在 <a href="https://flutter.dev/docs/development/ui/widgets/material">Material Components widgets</a> 中查看所有。 了解基本的概念，接下来我们详细看一下 <code>MaterialApp</code> 具体怎么使用。</p><h4 id="Material属性和说明"><a href="#Material属性和说明" class="headerlink" title="Material属性和说明"></a>Material属性和说明</h4><blockquote><p>总共33个属性</p></blockquote><table><thead><tr><th align="left"><strong>字段</strong></th><th><strong>属性</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">navigatorKey</td><td>GlobalKey</td><td>导航键</td></tr><tr><td align="left">scaffoldMessengerKey</td><td>GlobalKey</td><td>脚手架键</td></tr><tr><td align="left">home</td><td>Widget</td><td>主页，应用打开时显示的页面</td></tr><tr><td align="left">routes</td><td>Map&lt;String, WidgetBuilder&gt;</td><td>应用程序顶级路由表</td></tr><tr><td align="left">initialRoute</td><td>String</td><td>如果构建了导航器，则会显示第一个路由的名称</td></tr><tr><td align="left">onGenerateRoute</td><td>RouteFactory</td><td>路由管理拦截器</td></tr><tr><td align="left">onGenerateInitialRoutes</td><td>InitialRouteListFactory</td><td>生成初始化路由</td></tr><tr><td align="left">onUnknownRoute</td><td>RouteFactory</td><td>当onGenerateRoute无法生成路由时调用</td></tr><tr><td align="left">navigatorObservers</td><td>List</td><td>创建导航器的观察者列表</td></tr><tr><td align="left">builder</td><td>TransitionBuilder</td><td>在导航器上面插入小部件</td></tr><tr><td align="left">title</td><td>String</td><td>程序切换时显示的标题</td></tr><tr><td align="left">onGenerateTitle</td><td>GenerateAppTitle</td><td>程序切换时生成标题字符串</td></tr><tr><td align="left">color</td><td>Color</td><td>程序切换时应用图标背景颜色（仅安卓有效）</td></tr><tr><td align="left">theme</td><td>ThemeData</td><td>主题颜色</td></tr><tr><td align="left">darkTheme</td><td>ThemeData</td><td>暗黑模式主题颜色</td></tr><tr><td align="left">highContrastTheme</td><td>ThemeData</td><td>系统请求“高对比度”使用的主题</td></tr><tr><td align="left">highContrastDarkTheme</td><td>ThemeData</td><td>系统请求“高对比度”暗黑模式下使用的主题颜色</td></tr><tr><td align="left">themeMode</td><td>ThemeMode</td><td>使用哪种模式的主题（默认跟随系统）</td></tr><tr><td align="left">locale</td><td>Locale</td><td>初始区域设置</td></tr><tr><td align="left">localizationsDelegates</td><td>Iterable<LocalizationsDelegate></td><td>本地化代理</td></tr><tr><td align="left">localeListResolutionCallback</td><td>LocaleListResolutionCallback</td><td>失败或未提供设备的语言环境</td></tr><tr><td align="left">localeResolutionCallback</td><td>LocaleResolutionCallback</td><td>负责计算语言环境</td></tr><tr><td align="left">supportedLocales</td><td>Iterable</td><td>本地化地区列表</td></tr><tr><td align="left">debugShowMaterialGrid</td><td>bool</td><td>绘制基线网格叠加层（仅debug模式）</td></tr><tr><td align="left">showPerformanceOverlay</td><td>bool</td><td>显示性能叠加</td></tr><tr><td align="left">checkerboardRasterCacheImages</td><td>bool</td><td>打开栅格缓存图像的棋盘格。</td></tr><tr><td align="left">checkerboardOffscreenLayers</td><td>bool</td><td>打开渲染到屏幕外位图的层的棋盘格。</td></tr><tr><td align="left">showSemanticsDebugger</td><td>bool</td><td>打开显示可访问性信息的叠加层</td></tr><tr><td align="left">debugShowCheckedModeBanner</td><td>bool</td><td>调试显示检查模式横幅</td></tr><tr><td align="left">shortcuts</td><td>Map&lt;LogicalKeySet, Intent&gt;</td><td>应用程序意图的键盘快捷键的默认映射。</td></tr><tr><td align="left">actions</td><td>Map&lt;Type, Action&gt;</td><td>包含和定义用户操作的映射</td></tr><tr><td align="left">restorationScopeId</td><td>String</td><td>应用程序状态恢复的标识符</td></tr><tr><td align="left">scrollBehavior</td><td>ScrollBehavior</td><td>可滚动小部件的行为方式</td></tr></tbody></table><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><h5 id="创建一个MaterialApp"><a href="#创建一个MaterialApp" class="headerlink" title="创建一个MaterialApp"></a>创建一个MaterialApp</h5><blockquote><p>MaterialApp(…)</p></blockquote><h5 id="创建一个使用-Router-而不是-Navigator-的-MaterialApp"><a href="#创建一个使用-Router-而不是-Navigator-的-MaterialApp" class="headerlink" title="创建一个使用 Router 而不是 Navigator 的 MaterialApp"></a>创建一个使用 Router 而不是 Navigator 的 MaterialApp</h5><blockquote><p>MaterialApp.router(…)</p></blockquote><h2 id="属性详解"><a href="#属性详解" class="headerlink" title="属性详解"></a>属性详解</h2><h3 id="1、navigatorKey"><a href="#1、navigatorKey" class="headerlink" title="1、navigatorKey"></a>1、navigatorKey</h3><p><code>navigatorKey</code> 相当于 <code>Navigator.of(context)</code> ，如果应用程序想实现无 <code>context</code> 跳转，那么可以通过设置该key, 通过 <code>navigatorKey.currentState.overlay.context</code> 获取全局context。</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GlobalKey&lt;NavigatorState&gt; _navigatorKey = GlobalKey(); </span><br><span class="line">MaterialApp(  </span><br><span class="line">    navigatorKey: _navigatorKey, </span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="2、scaffoldMessengerKey"><a href="#2、scaffoldMessengerKey" class="headerlink" title="2、scaffoldMessengerKey"></a>2、scaffoldMessengerKey</h3><p>scaffoldMessengerKey<code>主要是管理后代的</code>Scaffolds<code>，可以实现无 </code>context<code>调用</code>snack bars</p><h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GlobalKey&lt;ScaffoldMessengerState&gt; _scaffoldKey = GlobalKey(); </span><br><span class="line">MaterialApp( </span><br><span class="line">    scaffoldMessengerKey: _scaffoldKey, </span><br><span class="line">);</span><br><span class="line">_scaffoldKey.currentState.showSnackBar(</span><br><span class="line">    SnackBar(content: Text(<span class="string">&quot;show SnackBar&quot;</span>))</span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="3、home"><a href="#3、home" class="headerlink" title="3、home"></a>3、home</h3><p>程序进入后的第一个界面，传入一个 <code>Widget</code></p><h5 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">... </span><br><span class="line">MaterialApp( </span><br><span class="line">    home: Scaffold(...),</span><br><span class="line">); </span><br><span class="line">... </span><br></pre></td></tr></table></figure><h3 id="4、routes"><a href="#4、routes" class="headerlink" title="4、routes"></a>4、routes</h3><p>生成路由表，以键值对形式传入 <code>key</code> 为路由名字， <code>value</code> 为对应的<code>Widget</code></p><h5 id="使用方法-3"><a href="#使用方法-3" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp( </span><br><span class="line">    routes: &#123;   </span><br><span class="line">        <span class="string">&quot;/home&quot;</span>: (_) =&gt; Home(), </span><br><span class="line">        <span class="string">&quot;/my&quot;</span>: (_) =&gt; My()  </span><br><span class="line">            <span class="comment">//.... </span></span><br><span class="line">    &#125;, </span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="5、initialRoute"><a href="#5、initialRoute" class="headerlink" title="5、initialRoute"></a>5、initialRoute</h3><p>初始路由，如果设置了该参数并且在 <code>routes</code> 找到了对应的key，将会展示对应的 <code>Widget</code> ，否则展示 <code>home</code></p><h5 id="使用方法-4"><a href="#使用方法-4" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp( </span><br><span class="line">    routes: &#123;    </span><br><span class="line">        <span class="string">&quot;/home&quot;</span>: (_) =&gt; Home(),   </span><br><span class="line">        <span class="string">&quot;/my&quot;</span>: (_) =&gt; My()  </span><br><span class="line">    &#125;,   </span><br><span class="line">    initialRoute: <span class="string">&quot;/home&quot;</span>, </span><br><span class="line">) </span><br></pre></td></tr></table></figure><h3 id="6、onGenerateRoute"><a href="#6、onGenerateRoute" class="headerlink" title="6、onGenerateRoute"></a>6、onGenerateRoute</h3><p>当跳转路由时，如果在 <code>routes</code> 找不到对应的 <code>key</code> ，会执行该回调，会调用会返回一个 <code>RouteSettings</code> ，该对象中有 <code>name</code> 路由名称、 <code>arguments</code> 路由参数。</p><h5 id="使用方法-5"><a href="#使用方法-5" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp(   </span><br><span class="line">    routes: &#123;    </span><br><span class="line">        <span class="string">&quot;/home&quot;</span>: (_) =&gt; Home(),     </span><br><span class="line">        <span class="string">&quot;/my&quot;</span>: (_) =&gt; My()   </span><br><span class="line">    &#125;,  </span><br><span class="line">    initialRoute: <span class="string">&quot;/home&quot;</span>,  </span><br><span class="line">    onGenerateRoute: (setting) &#123;    </span><br><span class="line">        <span class="comment">// 这里可以做进一步的逻辑处理    </span></span><br><span class="line">        <span class="keyword">return</span> MaterialPageRoute(builder: (_) =&gt; Home()); </span><br><span class="line">    &#125;, </span><br><span class="line">) </span><br></pre></td></tr></table></figure><h3 id="7、onGenerateInitialRoutes"><a href="#7、onGenerateInitialRoutes" class="headerlink" title="7、onGenerateInitialRoutes"></a>7、onGenerateInitialRoutes</h3><p>如果提供了 <code>initialRoute</code> ，则用于生成初始路由的路由生成器回调，如果未设置此属性，则底层 <a href="http://navigator.ongenerateinitialroutes/">Navigator.onGenerateInitialRoutes</a> 将默认为 <a href="https://api.flutter.dev/flutter/widgets/Navigator/defaultGenerateInitialRoutes.html">Navigator.defaultGenerateInitialRoutes</a>。</p><h5 id="使用方法-6"><a href="#使用方法-6" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp(</span><br><span class="line">    initialRoute: <span class="string">&quot;/home&quot;</span>,  </span><br><span class="line">    onGenerateInitialRoutes: (initialRoute) &#123;  </span><br><span class="line">        <span class="keyword">return</span> [   </span><br><span class="line">            MaterialPageRoute(builder: (_) =&gt; Home()), </span><br><span class="line">            MaterialPageRoute(builder: (_) =&gt; My()),   </span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">) </span><br></pre></td></tr></table></figure><h3 id="8、onUnknownRoute"><a href="#8、onUnknownRoute" class="headerlink" title="8、onUnknownRoute"></a>8、onUnknownRoute</h3><p>效果和 <code>onGenerateRoute</code> 一样，只是先走 <code>onGenerateRoute</code> ，如果无法生成路由时则在调用 <code>onUnknownRoute</code> 。</p><h5 id="使用方法-7"><a href="#使用方法-7" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp(  </span><br><span class="line">    routes: &#123;    </span><br><span class="line">        <span class="string">&quot;/home&quot;</span>: (_) =&gt; Home(),   </span><br><span class="line">        <span class="string">&quot;/my&quot;</span>: (_) =&gt; My()    </span><br><span class="line">    &#125;,   </span><br><span class="line">    initialRoute: <span class="string">&quot;/home&quot;</span>,  </span><br><span class="line">    onGenerateRoute: (setting) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">    &#125;,  </span><br><span class="line">    onUnknownRoute: (setting) &#123;   </span><br><span class="line">        <span class="keyword">return</span> MaterialPageRoute(builder: (_) =&gt; Home());  </span><br><span class="line">    &#125;, </span><br><span class="line">) </span><br></pre></td></tr></table></figure><h3 id="9、navigatorObservers"><a href="#9、navigatorObservers" class="headerlink" title="9、navigatorObservers"></a>9、navigatorObservers</h3><p>路由监听器，主要是就是监听页面路由堆栈的变化，当页面进行 <code>push</code> <code>pop</code> <code>remove</code> <code>replace</code> 等操作时会进行监听。</p><h5 id="使用方法-8"><a href="#使用方法-8" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp( </span><br><span class="line">    navigatorObservers: [ </span><br><span class="line">        MyObserver() </span><br><span class="line">    ], </span><br><span class="line">) </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObserver</span> <span class="keyword">extends</span> <span class="title">NavigatorObserver</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@override</span>  <span class="keyword">void</span> didPush(Route route, Route previousRoute) &#123;  </span><br><span class="line">        <span class="built_in">print</span>(route); </span><br><span class="line">        <span class="built_in">print</span>(previousRoute);   </span><br><span class="line">        <span class="keyword">super</span>.didPush(route, previousRoute); </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="10、builder"><a href="#10、builder" class="headerlink" title="10、builder"></a>10、builder</h3><p>当构建 <code>Widget</code> 前调用，主要用于字体大小、主题颜色等配置</p><h5 id="使用方法-9"><a href="#使用方法-9" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp(  </span><br><span class="line">    routes: &#123;    </span><br><span class="line">        <span class="string">&quot;/home&quot;</span>: (_) =&gt; Home(),  </span><br><span class="line">        <span class="string">&quot;/my&quot;</span>: (_) =&gt; My()  </span><br><span class="line">    &#125;, </span><br><span class="line">    initialRoute: <span class="string">&quot;/home&quot;</span>,   </span><br><span class="line">    onGenerateRoute: (setting) &#123;   </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">    &#125;,  </span><br><span class="line">    onUnknownRoute: (setting) &#123;    </span><br><span class="line">        <span class="keyword">return</span> MaterialPageRoute(builder: (_) =&gt; Home());  </span><br><span class="line">    &#125;, </span><br><span class="line">    builder: (_, child) &#123;  </span><br><span class="line">        <span class="keyword">return</span> Scaffold(</span><br><span class="line">            appBar: AppBar(title: Text(<span class="string">&quot;build&quot;</span>)), </span><br><span class="line">            body: child,</span><br><span class="line">        );  </span><br><span class="line">    &#125;,</span><br><span class="line">) </span><br></pre></td></tr></table></figure><h3 id="11、title"><a href="#11、title" class="headerlink" title="11、title"></a>11、title</h3><p>Android：任务管理器的程序快照之上 IOS: 程序切换管理器中</p><h5 id="使用方法-10"><a href="#使用方法-10" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp( </span><br><span class="line">    title: <span class="string">&#x27;Flutter应用&#x27;</span>, </span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="12、onGenerateTitle"><a href="#12、onGenerateTitle" class="headerlink" title="12、onGenerateTitle"></a>12、onGenerateTitle</h3><p>如果非空，则调用此回调函数以生成应用程序的标题字符串，否则会使用 <code>title</code> 。每次重建页面是该方法就会回调执行。</p><h5 id="使用方法-11"><a href="#使用方法-11" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp( </span><br><span class="line">    title: <span class="string">&#x27;Flutter应用&#x27;</span>, </span><br><span class="line">    onGenerateTitle: (_) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我的天&quot;</span>;   </span><br><span class="line">    &#125;,</span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="13、color"><a href="#13、color" class="headerlink" title="13、color"></a>13、color</h3><p>设置该值的在程序切换时应用图标的背景颜色，当应用图标为透明时。</p><h5 id="使用方法-12"><a href="#使用方法-12" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp( </span><br><span class="line">    color: Colors.blue,</span><br><span class="line">) </span><br></pre></td></tr></table></figure><h3 id="14、theme"><a href="#14、theme" class="headerlink" title="14、theme"></a>14、theme</h3><p>如果指定了 <code>darkTheme</code> ，那么用于提供用户界面的深色版本。如果提供了 <code>darkTheme</code> ， <code>themeMode</code> 将控制将使用哪个主题。默认值是 <code>ThemeData.light()</code> 应用程序的主题颜色</p><h5 id="使用方法-13"><a href="#使用方法-13" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp( </span><br><span class="line">    theme: ThemeData(    </span><br><span class="line">        <span class="comment">// 主要颜色 </span></span><br><span class="line">        primaryColor: Colors.red </span><br><span class="line">    ),</span><br><span class="line">) </span><br></pre></td></tr></table></figure><h3 id="15、darkTheme"><a href="#15、darkTheme" class="headerlink" title="15、darkTheme"></a>15、darkTheme</h3><p>应用程序深色主题颜色</p><h5 id="使用方法-14"><a href="#使用方法-14" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp( </span><br><span class="line">    theme: ThemeData(   </span><br><span class="line">        <span class="comment">// 主要颜色    </span></span><br><span class="line">        primaryColor: Colors.red </span><br><span class="line">    ),</span><br><span class="line">) </span><br></pre></td></tr></table></figure><h3 id="16、highContrastTheme"><a href="#16、highContrastTheme" class="headerlink" title="16、highContrastTheme"></a>16、highContrastTheme</h3><p>当系统请求“高对比度”时使用的 <code>ThemeData</code> ，当该值为空时会用 <code>theme</code> 应用该主题</p><h5 id="使用方法-15"><a href="#使用方法-15" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp( </span><br><span class="line">    highContrastTheme: ThemeData(  </span><br><span class="line">        primaryColor: Colors.pink </span><br><span class="line">    ),</span><br><span class="line">) </span><br></pre></td></tr></table></figure><h3 id="17、highContrastDarkTheme"><a href="#17、highContrastDarkTheme" class="headerlink" title="17、highContrastDarkTheme"></a>17、highContrastDarkTheme</h3><p>当系统再暗黑模式下请求“高对比度”时使用的 <code>ThemeData</code> ，当该值为空时会用 <code>darkTheme</code> 应用该主题。</p><h5 id="使用方法-16"><a href="#使用方法-16" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp( </span><br><span class="line">    highContrastDarkTheme: ThemeData(</span><br><span class="line">        primaryColor: Colors.green</span><br><span class="line">    ), </span><br><span class="line">) </span><br></pre></td></tr></table></figure><h3 id="18、themeMode"><a href="#18、themeMode" class="headerlink" title="18、themeMode"></a>18、themeMode</h3><p>白天模式和暗黑模式模式切换，默认值为 <code>ThemeMode.system</code></p><h5 id="使用方法-17"><a href="#使用方法-17" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp( </span><br><span class="line">    themeMode: ThemeMode.dark</span><br><span class="line">) </span><br></pre></td></tr></table></figure><h3 id="19、locale"><a href="#19、locale" class="headerlink" title="19、locale"></a>19、locale</h3><p>主要用于语言切换时，如果为 <code>null</code> 时使用系统区域</p><h5 id="使用方法-18"><a href="#使用方法-18" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp(  </span><br><span class="line">    locale: Locale(<span class="string">&#x27;zh&#x27;</span>, <span class="string">&#x27;CN&#x27;</span>) <span class="comment">// 中文简体 </span></span><br><span class="line">) </span><br></pre></td></tr></table></figure><h3 id="20、localizationsDelegates"><a href="#20、localizationsDelegates" class="headerlink" title="20、localizationsDelegates"></a>20、localizationsDelegates</h3><p>本地化委托</p><h5 id="使用方法-19"><a href="#使用方法-19" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp( </span><br><span class="line">    locale: Locale(<span class="string">&#x27;zh&#x27;</span>, <span class="string">&#x27;CN&#x27;</span>) <span class="comment">// 中文简体 </span></span><br><span class="line">    localizationsDelegates: [  </span><br><span class="line">        GlobalMaterialLocalizations.delegate,  </span><br><span class="line">        GlobalWidgetsLocalizations.delegate, </span><br><span class="line">    ],</span><br><span class="line">) </span><br></pre></td></tr></table></figure><h3 id="21、supportedLocales"><a href="#21、supportedLocales" class="headerlink" title="21、supportedLocales"></a>21、supportedLocales</h3><p>当前应用支持的 <code>Locale</code> 列表</p><h5 id="使用方法-20"><a href="#使用方法-20" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp(  </span><br><span class="line">    locale: Locale(<span class="string">&#x27;zh&#x27;</span>, <span class="string">&#x27;CN&#x27;</span>), <span class="comment">// 中文简体  </span></span><br><span class="line">    supportedLocales: [    </span><br><span class="line">        Locale(<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;US&#x27;</span>), <span class="comment">//美国英语    </span></span><br><span class="line">        Locale(<span class="string">&quot;zh&quot;</span>, <span class="string">&#x27;CN&#x27;</span>), <span class="comment">//中文简体  </span></span><br><span class="line">    ]</span><br><span class="line">) </span><br></pre></td></tr></table></figure><h3 id="22、localeListResolutionCallback"><a href="#22、localeListResolutionCallback" class="headerlink" title="22、localeListResolutionCallback"></a>22、localeListResolutionCallback</h3><p>监听系统语言切换事件，一些安卓系统特性，可设置多语言列表，默认以第一个列表为默认语言</p><h5 id="使用方法-21"><a href="#使用方法-21" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp(  </span><br><span class="line">    locale: Locale(<span class="string">&#x27;zh&#x27;</span>, <span class="string">&#x27;CN&#x27;</span>), <span class="comment">// 中文简体  </span></span><br><span class="line">    supportedLocales: [   </span><br><span class="line">        Locale(<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;US&#x27;</span>), <span class="comment">//美国英语   </span></span><br><span class="line">        Locale(<span class="string">&quot;zh&quot;</span>, <span class="string">&#x27;CN&#x27;</span>), <span class="comment">//中文简体 </span></span><br><span class="line">    ],  </span><br><span class="line">    localeListResolutionCallback: (<span class="built_in">List</span>&lt;Locale&gt; locales, <span class="built_in">Iterable</span>&lt;Locale&gt; supportedLocales) </span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="comment">// 系统切换语言时调用    </span></span><br><span class="line">        <span class="keyword">return</span> Locale(<span class="string">&quot;zh&quot;</span>, <span class="string">&#x27;CN&#x27;</span>); </span><br><span class="line">    &#125;, </span><br><span class="line">) </span><br></pre></td></tr></table></figure><h3 id="23、localeResolutionCallback"><a href="#23、localeResolutionCallback" class="headerlink" title="23、localeResolutionCallback"></a>23、localeResolutionCallback</h3><p>监听系统语言切换事件</p><h5 id="使用方法-22"><a href="#使用方法-22" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp(</span><br><span class="line">    locale: Locale(<span class="string">&#x27;zh&#x27;</span>, <span class="string">&#x27;CN&#x27;</span>), <span class="comment">// 中文简体  </span></span><br><span class="line">    supportedLocales: [   </span><br><span class="line">        Locale(<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;US&#x27;</span>), <span class="comment">//美国英语  </span></span><br><span class="line">        Locale(<span class="string">&quot;zh&quot;</span>, <span class="string">&#x27;CN&#x27;</span>), <span class="comment">//中文简体 </span></span><br><span class="line">    ],  </span><br><span class="line">    localeResolutionCallback: (Locale locale, <span class="built_in">Iterable</span>&lt;Locale&gt; supportedLocales)&#123;   </span><br><span class="line">        <span class="keyword">return</span> Locale(<span class="string">&quot;zh&quot;</span>, <span class="string">&#x27;CN&#x27;</span>); </span><br><span class="line">    &#125;,</span><br><span class="line">) </span><br></pre></td></tr></table></figure><h3 id="24、debugShowMaterialGrid"><a href="#24、debugShowMaterialGrid" class="headerlink" title="24、debugShowMaterialGrid"></a>24、debugShowMaterialGrid</h3><p>在 <code>debug</code> 模式下展示基线网格</p><h5 id="使用方法-23"><a href="#使用方法-23" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp( </span><br><span class="line">    debugShowMaterialGrid: <span class="keyword">true</span></span><br><span class="line">) </span><br></pre></td></tr></table></figure><h3 id="25、showPerformanceOverlay"><a href="#25、showPerformanceOverlay" class="headerlink" title="25、showPerformanceOverlay"></a>25、showPerformanceOverlay</h3><p>显示性能叠加，开启此模式主要用于性能测试</p><h5 id="使用方法-24"><a href="#使用方法-24" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp( </span><br><span class="line">    showPerformanceOverlay: <span class="keyword">true</span> </span><br><span class="line">) </span><br></pre></td></tr></table></figure><h3 id="26、checkerboardRasterCacheImages"><a href="#26、checkerboardRasterCacheImages" class="headerlink" title="26、checkerboardRasterCacheImages"></a>26、checkerboardRasterCacheImages</h3><p>打开栅格缓存图像的棋盘格</p><h5 id="使用方法-25"><a href="#使用方法-25" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp(</span><br><span class="line">    checkerboardRasterCacheImages: <span class="keyword">true</span></span><br><span class="line">) </span><br></pre></td></tr></table></figure><h3 id="27、checkerboardOffscreenLayers"><a href="#27、checkerboardOffscreenLayers" class="headerlink" title="27、checkerboardOffscreenLayers"></a>27、checkerboardOffscreenLayers</h3><p>打开渲染到屏幕外位图的层的棋盘格</p><h5 id="使用方法-26"><a href="#使用方法-26" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp( </span><br><span class="line">    checkerboardOffscreenLayers: <span class="keyword">true</span></span><br><span class="line">) </span><br></pre></td></tr></table></figure><h3 id="28、showSemanticsDebugger"><a href="#28、showSemanticsDebugger" class="headerlink" title="28、showSemanticsDebugger"></a>28、showSemanticsDebugger</h3><p>打开显示可访问性信息的叠加层，展示组件之间的关系、占位大小</p><h5 id="使用方法-27"><a href="#使用方法-27" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp(</span><br><span class="line">    showSemanticsDebugger: <span class="keyword">true</span> </span><br><span class="line">) </span><br></pre></td></tr></table></figure><h3 id="29、debugShowCheckedModeBanner"><a href="#29、debugShowCheckedModeBanner" class="headerlink" title="29、debugShowCheckedModeBanner"></a>29、debugShowCheckedModeBanner</h3><p>调试显示检查模式横幅</p><h5 id="使用方法-28"><a href="#使用方法-28" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp( </span><br><span class="line">    debugShowCheckedModeBanner: <span class="keyword">false</span></span><br><span class="line">) </span><br></pre></td></tr></table></figure><h3 id="30、shortcuts以及actions"><a href="#30、shortcuts以及actions" class="headerlink" title="30、shortcuts以及actions"></a>30、shortcuts以及actions</h3><p><code>shortcuts</code> 和 <code>actions</code> 是将物理键盘事件绑定到用户界面中的操作。 比如，要在您的应用程序中定义键盘快捷键，这里不做过多的描述，后面我会专门拿一个专题来讲解。</p><h3 id="31、restorationScopeId"><a href="#31、restorationScopeId" class="headerlink" title="31、restorationScopeId"></a>31、restorationScopeId</h3><p>定义一个应用程序状态恢复的标识符，提供标识符会将 <a href="https://api.flutter.dev/flutter/widgets/RootRestorationScope-class.html">RootRestorationScope</a> 插入 <code>widget</code> 层次结构，从而为后代 <code>widget</code> 启用状态恢复。还可以通过标识符使 <code>WidgetsApp</code> 构建的导航器恢复其状态（即恢复活动路由的历史堆栈），由于这里涉及的内容较多，后面会专门拿一个专题来讲解。</p><h3 id="32、scrollBehavior"><a href="#32、scrollBehavior" class="headerlink" title="32、scrollBehavior"></a>32、scrollBehavior</h3><p>统一滚动行为设置，设置后子组件将返回对应的滚动行为</p><h5 id="使用方法-29"><a href="#使用方法-29" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp( </span><br><span class="line">    scrollBehavior: ScrollBehaviorModified()</span><br><span class="line">)  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrollBehaviorModified</span> <span class="keyword">extends</span> <span class="title">ScrollBehavior</span> </span>&#123; </span><br><span class="line">    <span class="keyword">const</span> ScrollBehaviorModified();</span><br><span class="line">    <span class="meta">@override</span>  ScrollPhysics getScrollPhysics(BuildContext context) &#123;  </span><br><span class="line">        <span class="keyword">switch</span> (getPlatform(context)) &#123;  </span><br><span class="line">            <span class="keyword">case</span> TargetPlatform.iOS:   </span><br><span class="line">            <span class="keyword">case</span> TargetPlatform.macOS:  </span><br><span class="line">            <span class="keyword">case</span> TargetPlatform.android:   </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">const</span> BouncingScrollPhysics();  </span><br><span class="line">            <span class="keyword">case</span> TargetPlatform.fuchsia:   </span><br><span class="line">            <span class="keyword">case</span> TargetPlatform.linux: </span><br><span class="line">            <span class="keyword">case</span> TargetPlatform.windows:     </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">const</span> ClampingScrollPhysics();  </span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Flutter-MaterialApp详解</summary>
    
    
    
    <category term="flutter" scheme="http://gaoxianglong.gitee.io/yisheep/categories/flutter/"/>
    
    
    <category term="笔记" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-Center详解</title>
    <link href="http://gaoxianglong.gitee.io/yisheep/2021/09/17/Flutter-Center/"/>
    <id>http://gaoxianglong.gitee.io/yisheep/2021/09/17/Flutter-Center/</id>
    <published>2021-09-17T09:49:32.000Z</published>
    <updated>2021-09-18T00:46:23.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flutter-Center详解"><a href="#Flutter-Center详解" class="headerlink" title="Flutter-Center详解"></a>Flutter-Center详解</h1><h1 id="Center介绍"><a href="#Center介绍" class="headerlink" title="Center介绍"></a>Center介绍</h1><p><code>Center</code>就是将子组件进行一个居中展示，它继承自<code>Align</code>，因为<code>Align</code>默认的对齐方式是居中的，所以它能实现居中效果，如果<code>Center</code>的尺寸没有受到限制，那么它将尽可能大。</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>本文中很多效果都没有截图，可通过视频教程查看 <a href="https://www.bilibili.com/video/BV1BM4y1L71Z?p=15">视频教程地址</a></p><h2 id="什么情况下使用Center？"><a href="#什么情况下使用Center？" class="headerlink" title="什么情况下使用Center？"></a>什么情况下使用Center？</h2><p>当我们需要对子组件进行居中的时候使用<code>Center</code>。</p><h2 id="Center的属性和说明"><a href="#Center的属性和说明" class="headerlink" title="Center的属性和说明"></a>Center的属性和说明</h2><table><thead><tr><th>字段</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>widthFactor</td><td>double</td><td>宽度系数</td></tr><tr><td>heightFactor</td><td>double</td><td>高度系数</td></tr><tr><td>child</td><td>Widget</td><td>子组件</td></tr></tbody></table><h2 id="Center使用"><a href="#Center使用" class="headerlink" title="Center使用"></a>Center使用</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CenterExample</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@override</span>  _CenterExampleState createState() =&gt; _CenterExampleState(); </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_CenterExampleState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">CenterExample</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@override</span>  Widget build(BuildContext context) &#123; </span><br><span class="line">        <span class="keyword">return</span> Scaffold(      </span><br><span class="line">            appBar: AppBar(</span><br><span class="line">                title: Text(<span class="string">&quot;AlignExample&quot;</span>),</span><br><span class="line">            ),      </span><br><span class="line">            body: Center(    </span><br><span class="line">                child: Text(<span class="string">&quot;Jimi&quot;</span>), </span><br><span class="line">            ),  </span><br><span class="line">        ); </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><a href="https://gz-ljm-blog.oss-cn-guangzhou.aliyuncs.com/blog/center.png"><img src="https://gz-ljm-blog.oss-cn-guangzhou.aliyuncs.com/blog/center.png" alt="img"></a></p>]]></content>
    
    
    <summary type="html">Flutter-Center详解</summary>
    
    
    
    <category term="flutter" scheme="http://gaoxianglong.gitee.io/yisheep/categories/flutter/"/>
    
    
    <category term="笔记" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-Container详解</title>
    <link href="http://gaoxianglong.gitee.io/yisheep/2021/09/17/Flutter-Container/"/>
    <id>http://gaoxianglong.gitee.io/yisheep/2021/09/17/Flutter-Container/</id>
    <published>2021-09-17T09:27:16.000Z</published>
    <updated>2021-09-17T09:35:48.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flutter-Container详解"><a href="#Flutter-Container详解" class="headerlink" title="Flutter-Container详解"></a>Flutter-Container详解</h1><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Container是一个拥有绘制、定位、调整大小的 widget，是开发中最常用、最基础的组件。虽然最基础但不可小觑，熟悉每一个属性可以帮助我们更好更快的实现想要的效果，避免走弯路，也能避免代码冗余。本文主要针对其属性进行讲解。</p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Container(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  <span class="keyword">this</span>.alignment,</span><br><span class="line">  <span class="keyword">this</span>.padding,</span><br><span class="line">  <span class="keyword">this</span>.color,</span><br><span class="line">  <span class="keyword">this</span>.decoration,</span><br><span class="line">  <span class="keyword">this</span>.foregroundDecoration,</span><br><span class="line">  <span class="built_in">double?</span> width,</span><br><span class="line">  <span class="built_in">double?</span> height,</span><br><span class="line">  BoxConstraints? constraints,</span><br><span class="line">  <span class="keyword">this</span>.margin,</span><br><span class="line">  <span class="keyword">this</span>.transform,</span><br><span class="line">  <span class="keyword">this</span>.transformAlignment,</span><br><span class="line">  <span class="keyword">this</span>.child,</span><br><span class="line">  <span class="keyword">this</span>.clipBehavior = Clip.none,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>key用于控制控件如何取代树中的另一个控件，即若widget指定了相同的key，则这些widget可以复用。 如果widget的key值不为空，会判断key._currentElement值所指向的widget，和当前widget的类型key都相同，那么就从旧的父节点上移除，作为当前的节点的子widget之一， 否则将进行真实的创建新的Element。若开发中对组建的使用没有较高要求，一般不设置该属性。</p><h3 id="alignment"><a href="#alignment" class="headerlink" title="alignment"></a>alignment</h3><p>alignment可以理解为Container内容的锚点位置或重力方向，锚点在哪，内容就从哪里开始。alignment的类型为AlignmentGeometry类型，通常我们会使用其实现类Alignment来进行设置。AlignmentGeometry属于抽象类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@immutable</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AlignmentGeometry</span> </span>&#123;...&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>一般不直接使用AlignmentGeometry ，而是使用其实现类。Flutter中实现或继承了AlignmentGeometry的公共可直接调用的类有两个：Alignment，AlignmentDirectional。这两个实现类的使用方法和相似，可以直接调用其内部属性：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> Alignment topLeft = Alignment(<span class="number">-1.0</span>, <span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> Alignment topCenter = Alignment(<span class="number">0.0</span>, <span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> Alignment topRight = Alignment(<span class="number">1.0</span>, <span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> Alignment centerLeft = Alignment(<span class="number">-1.0</span>, <span class="number">0.0</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> Alignment center = Alignment(<span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> Alignment centerRight = Alignment(<span class="number">1.0</span>, <span class="number">0.0</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> Alignment bottomLeft = Alignment(<span class="number">-1.0</span>, <span class="number">1.0</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> Alignment bottomCenter = Alignment(<span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> Alignment bottomRight = Alignment(<span class="number">1.0</span>, <span class="number">1.0</span>);</span><br></pre></td></tr></table></figure><p>使用的时候直接用Alignment.topLeft调用即可，也可直接设置参数数值比如Alignment(-1.0, -1.0)即可。根据设置不同的alignment属性值，视图效果也是不一样的： <img src="https://gitee.com/gaoxianglong/picgo/raw/master/img/b3681934fb184cce9f9396f0bf41b653~tplv-k3u1fbpfcp-watermark.awebp" alt="在这里插入图片描述"> 若在其他组件中需要设置TextDirection，可以考虑使用AlignmentDirectional。AlignmentDirectional和Alignment差不多：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> AlignmentDirectional topStart = AlignmentDirectional(<span class="number">-1.0</span>, <span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> AlignmentDirectional topCenter = AlignmentDirectional(<span class="number">0.0</span>, <span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> AlignmentDirectional topEnd = AlignmentDirectional(<span class="number">1.0</span>, <span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> AlignmentDirectional centerStart = AlignmentDirectional(<span class="number">-1.0</span>, <span class="number">0.0</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> AlignmentDirectional center = AlignmentDirectional(<span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> AlignmentDirectional centerEnd = AlignmentDirectional(<span class="number">1.0</span>, <span class="number">0.0</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> AlignmentDirectional bottomStart = AlignmentDirectional(<span class="number">-1.0</span>, <span class="number">1.0</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> AlignmentDirectional bottomCenter = AlignmentDirectional(<span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> AlignmentDirectional bottomEnd = AlignmentDirectional(<span class="number">1.0</span>, <span class="number">1.0</span>);</span><br></pre></td></tr></table></figure><p>使用方法和Alignment一样，不再叙述。</p><h3 id="padding、margin"><a href="#padding、margin" class="headerlink" title="padding、margin"></a>padding、margin</h3><p>padding为内边距，margin为外边距。 <img src="https://gitee.com/gaoxianglong/picgo/raw/master/img/52b995b0a8af4963b960e1e85529be46~tplv-k3u1fbpfcp-watermark.awebp" alt="在这里插入图片描述"></p><p>针对于上图中Container2，Container1与Container2之间的边框距离称之为margin，Container2与内容之间距离为padding。通常margin和padding使用EdgeInsets，EdgeInsets使用方法如下：</p><table><thead><tr><th>方法</th><th>使用</th></tr></thead><tbody><tr><td>EdgeInsets.fromLTRB(this.left, this.top, this.right, this.bottom)</td><td>左上右下依次填写</td></tr><tr><td>EdgeInsets.all(double value)</td><td>所有边距一样</td></tr><tr><td>EdgeInsets.only({this.left = 0.0,this.top = 0.0,this.right = 0.0,this.bottom = 0.0, })</td><td>左上右下可选择设置</td></tr><tr><td>EdgeInsets zero</td><td>左上右下都为0</td></tr><tr><td>EdgeInsets.fromWindowPadding(ui.WindowPadding padding, double devicePixelRatio)</td><td>左上右下距离窗口的边距，和设备像素比，而不是距离父组件的边距</td></tr></tbody></table><p>EdgeInsets继承于EdgeInsetsGeometry，和之类似的还有EdgeInsetsDirectional，同样继承自EdgeInsetsGeometry，暴露出的方法有：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EdgeInsetsDirectional</span> <span class="keyword">extends</span> <span class="title">EdgeInsetsGeometry</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> EdgeInsetsDirectional.fromSTEB(<span class="keyword">this</span>.start, <span class="keyword">this</span>.top, <span class="keyword">this</span>.end, <span class="keyword">this</span>.bottom);</span><br><span class="line">  <span class="keyword">const</span> EdgeInsetsDirectional.only(&#123;</span><br><span class="line">    <span class="keyword">this</span>.start = <span class="number">0.0</span>,</span><br><span class="line">    <span class="keyword">this</span>.top = <span class="number">0.0</span>,</span><br><span class="line">    <span class="keyword">this</span>.end = <span class="number">0.0</span>,</span><br><span class="line">    <span class="keyword">this</span>.bottom = <span class="number">0.0</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> EdgeInsetsDirectional zero = EdgeInsetsDirectional.only();</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EdgeInsetsDirectional使用方法和EdgeInsets类似，多用于TextDirection。</p><h3 id="color"><a href="#color" class="headerlink" title="color"></a>color</h3><p>color为Container颜色，设置颜色通常可以调用Colors.white，Colors.red等Flutter定义好的颜色，如没有适合的颜色，可以使用Color(0xFFFFFFFF)，自定义颜色，0x代表16进制，前面两个FF代表透明度（Android中可以不写，但Flutter中不可省略），后面6个F代表颜色数值。以Color(0xFFFFFFFF)为例，以下表格对Color的使用进行说明</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>Color(0xFFFFFFFF).value</td><td>获取颜色数值(0-255)</td></tr><tr><td>Color(0xFFFFFFFF).red</td><td>获取颜色中红色</td></tr><tr><td>Color(0xFFFFFFFF).blue</td><td>获取颜色中蓝色</td></tr><tr><td>Color(0xFFFFFFFF).opacity</td><td>获取颜色不透明度(0.0-1.0)</td></tr><tr><td>Color(0xFFFFFFFF).alpha</td><td>获取颜色透明度</td></tr><tr><td>Color(0xFFFFFFFF).green</td><td>获取颜色中绿色</td></tr><tr><td>Color(0xFFFFFFFF).withOpacity(opacity)</td><td>设置颜色不透明度</td></tr><tr><td>Color(0xFFFFFFFF).computeLuminance()</td><td>计算颜色亮度(0-1)</td></tr><tr><td>Color(0xFFFFFFFF).withAlpha(a)</td><td>设置颜色透明度 (0-255)</td></tr><tr><td>Color(0xFFFFFFFF).withBlue(b)</td><td>设置颜色中蓝色值(0-255)</td></tr><tr><td>Color(0xFFFFFFFF).withGreen(g)</td><td>设置颜色中绿值</td></tr><tr><td>Color(0xFFFFFFFF).withRed(r)</td><td>设置颜色中红色值</td></tr></tbody></table><p>关于Color大多有这几个常用的方法，若Container设置了decoration，Container的color就不要设置了，两者冲突会报错，以decoration中的color为准。</p><h3 id="decoration，foregroundDecoration"><a href="#decoration，foregroundDecoration" class="headerlink" title="decoration，foregroundDecoration"></a>decoration，foregroundDecoration</h3><p>decoration为背景装饰，foregroundDecoration为前景装饰。简单理解就是设置样式，不仅仅是设置颜色，还包括形状、图片、渐变、阴影、模糊等。 decoration指定类型为Decoration，同样Decoration为抽象类，没有具体的实现，需要使用其实现类或子类，其实现类主要有BoxDecoration、FlutterLogoDecoration、UnderlineTabIndicator、ShapeDecoration。Container中通常使用BoxDecoration，BoxDecoration有如下几个参数：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BoxDecoration(&#123;</span><br><span class="line">  <span class="keyword">this</span>.color,</span><br><span class="line">  <span class="keyword">this</span>.image,</span><br><span class="line">  <span class="keyword">this</span>.border,</span><br><span class="line">  <span class="keyword">this</span>.borderRadius,</span><br><span class="line">  <span class="keyword">this</span>.boxShadow,</span><br><span class="line">  <span class="keyword">this</span>.gradient,</span><br><span class="line">  <span class="keyword">this</span>.backgroundBlendMode,</span><br><span class="line">  <span class="keyword">this</span>.shape = BoxShape.rectangle,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="color-1"><a href="#color-1" class="headerlink" title="color"></a>color</h5><p>颜色直接在BoxDecoration中设置即可，以下分别是红色和蓝色的效果图 <img src="https://gitee.com/gaoxianglong/picgo/raw/master/img/41646f7a778f4c76aadf7c0eacff70fb~tplv-k3u1fbpfcp-watermark.awebp" alt="在这里插入图片描述"></p><h5 id="image"><a href="#image" class="headerlink" title="image"></a>image</h5><p>image就是设置装饰图片，图片分为资源图片、本地图片和网络图片，这里只能使用DecorationImage</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DecorationImage(&#123;</span><br><span class="line">   <span class="keyword">required</span> <span class="keyword">this</span>.image,</span><br><span class="line">   <span class="keyword">this</span>.onError,</span><br><span class="line">   <span class="keyword">this</span>.colorFilter,</span><br><span class="line">   <span class="keyword">this</span>.fit,</span><br><span class="line">   <span class="keyword">this</span>.alignment = Alignment.center,</span><br><span class="line">   <span class="keyword">this</span>.centerSlice,</span><br><span class="line">   <span class="keyword">this</span>.repeat = ImageRepeat.noRepeat,</span><br><span class="line">   <span class="keyword">this</span>.matchTextDirection = <span class="keyword">false</span>,</span><br><span class="line">   <span class="keyword">this</span>.scale = <span class="number">1.0</span></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><ul><li>image</li></ul><p>DecorationImage中指定了image的类型必须是ImageProvider，也就是这里使用的是AssetImage()、NetworkImage()、FileImage()，而不是Image.asset()、Image.net()、Image.file()等。 <img src="https://gitee.com/gaoxianglong/picgo/raw/master/img/f0cae560c70544c79980a29d78241b36~tplv-k3u1fbpfcp-watermark.awebp" alt="在这里插入图片描述"> 左图为AssetImage，右图为NetworkImage，FileImage()访问的是手机中的图片，和前两者一样，只要拿到路径都不是问题。</p><ul><li>onError</li></ul><p>onError指的是图片错误监听，万一图片格式不对，大小不对，网络出错，加载出错，开发者需要知道错在哪里了，然后做错误处理。</p><ul><li>colorFilter</li></ul><p>colorFilter就是相当于给图片加上一层滤镜，以上图中左边图片为例，ColorFilter使用方式有四种：</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>ColorFilter.mode(Color color, BlendMode blendMode)</td><td>添加指定混合模式指定颜色的滤镜，BlendMode 大概有三十种，用户自由选择</td></tr><tr><td>ColorFilter.matrix(List matrix)</td><td>矩阵混合</td></tr><tr><td>ColorFilter.linearToSrgbGamma()</td><td>将sRGB伽马曲线应用于RGB通道</td></tr><tr><td>ColorFilter.srgbToLinearGamma()</td><td>将sRGB伽马曲线逆应用于RGB通道</td></tr></tbody></table><p>效果： <img src="https://gitee.com/gaoxianglong/picgo/raw/master/img/10e86695928a4d4e9a0e9213bd660adf~tplv-k3u1fbpfcp-watermark.awebp" alt="在这里插入图片描述"> 通过上图可以发现，同一图片使用不同的滤镜，效果大不相同。如果需要开发图片滤镜功能，这一块会有大用处。</p><ul><li>fit</li></ul><p>fit指的是图片适配模式，使用BoxFit即可，BoxFit也提供了几种模式供选择。</p><table><thead><tr><th>模式</th><th>含义</th></tr></thead><tbody><tr><td>fill</td><td>根据图片比例填充</td></tr><tr><td>contain</td><td>容器范围内尽可能最大</td></tr><tr><td>cover</td><td>覆盖整个容器</td></tr><tr><td>fitWidth</td><td>宽度适应</td></tr><tr><td>fitHeight</td><td>高度适应</td></tr><tr><td>none</td><td>无</td></tr><tr><td>scaleDown</td><td>等比例缩放</td></tr></tbody></table><p>各种模式依次效果如下： <img src="https://gitee.com/gaoxianglong/picgo/raw/master/img/295cfc1025164faa939144c9abf10b53~tplv-k3u1fbpfcp-watermark.awebp" alt="在这里插入图片描述"> 上图中图片较小，容器固定，有些图片看不出区别，而实际使用过程中不同模式之间差别较大，以实际为准。</p><ul><li>alignment</li></ul><p>alignment 同文章开头的alignment一样，不再叙述。</p><ul><li>centerSlice</li></ul><p>centerSlice和fit效果有些相似，当两者同时使用的时候，可能没有效果，可能无法看到图片，使用时需要谨慎一些。 centerSlice类型为Rect，centerSlice用于nine-patch image，即可拉伸图片，后续这一块需要仔细研究一下。</p><table><thead><tr><th>方法</th></tr></thead><tbody><tr><td>Rect.fromLTRB(this.left, this.top, this.right, this.bottom)</td></tr><tr><td>Rect.fromLTWH(double left, double top, double width, double height)</td></tr><tr><td>Rect.fromCircle({ required Offset center, required double radius })</td></tr><tr><td>Rect.fromCenter({ required Offset center, required double width, required double height })</td></tr><tr><td>Rect.fromPoints(Offset a, Offset b)</td></tr></tbody></table><ul><li>repeat</li></ul><p>repeat 是空白区域图片重复模式。</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>ImageRepeat.repeat</td><td>全部填充图片</td></tr><tr><td>ImageRepeat.repeatX</td><td>水平重复</td></tr><tr><td>ImageRepeat.repeatY</td><td>竖直重复</td></tr><tr><td>ImageRepeat.noRepeat</td><td>不重复</td></tr></tbody></table><p>对于的效果依次如下： <img src="https://gitee.com/gaoxianglong/picgo/raw/master/img/57986d6cf4274deea6b69ee70df1f4e7~tplv-k3u1fbpfcp-watermark.awebp" alt="在这里插入图片描述"> 由于图片本身已经占用了容器的水平位置上的全部空间，所以repeatX和noRepeat效果一样，repeat和repeatY效果一样。若图片水平和竖直方向都有剩余空间，则repeat等于repeatX和repeatY叠加。</p><ul><li>matchTextDirection</li></ul><p>matchTextDirection默认为false，表示背景图片和文字方向没有关系。当为true的时候，表示图片和文字方向一致。</p><ul><li>scale</li></ul><p>scale表示图片缩放，默认为1.0，表示按原图大小显示。小于1.0，则按比例缩小图片；大于1.0，则表示按比例放大图片。</p><h5 id="border"><a href="#border" class="headerlink" title="border"></a>border</h5><p>border是边框的意思，设置该属性，就可以设置Contaier边框样式。border指定类型为BoxBorder，BoxBorder，InputBorder，OutlinedBorder虽都继承自ShapeBorder ，但这里BoxBorder也是抽象类，所以需要使用其子类Border或BorderDirectional，这里通常使用Border。Border有四种构造方法：</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>Border({BorderSide top: BorderSide.none, BorderSide right: BorderSide.none, BorderSide bottom: BorderSide.none, BorderSide left: BorderSide.none})</td><td>可分别设置上下左右边框</td></tr><tr><td>Border.all({Color color: const Color(0xFF000000), double width: 1.0, BorderStyle style: BorderStyle.solid})</td><td>设置所有边框</td></tr><tr><td>Border.fromBorderSide(BorderSide side)</td><td>内边框</td></tr><tr><td>Border.symmetric({BorderSide vertical: BorderSide.none, BorderSide horizontal: BorderSide.none})</td><td>水平方向边框，竖直方向边框</td></tr></tbody></table><p>通过上表可以发现，不管使用哪一种方法都要使用BorderSide，BorderSide指的是具体边框的样式，而Border指的是在哪个方向可以有边框。BorderSide比较简单：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BorderSide(&#123;</span><br><span class="line">  <span class="keyword">this</span>.color = <span class="keyword">const</span> Color(<span class="number">0xFF000000</span>),</span><br><span class="line">  <span class="keyword">this</span>.width = <span class="number">1.0</span>,</span><br><span class="line">  <span class="keyword">this</span>.style = BorderStyle.solid,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>color代表边框颜色，width代表边框宽度，style表示边框样式（默认实线-BorderStyle.solid）。具体效果如下图： <img src="https://gitee.com/gaoxianglong/picgo/raw/master/img/338d7a9a549b4309aabae85278a35d11~tplv-k3u1fbpfcp-watermark.awebp" alt="在这里插入图片描述"></p><h5 id="borderRadius"><a href="#borderRadius" class="headerlink" title="borderRadius"></a>borderRadius</h5><p>边角弧度，类型为BorderRadiusGeometry ，通常使用其实现类BorderRadius或BorderRadiusDirectional，其中BorderRadius最常用，以下是BorderRadius的一些用法：</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>BorderRadius.all(Radius radius)</td><td>所有角的弧度</td></tr><tr><td>BorderRadius.circular(double radius)</td><td>所有角的弧度</td></tr><tr><td>BorderRadius.horizontal({Radius left: Radius.zero, Radius right: Radius.zero})</td><td>所有角的水平方向弧度</td></tr><tr><td>BorderRadius.only({Radius topLeft: Radius.zero, Radius topRight: Radius.zero, Radius bottomLeft: Radius.zero, Radius bottomRight: Radius.zero})</td><td>分别设置四角的弧度</td></tr><tr><td>BorderRadius.vertical({Radius top: Radius.zero, Radius bottom: Radius.zero})</td><td>所有角的垂直方向弧度</td></tr></tbody></table><p>和border一样，BorderRadius中除了 BorderRadius.circular外都是指定哪个角设置弧度，具体实现由Radius实现。Radius中Radius.circular(double radius)指的是圆角的弧度一样，Radius.elliptical(double x,double y)表示水平和垂直方向的弧度自由定义。 <img src="https://gitee.com/gaoxianglong/picgo/raw/master/img/26e68484fc054378810f2fa21be29734~tplv-k3u1fbpfcp-watermark.awebp" alt="在这里插入图片描述"> 总而言之，borderRadius针对于不同的角，不同方向，不同弧度都可以随意设置，比较灵活。</p><h5 id="boxShadow"><a href="#boxShadow" class="headerlink" title="boxShadow"></a>boxShadow</h5><p>boxShadow设置Container阴影或投影，List boxShadow说明使用时是以数组的形式，对于稍显复杂的场景一层阴影无法达到要求，所有需要很多层阴影相互叠加来满足要求。BoxShadow使用相对简单</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BoxShadow(</span><br><span class="line">&#123;Color color: <span class="keyword">const</span> Color(<span class="number">0xFF000000</span>),</span><br><span class="line">Offset offset: Offset.zero,</span><br><span class="line"><span class="built_in">double</span> blurRadius: <span class="number">0.0</span>,</span><br><span class="line"><span class="built_in">double</span> spreadRadius: <span class="number">0.0</span>&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>color是阴影的颜色，Offset是投影偏移量，blurRadius投影模糊程度，spreadRadius则是投影的扩散程度。 <img src="https://gitee.com/gaoxianglong/picgo/raw/master/img/7e12889e7ccd427186f86c0312bade62~tplv-k3u1fbpfcp-watermark.awebp" alt="在这里插入图片描述">blurRadius取值不同，效果不同，取值越大，阴影的色彩越淡，但是扩散的范围越大。 <img src="https://gitee.com/gaoxianglong/picgo/raw/master/img/12d35552e60f4f0c87af5ce8144b1ee1~tplv-k3u1fbpfcp-watermark.awebp" alt="在这里插入图片描述"> spreadRadius取值不同，阴影范围有明显区别。当取值大于0时，阴影向外扩散；当取值小于0时，阴影向内部聚集，若此时需要显示阴影，需要设置Offset，光线角度不同，阴影的投射方向也不同，所以设置内投影的时候，一定要设置Offset，让投影偏移出来，否则投影被遮挡无法显示。</p><h5 id="gradient"><a href="#gradient" class="headerlink" title="gradient"></a>gradient</h5><p>gradient为设置渐变，渐变类型分为LinearGradient、RadialGradient、SweepGradient，分别为线性渐变、辐射渐变、扫描渐变。</p><ul><li>LinearGradient（线性渐变）</li></ul><p><img src="https://gitee.com/gaoxianglong/picgo/raw/master/img/99cd24bd3d65407ba9e4a8df306a7d82~tplv-k3u1fbpfcp-watermark.awebp" alt="在这里插入图片描述"> begin线性渐变起点，end为线性渐变终点，可水平，可竖直，可对角，根据需要自由选择。stops里面数值数量要和colors里面的数量保持一致。tileMode为颜色填充模式：</p><table><thead><tr><th>模式</th><th>含义</th></tr></thead><tbody><tr><td>TileMode.clamp</td><td>夹钳模式，颜色与颜色之间有类似窄而明显的过渡</td></tr><tr><td>TileMode.repeated</td><td>重复</td></tr><tr><td>TileMode.mirror</td><td>镜像</td></tr><tr><td>TileMode.decal</td><td>贴花（探索中）</td></tr></tbody></table><p>具体效果如下： <img src="https://gitee.com/gaoxianglong/picgo/raw/master/img/a097c28eae154f22ac0d4932f7073e59~tplv-k3u1fbpfcp-watermark.awebp" alt="在这里插入图片描述"> 没有对TileMode.decal进行效果展示，是因为关于这个模式的解释比较模糊，也没有观察出到底有什么不同，需后续持续探索。 transform表示渐变色变换，一般有GradientRotation和SweepGradient供选择，主要用于SweepGradient和RadialGradient中。</p><ul><li>SweepGradient（扫描渐变）</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SweepGradient(&#123;</span><br><span class="line">    <span class="keyword">this</span>.center = Alignment.center,</span><br><span class="line">    <span class="keyword">this</span>.startAngle = <span class="number">0.0</span>,</span><br><span class="line">    <span class="keyword">this</span>.endAngle = math.pi * <span class="number">2</span>,</span><br><span class="line">    <span class="keyword">required</span> <span class="built_in">List</span>&lt;Color&gt; colors,</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt;? stops,</span><br><span class="line">    <span class="keyword">this</span>.tileMode = TileMode.clamp,</span><br><span class="line">    GradientTransform? transform,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>默认中心的从Container中心开始，开始弧度为0.0，结束弧度为pi*2，也就是一周。运行效果如下： <img src="https://gitee.com/gaoxianglong/picgo/raw/master/img/dc27c7d62b9942feb5a605906f9536c4~tplv-k3u1fbpfcp-watermark.awebp" alt="在这里插入图片描述"> 如果设置好颜色，再搭配上旋转动画，像雷达扫描、大转盘这种效果是可以轻松实现的。</p><ul><li>RadialGradient（辐射渐变）</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">RadialGradient(&#123;</span><br><span class="line"><span class="keyword">this</span>.center = Alignment.center,</span><br><span class="line"><span class="keyword">this</span>.radius = <span class="number">0.5</span>,</span><br><span class="line"><span class="keyword">required</span> <span class="built_in">List</span>&lt;Color&gt; colors,</span><br><span class="line"><span class="built_in">List</span>&lt;Color&gt;? stops,</span><br><span class="line"><span class="keyword">this</span>.tileMode = TileMode.clamp,</span><br><span class="line"><span class="keyword">this</span>.focal,</span><br><span class="line"><span class="keyword">this</span>.focalRadius = <span class="number">0.0</span>,</span><br><span class="line">GradientTransform? transform,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>效果如下： <img src="https://gitee.com/gaoxianglong/picgo/raw/master/img/0ec845126687477483a8891126a797c8~tplv-k3u1fbpfcp-watermark.awebp" alt="在这里插入图片描述"> 第一张图片是没有设置焦点。第二张图片是设置了焦点，焦点中心为Container中心，焦点半径为0.1。第三张图同样设置了焦点，但是焦点的中心为centerLeft，且焦点半径为1.0，焦点半径单位不是像素，focalRadius和focal设置的值不同，效果区别较大，有时和想象中的不太一样，所以使用的时候需仔细调试一下。</p><h5 id="backgroundBlendMode"><a href="#backgroundBlendMode" class="headerlink" title="backgroundBlendMode"></a>backgroundBlendMode</h5><p>backgroundBlendMode为背景混合模式，和前面讲的图片滤镜差不多，大概有将近30种模式，有些差别较大，有些区别不是很明显，需要开发者多多尝试，这里随机选取了四种，效果如下： <img src="https://gitee.com/gaoxianglong/picgo/raw/master/img/39135332b8684ee7890caaea495d8085~tplv-k3u1fbpfcp-watermark.awebp" alt="在这里插入图片描述"></p><h5 id="shape"><a href="#shape" class="headerlink" title="shape"></a>shape</h5><p>shape即为装饰的形状，默认为BoxShape.rectangle，用户也可以选择BoxShape.circle。BoxShape.circle是整个装饰为圆形，而RadialGradient是辐射状也为圆形，不容易区分到底是哪一个决定的，但LinearGradient区分比较开，如下图所示： <img src="https://gitee.com/gaoxianglong/picgo/raw/master/img/725a1faf253640febe05a55d3b6f0faa~tplv-k3u1fbpfcp-watermark.awebp" alt="在这里插入图片描述"> 所以shape和RadialGradient、SweepGradient有时可以实现相同的效果，可灵活使用。</p><h3 id="width，height"><a href="#width，height" class="headerlink" title="width，height"></a>width，height</h3><p>Container需要固定宽高，否则会报错。虽有时没有设置也能正常显示，是因为Container包含的组件的宽高固定了，只要子组件宽高固定，Container宽高也固定了，所以显示正常。</p><h3 id="constraints"><a href="#constraints" class="headerlink" title="constraints"></a>constraints</h3><p>constraints是Container的约束，主要指定的是宽高上面的约束：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BoxConstraints(&#123;</span><br><span class="line">    <span class="keyword">this</span>.minWidth = <span class="number">0.0</span>,</span><br><span class="line">    <span class="keyword">this</span>.maxWidth = <span class="built_in">double</span>.infinity,</span><br><span class="line">    <span class="keyword">this</span>.minHeight = <span class="number">0.0</span>,</span><br><span class="line">    <span class="keyword">this</span>.maxHeight = <span class="built_in">double</span>.infinity,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>constraints可以指定Container的最大宽高和最小宽高，否则有时超出某些范围页面显示异常。和BoxConstraints一样，同样继承自Constraint还有SliverConstraints，SliverConstraints在Sliver相关组件中使用，这里就不多讲了。</p><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><p>矩阵变化，类型为Matrix4，即四阶矩阵。常用的有以下几种用法：</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>Matrix4(…)</td><td>16个参数， 平移，旋转，缩放，扭曲等</td></tr><tr><td>diagonal3Values</td><td>缩放</td></tr><tr><td>rotationX</td><td>沿x旋转</td></tr><tr><td>rotationY</td><td>沿y旋转</td></tr><tr><td>rotationZ</td><td>沿z旋转</td></tr><tr><td>columns</td><td>设置新矩阵</td></tr><tr><td>compose</td><td>合并平移，旋转，缩放成新矩阵</td></tr><tr><td>copy</td><td>复制矩阵</td></tr><tr><td>identity</td><td>单位矩阵</td></tr><tr><td>inverted</td><td>矩阵逆运算</td></tr><tr><td>outer</td><td>合并</td></tr><tr><td>skew</td><td>扭曲</td></tr><tr><td>skewX(</td><td>x扭曲</td></tr><tr><td>skewY</td><td>y扭曲</td></tr><tr><td>zero</td><td>零矩阵</td></tr><tr><td>fromList</td><td>数组转矩阵</td></tr></tbody></table><p>还有其他方法，这里就不一一列举。基本上所有的变换都是在Matrix4(…)基础上实现的，所以只要弄懂Matrix4(…) ，其他的也不是问题。高级变换是一定需要矩阵，复杂的动画也需要矩阵，基础的是四阶，复杂的有五阶、六阶等等，所以矩阵很重要。以下是几种简单的变换效果： <img src="https://gitee.com/gaoxianglong/picgo/raw/master/img/18b16f4dc62d4a01a6cd1cd47918ce36~tplv-k3u1fbpfcp-watermark.awebp" alt="在这里插入图片描述"> 实际中变换后的图片的大小、方位、角度都有不同，效果无法在上图中完全体现出来。</p><h3 id="transformAlignment"><a href="#transformAlignment" class="headerlink" title="transformAlignment"></a>transformAlignment</h3><p>变换锚点或者是变换重力方向和上文中的alignment是一样的，这里就不再叙述。</p><h3 id="clipBehavior"><a href="#clipBehavior" class="headerlink" title="clipBehavior"></a>clipBehavior</h3><p>clipBehavior就是组件内容边缘的切割方式，分为四种：</p><ul><li>none</li></ul><p>不做处理。</p><ul><li>hardEdge</li></ul><p>当内容溢出时，hardEdge切割容器边缘最快，但是精准度欠佳，可能会有一些锯齿存在。</p><ul><li>antiAlias</li></ul><p>抗锯齿，速度要比hardEdge慢一些，但是边缘要平滑一些。</p><ul><li>antiAliasWithSaveLayer</li></ul><p>图层抗锯齿，就是容器中每一个图层都做抗锯齿处理，而antiAlias是在容器的轮廓做抗锯齿，antiAliasWithSaveLayer效果肯定会更好更平滑，但是速度最慢，如果没有明确指明，建议使用antiAlias，这样效果和性能能够达到较好的平衡。</p><h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><p>查看Container对于各种属性的处理如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"> Widget build(BuildContext context) &#123;</span><br><span class="line">   Widget? current = child;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (child == <span class="keyword">null</span> &amp;&amp; (constraints == <span class="keyword">null</span> || !constraints!.isTight)) &#123;</span><br><span class="line">     current = LimitedBox(</span><br><span class="line">       maxWidth: <span class="number">0.0</span>,</span><br><span class="line">       maxHeight: <span class="number">0.0</span>,</span><br><span class="line">       child: ConstrainedBox(constraints: <span class="keyword">const</span> BoxConstraints.expand()),</span><br><span class="line">     );</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (alignment != <span class="keyword">null</span>)</span><br><span class="line">     current = Align(alignment: alignment!, child: current);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">final</span> EdgeInsetsGeometry? effectivePadding = _paddingIncludingDecoration;</span><br><span class="line">   <span class="keyword">if</span> (effectivePadding != <span class="keyword">null</span>)</span><br><span class="line">     current = Padding(padding: effectivePadding, child: current);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (color != <span class="keyword">null</span>)</span><br><span class="line">     current = ColoredBox(color: color!, child: current);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (clipBehavior != Clip.none) &#123;</span><br><span class="line">     <span class="keyword">assert</span>(decoration != <span class="keyword">null</span>);</span><br><span class="line">     current = ClipPath(</span><br><span class="line">       clipper: _DecorationClipper(</span><br><span class="line">         textDirection: Directionality.maybeOf(context),</span><br><span class="line">         decoration: decoration!,</span><br><span class="line">       ),</span><br><span class="line">       clipBehavior: clipBehavior,</span><br><span class="line">       child: current,</span><br><span class="line">     );</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (decoration != <span class="keyword">null</span>)</span><br><span class="line">     current = DecoratedBox(decoration: decoration!, child: current);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (foregroundDecoration != <span class="keyword">null</span>) &#123;</span><br><span class="line">     current = DecoratedBox(</span><br><span class="line">       decoration: foregroundDecoration!,</span><br><span class="line">       position: DecorationPosition.foreground,</span><br><span class="line">       child: current,</span><br><span class="line">     );</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (constraints != <span class="keyword">null</span>)</span><br><span class="line">     current = ConstrainedBox(constraints: constraints!, child: current);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (margin != <span class="keyword">null</span>)</span><br><span class="line">     current = Padding(padding: margin!, child: current);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (transform != <span class="keyword">null</span>)</span><br><span class="line">     current = Transform(transform: transform!, child: current, alignment: transformAlignment);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> current!;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>Container并非是单元组件不可再次拆分，恰恰相反，Container中多数属性都有关联组件，所以当属性被设置的时候，也是调用了该属性关联的组件，然后在此基础上再依次进行嵌套，最后套成Container，所以Container是由其他组件组成的。 本文是对Container的属性进行单独解析，实际使用时，大多都是各种属性相互配合使用，实现的效果也要比文中呈现的效果要丰富得多。</p><h1 id="注"><a href="#注" class="headerlink" title="注"></a>注</h1><ul><li>文中有很多遗漏，错误，不准确的，欢迎补充批评指正。</li><li>熟悉基础，可以帮助开发者用简单、少量、高效的代码解决复杂问题。</li></ul>]]></content>
    
    
    <summary type="html">Flutter-Container详解</summary>
    
    
    
    <category term="flutter" scheme="http://gaoxianglong.gitee.io/yisheep/categories/flutter/"/>
    
    
    <category term="笔记" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>flutter笔记</title>
    <link href="http://gaoxianglong.gitee.io/yisheep/2021/09/17/flutter%E7%AC%94%E8%AE%B0/"/>
    <id>http://gaoxianglong.gitee.io/yisheep/2021/09/17/flutter%E7%AC%94%E8%AE%B0/</id>
    <published>2021-09-17T02:25:27.000Z</published>
    <updated>2021-09-18T07:05:12.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h1><p><strong>参考网站：</strong></p><p><a href="https://flutter.cn/docs/get-started/install">Flutter 中文文档 - Flutter 中文资源 | 安装和环境配置</a></p><p><a href="https://flutterchina.club/">Flutter中文网</a></p><p><a href="https://book.flutterchina.club/">Flutter实战(电子书)</a></p><p><a href="https://pub.flutter-io.cn/">Pub Dart第三方包</a></p><hr><h1 id="Widget组件"><a href="#Widget组件" class="headerlink" title="Widget组件"></a>Widget组件</h1><p>Flutter中万物皆为<code>Widget</code>，就如同Android中的<code>Activity</code>，HarmonyOS中的<code>Ability</code>。</p><h2 id="StatelessWidget—无状态的组件"><a href="#StatelessWidget—无状态的组件" class="headerlink" title="StatelessWidget—无状态的组件"></a>StatelessWidget—无状态的组件</h2><p>其他组件通过<code>extends</code>继承<code>StatelessWidget</code>来表示当前组件是无状态的。</p><p><code>StatelessWidget</code>有一个待实现的函数<code>build</code>，当前这个<code>Widget</code>被创建的时候就会调用这个<code>build</code>函数，<code>build</code>要返回当前这个组件长样子，也就是返回的还是一个<code>Widget</code>。</p><p>例子：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Widget();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="StatefulWidget—有状态的组件"><a href="#StatefulWidget—有状态的组件" class="headerlink" title="StatefulWidget—有状态的组件"></a>StatefulWidget—有状态的组件</h2><p>其他组件通过<code>extends</code>继承<code>StatefulWidget</code>来表示当前组件是有状态的。</p><p>继承了<code>StatefulWidget</code>的组件需要创建一个私有的状态类，用来管理组件的状态，状态类要继承<code>State&lt;组件&gt;</code>，这是泛型的写法。这个状态类要去实现<code>build</code>函数，<code>build</code>要返回当前这个组件长样子，也就是返回的还是一个<code>Widget</code>。</p><p>在这个组件的状态类中可以去调用<code>setState</code>，每一次调用<code>setState</code>都会重新绘制一次组件，也就是调用<code>build</code>函数。所以我们在<code>setState</code>中去修改一些和组件有关的数据时就能做到改变当前这个组件。</p><p>例子：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyWidget(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyWidgetState createState() =&gt; _MyWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Widget();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MaterialApp—UI组件"><a href="#MaterialApp—UI组件" class="headerlink" title="MaterialApp—UI组件"></a>MaterialApp—UI组件</h2><p>让开发者的写的组件具有MD风格 <a href="https://material.io/design">Material Design</a></p><p>源码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MaterialApp(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">this</span>.navigatorKey,</span><br><span class="line">    <span class="keyword">this</span>.scaffoldMessengerKey,</span><br><span class="line">    <span class="keyword">this</span>.home,</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, WidgetBuilder&gt; <span class="keyword">this</span>.routes = <span class="keyword">const</span> &lt;<span class="built_in">String</span>, WidgetBuilder&gt;&#123;&#125;,</span><br><span class="line">    <span class="keyword">this</span>.initialRoute,</span><br><span class="line">    <span class="keyword">this</span>.onGenerateRoute,</span><br><span class="line">    <span class="keyword">this</span>.onGenerateInitialRoutes,</span><br><span class="line">    <span class="keyword">this</span>.onUnknownRoute,</span><br><span class="line">    <span class="built_in">List</span>&lt;NavigatorObserver&gt; <span class="keyword">this</span>.navigatorObservers = <span class="keyword">const</span> &lt;NavigatorObserver&gt;[],</span><br><span class="line">    <span class="keyword">this</span>.builder,</span><br><span class="line">    <span class="keyword">this</span>.title = <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="keyword">this</span>.onGenerateTitle,</span><br><span class="line">    <span class="keyword">this</span>.color,</span><br><span class="line">    <span class="keyword">this</span>.theme,</span><br><span class="line">    <span class="keyword">this</span>.darkTheme,</span><br><span class="line">    <span class="keyword">this</span>.highContrastTheme,</span><br><span class="line">    <span class="keyword">this</span>.highContrastDarkTheme,</span><br><span class="line">    <span class="keyword">this</span>.themeMode = ThemeMode.system,</span><br><span class="line">    <span class="keyword">this</span>.locale,</span><br><span class="line">    <span class="keyword">this</span>.localizationsDelegates,</span><br><span class="line">    <span class="keyword">this</span>.localeListResolutionCallback,</span><br><span class="line">    <span class="keyword">this</span>.localeResolutionCallback,</span><br><span class="line">    <span class="keyword">this</span>.supportedLocales = <span class="keyword">const</span> &lt;Locale&gt;[Locale(<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;US&#x27;</span>)],</span><br><span class="line">    <span class="keyword">this</span>.debugShowMaterialGrid = <span class="keyword">false</span>,</span><br><span class="line">    <span class="keyword">this</span>.showPerformanceOverlay = <span class="keyword">false</span>,</span><br><span class="line">    <span class="keyword">this</span>.checkerboardRasterCacheImages = <span class="keyword">false</span>,</span><br><span class="line">    <span class="keyword">this</span>.checkerboardOffscreenLayers = <span class="keyword">false</span>,</span><br><span class="line">    <span class="keyword">this</span>.showSemanticsDebugger = <span class="keyword">false</span>,</span><br><span class="line">    <span class="keyword">this</span>.debugShowCheckedModeBanner = <span class="keyword">true</span>,</span><br><span class="line">    <span class="keyword">this</span>.shortcuts,</span><br><span class="line">    <span class="keyword">this</span>.actions,</span><br><span class="line">    <span class="keyword">this</span>.restorationScopeId,</span><br><span class="line">    <span class="keyword">this</span>.scrollBehavior,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><a href="https://gaoxianglong.gitee.io/yisheep/2021/09/18/Flutter-MaterialApp/">Flutter-MaterialApp详解</a></p><h1 id="Scaffold—脚手架组件"><a href="#Scaffold—脚手架组件" class="headerlink" title="Scaffold—脚手架组件"></a>Scaffold—脚手架组件</h1><p><code>Scaffold</code>将我们的应用分为几个部分，方便我们去搭建整个应用。</p><p>源码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Scaffold(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">this</span>.appBar,</span><br><span class="line">    <span class="keyword">this</span>.body,</span><br><span class="line">    <span class="keyword">this</span>.floatingActionButton,</span><br><span class="line">    <span class="keyword">this</span>.floatingActionButtonLocation,</span><br><span class="line">    <span class="keyword">this</span>.floatingActionButtonAnimator,</span><br><span class="line">    <span class="keyword">this</span>.persistentFooterButtons,</span><br><span class="line">    <span class="keyword">this</span>.drawer,</span><br><span class="line">    <span class="keyword">this</span>.onDrawerChanged,</span><br><span class="line">    <span class="keyword">this</span>.endDrawer,</span><br><span class="line">    <span class="keyword">this</span>.onEndDrawerChanged,</span><br><span class="line">    <span class="keyword">this</span>.bottomNavigationBar,</span><br><span class="line">    <span class="keyword">this</span>.bottomSheet,</span><br><span class="line">    <span class="keyword">this</span>.backgroundColor,</span><br><span class="line">    <span class="keyword">this</span>.resizeToAvoidBottomInset,</span><br><span class="line">    <span class="keyword">this</span>.primary = <span class="keyword">true</span>,</span><br><span class="line">    <span class="keyword">this</span>.drawerDragStartBehavior = DragStartBehavior.start,</span><br><span class="line">    <span class="keyword">this</span>.extendBody = <span class="keyword">false</span>,</span><br><span class="line">    <span class="keyword">this</span>.extendBodyBehindAppBar = <span class="keyword">false</span>,</span><br><span class="line">    <span class="keyword">this</span>.drawerScrimColor,</span><br><span class="line">    <span class="keyword">this</span>.drawerEdgeDragWidth,</span><br><span class="line">    <span class="keyword">this</span>.drawerEnableOpenDragGesture = <span class="keyword">true</span>,</span><br><span class="line">    <span class="keyword">this</span>.endDrawerEnableOpenDragGesture = <span class="keyword">true</span>,</span><br><span class="line">    <span class="keyword">this</span>.restorationId,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><a href="https://gaoxianglong.gitee.io/yisheep/2021/09/18/Flutter-Scaffold/">Flutter-Scaffold详解</a></p><h2 id="AppBar—标题栏组件"><a href="#AppBar—标题栏组件" class="headerlink" title="AppBar—标题栏组件"></a>AppBar—标题栏组件</h2><p>一般在<code>Scaffold</code>中使用，能控制标题栏的属性。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">AppBar(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">this</span>.leading,</span><br><span class="line">    <span class="keyword">this</span>.automaticallyImplyLeading = <span class="keyword">true</span>,</span><br><span class="line">    <span class="keyword">this</span>.title,</span><br><span class="line">    <span class="keyword">this</span>.actions,</span><br><span class="line">    <span class="keyword">this</span>.flexibleSpace,</span><br><span class="line">    <span class="keyword">this</span>.bottom,</span><br><span class="line">    <span class="keyword">this</span>.elevation,</span><br><span class="line">    <span class="keyword">this</span>.shadowColor,</span><br><span class="line">    <span class="keyword">this</span>.shape,</span><br><span class="line">    <span class="keyword">this</span>.backgroundColor,</span><br><span class="line">    <span class="keyword">this</span>.foregroundColor,</span><br><span class="line">    <span class="keyword">this</span>.brightness,</span><br><span class="line">    <span class="keyword">this</span>.iconTheme,</span><br><span class="line">    <span class="keyword">this</span>.actionsIconTheme,</span><br><span class="line">    <span class="keyword">this</span>.textTheme,</span><br><span class="line">    <span class="keyword">this</span>.primary = <span class="keyword">true</span>,</span><br><span class="line">    <span class="keyword">this</span>.centerTitle,</span><br><span class="line">    <span class="keyword">this</span>.excludeHeaderSemantics = <span class="keyword">false</span>,</span><br><span class="line">    <span class="keyword">this</span>.titleSpacing,</span><br><span class="line">    <span class="keyword">this</span>.toolbarOpacity = <span class="number">1.0</span>,</span><br><span class="line">    <span class="keyword">this</span>.bottomOpacity = <span class="number">1.0</span>,</span><br><span class="line">    <span class="keyword">this</span>.toolbarHeight,</span><br><span class="line">    <span class="keyword">this</span>.leadingWidth,</span><br><span class="line">    <span class="keyword">this</span>.backwardsCompatibility,</span><br><span class="line">    <span class="keyword">this</span>.toolbarTextStyle,</span><br><span class="line">    <span class="keyword">this</span>.titleTextStyle,</span><br><span class="line">    <span class="keyword">this</span>.systemOverlayStyle,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><a href="https://gaoxianglong.gitee.io/yisheep/2021/09/18/Flutter-AppBar/">Flutter-AppBar详解</a></p><h2 id="TabBar—导航栏组件"><a href="#TabBar—导航栏组件" class="headerlink" title="TabBar—导航栏组件"></a>TabBar—导航栏组件</h2><h2 id="Container—容器"><a href="#Container—容器" class="headerlink" title="Container—容器"></a>Container—容器</h2><p>像是一个盒子一样，能够使我们将组件放到里面去，可以更改其大小。</p><p>源码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Container(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">this</span>.alignment,</span><br><span class="line">    <span class="keyword">this</span>.padding,</span><br><span class="line">    <span class="keyword">this</span>.color,</span><br><span class="line">    <span class="keyword">this</span>.decoration,</span><br><span class="line">    <span class="keyword">this</span>.foregroundDecoration,</span><br><span class="line">    <span class="built_in">double?</span> width,</span><br><span class="line">    <span class="built_in">double?</span> height,</span><br><span class="line">    BoxConstraints? constraints,</span><br><span class="line">    <span class="keyword">this</span>.margin,</span><br><span class="line">    <span class="keyword">this</span>.transform,</span><br><span class="line">    <span class="keyword">this</span>.transformAlignment,</span><br><span class="line">    <span class="keyword">this</span>.child,</span><br><span class="line">    <span class="keyword">this</span>.clipBehavior = Clip.none,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><a href="https://gaoxianglong.gitee.io/yisheep/2021/09/17/Flutter-Container/">Flutter-Container详解</a></p><h2 id="Center—居中布局"><a href="#Center—居中布局" class="headerlink" title="Center—居中布局"></a>Center—居中布局</h2><p>可以让<code>widget</code>位于该布局的中心。</p><p>源码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Center(&#123; </span><br><span class="line">    Key? key, </span><br><span class="line">    <span class="built_in">double?</span> widthFactor, </span><br><span class="line">    <span class="built_in">double?</span> heightFactor, </span><br><span class="line">    Widget? child </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a href="https://gaoxianglong.gitee.io/yisheep/2021/09/17/Flutter-Center/">Flutter-Center详解</a></p>]]></content>
    
    
    <summary type="html">flutter</summary>
    
    
    
    <category term="flutter" scheme="http://gaoxianglong.gitee.io/yisheep/categories/flutter/"/>
    
    
    <category term="笔记" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>c++阶段三第三讲</title>
    <link href="http://gaoxianglong.gitee.io/yisheep/2021/09/15/c++%E9%98%B6%E6%AE%B5%E4%B8%89%E7%AC%AC%E4%B8%89%E8%AE%B2/"/>
    <id>http://gaoxianglong.gitee.io/yisheep/2021/09/15/c++%E9%98%B6%E6%AE%B5%E4%B8%89%E7%AC%AC%E4%B8%89%E8%AE%B2/</id>
    <published>2021-09-15T06:31:08.000Z</published>
    <updated>2021-09-15T07:11:42.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三讲"><a href="#第三讲" class="headerlink" title="第三讲"></a>第三讲</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>面向对象中的对象，指的是客观世界中存在的对象，这个对象具有唯一性，对象之间各不相同，各有各的特点，每一个对象都有自己的运动规律和内部状态，对象和对象之间又可以互相联系、互相作用，面向对象技术是一种从组织结构上模拟客观世界的方法。</p><p>客观世界中任何一个事物都可以看作一个对象，每个对象都具有属性和行为两个要素，属性是对象内部状态及自身的特点，行为就是改变自身状态的动作。</p><p>面向过程编程的主要思想是先做什么后做什么，十分符合计算机的思维方式。而面向对象更符合人类的思维方式。</p><p>面向对象中的对象需要通过类来创建，而类是一个新的数据类型，这个新的数据类型包含属性和行为，也就是各种数据类型的集合和各种函数的集合。</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>创建类的公式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名&#123;</span></span><br><span class="line">权限修饰词：</span><br><span class="line">数据成员<span class="number">1</span>;</span><br><span class="line">数据成员<span class="number">2</span>;</span><br><span class="line">    ...</span><br><span class="line">数据成员n;</span><br><span class="line"></span><br><span class="line">函数成员<span class="number">1</span>;</span><br><span class="line">函数成员<span class="number">2</span>;</span><br><span class="line">...</span><br><span class="line">函数成员n;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>小练习：</p><p>创建一个动物(Animal)的类，这个动物是空中的还是陆地还是水里，这个动物的名字，这个动物的叫声。</p><h2 id="创建类的对象"><a href="#创建类的对象" class="headerlink" title="创建类的对象"></a>创建类的对象</h2><p>公式：</p><p><code>类名 对象名;</code></p><p>类名：我们要创建对象的类名。</p><p>对象名：和变量名类似，做到见名知意。</p><p><strong>通过对象名去访问成员属性：</strong></p><p><code>对象名.成员变量名</code></p><p><strong>通过对象名去访问成员函数:</strong></p><p><code>对象名.成员函数名</code></p><p>小练习：</p><p>给我们刚刚创建的动物类去创建一个对象，并且给属性赋值，并调用对应函数。</p><h2 id="权限修饰词"><a href="#权限修饰词" class="headerlink" title="权限修饰词"></a>权限修饰词</h2><p>public 公共的：外部可以调用，内部可调用。</p><p>Private 私有的:外部不能调用，内部可调用。</p><p>Protected 受保护的:外部不能调用，内部可调用，派生类可调用。</p><p>类的各种成员如果没有加作用域修饰词则默认都是private</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>创建一个学生类，该类里的属性有，<code>学号</code>，<code>姓名</code>，<code>爱好</code>，<code>家庭地址</code>，<code>语文成绩</code>，<code>数学成绩</code>，<code>英语成绩</code>，函数有两个，一个是自我介绍的函数，另一个是成绩单的打印。</p>]]></content>
    
    
    <summary type="html">c++阶段三第三讲</summary>
    
    
    
    <category term="c++" scheme="http://gaoxianglong.gitee.io/yisheep/categories/c/"/>
    
    
    <category term="教材" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E6%95%99%E6%9D%90/"/>
    
    <category term="阶段三" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E9%98%B6%E6%AE%B5%E4%B8%89/"/>
    
  </entry>
  
  <entry>
    <title>c++阶段二第三讲</title>
    <link href="http://gaoxianglong.gitee.io/yisheep/2021/09/15/c++%E9%98%B6%E6%AE%B5%E4%BA%8C%E7%AC%AC%E4%B8%89%E8%AE%B2/"/>
    <id>http://gaoxianglong.gitee.io/yisheep/2021/09/15/c++%E9%98%B6%E6%AE%B5%E4%BA%8C%E7%AC%AC%E4%B8%89%E8%AE%B2/</id>
    <published>2021-09-15T03:29:57.000Z</published>
    <updated>2021-09-15T06:30:37.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三讲"><a href="#第三讲" class="headerlink" title="第三讲"></a>第三讲</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><strong>数组：将同一数据类型的数据按照一定形式有序的组织起来，这些有序数据的集合就称为数组。一个数组有一个统一的数组名，可以通过数组名和下标来确定数组中的元素。</strong></p><h3 id="创建公式："><a href="#创建公式：" class="headerlink" title="创建公式："></a>创建公式：</h3><p><code>数据类型 数组名[数组大小];</code></p><p><strong>注意：</strong></p><p>1、数组名定义规则与变量名相同。</p><p>2、数组名后面的括号必须为方括号。</p><p>3、方括号中的常量表达式表示数组长度（数组中的元素个数）。</p><p>4、方括号中的常量表达式不能是变量。因为数组的长度、大小不能动态定义。</p><p>例子：</p><p>声明一个整形数组，数组名为啊，有5个元素</p><p><code>int a[5];</code></p><h3 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h3><p><code>数组名[下标]</code></p><p>数组名：我们创建的数组名字</p><p>下标：数组元素的房间号，<strong>从0开始</strong></p><p>例子：</p><p><code>int a[3];</code></p><p><code>a[0]</code>访问数组a中的第一个元素</p><p><code>a[1]</code>访问数组a中的第二个元素</p><p><strong>注意：</strong></p><p>1、数组元素下标从0开始，而非从1开始。</p><p>2、在以上声明数组中a[3]是不存在的数组元素，引用a[3]非法。A[3]属于下标越界，容易引起程序瘫痪。</p><h3 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化:"></a>数组的初始化:</h3><ol><li><p>单一数组元素赋值：先创建函数，再对单一数组元素赋值</p><p><code>a[0]=1;a[1]=2;</code></p></li><li><p>集合方式赋值：创建数组的同时用大括号进行多个元素的赋值。</p><p><code>int a[3]= &#123;0,1,2&#125;;</code></p><p><code>int a[] = &#123;2.10,5&#125;;</code></p></li></ol><p>注意：不能用以下形式赋值</p><p><code>int a[3]; </code>先声明数组</p><p><code>a=&#123;1,2,3&#125;; </code>再通过大括号统一为数组赋值。</p><h2 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h2><p>声明一个数组，包含10个元素，利用for循环对每一个数组元素赋值，数组元素值=下标。然后利用for循环输出数组。</p><p>声明一个数组，包含10个元素，利用键盘输入对每一个数组元素赋值。然后利用for循环输出数组。</p><p>声明一个数组，包含10个元素，利用键盘输入对每一个数组元素赋值。然后输出最大和最小值。</p><p>声明一个数组，包含10个元素，利用键盘输入对每一个数组元素赋值。然后对数组中的元素进行排序，输出排序后的数组。</p>]]></content>
    
    
    <summary type="html">c++阶段二第三讲</summary>
    
    
    
    <category term="c++" scheme="http://gaoxianglong.gitee.io/yisheep/categories/c/"/>
    
    
    <category term="教材" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E6%95%99%E6%9D%90/"/>
    
    <category term="阶段二" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E9%98%B6%E6%AE%B5%E4%BA%8C/"/>
    
  </entry>
  
  <entry>
    <title>c++阶段一第三讲</title>
    <link href="http://gaoxianglong.gitee.io/yisheep/2021/09/15/c++%E9%98%B6%E6%AE%B5%E4%B8%80%E7%AC%AC%E4%B8%89%E8%AE%B2/"/>
    <id>http://gaoxianglong.gitee.io/yisheep/2021/09/15/c++%E9%98%B6%E6%AE%B5%E4%B8%80%E7%AC%AC%E4%B8%89%E8%AE%B2/</id>
    <published>2021-09-15T01:13:44.000Z</published>
    <updated>2021-09-15T03:29:07.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三讲"><a href="#第三讲" class="headerlink" title="第三讲"></a>第三讲</h1><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量：是指其值一旦确定，就不会发生改变的量。</p><p>创建常量的公式：</p><ul><li><p><code>#define 常量名 常量值;</code></p><blockquote><p>写在头文件的下边</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> a 1;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>const 数据类型 常量名 = 常量值;</code></p><blockquote><p>写在头文件的下边</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>练习：尝试去修改常量的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a = <span class="number">20</span>;</span><br><span class="line">std::cout &lt;&lt; a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单目运算符"><a href="#单目运算符" class="headerlink" title="单目运算符"></a>单目运算符</h2><p><code>++</code>：自增1</p><p><code>--</code>：自减1</p><p>前置<code>++</code>：先自增，再参与其他运算。</p><p>后置<code>++</code>：先参与其他运算，再自增。</p><p>前置<code>--</code>：先自减，再参与其他运算。</p><p>后置<code>--</code>：先参与其他运算，再自减。</p><p>练习：</p><p>a的值是多少 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">std::cout&lt;&lt;a++;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">std::cout&lt;&lt;++a;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">std::cout&lt;&lt;a--;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">std::cout&lt;&lt;--a;</span><br></pre></td></tr></table></figure><p>a和b的值是多少</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> b = a++;</span><br><span class="line">std::cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> b = ++a;</span><br><span class="line">std::cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> b = a--;</span><br><span class="line">std::cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> b = --a;</span><br><span class="line">std::cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b;</span><br></pre></td></tr></table></figure><p>控制台会显示出什么样的结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>, b = <span class="number">5</span>;</span><br><span class="line">std::cout &lt;&lt; a++ &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; ++b &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; --a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b-- &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; ++a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b++ &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; a-- &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; --b &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>下面这段程序运行后有什么样的结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">5.1</span>;</span><br><span class="line">std::cout&lt;&lt;a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/gaoxianglong/picgo/raw/master/img/20210915112324.png"></p><p>自动数据类型转换的规则：</p><ol><li>横向红色的箭头表示的是无条件转换，float类型数据运算时，将其转换为double类型进行运算，运算结果再转换为float；short和char类型数据在做运算时，首先转换为int，再将运算结果转换为short、char类型。</li><li>纵向的蓝色箭头，当不同数据类型之间进行运算时，位于箭头下方的数据类型会转换为箭头上方的数据类型。</li></ol><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>公式：</p><p><code>(数据类型) 表达式</code></p><p>如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> s=(<span class="keyword">int</span>)<span class="number">5.3</span>;</span><br><span class="line">std::cout&lt;&lt;s;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">double</span> t=<span class="number">5.3</span>;</span><br><span class="line"><span class="keyword">int</span> s=(<span class="keyword">int</span>)t;</span><br><span class="line">std::cout&lt;&lt;s;</span><br></pre></td></tr></table></figure><p>整数转小数时，直接加上 .0</p><p>小数转整数时，小数点后的数据全部舍弃（精度丢失）</p><p>整数转字符时，根据ASCII码表转换</p><p>字符转整数时，根据ASCll码表转换</p><p>练习：</p><p>分别找出a、z、A、Z这几个字符再ASCII码表里的整数是多少</p>]]></content>
    
    
    <summary type="html">c++阶段一第三讲</summary>
    
    
    
    <category term="c++" scheme="http://gaoxianglong.gitee.io/yisheep/categories/c/"/>
    
    
    <category term="教材" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E6%95%99%E6%9D%90/"/>
    
    <category term="阶段一" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E9%98%B6%E6%AE%B5%E4%B8%80/"/>
    
  </entry>
  
  <entry>
    <title>c++阶段三第二讲</title>
    <link href="http://gaoxianglong.gitee.io/yisheep/2021/09/10/c++%E9%98%B6%E6%AE%B5%E4%B8%89%E7%AC%AC%E4%BA%8C%E8%AE%B2/"/>
    <id>http://gaoxianglong.gitee.io/yisheep/2021/09/10/c++%E9%98%B6%E6%AE%B5%E4%B8%89%E7%AC%AC%E4%BA%8C%E8%AE%B2/</id>
    <published>2021-09-10T02:18:09.000Z</published>
    <updated>2021-09-15T07:12:38.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二讲"><a href="#第二讲" class="headerlink" title="第二讲"></a>第二讲</h1><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>结构体可以作为函数的参数</p><p>具体写法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(struct 结构体名 结构体变量名)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PersonInfo</span>                            //定义结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line">string name;</span><br><span class="line">string dizhi;</span><br><span class="line"><span class="keyword">short</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowStuctMessage</span><span class="params">(struct PersonInfo MyInfo)</span>    <span class="comment">//自定义函数，输出结构体变量成员</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; MyInfo.index &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; MyInfo.name &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; MyInfo.dizhi &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; MyInfo.age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">PersonInfo pInfo;                        <span class="comment">//声明结构体</span></span><br><span class="line">pInfo.index = <span class="number">1</span>;</span><br><span class="line">pInfo.name=<span class="string">&quot;小王&quot;</span>;</span><br><span class="line">pInfo.dizhi = <span class="string">&quot;乐山市&quot;</span>;</span><br><span class="line">pInfo.age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">ShowStuctMessage</span>(pInfo);                <span class="comment">//调用自定义函数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h2><p>指针的创建：</p><p><code>int* a;</code></p><p>结构体指针的创建公式：</p><p><code>结构体名* 指针名</code>;</p><p>结构体指针访问结构体内的属性</p><p><code>结构体指针名-&gt;结构体中的属性</code></p><p>例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">stu* s;</span><br><span class="line">s-&gt;i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体指针作为函数参数</p><p>具体写法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(struct 结构体名* 指针名)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PersonInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">short</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowStuctMessage</span><span class="params">(struct PersonInfo* pInfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; pInfo-&gt;index &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; pInfo-&gt;name &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; pInfo-&gt;age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    PersonInfo pInfo;</span><br><span class="line">    pInfo.index = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(pInfo.name, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    pInfo.age = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">ShowStuctMessage</span>(&amp;pInfo);  <span class="comment">//传递的是pInfo的地址 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h2><p>结构体还可以和数组结合</p><p>创建公式：</p><p><code>结构体名 数组名[数字] = &#123;&#123;*,*,...&#125;,&#123;*,*,...&#125;,....&#125;;</code></p><p>例子:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PersonInfo</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> index;</span><br><span class="line">        <span class="keyword">char</span> name[<span class="number">30</span>];</span><br><span class="line">        <span class="keyword">short</span> age;</span><br><span class="line">    &#125; Person[<span class="number">5</span>] = &#123; &#123;<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>&#125;, <span class="comment">//创建结构体的同时创建结构体数组</span></span><br><span class="line">        &#123;<span class="number">2</span>,<span class="string">&quot;李可可&quot;</span>,<span class="number">21</span>&#125;,</span><br><span class="line">        &#123;<span class="number">3</span>,<span class="string">&quot;宋桥&quot;</span>,<span class="number">22</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>,<span class="string">&quot;元员&quot;</span>,<span class="number">22</span>&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>,<span class="string">&quot;王冰冰&quot;</span>,<span class="number">22</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PersonInfo</span>* <span class="title">pPersonInfo</span>;</span></span><br><span class="line">    pPersonInfo = Person;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++, pPersonInfo++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; pPersonInfo-&gt;index &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; pPersonInfo-&gt;name &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; pPersonInfo-&gt;age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体所占空间大小"><a href="#结构体所占空间大小" class="headerlink" title="结构体所占空间大小"></a>结构体所占空间大小</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PersonInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">short</span> age;</span><br><span class="line">&#125; pInfo;</span><br><span class="line">pInfo.index = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(pInfo.name, <span class="string">&quot;小龙&quot;</span>);</span><br><span class="line">pInfo.age = <span class="number">20</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;index:&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(pInfo.index) &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(pInfo.name) &lt;&lt; <span class="string">&quot;age:&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(pInfo.age) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(pInfo) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改int数据类型"><a href="#修改int数据类型" class="headerlink" title="修改int数据类型"></a>修改int数据类型</h2><p>我们可以为一个数据类型取别名使用<code>typedef</code>关键字</p><p>公式：<code>typedef 旧类型名 新类型名;</code></p><p>例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">int</span> flag;</span><br><span class="line">    flag b = <span class="number">9</span>;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="共用体"><a href="#共用体" class="headerlink" title="共用体"></a>共用体</h2><p>共用体数据类型是指将不同的数据项组织为一个整体，和结构体类似，但是共用体在内存中占用首地址相同的一段存储单元。</p><p>创建共用体的公式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> 共用体类型名&#123;</span></span><br><span class="line">成员数据类型  共用体成员名<span class="number">1</span>；</span><br><span class="line">成员数据类型  共用体成员名<span class="number">2</span>；</span><br><span class="line">...</span><br><span class="line">成员数据类型  共用体成员名n；</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>共用体变量所占内存大小是由最长的成员的长度决定的。</p></blockquote><p>共用体的初始化</p><p>案例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">myUnion</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> iData;</span><br><span class="line">    <span class="keyword">char</span> chData;</span><br><span class="line">    <span class="keyword">float</span> fData;</span><br><span class="line">&#125; uStruct;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    uStruct.chData=<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    uStruct.fData=<span class="number">0.3</span>;</span><br><span class="line">    uStruct.iData=<span class="number">100</span>;</span><br><span class="line">    cout &lt;&lt; uStruct.chData &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; uStruct.fData &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; uStruct.iData &lt;&lt; endl;        <span class="comment">//正确显示</span></span><br><span class="line">    uStruct.iData=<span class="number">100</span>;</span><br><span class="line">    uStruct.fData=<span class="number">0.3</span>;</span><br><span class="line">    uStruct.chData=<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; uStruct.chData&lt;&lt; endl;    <span class="comment">//正确显示</span></span><br><span class="line">    cout &lt;&lt; uStruct.fData&lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; uStruct.iData&lt;&lt; endl;</span><br><span class="line">    uStruct.iData=<span class="number">100</span>;</span><br><span class="line">    uStruct.chData=<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    uStruct.fData=<span class="number">0.3</span>;</span><br><span class="line">    cout &lt;&lt; uStruct.chData &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; uStruct.fData &lt;&lt; endl;        <span class="comment">//正确显示</span></span><br><span class="line">    cout &lt;&lt; uStruct.iData &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由于是共用的同一个内存单元，所以结果中只有最后赋值的成员能正确显示。</p></blockquote><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>枚举：是一些标识符的集合，其变量的值只能取自括号内的这些标识符。</p><p>枚举创建公式：<code>enum 枚举类型名 &#123;标识符列表&#125;;</code></p><p>创建带整型值的枚举类型的公式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> 枚举类型名 &#123;</span></span><br><span class="line">标识符=<span class="number">0</span>，</span><br><span class="line">标识符=<span class="number">1</span>，</span><br><span class="line">标识符=<span class="number">2</span>，</span><br><span class="line">标识符=<span class="number">3</span>，</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>创建枚举类型变量的公式： <code>枚举类型名 变量名；</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Weekday</span> &#123;</span>Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday&#125;;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">2</span>,b=<span class="number">1</span>;</span><br><span class="line">    Weekday day;</span><br><span class="line">    day=(Weekday)a;</span><br><span class="line">    cout &lt;&lt; day &lt;&lt; endl;</span><br><span class="line">    day=(Weekday)(a-b);</span><br><span class="line">    cout &lt;&lt; day &lt;&lt; endl;</span><br><span class="line">    day=(Weekday)(Sunday+Wednesday);</span><br><span class="line">    cout &lt;&lt; day &lt;&lt; endl;</span><br><span class="line">    day=(Weekday)<span class="number">5</span>;</span><br><span class="line">    cout &lt;&lt; day &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举类型的值可以和整型类型一起运算、比较等。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Weekday</span> &#123;</span> Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Weekday day1, day2;</span><br><span class="line">    day1 = Monday;</span><br><span class="line">    day2 = Saturday;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    n = day1;</span><br><span class="line">    n = day2 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; day1)            <span class="comment">//可以比较</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;n&gt;day1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (day1 &lt; day2)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;day1&lt;day2&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">c++阶段三第二讲</summary>
    
    
    
    <category term="c++" scheme="http://gaoxianglong.gitee.io/yisheep/categories/c/"/>
    
    
    <category term="教材" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E6%95%99%E6%9D%90/"/>
    
    <category term="阶段三" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E9%98%B6%E6%AE%B5%E4%B8%89/"/>
    
  </entry>
  
  <entry>
    <title>c++阶段二第二讲</title>
    <link href="http://gaoxianglong.gitee.io/yisheep/2021/09/09/c++%E9%98%B6%E6%AE%B5%E4%BA%8C%E7%AC%AC%E4%BA%8C%E8%AE%B2/"/>
    <id>http://gaoxianglong.gitee.io/yisheep/2021/09/09/c++%E9%98%B6%E6%AE%B5%E4%BA%8C%E7%AC%AC%E4%BA%8C%E8%AE%B2/</id>
    <published>2021-09-09T10:20:18.000Z</published>
    <updated>2021-09-18T07:09:55.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二讲"><a href="#第二讲" class="headerlink" title="第二讲"></a>第二讲</h1><h2 id="函数的默认参数"><a href="#函数的默认参数" class="headerlink" title="函数的默认参数"></a>函数的默认参数</h2><p>在调用有参函数时，如果经常需要传递同一个值到调用函数，在定义函数时，可以为参数设置一个默认值，这样在调用函数时可以省略一些参数，此时程序将采用默认值作为函数的实际参数。</p><p>比如学校给每一位学生注册某学习网站的账号，账号都是有一个对应密码的，要是每一个学生都去设置一个单独的密码，就会比较繁琐，所以大多数学校都选择设置一个统一的密码。</p><p>现在就有这么一个注册的函数，需要两个参数，一个是账号，一个是密码，我们只需要每一位同学的账号不一样，而密码都是0000。那么我们就可以使用默认参数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">(string username,string password=<span class="string">&quot;0000&quot;</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>函数默认参数：在指定函数时通过赋值符给予默认值，这个默认值在调用函数时没有传入对应参数的话就会使用默认值，要是传入了对应参数那么就会使用传入的值。</strong></p><h2 id="函数的重载"><a href="#函数的重载" class="headerlink" title="函数的重载"></a>函数的重载</h2><p>我们完成了两个数求和，求差等等函数，但是他们都有一个弊端，就是只能计算两个int类型的数，要是我们要传入一个long类型的或者小数类型的，那就没办法计算了。</p><p>你们想想能够怎么去解决这个问题？</p><p>解决办法有两个，其中一个就是再创建一个函数，这个函数的接收参数类为long或者小数等等这些类型。但是有一个弊端那就是函数的名字要改变不然创不了，如果要去适配很多种类型就意味着有很多函数，在调用的时候还要去看要传入的参数类型，再去想你要调用哪一个函数，就会很繁琐。</p><p>第二个方法就是函数的重载，</p><p><strong>函数的重载：能做到多个函数名相同，</strong></p><p><strong>但是两个重载函数必须在下列一个或两个方面有所区别：</strong></p><ul><li><p>函数的参数个数不同。</p></li><li><p>函数的参数类型不同或者参数类型顺序不同。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">double</span> b)</span></span>&#123;&#125;</span><br><span class="line"><span class="built_in">fun</span>();</span><br><span class="line"><span class="built_in">fun</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">fun</span>(<span class="number">1</span>,<span class="number">1.2</span>);</span><br></pre></td></tr></table></figure><h2 id="函数的可变参数"><a href="#函数的可变参数" class="headerlink" title="函数的可变参数:"></a>函数的可变参数:</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">va_add</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">va_list ap;</span><br><span class="line"><span class="comment">//cout &lt;&lt; cnt &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="built_in">va_start</span>(ap, cnt);</span><br><span class="line"><span class="keyword">int</span> sum = cnt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= cnt; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="built_in">va_arg</span>(ap, <span class="keyword">int</span>);</span><br><span class="line">sum += a;</span><br><span class="line">cout&lt;&lt;a&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">va_end</span>(ap);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">va_add</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数与变量的作用域"><a href="#函数与变量的作用域" class="headerlink" title="函数与变量的作用域"></a>函数与变量的作用域</h2><p>函数里创建的变量只有当前这个函数里才能访问。</p>]]></content>
    
    
    <summary type="html">c++阶段二第二讲</summary>
    
    
    
    <category term="c++" scheme="http://gaoxianglong.gitee.io/yisheep/categories/c/"/>
    
    
    <category term="教材" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E6%95%99%E6%9D%90/"/>
    
    <category term="阶段二" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E9%98%B6%E6%AE%B5%E4%BA%8C/"/>
    
  </entry>
  
  <entry>
    <title>c++阶段一第二讲</title>
    <link href="http://gaoxianglong.gitee.io/yisheep/2021/09/09/c++%E9%98%B6%E6%AE%B5%E4%B8%80%E7%AC%AC%E4%BA%8C%E8%AE%B2/"/>
    <id>http://gaoxianglong.gitee.io/yisheep/2021/09/09/c++%E9%98%B6%E6%AE%B5%E4%B8%80%E7%AC%AC%E4%BA%8C%E8%AE%B2/</id>
    <published>2021-09-09T01:24:16.000Z</published>
    <updated>2021-09-18T07:14:13.620Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二讲"><a href="#第二讲" class="headerlink" title="第二讲"></a>第二讲</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>c++常用的基本数据类型：</p><ul><li><p>整形：</p><ul><li>short(短整型):</li><li>int(整形):</li><li>long(长整形):</li></ul></li><li><p>浮点型</p><ul><li>float(单精度小数):</li><li>double(双精度小数):</li></ul></li><li><p>字符</p><ul><li>char(字符)<ul><li>字符使用单引号<code>&#39;</code>包裹起来，并且只能保存单个非中文字符。</li></ul></li></ul></li><li><p>字符串</p><ul><li>string(字符串)<ul><li>字符串使用双引号<code>&quot;</code>包裹起来，并且可以保持多个字符，及中文。</li></ul></li></ul></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量：指其值在确定之后还可以通过<strong>赋值符</strong>进行修改的量就是变量。</p><p>赋值符：<code>=</code>,可以将右边的值交给左边。</p><p>创建变量的公式:</p><p><code>数据类型 变量名 = 值;</code></p><p>数据类型：如<code>int</code>、<code>double</code>这一类的关键字，后续还会有我们自定义的数据类型。</p><p>变量名：不能使用数字开头，也不能使用中文。</p><p>值：必须要去数据类型相对应。</p><blockquote><p>注：在创建变量的时候还可以这样操作</p><p><code>数据类型 变量名;</code>  <strong>这样的方式叫做创建了一个变量但是未赋初始值。</strong></p></blockquote><h2 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h2><p>变量与变量之间可以进行一些算数运算</p><h3 id="加"><a href="#加" class="headerlink" title="加"></a>加</h3><p>两个变量进行相加操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> c = a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="减"><a href="#减" class="headerlink" title="减"></a>减</h3><p>两个变量进行相减操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> c = a-b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="乘"><a href="#乘" class="headerlink" title="乘"></a>乘</h3><p>两个变量进行相乘操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> c = a*b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="除"><a href="#除" class="headerlink" title="除"></a>除</h3><p>两个变量进行相除操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> c = b/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="取模"><a href="#取模" class="headerlink" title="取模"></a>取模</h3><p>两个变量进行取余数操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> c = a%b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>两个字符串可以相加吗？</p><p>通过此问题，引出一下练习：</p><p>1：创建三个字符串变量</p><p>2：将前两个字符串变量加起来并通过赋值符，赋给第三个字符串变量</p><p>3：输出第三个字符串两次</p>]]></content>
    
    
    <summary type="html">c++阶段一第二讲</summary>
    
    
    
    <category term="c++" scheme="http://gaoxianglong.gitee.io/yisheep/categories/c/"/>
    
    
    <category term="教材" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E6%95%99%E6%9D%90/"/>
    
    <category term="阶段一" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E9%98%B6%E6%AE%B5%E4%B8%80/"/>
    
  </entry>
  
  <entry>
    <title>c++阶段三第一讲</title>
    <link href="http://gaoxianglong.gitee.io/yisheep/2021/08/31/c++%E9%98%B6%E6%AE%B5%E4%B8%89%E7%AC%AC%E4%B8%80%E8%AE%B2/"/>
    <id>http://gaoxianglong.gitee.io/yisheep/2021/08/31/c++%E9%98%B6%E6%AE%B5%E4%B8%89%E7%AC%AC%E4%B8%80%E8%AE%B2/</id>
    <published>2021-08-31T08:18:28.000Z</published>
    <updated>2021-09-09T01:17:20.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一讲"><a href="#第一讲" class="headerlink" title="第一讲"></a>第一讲</h1><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>通过指针能够直接对变量的内存空间进行操作，如果我不用指针，想让两个变量共用同一个内存空间可以吗？  答案是可以，那就是使用引用。以此引出对引用的使用。  </p><p>引用：</p><p><strong>引用变量是其他对象的别名，对其的任何操作和对原来的对象具有相同作用，有点像为原来的对象取的别名。且一个引用被初始化后，就无法再去引用另一个对象。</strong></p><p>创建公式：</p><p><code>数据类型&amp; 引用名</code></p><blockquote><p>程序中的引用在程序运行结束前必须被初始化，否则会报错。</p></blockquote><p>创建一个函数，他接收两个引用，用于交换两个变量的值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp; a,<span class="keyword">int</span> &amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line">tmp=a;</span><br><span class="line">a=b;</span><br><span class="line">b=tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入x&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入y&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; y;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;ͨ使用引用交换y和x的值&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">swap</span>(x,y);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;x=&quot;</span> &lt;&lt; x &lt;&lt;endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;y=&quot;</span> &lt;&lt; y &lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>结构体：</p><p><strong>结构体是由多个不同类型的数据组合而成的数据集合。</strong></p><p>创建公式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名&#123;</span></span><br><span class="line">   成员数据类型<span class="number">1</span> 成员名<span class="number">1</span>;</span><br><span class="line">   …</span><br><span class="line">   成员数据类型n 成员名n;</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">short</span> age;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>创建好了之后就可以使用了！</p><p>使用结构体的方法：</p><p><strong>就如同创建一个变量一样，只不过需要将原来的<code>int</code>,<code>double</code>这些数据类型换为结构体的名字。</strong></p><p>如：<code>Person p;</code></p><p>接下来就可以通过这个<code>p</code>去访问到结构体中的成员<code>index</code>,<code>name</code>,<code>age</code>。</p><p>如：<code>p.index</code></p><p>并且还可以给它赋值：<code>p.index = 1</code></p><p>代码案例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line">string name;</span><br><span class="line"><span class="keyword">short</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p;</span><br><span class="line">    p.index = <span class="number">1</span>;</span><br><span class="line">    p.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    p.age = <span class="number">15</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个学生结构体，这个结构体里有<code>学号</code>，<code>姓名</code>，<code>年龄</code>，<code>性别</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> number;</span><br><span class="line">string name;</span><br><span class="line"><span class="keyword">short</span> age;</span><br><span class="line">    <span class="keyword">bool</span> sex;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在主函数里添加三个学生的信息，并显示出来。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> number;</span><br><span class="line">string name;</span><br><span class="line"><span class="keyword">short</span> age;</span><br><span class="line"><span class="keyword">bool</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Student s1;</span><br><span class="line">Student s2;</span><br><span class="line">Student s3;</span><br><span class="line">s1.number = <span class="number">01</span>;</span><br><span class="line">s2.number = <span class="number">02</span>;</span><br><span class="line">s3.number = <span class="number">03</span>;</span><br><span class="line">s1.name = <span class="string">&quot;001&quot;</span>;</span><br><span class="line">s2.name = <span class="string">&quot;002&quot;</span>;</span><br><span class="line">s3.name = <span class="string">&quot;003&quot;</span>;</span><br><span class="line">s1.age = <span class="number">14</span>;</span><br><span class="line">s2.age = <span class="number">15</span>;</span><br><span class="line">s3.age = <span class="number">16</span>;</span><br><span class="line">s1.sex = <span class="literal">true</span>;</span><br><span class="line">s2.sex = <span class="literal">false</span>;</span><br><span class="line">s3.sex = <span class="literal">true</span>;</span><br><span class="line">cout &lt;&lt; s1.number &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s1.name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s1.age &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s1.sex &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; s2.number &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s2.name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s2.age &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s2.sex &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; s3.number &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s3.name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s3.age &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s3.sex&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建结构体还有一种方式：</p><p>在创建结构体的同时，将对应变量也一起创建。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line">string name;</span><br><span class="line"><span class="keyword">short</span> age;</span><br><span class="line">&#125;s1;</span><br><span class="line"><span class="comment">// 也可以创建多个变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line">string name;</span><br><span class="line"><span class="keyword">short</span> age;</span><br><span class="line">&#125;s1,s2;</span><br></pre></td></tr></table></figure><p>也可以同时给其成员赋值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line">string name;</span><br><span class="line"><span class="keyword">short</span> age;</span><br><span class="line">&#125;s1 = &#123;<span class="number">1</span>,<span class="string">&quot;01&quot;</span>,<span class="number">10</span>&#125;;</span><br></pre></td></tr></table></figure><p>结构体还可以嵌套?</p><p>结构体的嵌套：<strong>在定义结构体时可以声明其他已经创建好的结构体变量，也可以在创建一个结构体时创建子结构体。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PersonInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">short</span> age;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">WorkPlace</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> Address[<span class="number">150</span>];</span><br><span class="line"><span class="keyword">char</span> PostCode[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">char</span> GateCode[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">char</span> Street[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">char</span> Area[<span class="number">50</span>];</span><br><span class="line">&#125; WP;</span><br><span class="line">&#125;;</span><br><span class="line">PersonInfo pInfo;</span><br><span class="line"><span class="built_in">strcpy</span>(pInfo.WP.Address, <span class="string">&quot;House&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(pInfo.WP.PostCode, <span class="string">&quot;10000&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(pInfo.WP.GateCode, <span class="string">&quot;302&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(pInfo.WP.Street, <span class="string">&quot;Lan Tian&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(pInfo.WP.Area, <span class="string">&quot;china&quot;</span>);</span><br><span class="line">cout &lt;&lt; pInfo.WP.Address &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; pInfo.WP.PostCode &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; pInfo.WP.GateCode &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; pInfo.WP.Street &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; pInfo.WP.Area &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>设计一个小汽车的结构体，在这个结构体中还有一个表示发动机的结构体。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Car</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Engine</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> height;</span><br><span class="line"><span class="keyword">int</span> width;</span><br><span class="line">&#125; engine;</span><br><span class="line"><span class="keyword">char</span> color[<span class="number">30</span>];</span><br><span class="line">&#125; a_car;</span><br><span class="line">a_car.engine.width = <span class="number">40</span>;</span><br><span class="line">a_car.engine.height = <span class="number">60</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(a_car.color, <span class="string">&quot;黑色&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">c++阶段三第三讲--引用与结构体</summary>
    
    
    
    <category term="c++" scheme="http://gaoxianglong.gitee.io/yisheep/categories/c/"/>
    
    
    <category term="教材" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E6%95%99%E6%9D%90/"/>
    
    <category term="阶段三" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E9%98%B6%E6%AE%B5%E4%B8%89/"/>
    
  </entry>
  
  <entry>
    <title>c++阶段二第一讲</title>
    <link href="http://gaoxianglong.gitee.io/yisheep/2021/08/31/c++%E9%98%B6%E6%AE%B5%E4%BA%8C%E7%AC%AC%E4%B8%80%E8%AE%B2/"/>
    <id>http://gaoxianglong.gitee.io/yisheep/2021/08/31/c++%E9%98%B6%E6%AE%B5%E4%BA%8C%E7%AC%AC%E4%B8%80%E8%AE%B2/</id>
    <published>2021-08-31T03:47:42.000Z</published>
    <updated>2021-09-09T01:17:20.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初始函数"><a href="#初始函数" class="headerlink" title="初始函数"></a>初始函数</h1><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>函数是什么？或者说你们觉得它有什么用？</p><p>数学上的函数：</p><p>两个一直在变化的量，一个量的改变会影响到另一个量的改变。</p><img src="https://i.loli.net/2021/08/31/3HOrUMQptT7kwSm.png" style="zoom:200%;" /><p>我们使用过的函数：</p><ul><li><p>printf()</p></li><li><p>scanf()</p></li></ul><blockquote><p>通过<strong>按住<code>ctrl</code>+鼠标左键</strong>可以查看这个函数是在哪儿定义的</p></blockquote><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数的主要作用：</p><p><strong>函数是指一段代码可以直接被另一段代码引用的代码。也叫做子程序。</strong>一个较大的程序一般应分为若干个程序块，每一个模块用来实现一个特定的功能。所有的高级语言中都有子程序这个概念，用子程序实现模块的功能。在C++语言中，子程序的作用是由一个主函数和若干个函数构成。<strong>由主函数调用其他函数，其他函数也可以互相调用。同一个函数可以被一个或多个函数调用任意多次。</strong></p><p>函数的必备要素：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完整的函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(string a)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>void</p><p>这个位置是规定当前函数在运行之后需要有一个什么类型的结果，void表示没有结果，如果需要int类型的结果那就写int</p></li><li><p>print</p><p>这个位置是函数的名字，和变量名类似</p></li><li><p>()</p><p>括号里写入这个函数在调用时需要的参数，称为形参</p></li><li><p>{}</p><p>大括号里写入函数需要完成的逻辑代码</p></li></ul><p>调用函数的方法：</p><p>调用函数有三种方式：</p><ol><li><p>没有返回值类型，也不需要参数</p><p><code>fun();</code></p></li><li><p>没有返回值类型，需要参数</p><p><code>fun(1);</code></p></li><li><p>有返回值，也需要参数</p><p><code>int a = fun(1);</code></p></li></ol><blockquote><p>注：调用函数传入的参数称为这个函数的实参</p></blockquote><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印一个字符串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(string a)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 两个数相加</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个函数写在<code>mian</code>函数外面的上方</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//打印一个字符串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(string a)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; a&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 两个数相加</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="built_in">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>同学们动手敲敲这段代码，体会一些函数的作用。</p></blockquote><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>完成两个数相加，相减，相乘，相除。</p>]]></content>
    
    
    <summary type="html">c++阶段二第一讲--初始函数</summary>
    
    
    
    <category term="c++" scheme="http://gaoxianglong.gitee.io/yisheep/categories/c/"/>
    
    
    <category term="教材" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E6%95%99%E6%9D%90/"/>
    
    <category term="阶段二" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E9%98%B6%E6%AE%B5%E4%BA%8C/"/>
    
  </entry>
  
  <entry>
    <title>c++阶段一第一讲</title>
    <link href="http://gaoxianglong.gitee.io/yisheep/2021/08/31/c++%E9%98%B6%E6%AE%B5%E4%B8%80%E7%AC%AC%E4%B8%80%E8%AE%B2/"/>
    <id>http://gaoxianglong.gitee.io/yisheep/2021/08/31/c++%E9%98%B6%E6%AE%B5%E4%B8%80%E7%AC%AC%E4%B8%80%E8%AE%B2/</id>
    <published>2021-08-31T03:30:39.000Z</published>
    <updated>2021-09-15T07:12:38.337Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初始c"><a href="#初始c" class="headerlink" title="初始c++"></a>初始c++</h1><h2 id="课堂笔记"><a href="#课堂笔记" class="headerlink" title="课堂笔记"></a>课堂笔记</h2><h3 id="什么是编程？"><a href="#什么是编程？" class="headerlink" title="什么是编程？"></a>什么是编程？</h3><p>编程就是人与计算机交流的过程！</p><h3 id="计算机语言的发展过程"><a href="#计算机语言的发展过程" class="headerlink" title="计算机语言的发展过程"></a>计算机语言的发展过程</h3><h4 id="机器语言"><a href="#机器语言" class="headerlink" title="机器语言"></a>机器语言</h4><p>由0和1组成的低级语言，因为计算机只能识别有和无两种状态。</p><p>优点：执行速度块，因为计算机可以直接看得懂。</p><p>缺点：编写难度较大，出错率高且不易查找。</p><h4 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h4><p>由少量的人类语言组成，比如AX、BX等等。</p><p>优点：能被一部分人掌握，出错率这些都比机器语言好。</p><p>缺点：计算机不能直接看懂需要进行编译成机器码，所以执行速度没有机器语言快。</p><h4 id="高级语言"><a href="#高级语言" class="headerlink" title="高级语言"></a>高级语言</h4><p>由大量的人类语言组成，比如if、else等等。</p><p>优点：能够被大部分人掌握，各方面都比前面的机器语言和汇编语言强。</p><p>缺点：计算机也不能直接看懂需要进行编译成机器码。</p><h3 id="打开Visual-Studio"><a href="#打开Visual-Studio" class="headerlink" title="打开Visual Studio"></a>打开Visual Studio</h3><p><img src="https://i.loli.net/2021/08/31/EXfvesn97aoBV8U.png"></p><h2 id="创建项目1"><a href="#创建项目1" class="headerlink" title="创建项目1"></a>创建项目1</h2><p><img src="https://i.loli.net/2021/08/31/PX5RWoSzacQhEnv.png"></p><h2 id="创建项目2"><a href="#创建项目2" class="headerlink" title="创建项目2"></a>创建项目2</h2><p><img src="https://i.loli.net/2021/08/31/EQ2DFfX4op1lb7y.png"></p><h2 id="创建项目3"><a href="#创建项目3" class="headerlink" title="创建项目3"></a>创建项目3</h2><p><img src="https://i.loli.net/2021/08/31/dqPsmWXbuiKHwNr.png"></p><h2 id="创建项目4"><a href="#创建项目4" class="headerlink" title="创建项目4"></a>创建项目4</h2><p><img src="https://i.loli.net/2021/08/31/cxIE8FGh3zKT6Pt.png"></p><h2 id="散掉注释行"><a href="#散掉注释行" class="headerlink" title="散掉注释行"></a>散掉注释行</h2><p><img src="https://i.loli.net/2021/08/31/lWiH9uPsfwDZ8Mp.png"></p><h2 id="散掉空白行"><a href="#散掉空白行" class="headerlink" title="散掉空白行"></a>散掉空白行</h2><p><img src="https://i.loli.net/2021/08/31/kEGXKiPwg1U6QRL.png"></p><h3 id="c-：Hello-World"><a href="#c-：Hello-World" class="headerlink" title="c++：Hello,World!"></a>c++：Hello,World!</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// c++的第一个程序</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;Hello,World!\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>//</p><p>注释，计算机不会运行，主要用作解释或标注某一行或多行代码的意思。</p></li><li><p>#</p><p>预处理符，在程序运行之前提前处理。</p></li><li><p>include</p><p>调用某一个东西。</p></li><li><p>iostream</p><p>输入、输出库文件。</p></li><li><p>main()</p><p>主函数，程序的入口。</p></li><li><p>{}</p><p>函数的范围。</p><ul><li><p>左 { </p><p>就表示这个函数从这里开始</p></li><li><p>右 } </p><p>就表示这个函数从这里结束</p></li></ul></li><li><p>std::</p><p>命名空间，他里面包含了很多命令。</p></li><li><p>cout</p><p>向控制台输出，存在与std这个命令空间里。</p></li><li><p>&lt;&lt; </p><p>插入符，将右边的东西交给左边去执行。</p></li><li><p>;</p><p>结束符，表示我们这一句命令结束了。</p></li><li><p>\n</p><p>换行符，相当于我们在某一个地方按了一下回车，必须写在””之中。</p></li></ul><blockquote><p>注意：除””里的字符意外其他的都需要是英文状态下的输入法输入才行!</p></blockquote><h2 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h2><ul><li>在控制台中打印自己的名字</li><li>在控制台中将自己的名字竖着显示出来</li><li>在控制台显示出一首古诗【格式按照语文课本】</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&lt;iostream</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 打印自己的名字</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;高老师&quot;</span>;</span><br><span class="line">    <span class="comment">// 打印一首古诗</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;  静夜思\n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;床前明月光，\n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;疑是地上霜。\n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;举头望明月，\n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;低头思故乡。\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">c++阶段一第一讲--初始c++</summary>
    
    
    
    <category term="c++" scheme="http://gaoxianglong.gitee.io/yisheep/categories/c/"/>
    
    
    <category term="教材" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E6%95%99%E6%9D%90/"/>
    
    <category term="阶段一" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E9%98%B6%E6%AE%B5%E4%B8%80/"/>
    
  </entry>
  
  <entry>
    <title>androidDrawable</title>
    <link href="http://gaoxianglong.gitee.io/yisheep/2021/08/19/androidDrawable/"/>
    <id>http://gaoxianglong.gitee.io/yisheep/2021/08/19/androidDrawable/</id>
    <published>2021-08-19T08:59:46.000Z</published>
    <updated>2021-08-20T06:56:20.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-Drawable竟然还能这么写"><a href="#Android-Drawable竟然还能这么写" class="headerlink" title="Android Drawable竟然还能这么写"></a>Android Drawable竟然还能这么写</h1><p>通常我们在<code>res/drawable</code>下面自定义<code>shape</code>和<code>selector</code>来满足一些UI的设计，但是由于xml最终转换为<code>drawable</code>需要经过IO或反射创建，会有一些性能损耗，另外随着项目的增大和模块化等，很多通用的样式并不能快速复用，需要合理的项目资源管理规范才能实施。那么通过代码直接创建这些<code>drawable</code>，可以在一定程度上降低这些副作用。本篇介绍用<code>kotlin DSL</code>简洁的语法特性来实现常见的<code>drawable</code>。</p><h2 id="代码对应效果预览"><a href="#代码对应效果预览" class="headerlink" title="代码对应效果预览"></a>代码对应效果预览</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4ML6PBu1beWAPjx4co2ZYLbbFxmZXZ5QdqRYTCNMHE2df1gv2d76LpQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4gheGkzKnqYsx0jvqgaBibQ8UNWmSJ86rX1zdg2ycY4QlnYKc2Bgv1eg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4HPpwDiavwzaVxfCicHmsDuJf04PdqwAkcwjWGIguxZd6jXC29X4p1eKg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4eb2Gld7tH8RboMF2wsTGZ55TM3Z6uVLyzRJItReKSkWoqlUAeNlYEg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_gif/v1LbPPWiaSt4N72WmYXdcsnLf4ZKR96G4QS9k9r6HTL74aUY7akWPWYHEpr94mHDIrOaz8ZD1jv00R6iaYOg22dQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1" alt="图片"></p><h2 id="集成和使用"><a href="#集成和使用" class="headerlink" title="集成和使用"></a>集成和使用</h2><h3 id="在项目级的build-gradle文件种添加仓库Jitpack"><a href="#在项目级的build-gradle文件种添加仓库Jitpack" class="headerlink" title="在项目级的build.gradle文件种添加仓库Jitpack"></a>在项目级的build.gradle文件种添加仓库Jitpack</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        ...</span><br><span class="line">        maven &#123; url &#x27;https://jitpack.io&#x27; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;        </span><br><span class="line">    implementation &#x27;com.github.forJrking:DrawableDsl:0.0.3’</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抛弃xml创建方式示例（其他参见demo"><a href="#抛弃xml创建方式示例（其他参见demo" class="headerlink" title="抛弃xml创建方式示例（其他参见demo)"></a>抛弃xml创建方式示例（其他参见demo)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// infix用法用于去掉括号更加简洁，详细后面说明</span><br><span class="line">image src shapeDrawable &#123;</span><br><span class="line">    //指定shape样式</span><br><span class="line">    shape(ShapeBuilder.Shape.RECTANGLE)</span><br><span class="line">    //圆角，支持4个角单独设置</span><br><span class="line">    corner(20f)</span><br><span class="line">    //solid 颜色</span><br><span class="line">    solid(&quot;#ABE2E3&quot;)</span><br><span class="line">    //stroke 颜色，边框dp，虚线设置</span><br><span class="line">    stroke(R.color.white, 2f, 5f, 8f)</span><br><span class="line">&#125;</span><br><span class="line">//按钮点击样式</span><br><span class="line">btn.background = selectorDrawable &#123;</span><br><span class="line">    //默认样式</span><br><span class="line">    normal = shapeDrawable &#123;</span><br><span class="line">        corner(20f)</span><br><span class="line">        gradient(90, R.color.F97794, R.color.C623AA2)</span><br><span class="line">    &#125;</span><br><span class="line">    //点击效果</span><br><span class="line">    pressed = shapeDrawable &#123;</span><br><span class="line">        corner(20f)</span><br><span class="line">        solid(&quot;#84232323&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><h3 id="xml如何转换成drawable"><a href="#xml如何转换成drawable" class="headerlink" title="xml如何转换成drawable"></a>xml如何转换成drawable</h3><p>xml变成drawable，通过android.graphics.drawable.DrawableInflater这个类来IO解析标签创建，然后通过解析标签再设置属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">//标签创建</span><br><span class="line">private Drawable inflateFromTag(@NonNull String name) &#123;</span><br><span class="line">    switch (name) &#123;</span><br><span class="line">        case &quot;selector&quot;:</span><br><span class="line">            return new StateListDrawable();</span><br><span class="line">        case &quot;level-list&quot;:</span><br><span class="line">            return new LevelListDrawable();</span><br><span class="line">        case &quot;layer-list&quot;:</span><br><span class="line">            return new LayerDrawable();</span><br><span class="line">        ....</span><br><span class="line">        case &quot;color&quot;:</span><br><span class="line">            return new ColorDrawable();</span><br><span class="line">        case &quot;shape&quot;:</span><br><span class="line">            return new GradientDrawable();</span><br><span class="line">        case &quot;vector&quot;:</span><br><span class="line">            return new VectorDrawable();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//反射创建</span><br><span class="line">private Drawable inflateFromClass(@NonNull String className) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        Constructor&lt;? extends Drawable&gt; constructor;</span><br><span class="line">        synchronized (CONSTRUCTOR_MAP) &#123;</span><br><span class="line">            constructor = CONSTRUCTOR_MAP.get(className);</span><br><span class="line">            if (constructor == null) &#123;</span><br><span class="line">                final Class&lt;? extends Drawable&gt; clazz = mClassLoader.loadClass(className).asSubclass(Drawable.class);</span><br><span class="line">                constructor = clazz.getConstructor();</span><br><span class="line">                CONSTRUCTOR_MAP.put(className, constructor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return constructor.newInstance();</span><br><span class="line">    &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>由于创建shape等需要设置各种属性来构建，比较符合build设计模式，那我们首先封装build模式的shapeBuilder，这样做虽然代码比起直接使用apply{}要多，但是可以让纯java项目用起来很舒服，其他实现请查看源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class ShapeBuilder : DrawableBuilder &#123;</span><br><span class="line">    private var mRadius = 0f</span><br><span class="line">    private var mWidth = 0f</span><br><span class="line">    private var mHeight = 0f</span><br><span class="line">    ...</span><br><span class="line">    private var mShape = GradientDrawable.RECTANGLE</span><br><span class="line">    private var mSolidColor = 0</span><br><span class="line"></span><br><span class="line">    /**分别设置四个角的圆角*/</span><br><span class="line">    fun corner(leftTop: Float,rightTop: Float,leftBottom: Float,rightBottom: Float): ShapeBuilder &#123;</span><br><span class="line">        ....if(dp)dp2px(leftTop) else leftTop</span><br><span class="line">        return this</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun solid(@ColorRes colorId: Int): ShapeBuilder &#123;</span><br><span class="line">        mSolidColor = ContextCompat.getColor(context, colorId)</span><br><span class="line">        return this</span><br><span class="line">    &#125;</span><br><span class="line">    // 省略其他参数设置方法 详细代码查看源码</span><br><span class="line">    override fun build(): Drawable &#123;</span><br><span class="line">        val gradientDrawable = GradientDrawable()</span><br><span class="line">        gradientDrawable = GradientDrawable()</span><br><span class="line">        gradientDrawable.setColor(mSolidColor)</span><br><span class="line">        gradientDrawable.shape = mShape</span><br><span class="line">        ....其他参数设置</span><br><span class="line">        return gradientDrawable</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="把build模式转换为dsl"><a href="#把build模式转换为dsl" class="headerlink" title="把build模式转换为dsl"></a>把build模式转换为dsl</h3><p>理论上所有的build模式都可以轻松转换为dsl写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">inline fun shapeDrawable(builder: ShapeBuilder.() -&gt; Unit): Drawable &#123;</span><br><span class="line">    return ShapeBuilder().also(builder).build()</span><br><span class="line">&#125;</span><br><span class="line">//使用方法 </span><br><span class="line">val drawable = shapeDrawable&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数去括号"><a href="#函数去括号" class="headerlink" title="函数去括号"></a>函数去括号</h3><p>通过上面封装已经实现了dsl的写法，通常setBackground可以通过setter简化，但是我发现由于有些api设计还需要加括号，这样不太kotlin：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//容易阅读</span><br><span class="line">iv1.background = shapeDrawable &#123;</span><br><span class="line">    shape(ShapeBuilder.Shape.RECTANGLE)</span><br><span class="line">    solid(&quot;#ABE2E3&quot;)</span><br><span class="line">&#125;</span><br><span class="line">//多了括号看起来不舒服</span><br><span class="line">iv2.setImageDrawable(shapeDrawable &#123;</span><br><span class="line">    solid(&quot;#84232323&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>怎么去掉括号呢？🈶2种方式infix函数(中缀表达)和property setter</p><h4 id="infix函数特点和规范"><a href="#infix函数特点和规范" class="headerlink" title="infix函数特点和规范"></a>infix函数特点和规范</h4><ul><li>Kotlin允许在不使用括号和点号的情况下调用函数</li><li>必须只有一个参数</li><li>必须是成员函数或扩展函数</li><li>不支持可变参数和带默认值参数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**为所有ImageView添加扩展infix函数 来去掉括号*/</span><br><span class="line">infix fun ImageView.src(drawable: Drawable?) &#123;</span><br><span class="line">    this.setImageDrawable(drawable)</span><br><span class="line">&#125;</span><br><span class="line">//使用如下</span><br><span class="line">iv2 src shapeDrawable &#123;</span><br><span class="line">    shape(ShapeBuilder.Shape.OVAL)</span><br><span class="line">    solid(&quot;#E3ABC2&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然了代码是用来阅读的。个人认为如果我们大量使用infix函数，阅读困难会大大增加，所以建议函数命名必须可以直击函数功能，而且函数功能简单且单一。</p><h4 id="property-setter方式"><a href="#property-setter方式" class="headerlink" title="property setter方式"></a>property setter方式</h4><p>主要使用kotlin可以简化setter为等号来去括号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/**扩展变量*/var ImageView.src: Drawable    get() = drawable    set(value) &#123;        this.setImageDrawable(value)    &#125;//使用如下   iv2.src = shapeDrawable &#123;    shape(ShapeBuilder.Shape.OVAL)    solid(&quot;#E3ABC2&quot;)&#125;    </span><br></pre></td></tr></table></figure><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>代码直接创建比起xml方式可以提升性能</li><li>dsl方式比起build模式和调用方法设置更加简洁符合kotlin风格</li><li>通过合适的代码管理可以复用这些代码，比xml管理方便</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>没有as的预览功能，只有通过上机观测</li><li>api还没有覆盖所有drawable属性（例如shape = ring等)</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>上面把的DrawableDsl基础用法介绍完了，欢迎大家使用，欢迎提Issues，记得给个star哦。Github链接：</p><blockquote><p><a href="https://github.com/forJrking/DrawableDsl">https://github.com/forJrking/DrawableDsl</a></p></blockquote>]]></content>
    
    
    <summary type="html">Android Drawable竟然还能这么写</summary>
    
    
    
    <category term="教程" scheme="http://gaoxianglong.gitee.io/yisheep/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="android" scheme="http://gaoxianglong.gitee.io/yisheep/tags/android/"/>
    
    <category term="drawable" scheme="http://gaoxianglong.gitee.io/yisheep/tags/drawable/"/>
    
  </entry>
  
  <entry>
    <title>javaWeb笔记</title>
    <link href="http://gaoxianglong.gitee.io/yisheep/2021/08/19/javaWeb%E7%AC%94%E8%AE%B0/"/>
    <id>http://gaoxianglong.gitee.io/yisheep/2021/08/19/javaWeb%E7%AC%94%E8%AE%B0/</id>
    <published>2021-08-19T08:56:49.000Z</published>
    <updated>2021-08-29T13:46:35.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><h3 id="1-1、前言"><a href="#1-1、前言" class="headerlink" title="1.1、前言"></a>1.1、前言</h3><p>web开发：</p><ul><li>web，网页的意思  ， <a href="http://www.baidu.com/">www.baidu.com</a></li><li>静态web<ul><li>html，css</li><li>提供给所有人看的数据始终不会发生变化！</li></ul></li><li>动态web<ul><li>淘宝，几乎是所有的网站；</li><li>提供给所有人看的数据始终会发生变化，每个人在不同的时间，不同的地点看到的信息各不相同！</li><li>技术栈：Servlet/JSP，ASP，PHP</li></ul></li></ul><p>在Java中，动态web资源开发的技术统称为JavaWeb；</p><h3 id="1-2、web应用程序"><a href="#1-2、web应用程序" class="headerlink" title="1.2、web应用程序"></a>1.2、web应用程序</h3><p>web应用程序：可以提供浏览器访问的程序；</p><ul><li>a.html、b.html……多个web资源，这些web资源可以被外界访问，对外界提供服务；</li><li>你们能访问到的任何一个页面或者资源，都存在于这个世界的某一个角落的计算机上。</li><li>URL </li><li>这个统一的web资源会被放在同一个文件夹下，web应用程序–&gt;Tomcat：服务器</li><li>一个web应用由多部分组成 （静态web，动态web）<ul><li>html，css，js</li><li>jsp，servlet</li><li>Java程序</li><li>jar包</li><li>配置文件 （Properties）</li></ul></li></ul><p>web应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理；</p><h4 id="Web应用程序概述"><a href="#Web应用程序概述" class="headerlink" title="Web应用程序概述"></a>Web应用程序概述</h4><ul><li><p>Web应用程序是一种可以通过Web访问的应用程序，程序的最大好处是用户很容易访问应用程序，用户只需要有浏览器即可，不需要再安装其他软件。</p></li><li><p>一个Web应用程序是由完成特定任务的各种Web组件（web components)构成的并通过Web将服务展示给外界。在实际应用中，Web应用程序是由多个Servlet、JSP页面、HTML文件以及图像文件等组成。所有这些组件相互协调为用户提供一组完整的服务。</p></li></ul><h4 id="应用程序模式"><a href="#应用程序模式" class="headerlink" title="应用程序模式"></a>应用程序模式</h4><ul><li><p>应用程序有两种模式C/S、B/S。C/S是客户端/服务器端程序，也就是说这类程序一般独立运行。而B/S就是浏览器端/服务器端应用程序，这类应用程序一般借助IE、Firefox、Google等浏览器来运行。WEB应用程序一般是B/S模式。</p><img src="/狂神web/clip_image001.jpg" alt="12" style="zoom:80%;" /><img src="/狂神web/clip_image001-1583293770740.jpg" alt="11" style="zoom:67%;" /></li></ul><h5 id="1，C-S架构"><a href="#1，C-S架构" class="headerlink" title="1，C/S架构"></a>1，C/S架构</h5><ul><li>C/S是Client/Server的缩写。</li><li>Server即服务器，通常采用高性能的PC或工作站，</li><li>Client即客户端，需要在客户电脑上安装专用的客户端软件。</li><li>例如大家比较熟悉的腾讯QQ就是个典型的C/S结构的软件，用户要安装QQ客户端程序同服务器进行通讯。</li></ul><h5 id="2，B-S架构"><a href="#2，B-S架构" class="headerlink" title="2，B/S架构"></a>2，B/S架构</h5><ul><li><p>B/S架构即==浏览器和服务器==架构模式。它是随着Internet技术的兴起，对C/S架构的一种变化或者改进的架构。</p></li><li><p>在这种架构下，用户工作界面是通过==浏览器==来实现，极少部分事务逻辑在前端(Browser)实现，但是主要事务逻辑在服务器端(Server)实现，形成所谓三层结构。</p></li><li><p>例如京东、淘宝、12306等都是B/S架构。</p></li><li><p>WEB应用程序一般是B/S模式。</p></li><li><p>B/S优点：</p><ul><li><p>耦合度小，利于分工协作，提高开发效率</p></li><li><p>具有良好的可扩展性和可维护性</p></li><li><p>升级成本小</p></li><li><p>简化了客户端电脑载荷</p></li><li><p>减轻了系统维护与升级的成本和工作量</p></li><li><p>降低了用户的总体成本</p></li></ul></li></ul><h3 id="1-3、静态web"><a href="#1-3、静态web" class="headerlink" title="1.3、静态web"></a>1.3、静态web</h3><ul><li><code>*.htm, *.html</code>,这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。通络；</li></ul><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567822802516.png" alt="1567822802516"></p><ul><li>静态web存在的缺点<ul><li>Web页面无法动态更新，所有用户看到都是同一个页面<ul><li>轮播图，点击特效：伪动态</li><li>JavaScript [实际开发中，它用的最多]</li><li>VBScript</li></ul></li><li>它无法和数据库交互（数据无法持久化，用户无法交互）</li></ul></li></ul><h3 id="1-4、动态web"><a href="#1-4、动态web" class="headerlink" title="1.4、动态web"></a>1.4、动态web</h3><p>页面会动态展示： “Web的页面展示的效果因人而异”；</p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567823191289.png" alt="1567823191289"></p><p>缺点：</p><ul><li>加入服务器的动态web资源出现了错误，我们需要重新编写我们的<strong>后台程序</strong>,重新发布；<ul><li>停机维护</li></ul></li></ul><p>优点：</p><ul><li>Web页面可以动态更新，所有用户看到都不是同一个页面</li><li>它可以与数据库交互 （数据持久化：注册，商品信息，用户信息……..）</li></ul><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567823350584.png" alt="1567823350584"></p><h4 id="静态网页与动态网页"><a href="#静态网页与动态网页" class="headerlink" title="静态网页与动态网页"></a>静态网页与动态网页</h4><ul><li><p>静态网页没有数据库的支持，在网站制作和维护方面工作量较大，静态网页的交互性较差，在功能方面有较大的限制。</p></li><li><p>动态网页是指在服务器端运行的程序或者网页，会根据不同客户、不同时间返回不同的网页。</p></li></ul><h3 id="1-5、访问Web资源"><a href="#1-5、访问Web资源" class="headerlink" title="1.5、访问Web资源"></a>1.5、访问Web资源</h3><h4 id="什么是URL"><a href="#什么是URL" class="headerlink" title="什么是URL"></a>什么是URL</h4><ul><li>URL是UniformResource Locator的缩写，意思是统一资源定位符，也被称为网页地址，是因特网上标准的资源地址(Address)。</li><li>统一资源定位符(URL)适用于完整地描述Internet上网页和其他资源地址的一种标识方法。</li><li>简单地说，URL就是Web地址，俗称“网址”。</li></ul><h5 id="URL的组成"><a href="#URL的组成" class="headerlink" title="URL的组成"></a>URL的组成</h5><ul><li><p>URL是唯一能够识别Internet上具体的计算机、目录或文件位置的命名约定。</p></li><li><p>以这样一个URL:<a href="http://localhost:8080/FirstWeb/index.jsp%E4%B8%BA%E4%BE%8B%E6%9D%A5%E5%88%86%E6%9E%90URL%E7%9A%84%E7%BB%84%E6%88%90%E3%80%82">http://localhost:8080/FirstWeb/index.jsp为例来分析URL的组成。</a></p></li></ul><ol><li><p>==HTTP协议==：两台计算机可能因为系统不同、运行程序所用语言不通，要进行通信必须按照一个约定的规则进行，浏览器和服务器之间必须遵循共同的协议HTTP (HyperText Transfer Protocol ==超文本传输协议==)。HTTP是互联网上应用最为广泛的一种网络协议。</p></li><li><p>==服务器主机名或IP== :在这里localhost就是服务器的地址， 意思是本机上的服务器。当然也可以使用127.0.0.1或实际IP地址来代替。IP是网络之间互连的协议,是Internet Protocol的缩写,中文缩写为“==网协==”。</p></li><li><p>==端口号==： 端口号是网络程序和外部进行通信的通道，当从外部访问服务器时要通过指定端口号来访问。物理端口是指物理存在的端口；逻辑端口是指逻辑意义上用于区分服务的端口，如TCP/IP协议中的服务端口，端口号的范围从0到65535。</p></li><li><p>==路径==： 路径（包括请求的资源）由零个或多个 “/“ 符号隔开的字符串， 一般用来表示主机上的一个目录或文件地址等。 而请求的资源指请求的文件的名称，可以是 一个HTML页面，也可以是 一个Servlet、 图片等服务器提供的资源。以FirstWeb/index.jsp为例，news代表的是Web应用对外发布的根路径名，而index.jsp代表了一个存放到FirstWeb根目录下的一个文件。</p></li></ol><ul><li>==URL的组成:==<ul><li>协议</li><li>主机（包括端口号）</li><li>路径</li></ul></li></ul><h2 id="2、web服务器"><a href="#2、web服务器" class="headerlink" title="2、web服务器"></a>2、web服务器</h2><ul><li>Web服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，可以向浏览器等Web客户端提供文档，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。</li><li>下面介绍几种常用的WEB服务器。<ul><li>==WebLogic==<ul><li>BEA WebLogic Server 在使应用服务器成为企业应用架构的基础方面继续处于领先地位。</li><li>BEA WebLogic Server 为构建集成化的企业级应用提供了稳固的基础，</li><li>它们以 Internet 的==容量==和==速度==，在连网的企业之间共享信息、提交服务，实现协作自动化。</li></ul></li><li>==Apache==<ul><li>Apache仍然是世界上用的最多的Web服务器，市场占有率达60%左右。</li><li>世界上很多著名的网站都是Apache的产物，</li><li>它的成功之处主要在于它的==源代码开放==、有一支开放的开发队伍、支持跨平台的应用（可以运行在几乎所有的Unix、Windows、Linux系统平台上）以及它的==可移植性==等方面。</li></ul></li><li>==Tomcat==<ul><li>Tomcat是一个==开放源代码==、运行Servlet和JSP Web应用软件的基于Java的Web应用软件容器。</li><li>它是==Apache==软件基金会一个开源的==核心项目==，由Apache、Sun和其他一些公司及个人共同开发完成。</li><li>Tomcat Server是根据Servlet和JSP规范进行执行的，因此我们就可以说Tomcat Server也实行了Apache-Jakarta规范且比绝大多数商业应用软件服务器要好。</li></ul></li><li>==Jboss==<ul><li>是一个基于==J2EE==的==开放源代码==的应用服务器。</li><li>JBoss代码遵循LGPL许可，可以在任何商业应用中==免费==使用，而不用支付费用。</li><li>JBoss是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3的规范。</li><li>但JBoss核心服务==不包括支持Servlet/JSP的WEB容器==，一般与Tomcat或Jetty绑定使用。</li></ul></li></ul></li></ul><h3 id="2-1、技术讲解"><a href="#2-1、技术讲解" class="headerlink" title="2.1、技术讲解"></a>2.1、技术讲解</h3><p><strong>ASP:</strong></p><ul><li><p>微软：国内最早流行的就是ASP；</p></li><li><p>在HTML中嵌入了VB的脚本，  ASP + COM；</p></li><li><p>在ASP开发中，基本一个页面都有几千行的业务代码，页面极其换乱</p></li><li><p>维护成本高！</p></li><li><p>C# </p></li><li><p>IIS</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">            &lt;%</span><br><span class="line">            System.out.println(&quot;hello&quot;)</span><br><span class="line">            %&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>php：</strong></p><ul><li>PHP开发速度很快，功能很强大，跨平台，代码很简单 （70% , WP）</li><li>无法承载大访问量的情况（局限性）</li></ul><p>**JSP/Servlet : ** </p><p>B/S：浏览和服务器</p><p>C/S:  客户端和服务器</p><ul><li>sun公司主推的B/S架构</li><li>基于Java语言的 (所有的大公司，或者一些开源的组件，都是用Java写的)</li><li>可以承载三高问题带来的影响；</li><li>语法像ASP ， ASP–&gt;JSP , 加强市场强度；</li></ul><h3 id="2-2、web服务器"><a href="#2-2、web服务器" class="headerlink" title="2.2、web服务器"></a>2.2、web服务器</h3><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息；</p><p><strong>==IIS==</strong></p><p>微软的； ASP…,Windows中自带的</p><p>==<strong>Tomcat</strong>==</p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567824446428.png" alt="1567824446428"></p><p>面向百度编程；</p><p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且<strong>免费</strong>，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个Java初学web的人来说，它是最佳的选择</p><p>Tomcat 实际上运行JSP 页面和Servlet。Tomcat最新版本为<strong>9.0。</strong></p><p><strong>工作3-5年之后，可以尝试手写Tomcat服务器；</strong></p><p>下载tomcat：</p><ol><li>安装 or  解压</li><li>了解配置文件及目录结构</li><li>这个东西的作用</li></ol><h2 id="3、Tomcat"><a href="#3、Tomcat" class="headerlink" title="3、Tomcat"></a>3、Tomcat</h2><h3 id="3-1、-安装tomcat"><a href="#3-1、-安装tomcat" class="headerlink" title="3.1、 安装tomcat"></a>3.1、 安装tomcat</h3><p>tomcat官网：<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567825600842.png" alt="1567825600842"></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567825627138.png" alt="1567825627138"></p><h3 id="3-2、Tomcat启动和配置"><a href="#3-2、Tomcat启动和配置" class="headerlink" title="3.2、Tomcat启动和配置"></a>3.2、Tomcat启动和配置</h3><h4 id="Tomcat目录作用描述"><a href="#Tomcat目录作用描述" class="headerlink" title="Tomcat目录作用描述"></a>Tomcat目录作用描述</h4><table><thead><tr><th><strong>目录</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>==<strong>bin</strong>==</td><td>存放各平台下用于启动和停止Tomcat的脚本文件</td></tr><tr><td>==<strong>conf</strong>==</td><td>存放Tomcat各种配置文件，其中最重要的是server.xml和web.xml</td></tr><tr><td>==<strong>lib</strong>==</td><td>存放tomcat服务器所需的jar文件</td></tr><tr><td>==<strong>webapps</strong>==</td><td>Web应用的发布目录</td></tr><tr><td>==<strong>work</strong>==</td><td>Jsp运行时生成的Servlet文件</td></tr><tr><td>==<strong>logs</strong>==</td><td>存放tomcat的日志文件</td></tr><tr><td>==<strong>temp</strong>==</td><td>Tomcat运行时存放临时文件</td></tr></tbody></table><p>文件夹作用：</p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567825763180.png" alt="1567825763180"></p><p><strong>启动。关闭Tomcat</strong></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567825840657.png" alt="1567825840657"></p><p>访问测试：<a href="http://localhost:8080/">http://localhost:8080/</a></p><p>可能遇到的问题：</p><ol><li>Java环境变量没有配置</li><li>闪退问题：需要配置兼容性</li><li>乱码问题：配置文件中设置</li></ol><h3 id="3-3、配置"><a href="#3-3、配置" class="headerlink" title="3.3、配置"></a>3.3、配置</h3><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567825967256.png" alt="1567825967256"></p><p>可以配置启动的端口号</p><ul><li>tomcat的默认端口号为：8080</li><li>mysql：3306</li><li>http：80</li><li>https：443</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8081&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>可以配置主机的名称</p><ul><li>默认的主机名为：localhost-&gt;127.0.0.1</li><li>默认网站应用存放的位置为：webapps</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;www.qinjiang.com&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="高难度面试题"><a href="#高难度面试题" class="headerlink" title="高难度面试题"></a>高难度面试题</h4><p>请你谈谈网站是如何进行访问的！</p><ol><li><p>输入一个域名；回车</p></li><li><p>检查本机的 C:\Windows\System32\drivers\etc\hosts配置文件下有没有这个域名映射；</p><ol><li><p>有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>       www.qinjiang.com</span><br></pre></td></tr></table></figure></li><li><p>没有：去DNS服务器找，找到的话就返回，找不到就返回找不到；</p></li></ol><img src="/狂神web/1567827057913.png" alt="1567827057913" style="zoom: 67%;" /></li><li><p>可以配置一下环境变量（可选性）</p></li></ol><h3 id="3-4、发布一个web网站"><a href="#3-4、发布一个web网站" class="headerlink" title="3.4、发布一个web网站"></a>3.4、发布一个web网站</h3><p>不会就先模仿</p><ul><li>将自己写的网站，放到服务器(Tomcat)中指定的web应用的文件夹（webapps）下，就可以访问了</li></ul><p>网站应该有的结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">--webapps ：Tomcat服务器的web目录</span><br><span class="line">-ROOT</span><br><span class="line">-kuangstudy ：网站的目录名</span><br><span class="line">- WEB-INF</span><br><span class="line">-classes : java程序</span><br><span class="line">-lib：web应用所依赖的jar包</span><br><span class="line">-web.xml ：网站配置文件</span><br><span class="line">- index.html 默认的首页</span><br><span class="line">- <span class="keyword">static</span> </span><br><span class="line">            -css</span><br><span class="line">            -style.css</span><br><span class="line">            -js</span><br><span class="line">            -img</span><br><span class="line">         -.....</span><br></pre></td></tr></table></figure><p>HTTP协议 ： 面试</p><p>Maven：构建工具</p><ul><li>Maven安装包</li></ul><p>Servlet 入门</p><ul><li>HelloWorld！</li><li>Servlet配置</li><li>原理</li></ul><h2 id="4、Http"><a href="#4、Http" class="headerlink" title="4、Http"></a>4、Http</h2><h3 id="4-1、什么是HTTP"><a href="#4-1、什么是HTTP" class="headerlink" title="4.1、什么是HTTP"></a>4.1、什么是HTTP</h3><p>HTTP（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。</p><ul><li>文本：html，字符串，~ ….</li><li>超文本：图片，音乐，视频，定位，地图…….</li><li>80</li></ul><p>Https：安全的</p><ul><li>443</li></ul><h3 id="4-2、两个时代"><a href="#4-2、两个时代" class="headerlink" title="4.2、两个时代"></a>4.2、两个时代</h3><ul><li><p>http1.0</p><ul><li>HTTP/1.0：客户端可以与web服务器连接后，只能获得一个web资源，断开连接</li><li>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。</li></ul></li><li><p>http2.0</p><ul><li>HTTP/1.1：客户端可以与web服务器连接后，可以获得多个web资源。</li></ul></li><li><p>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p></li></ul><h3 id="4-3、Http请求"><a href="#4-3、Http请求" class="headerlink" title="4.3、Http请求"></a>4.3、Http请求</h3><h5 id="HTTP请求方式"><a href="#HTTP请求方式" class="headerlink" title="HTTP请求方式"></a>HTTP请求方式</h5><ul><li><p>HTTP请求是指从客户端到服务器端的请求消息。</p></li><li><p>包括：消息首行中，对资源的请求方法、资源的标识符及使用的协议。</p></li><li><p>根据HTTP标准，HTTP请求可以使用多种请求方法。 </p></li><li><p>==客户端—发请求（Request）—服务器==</p></li></ul><p>百度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Request URL:https:<span class="comment">//www.baidu.com/   请求地址</span></span><br><span class="line">Request Method:GET    get方法/post方法</span><br><span class="line">Status Code:<span class="number">200</span> OK    状态码：<span class="number">200</span></span><br><span class="line">Remote（远程） Address:<span class="number">14.215</span><span class="number">.177</span><span class="number">.39</span>:<span class="number">443</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Accept:text/html  </span><br><span class="line">Accept-Encoding:gzip, deflate, br</span><br><span class="line">Accept-Language:zh-CN,zh;q=<span class="number">0.9</span>    语言</span><br><span class="line">Cache-Control:max-age=<span class="number">0</span></span><br><span class="line">Connection:keep-alive</span><br></pre></td></tr></table></figure><h4 id="1、请求行"><a href="#1、请求行" class="headerlink" title="1、请求行"></a>1、请求行</h4><ul><li><p>请求行中的请求方式：GET</p></li><li><p>请求方式：<strong>Get，Post</strong>，HEAD,DELETE,PUT,TRACT…</p><ul><li><p>get：</p><ul><li>请求能够携带的参数比较少，大小==有限制==，会在浏览器的URL地址栏显示数据内容，==不安全，但高效==</li><li>GET是最简单的HTTP方法，</li><li>其主要任务就是要求服务器获得一个资源并把资源发回来，</li><li>请求参数在请求行中用？号和URL区别开，所以所带的参数有限，显示在浏览器的地址栏中。</li><li>GET请求网址<a href="http://localhost:8080/FirstWeb/test?userName=Jack&amp;age=20">http://localhost:8080/FirstWeb/test?userName=Jack&amp;age=20</a></li><li>GET 请求可被缓存</li><li>GET 请求有长度限制</li></ul></li><li><p>post：</p><ul><li>请求能够携带的参数没有限制，大小==没有限制==，不会在浏览器的URL地址栏显示数据内容，==安全，但不高效。==</li><li>POST是一种更强大的请求，在请求的同时向服务器发送一些==表单==数据还有==二进制==数据，</li><li>请求参数放在请求体中，可以传输比较大的请求参数，例如图片、视频等，</li><li>浏览器的地址栏中不显示参数信息。</li><li>POST请求网址 <a href="http://localhost:8080/FirstWeb/test">http://localhost:8080/FirstWeb/test </a></li><li>POST 请求不会被缓存</li><li>POST 请求对数据长度没有要求</li></ul></li></ul></li></ul><h4 id="2、消息头"><a href="#2、消息头" class="headerlink" title="2、消息头"></a>2、消息头</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Accept：告诉浏览器，它所支持的数据类型</span><br><span class="line">Accept-Encoding：支持哪种编码格式  GBK   UTF-<span class="number">8</span>   GB2312  ISO8859-<span class="number">1</span></span><br><span class="line">Accept-Language：告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control：缓存控制</span><br><span class="line">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">HOST：主机..../.</span><br></pre></td></tr></table></figure><h3 id="4-4、Http响应"><a href="#4-4、Http响应" class="headerlink" title="4.4、Http响应"></a>4.4、Http响应</h3><ul><li>服务器—响应—–客户端</li></ul><p>百度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control:<span class="keyword">private</span>    缓存控制Connection:Keep-Alive    连接Content-Encoding:gzip    编码Content-Type:text/html   类型</span><br></pre></td></tr></table></figure><h4 id="1-响应体"><a href="#1-响应体" class="headerlink" title="1.响应体"></a>1.响应体</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept：告诉浏览器，它所支持的数据类型Accept-Encoding：支持哪种编码格式  GBK   UTF-<span class="number">8</span>   GB2312  ISO8859-1Accept-Language：告诉浏览器，它的语言环境Cache-Control：缓存控制Connection：告诉浏览器，请求完成是断开还是保持连接HOST：主机..../.Refresh：告诉客户端，多久刷新一次；Location：让网页重新定位；</span><br></pre></td></tr></table></figure><h4 id="2-响应状态码"><a href="#2-响应状态码" class="headerlink" title="2.响应状态码"></a>2.响应状态码</h4><p>200：请求响应成功  200</p><p>3xx：请求重定向 </p><ul><li>重定向：你重新到我给你新位置去；</li></ul><p>4xx：找不到资源   404</p><ul><li>资源不存在；</li></ul><p>5xx：服务器代码错误   500       502:网关错误</p><h4 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h4><p>当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</p><h2 id="5、Maven"><a href="#5、Maven" class="headerlink" title="5、Maven"></a>5、Maven</h2><p><strong>我为什么要学习这个技术？</strong></p><ol><li><p>在Javaweb开发中，需要使用大量的jar包，我们手动去导入；</p></li><li><p>如何能够让一个东西自动帮我导入和配置这个jar包。</p><p>由此，Maven诞生了！</p></li></ol><h3 id="5-1-Maven项目架构管理工具"><a href="#5-1-Maven项目架构管理工具" class="headerlink" title="5.1 Maven项目架构管理工具"></a>5.1 Maven项目架构管理工具</h3><p>我们目前用来就是方便导入jar包的！</p><p>Maven的核心思想：<strong>约定大于配置</strong></p><ul><li>有约束，不要去违反。</li></ul><p>Maven会规定好你该如何去编写我们的Java代码，必须要按照这个规范来；</p><h3 id="5-2-下载安装Maven"><a href="#5-2-下载安装Maven" class="headerlink" title="5.2 下载安装Maven"></a>5.2 下载安装Maven</h3><p>官网;<a href="https://maven.apache.org/">https://maven.apache.org/</a></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567842350606.png" alt="1567842350606"></p><p>下载完成后，解压即可；</p><p>小狂神友情建议：电脑上的所有环境都放在一个文件夹下，方便管理；</p><h3 id="5-3-配置环境变量"><a href="#5-3-配置环境变量" class="headerlink" title="5.3 配置环境变量"></a>5.3 配置环境变量</h3><p>在我们的系统环境变量中</p><p>配置如下配置：</p><ul><li>M2_HOME     maven目录下的bin目录</li><li>MAVEN_HOME      maven的目录</li><li>在系统的path中配置  %MAVEN_HOME%\bin</li></ul><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567842882993.png" alt="1567842882993"></p><p>测试Maven是否安装成功，保证必须配置完毕！</p><h3 id="5-4-阿里云镜像"><a href="#5-4-阿里云镜像" class="headerlink" title="5.4 阿里云镜像"></a>5.4 阿里云镜像</h3><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567844609399.png" alt="1567844609399"></p><ul><li>镜像：mirrors<ul><li>作用：加速我们的下载</li></ul></li><li>国内建议使用阿里云的镜像</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span>    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span>      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span>      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span> <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-5-本地仓库"><a href="#5-5-本地仓库" class="headerlink" title="5.5 本地仓库"></a>5.5 本地仓库</h3><p>在本地的仓库，远程仓库；</p><p><strong>建立一个本地仓库：</strong>localRepository</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\Environment\apache-maven-3.6.2\maven-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-6、在IDEA中使用Maven"><a href="#5-6、在IDEA中使用Maven" class="headerlink" title="5.6、在IDEA中使用Maven"></a>5.6、在IDEA中使用Maven</h3><ol><li><p>启动IDEA</p></li><li><p>创建一个MavenWeb项目</p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567844785602.png" alt="1567844785602"></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567844841172.png" alt="1567844841172"></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567844917185.png" alt="1567844917185"></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567844956177.png" alt="1567844956177"></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567845029864.png" alt="1567845029864"></p></li><li><p>等待项目初始化完毕</p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567845105970.png" alt="1567845105970"></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567845137978.png" alt="1567845137978"></p></li><li><p>观察maven仓库中多了什么东西？</p></li><li><p>IDEA中的Maven设置</p><p>注意：IDEA项目创建成功后，看一眼Maven的配置</p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567845341956.png" alt="1567845341956"></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567845413672.png" alt="1567845413672"></p></li><li><p>到这里，Maven在IDEA中的配置和使用就OK了!</p></li></ol><h3 id="5-7、创建一个普通的Maven项目"><a href="#5-7、创建一个普通的Maven项目" class="headerlink" title="5.7、创建一个普通的Maven项目"></a>5.7、创建一个普通的Maven项目</h3><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567845557744.png" alt="1567845557744"></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567845717377.png" alt="1567845717377"></p><p>这个只有在Web应用下才会有！</p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567845782034.png" alt="1567845782034"></p><h3 id="5-8-标记文件夹功能"><a href="#5-8-标记文件夹功能" class="headerlink" title="5.8 标记文件夹功能"></a>5.8 标记文件夹功能</h3><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567845910728.png" alt="1567845910728"></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567845957139.png" alt="1567845957139"></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567846034906.png" alt="1567846034906"></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567846073511.png" alt="1567846073511"></p><h3 id="5-9-在-IDEA中配置Tomcat"><a href="#5-9-在-IDEA中配置Tomcat" class="headerlink" title="5.9 在 IDEA中配置Tomcat"></a>5.9 在 IDEA中配置Tomcat</h3><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567846140348.png" alt="1567846140348"></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567846179573.png" alt="1567846179573"></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567846234175.png" alt="1567846234175"></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567846369751.png" alt="1567846369751"></p><p>解决警告问题</p><p>必须要的配置：<strong>为什么会有这个问题：我们访问一个网站，需要指定一个文件夹名字；</strong></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567846421963.png" alt="1567846421963"></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567846546465.png" alt="1567846546465"></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567846559111.png" alt="1567846559111"></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567846640372.png" alt="1567846640372"></p><h3 id="5-10-pom文件"><a href="#5-10-pom文件" class="headerlink" title="5.10 pom文件"></a>5.10 pom文件</h3><p>pom.xml 是Maven的核心配置文件</p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567846784849.png" alt="1567846784849"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Maven版本和头文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--这里就是我们刚才配置的GAV--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kuang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Package：项目的打包方式</span></span><br><span class="line"><span class="comment">  jar：java应用</span></span><br><span class="line"><span class="comment">  war：JavaWeb应用</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--配置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目的默认构建编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--编码版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--项目依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--具体依赖的jar包配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--项目构建用的东西--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>javaweb-01-maven<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567847410771.png" alt="1567847410771"></p><p>maven由于他的约定大于配置，我们之后可以能遇到我们写的配置文件，无法被导出或者生效的问题，解决方案：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;</span><span class="tag">&lt;<span class="name">build</span>&gt;</span>    <span class="tag">&lt;<span class="name">resources</span>&gt;</span>        <span class="tag">&lt;<span class="name">resource</span>&gt;</span>            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span>            <span class="tag">&lt;<span class="name">includes</span>&gt;</span>                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span>                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span>            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span>            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span>        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span>        <span class="tag">&lt;<span class="name">resource</span>&gt;</span>            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span>            <span class="tag">&lt;<span class="name">includes</span>&gt;</span>                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span>                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span>            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span>            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span>        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span>    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-12-IDEA操作"><a href="#5-12-IDEA操作" class="headerlink" title="5.12 IDEA操作"></a>5.12 IDEA操作</h3><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567847630808.png" alt="1567847630808"></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567847662429.png" alt="1567847662429"></p><h3 id="5-13-解决遇到的问题"><a href="#5-13-解决遇到的问题" class="headerlink" title="5.13 解决遇到的问题"></a>5.13 解决遇到的问题</h3><ol><li><p>Maven 3.6.2</p><p>解决方法：降级为3.6.1</p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567904721301.png" alt="1567904721301"></p></li><li><p>Tomcat闪退</p></li><li><p>IDEA中每次都要重复配置Maven<br>在IDEA中的全局默认配置中去配置</p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567905247201.png" alt="1567905247201"></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567905291002.png" alt="1567905291002"></p></li><li><p>Maven项目中Tomcat无法配置</p></li><li><p>maven默认web项目中的web.xml版本问题</p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567905537026.png" alt="1567905537026"></p></li><li><p>替换为webapp4.0版本和tomcat一致</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span>         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span>         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Maven仓库的使用</p><p>地址：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567905870750.png" alt="1567905870750"></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567905982979.png" alt="1567905982979"></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567906017448.png" alt="1567906017448"></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567906039469.png" alt="1567906039469"></p></li></ol><h2 id="6、Servlet"><a href="#6、Servlet" class="headerlink" title="6、Servlet"></a>6、Servlet</h2><h3 id="6-1、Servlet简介"><a href="#6-1、Servlet简介" class="headerlink" title="6.1、Servlet简介"></a>6.1、Servlet简介</h3><ul><li><p>Servlet就是sun公司开发动态web的一门技术</p></li><li><p>Sun在这些API中提供一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤：</p><ul><li>编写一个类，实现Servlet接口</li><li>把开发好的Java类部署到web服务器中。</li></ul></li><li><p><strong>把实现了Servlet接口的Java程序叫做，Servlet</strong></p></li><li></li></ul><h3 id="6-2、HelloServlet"><a href="#6-2、HelloServlet" class="headerlink" title="6.2、HelloServlet"></a>6.2、HelloServlet</h3><h4 id="1-Servlet入门"><a href="#1-Servlet入门" class="headerlink" title="1 Servlet入门"></a>1 Servlet入门</h4><ul><li><p>Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器，用Java编写的服务器端程序，具有独立于平台和协议的特性，主要功能在于交互式地浏览和生成数据，生成动态Web内容。</p></li><li><p>狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。Servlet运行于支持Java的应用服务器中。</p></li><li><p>Servlet 的主要功能在于交互式地浏览和修改数据，生成动态 Web 内容。</p></li><li><p>这个==过程==为：</p><p>1、客户端发送请求至服务器端；</p><p>2、服务器将请求信息发送至 Servlet；</p><p>3、Servlet 生成响应内容并将其传给服务器。响应内容动态生成，通常取决于客户端的请求；</p><p>4、服务器将响应返回给客户端。</p></li><li><p>Serlvet接口Sun公司有两个默认的实现类：HttpServlet，GenericServlet</p></li><li><p>配置web.xml</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册一个Servlet --&gt;</span><span class="tag">&lt;<span class="name">servlet</span>&gt;</span>   <span class="comment">&lt;!-- Servlet标识名 --&gt;</span>   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>   <span class="comment">&lt;!-- Servlet类的全限定名 --&gt;</span>   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.aaa.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span><span class="comment">&lt;!-- 配置Servlet映射信息 --&gt;</span><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>   <span class="comment">&lt;!-- Servlet标识名和上面一致 --&gt;</span>   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>   <span class="comment">&lt;!-- 访问路径 --&gt;</span>   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>构建一个普通的Maven项目，删掉里面的src目录，以后我们的学习就在这个项目里面建立Moudel；这个空的工程就是Maven主工程；</p></li><li><p>关于Maven父子工程的理解：</p><p>父项目中会有</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span>        <span class="tag">&lt;<span class="name">module</span>&gt;</span>servlet-01<span class="tag">&lt;/<span class="name">module</span>&gt;</span>    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子项目会有</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span>        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-02-servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kuang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父项目中的java子项目可以直接使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">son extends father</span><br></pre></td></tr></table></figure></li><li><p>Maven环境优化</p><ol><li>修改web.xml为最新的</li><li>将maven的结构搭建完整</li></ol></li><li><p>编写一个Servlet程序</p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567911804700.png" alt="1567911804700"></p><ol><li><p>编写一个普通类</p></li><li><p>实现Servlet接口，这里我们直接继承HttpServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;        <span class="comment">//由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样；    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        //ServletOutputStream outputStream = resp.getOutputStream();        PrintWriter writer = resp.getWriter(); //响应流        writer.print(&quot;Hello,Serlvet&quot;);    &#125;    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        doGet(req, resp);    &#125;&#125;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>编写Servlet的映射</p><p>为什么需要映射：我们写的是JAVA程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要再web服务中注册我们写的Servlet，还需给他一个浏览器能够访问的路径；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册Servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Servlet的请求路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure></li><li><p>配置Tomcat</p><p>注意：配置项目发布的路径就可以了</p></li><li><p>启动测试，OK！</p></li></ol><h4 id="2-ServletAPI层次结构"><a href="#2-ServletAPI层次结构" class="headerlink" title="2 ServletAPI层次结构"></a>2 ServletAPI层次结构</h4><p><strong>核心技能部分</strong></p><pre><code> ![222](/狂神web//clip_image001.png)   ![Serv et  Servi  Serv IetCmf i g  -se rServIe &#39;Cca rex : O  HttpServ1et  service Cin EttpServletReque;t. ia  et (/狂神web//clip_image001-1583302830910.jpg) ](file:///C:/Users/YANKUN~1/AppData/Local/Temp/msohtmlclip1/01/clip_image001.jpg)  </code></pre><p><strong>Servlet原理</strong></p><h5 id="Servlet接口"><a href="#Servlet接口" class="headerlink" title="Servlet接口"></a>Servlet接口</h5><ul><li>Servlet接口定义了所有 Servlet需要实现的方法， 包括==init()，service()，destroy ()==方法， 以及getServletConfig()方法（返回ServletConfig对象，通过该对象可以得到Servlet的配置信息）。</li></ul><h5 id="ServletConfig接口"><a href="#ServletConfig接口" class="headerlink" title="ServletConfig接口"></a>ServletConfig接口</h5><ul><li><p>在Servlet初始化时，Servlet容器会使用ServletConfig对象向该Servlet传递信息。</p></li><li><p><strong>ServletConfig的常用方法</strong></p></li></ul><table><thead><tr><th><strong>方法</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td>String  getInitParameter(String name)</td><td>获取web.xml中名称为name的初始化参数值</td></tr><tr><td>ServletContext  getServletContext()</td><td>返回Servlet上下文对象</td></tr></tbody></table><h5 id="GenericServlet类"><a href="#GenericServlet类" class="headerlink" title="GenericServlet类"></a>GenericServlet类</h5><ul><li><p>抽象类 GenericServlet实现了Servlet接口和ServletConfig接口，简单实现除 service()方法外的其它方法，它定义了通用的，不依赖于协议的Servlet规范。 GenericServlet类的常用方法如表2.2.3所示。</p></li><li><p><strong>GenericServlet类的常用方法</strong></p></li></ul><table><thead><tr><th><strong>方法</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td>void  init(ServletConfig config)</td><td>初始化方法</td></tr><tr><td>String  getInitParameter(String name)</td><td>返回名称为name的初始化参数值</td></tr><tr><td>ServletContext  getServletCotext()</td><td>返回ServletContext对象</td></tr></tbody></table><h5 id="HttpServlet类"><a href="#HttpServlet类" class="headerlink" title="HttpServlet类"></a>HttpServlet类</h5><ul><li><p>抽象类HttpServlet继承自GenericServlet类，专门用来处理HTTP请求，并提供了与HTTP相关的实现方法。根据HTTP协议的特点， HttpServlet分别提供了处理请求的相应方法，如表2.2.4所示。</p></li><li><p><strong>HttpServlet类的常用方法</strong></p></li></ul><table><thead><tr><th><strong>方法</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td>void ==service==  (ServletRequest reg, ServletResponse res)</td><td>接收客户端请求，然后把请求分发给相应的doXX方法，如果是GET请求就分发给doGet()方法，如果是POST请求就分发给doPost()方法。</td></tr><tr><td>void  ==doGet==(HttpServletRequest reg, HttpServletResponse res)</td><td>处理GET请求</td></tr><tr><td>void  ==doPost==(HttpServletRequest reg, HttpServletResponse res)</td><td>处理POST请求</td></tr></tbody></table><ul><li><p>如果要自己要编写Servlet程序， 都是继承HttpServlet类， 然后重写其中的某些方法， 使用原则如下：</p><p>(1) 重写doGet方法来处理GET请求。</p><p>(2) 重写doPost方法来处理POST请求。</p><p>(3) 如果需要在Servlet实例化中进行初始化工作，可以重写init()方法。</p><p>(4) 如果需要在 Servlet被释放时进行资源清理的工作，可以重写destroy()方法。</p></li><li><p><strong>提示：</strong></p><ul><li>HTTP 请求主要就 get 和 post两种， 为了让 servlet两种请求都能处理，一般doGet ()和doPost()方法都重写，而处理代码只写在一个方法中，另外一个方法调用即可。</li></ul></li></ul><h5 id="HttpServletRequest接口"><a href="#HttpServletRequest接口" class="headerlink" title="HttpServletRequest接口"></a>HttpServletRequest接口</h5><ul><li><p>HttpServletRequest接口继承自ServletRequest接口，它代表客户的请求。</p></li><li><p>容器在调用Servlet的doGet()和doPost()方法时，会创建一个HttpServletRequest接口的实例，作为参数传给doGet()或doPost()方法。</p></li><li><p><strong>HttpServleRequest 接口的常用方法</strong></p></li></ul><table><thead><tr><th><strong>方法</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td>String  ==getParameter==(String name)</td><td>根据页面表单元素名称获取页面提交数据</td></tr><tr><td>string[]  ==getPararneterValues== (String name)</td><td>获取页面有重名表单元素（比如复选框）的值</td></tr><tr><td>void  ==setCharacterEncoding== (String name)</td><td>设置请求的编码，在调用getParameter()方法  前进行设置，此方法可以解决提供中文数据乱码问题。</td></tr><tr><td>void  ==setAttribute==(String name,Object value)</td><td>设置请求的参数</td></tr><tr><td>==getRequestDispatcher==(String  path)</td><td>返回一个RequestDispatcher对象，该对象的  forward方法可以把请求转发到指定资源</td></tr></tbody></table><h5 id="HttpServletResponse接口"><a href="#HttpServletResponse接口" class="headerlink" title="HttpServletResponse接口"></a>HttpServletResponse接口</h5><ul><li><p>HttpServletResponse接口继承自ServletResponse接口，它代表向客户端发送的响应。</p></li><li><p>容器在调用Servlet的doGet()和doPost()方法时，同样会创建一个 HttpServletResponse接口的实例，作为参数传给doGet()或doPost()方法。</p></li><li><p>Servlet利用HttpServletRequest对象获取客户端的请求数据，经过处理后由 HttpServletResponse对象发送响应数据。</p></li><li><p><strong>HttpServleRequest 接口的常用方法</strong></p></li></ul><table><thead><tr><th><strong>方法</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td>setContentType(“text/html;charset=utf-8”);</td><td>设置响应的内容类型</td></tr><tr><td>PrintWriter  response.getWriter()</td><td>获得响应的输出流</td></tr><tr><td>response.sendRedirect(redirect)</td><td>重定向到指定的网址</td></tr></tbody></table><h5 id="转发与重定向"><a href="#转发与重定向" class="headerlink" title="转发与重定向"></a>转发与重定向</h5><p><strong>1 转发</strong></p><ul><li><p>转发属于<strong>服务器跳转</strong>。当使用转发时，JSP容器将使用一个内部的方法来调用目标页面，新的页面继续处理同一个请求，而浏览器将不会知道这个过程。</p></li><li><p>整个过程都是在一个Web容器内完成，因而可以共享request范围内的数据。</p></li><li><p>而对应到客户端，不管服务器内部如何处理，作为浏览器都只是提交了一个请求，因而客户端的URL地址不会发生改变。</p></li><li><p>转发的作用：在多个页面交互过程中实现请求数据的共享。</p></li><li><p>实现转发分为两个步骤：</p><p>1、 需要先获取RequestDispatcher实例</p><p>dispatcher=request.getRequestDispatcher(“servlet2”);</p><p>2、 调用forward方法</p><p>dispatcher.forward(request, response);</p></li></ul><p><strong>2 重定向</strong></p><ul><li><p>重定向是<strong>客户端跳转</strong>。</p></li><li><p>重定向方式的含义是第一个页面通知浏览器发送一个新的页面请求。</p></li><li><p>因为，当你使用重定向时，浏览器中所显示的URL会变成新页面的URL。</p></li><li><p>同时，由于重定向方式产生了一个新的请求，所以经过一次重定向后，request内的对象将无法使用。</p></li><li><p>重定向需要使用HttpServletResponse对象的==sendRedirect==()方法实现</p></li></ul><p><strong>3 转发与重定向的区别</strong></p><ul><li><p>转发是继续传递、处理==同一个请求==，在==服务器端==进行；</p><ul><li>重定向在==客户端==运行，会产生==新请求==。</li></ul></li><li><p>转发时浏览器地址栏中显示的是==初次发出请求的地址==；</p><ul><li>重定向时浏览器地址栏中==不再是初次==请求的地址，而是==最后响应==的那个地址。</li></ul></li><li><p>转发时最终的servlet中，request对象和中转的那个request对象是==同一个==；</p><ul><li>重定向最终的servlet中，request对象和中转的那个request对象==不是同一个==。</li></ul></li><li><p>转发只能转发给==当前web应用==的资源； </p><ul><li>重定可以重定向到==任何==资源。</li></ul></li></ul><h5 id="Servlet应用"><a href="#Servlet应用" class="headerlink" title="Servlet应用"></a>Servlet应用</h5><p><strong>使用Servlet处理客户端请求</strong> </p><p>前面学习了Servlet的主要作用就是接受客户端请求并返回响应，接下来就通过一个用户登陆功能示例， 学习使用Servlet处理客户端请求,</p><p><strong>获得Servlet初始化参数</strong></p><p>通过Servlet的doGet()和doPost()，可以处理客户端请求并获得表单提交的数据。当然我们也可以对Servlet进行初始化设置，在Servlet加载时就对参数进行初始化。设置初 始化参数首先要在web.xml中的<servlet>元素中使用<init-param>元素进行设置，</p><p><strong>Servlet访问数据库</strong></p><p>进一步完善登录代码，需要连接数据库进行用户名和密码的校验，我们需要建立BaseDao(之前所学)、实体类、Dao接口和Dao实现类。</p><h5 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="==Servlet的生命周期=="></a>==Servlet的生命周期==</h5><p>Servlet部署在容器中，其生命周期由容器来管理，可以概括为以下5个阶段：</p><ol><li>加载</li><li>实例化</li><li>初始化</li><li>服务</li><li>销毁</li></ol><h3 id="6-3、Servlet原理"><a href="#6-3、Servlet原理" class="headerlink" title="6.3、Servlet原理"></a>6.3、Servlet原理</h3><p>Servlet是由Web服务器调用，web服务器在收到浏览器请求之后，会：</p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567913793252.png" alt="1567913793252"></p><h3 id="6-4、Mapping问题"><a href="#6-4、Mapping问题" class="headerlink" title="6.4、Mapping问题"></a>6.4、Mapping问题</h3><ol><li><p>一个Servlet可以指定一个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>一个Servlet可以指定多个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello3<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello4<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello5<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>一个Servlet可以指定通用映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>默认请求路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--默认请求路径--&gt;</span>    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>指定一些后缀或者前缀等等….</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以自定义后缀实现请求映射    注意点，*前面不能加项目映射的路径    hello/sajdlkajda.qinjiang    --&gt;</span><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.qinjiang<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>优先级问题<br>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--404--&gt;</span><span class="tag">&lt;<span class="name">servlet</span>&gt;</span>    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.ErrorServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="6-5、ServletContext"><a href="#6-5、ServletContext" class="headerlink" title="6.5、ServletContext"></a>6.5、ServletContext</h3><p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用；</p><h4 id="1、共享数据"><a href="#1、共享数据" class="headerlink" title="1、共享数据"></a>1、共享数据</h4><p>我在这个Servlet中保存的数据，可以在另外一个servlet中拿到；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;                <span class="comment">//this.getInitParameter()   初始化参数        //this.getServletConfig()   Servlet配置        //this.getServletContext()  Servlet上下文        ServletContext context = this.getServletContext();        String username = &quot;秦疆&quot;; //数据        context.setAttribute(&quot;username&quot;,username); //将一个数据保存在了ServletContext中，名字为：username 。值 username    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;        ServletContext context = <span class="keyword">this</span>.getServletContext();        String username = (String) context.getAttribute(<span class="string">&quot;username&quot;</span>);        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);        resp.getWriter().print(<span class="string">&quot;名字&quot;</span>+username);    &#125;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;        doGet(req, resp);    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span>        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span>        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.GetServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/getc<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试访问结果；</p><h4 id="2、获取初始化参数"><a href="#2、获取初始化参数" class="headerlink" title="2、获取初始化参数"></a>2、获取初始化参数</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置一些web应用初始化参数--&gt;</span>    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span>        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;    ServletContext context = <span class="keyword">this</span>.getServletContext();    String url = context.getInitParameter(<span class="string">&quot;url&quot;</span>);    resp.getWriter().print(url);&#125;</span><br></pre></td></tr></table></figure><h4 id="3、请求转发"><a href="#3、请求转发" class="headerlink" title="3、请求转发"></a>3、请求转发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Overrideprotected</span> <span class="function"><span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;    ServletContext context = <span class="keyword">this</span>.getServletContext();    System.out.println(<span class="string">&quot;进入了ServletDemo04&quot;</span>);    <span class="comment">//RequestDispatcher requestDispatcher = context.getRequestDispatcher(&quot;/gp&quot;); //转发的请求路径    //requestDispatcher.forward(req,resp); //调用forward实现请求转发；    context.getRequestDispatcher(&quot;/gp&quot;).forward(req,resp);&#125;</span></span><br></pre></td></tr></table></figure><img src="/狂神web/1567924457532.png" alt="1567924457532" style="zoom: 80%;" /><h4 id="4、读取资源文件"><a href="#4、读取资源文件" class="headerlink" title="4、读取资源文件"></a>4、读取资源文件</h4><p>Properties</p><ul><li>在java目录下新建properties</li><li>在resources目录下新建properties</li></ul><p>发现：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath:</p><p>思路：需要一个文件流；</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root12312password=zxczxczxc</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo05</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;        InputStream is = <span class="keyword">this</span>.getServletContext().getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/com/kuang/servlet/aa.properties&quot;</span>);        Properties prop = <span class="keyword">new</span> Properties();        prop.load(is);        String user = prop.getProperty(<span class="string">&quot;username&quot;</span>);        String pwd = prop.getProperty(<span class="string">&quot;password&quot;</span>);        resp.getWriter().print(user+<span class="string">&quot;:&quot;</span>+pwd);    &#125;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;        doGet(req, resp);    &#125;&#125;</span><br></pre></td></tr></table></figure><p>访问测试即可ok；</p><h3 id="6-6、HttpServletResponse"><a href="#6-6、HttpServletResponse" class="headerlink" title="6.6、HttpServletResponse"></a>6.6、HttpServletResponse</h3><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；</p><ul><li>如果要获取客户端请求过来的参数：找HttpServletRequest</li><li>如果要给客户端响应一些信息：找HttpServletResponse</li></ul><h4 id="1、简单分类"><a href="#1、简单分类" class="headerlink" title="1、简单分类"></a>1、简单分类</h4><p>负责向浏览器发送数据的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;<span class="function">PrintWriter <span class="title">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure><p>负责向浏览器发送响应头的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCharacterEncoding</span><span class="params">(String var1)</span></span>;    <span class="function"><span class="keyword">void</span> <span class="title">setContentLength</span><span class="params">(<span class="keyword">int</span> var1)</span></span>;    <span class="function"><span class="keyword">void</span> <span class="title">setContentLengthLong</span><span class="params">(<span class="keyword">long</span> var1)</span></span>;    <span class="function"><span class="keyword">void</span> <span class="title">setContentType</span><span class="params">(String var1)</span></span>;    <span class="function"><span class="keyword">void</span> <span class="title">setDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;    <span class="function"><span class="keyword">void</span> <span class="title">addDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;    <span class="function"><span class="keyword">void</span> <span class="title">setHeader</span><span class="params">(String var1, String var2)</span></span>;    <span class="function"><span class="keyword">void</span> <span class="title">addHeader</span><span class="params">(String var1, String var2)</span></span>;    <span class="function"><span class="keyword">void</span> <span class="title">setIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;    <span class="function"><span class="keyword">void</span> <span class="title">addIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br></pre></td></tr></table></figure><p>响应的状态码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> SC_CONTINUE = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SWITCHING_PROTOCOLS = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">int</span> SC_OK = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> SC_CREATED = <span class="number">201</span>;</span><br><span class="line"><span class="keyword">int</span> SC_ACCEPTED = <span class="number">202</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NON_AUTHORITATIVE_INFORMATION = <span class="number">203</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NO_CONTENT = <span class="number">204</span>;</span><br><span class="line"><span class="keyword">int</span> SC_RESET_CONTENT = <span class="number">205</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PARTIAL_CONTENT = <span class="number">206</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MULTIPLE_CHOICES = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MOVED_PERMANENTLY = <span class="number">301</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MOVED_TEMPORARILY = <span class="number">302</span>;</span><br><span class="line"><span class="keyword">int</span> SC_FOUND = <span class="number">302</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SEE_OTHER = <span class="number">303</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_MODIFIED = <span class="number">304</span>;</span><br><span class="line"><span class="keyword">int</span> SC_USE_PROXY = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">int</span> SC_TEMPORARY_REDIRECT = <span class="number">307</span>;</span><br><span class="line"><span class="keyword">int</span> SC_BAD_REQUEST = <span class="number">400</span>;</span><br><span class="line"><span class="keyword">int</span> SC_UNAUTHORIZED = <span class="number">401</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PAYMENT_REQUIRED = <span class="number">402</span>;</span><br><span class="line"><span class="keyword">int</span> SC_FORBIDDEN = <span class="number">403</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_FOUND = <span class="number">404</span>;</span><br><span class="line"><span class="keyword">int</span> SC_METHOD_NOT_ALLOWED = <span class="number">405</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_ACCEPTABLE = <span class="number">406</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PROXY_AUTHENTICATION_REQUIRED = <span class="number">407</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_TIMEOUT = <span class="number">408</span>;</span><br><span class="line"><span class="keyword">int</span> SC_CONFLICT = <span class="number">409</span>;</span><br><span class="line"><span class="keyword">int</span> SC_GONE = <span class="number">410</span>;</span><br><span class="line"><span class="keyword">int</span> SC_LENGTH_REQUIRED = <span class="number">411</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PRECONDITION_FAILED = <span class="number">412</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_ENTITY_TOO_LARGE = <span class="number">413</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_URI_TOO_LONG = <span class="number">414</span>;</span><br><span class="line"><span class="keyword">int</span> SC_UNSUPPORTED_MEDIA_TYPE = <span class="number">415</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE = <span class="number">416</span>;</span><br><span class="line"><span class="keyword">int</span> SC_EXPECTATION_FAILED = <span class="number">417</span>;</span><br><span class="line"><span class="keyword">int</span> SC_INTERNAL_SERVER_ERROR = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_IMPLEMENTED = <span class="number">501</span>;</span><br><span class="line"><span class="keyword">int</span> SC_BAD_GATEWAY = <span class="number">502</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SERVICE_UNAVAILABLE = <span class="number">503</span>;</span><br><span class="line"><span class="keyword">int</span> SC_GATEWAY_TIMEOUT = <span class="number">504</span>;</span><br><span class="line"><span class="keyword">int</span> SC_HTTP_VERSION_NOT_SUPPORTED = <span class="number">505</span>;</span><br></pre></td></tr></table></figure><h4 id="2、下载文件"><a href="#2、下载文件" class="headerlink" title="2、下载文件"></a>2、下载文件</h4><ol><li>向浏览器输出消息 （一直在讲，就不说了）</li><li>下载文件<ol><li>要获取下载文件的路径</li><li>下载的文件名是啥？</li><li>设置想办法让浏览器能够支持下载我们需要的东西</li><li>获取下载文件的输入流</li><li>创建缓冲区</li><li>获取OutputStream对象</li><li>将FileOutputStream流写入到buffer缓冲区</li><li>使用OutputStream将缓冲区中的数据输出到客户端！</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 要获取下载文件的路径</span></span><br><span class="line">    String realPath = <span class="string">&quot;F:\\班级管理\\西开【19525】\\2、代码\\JavaWeb\\javaweb-02-servlet\\response\\target\\classes\\秦疆.png&quot;</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;下载文件的路径：&quot;</span>+realPath);</span><br><span class="line">    <span class="comment">// 2. 下载的文件名是啥？</span></span><br><span class="line">    String fileName = realPath.substring(realPath.lastIndexOf(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 3. 设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件名URLEncoder.encode编码，否则有可能乱码</span></span><br><span class="line">    resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+URLEncoder.encode(fileName,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    <span class="comment">// 4. 获取下载文件的输入流</span></span><br><span class="line">    FileInputStream in = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">    <span class="comment">// 5. 创建缓冲区</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="comment">// 6. 获取OutputStream对象</span></span><br><span class="line">    ServletOutputStream out = resp.getOutputStream();</span><br><span class="line">    <span class="comment">// 7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端！</span></span><br><span class="line">    <span class="keyword">while</span> ((len=in.read(buffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        out.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、验证码功能"><a href="#3、验证码功能" class="headerlink" title="3、验证码功能"></a>3、验证码功能</h4><p>验证怎么来的？</p><ul><li>前端实现</li><li>后端实现，需要用到 Java 的图片类，生产一个图片</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.servlet;<span class="keyword">import</span> javax.imageio.ImageIO;<span class="keyword">import</span> javax.servlet.ServletException;<span class="keyword">import</span> javax.servlet.http.HttpServlet;<span class="keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="keyword">import</span> java.awt.*;<span class="keyword">import</span> java.awt.image.BufferedImage;<span class="keyword">import</span> java.io.IOException;<span class="keyword">import</span> java.util.Random;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;        <span class="comment">//如何让浏览器3秒自动刷新一次;        resp.setHeader(&quot;refresh&quot;,&quot;3&quot;);                //在内存中创建一个图片        BufferedImage image = new BufferedImage(80,20,BufferedImage.TYPE_INT_RGB);        //得到图片        Graphics2D g = (Graphics2D) image.getGraphics(); //笔        //设置图片的背景颜色        g.setColor(Color.white);        g.fillRect(0,0,80,20);        //给图片写数据        g.setColor(Color.BLUE);        g.setFont(new Font(null,Font.BOLD,20));        g.drawString(makeNum(),0,20);        //告诉浏览器，这个请求用图片的方式打开        resp.setContentType(&quot;image/jpeg&quot;);        //网站存在缓存，不让浏览器缓存        resp.setDateHeader(&quot;expires&quot;,-1);        resp.setHeader(&quot;Cache-Control&quot;,&quot;no-cache&quot;);        resp.setHeader(&quot;Pragma&quot;,&quot;no-cache&quot;);        //把图片写给浏览器        ImageIO.write(image,&quot;jpg&quot;, resp.getOutputStream());    &#125;    //生成随机数    private String makeNum()&#123;        Random random = new Random();        String num = random.nextInt(9999999) + &quot;&quot;;        StringBuffer sb = new StringBuffer();        for (int i = 0; i &lt; 7-num.length() ; i++) &#123;            sb.append(&quot;0&quot;);        &#125;        num = sb.toString() + num;        return num;    &#125;    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        doGet(req, resp);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4、实现重定向"><a href="#4、实现重定向" class="headerlink" title="4、实现重定向"></a>4、实现重定向</h4><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567931587955.png" alt="1567931587955"></p><p>B一个web资源收到客户端A请求后，B他会通知A客户端去访问另外一个web资源C，这个过程叫重定向</p><p>常见场景：</p><ul><li>用户登录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendRedirect</span><span class="params">(String var1)</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Overrideprotected</span> <span class="function"><span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;    <span class="comment">/*        resp.setHeader(&quot;Location&quot;,&quot;/r/img&quot;);        resp.setStatus(302);         */</span>    resp.sendRedirect(<span class="string">&quot;/r/img&quot;</span>);<span class="comment">//重定向&#125;</span></span><br></pre></td></tr></table></figure><p>面试题：请你聊聊重定向和转发的区别？</p><p>相同点</p><ul><li>页面都会实现跳转</li></ul><p>不同点</p><ul><li>请求转发的时候，url不会产生变化</li><li>重定向时候，url地址栏会发生变化；</li></ul><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567932163430.png" alt="1567932163430"></p><h4 id="5、简单实现登录重定向"><a href="#5、简单实现登录重定向" class="headerlink" title="5、简单实现登录重定向"></a>5、简单实现登录重定向</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--这里提交的路径，需要寻找到项目的路径--%&gt;&lt;%--$&#123;pageContext.request.contextPath&#125;代表当前的项目--%&gt;&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt; &lt;br&gt;    密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt; &lt;br&gt;    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span>    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;        <span class="comment">//处理请求        String username = req.getParameter(&quot;username&quot;);        String password = req.getParameter(&quot;password&quot;);        System.out.println(username+&quot;:&quot;+password);        //重定向时候一定要注意，路径问题，否则404；        resp.sendRedirect(&quot;/r/success.jsp&quot;);    &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span>    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>requset<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.RequestTest<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>requset<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Success&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="6-7、HttpServletRequest"><a href="#6-7、HttpServletRequest" class="headerlink" title="6.7、HttpServletRequest"></a>6.7、HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息；</p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567933996830.png" alt="1567933996830"></p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567934023106.png" alt="1567934023106"></p><h4 id="获取参数，请求转发"><a href="#获取参数，请求转发" class="headerlink" title="获取参数，请求转发"></a>获取参数，请求转发</h4><p><img src="/%E7%8B%82%E7%A5%9Eweb/1567934110794.png" alt="1567934110794"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Overrideprotected</span> <span class="function"><span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;    req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);    resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);    String username = req.getParameter(<span class="string">&quot;username&quot;</span>);    String password = req.getParameter(<span class="string">&quot;password&quot;</span>);    String[] hobbys = req.getParameterValues(<span class="string">&quot;hobbys&quot;</span>);    System.out.println(<span class="string">&quot;=============================&quot;</span>);    <span class="comment">//后台接收中文乱码问题    System.out.println(username);    System.out.println(password);    System.out.println(Arrays.toString(hobbys));    System.out.println(&quot;=============================&quot;);    System.out.println(req.getContextPath());    //通过请求转发    //这里的 / 代表当前的web应用    req.getRequestDispatcher(&quot;/success.jsp&quot;).forward(req,resp);&#125;</span></span><br></pre></td></tr></table></figure><p><strong>面试题：请你聊聊重定向和转发的区别？</strong></p><p>相同点</p><ul><li>页面都会实现跳转</li></ul><p>不同点</p><ul><li>请求转发的时候，url不会产生变化   307</li><li>重定向时候，url地址栏会发生变化； 302</li></ul><h3 id="6-8、处理中文乱码"><a href="#6-8、处理中文乱码" class="headerlink" title="6.8、处理中文乱码"></a>6.8、处理中文乱码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注册<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;show.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span>  <span class="tag">&lt;/<span class="name">form</span>&gt;</span>     &lt;%//脚本段   String name = request.getParameter(&quot;name&quot;);    %&gt;        name:&lt;%=name %&gt;   //表达式     This is my JSP page. <span class="tag">&lt;<span class="name">br</span>&gt;</span>//处理中文乱码1.   &lt;%   request.setCharacterEncoding(&quot;UTF-8&quot;);   response.setContentType(&quot;text/html;charset=utf-8&quot;);   String name = request.getParameter(&quot;name&quot;);   %&gt;2.    &lt;%   response.setContentType(&quot;text/html;charset=utf-8&quot;);   String name = request.getParameter(&quot;name&quot;);      name = new String(name.getBytes(&quot;ISO-8859-1&quot;),&quot;utf-8&quot;);    %&gt;        name:&lt;%=name %&gt;</span><br></pre></td></tr></table></figure><h2 id="7、Cookie、Session"><a href="#7、Cookie、Session" class="headerlink" title="7、Cookie、Session"></a>7、Cookie、Session</h2><h3 id="7-1、会话"><a href="#7-1、会话" class="headerlink" title="7.1、会话"></a>7.1、会话</h3><p><strong>会话</strong>：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；</p><p><strong>有状态会话</strong>：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；</p><p><strong>你能怎么证明你是西开的学生？</strong></p><p>你              西开</p><ol><li>发票                西开给你发票</li><li>学校登记        西开标记你来过了</li></ol><p><strong>一个网站，怎么证明你来过？</strong></p><p>客户端              服务端</p><ol><li>服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了； cookie</li><li>服务器登记你来过了，下次你来的时候我来匹配你； seesion</li></ol><h3 id="7-2、保存会话的两种技术"><a href="#7-2、保存会话的两种技术" class="headerlink" title="7.2、保存会话的两种技术"></a>7.2、保存会话的两种技术</h3><p><strong>cookie</strong></p><ul><li>客户端技术   （响应，请求）</li></ul><p><strong>session</strong></p><ul><li>服务器技术，利用这个技术，可以保存用户的会话信息？ 我们可以把信息或者数据放在Session中！</li></ul><p>常见常见：网站登录之后，你下次不用再登录了，第二次访问直接就上去了！</p><h3 id="7-3、Cookie"><a href="#7-3、Cookie" class="headerlink" title="7.3、Cookie"></a>7.3、Cookie</h3><p><img src="/%E7%8B%82%E7%A5%9Eweb/1568344447291.png" alt="1568344447291"></p><ol><li>从请求中拿到cookie信息</li><li>服务器响应给客户端cookie</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie[] cookies = req.getCookies(); <span class="comment">//获得Cookiecookie.getName(); //获得cookie中的keycookie.getValue(); //获得cookie中的vlauenew Cookie(&quot;lastLoginTime&quot;, System.currentTimeMillis()+&quot;&quot;); //新建一个cookiecookie.setMaxAge(24*60*60); //设置cookie的有效期resp.addCookie(cookie); //响应给客户端一个cookie</span></span><br></pre></td></tr></table></figure><p><strong>cookie：一般会保存在本地的 用户目录下 appdata；</strong></p><p>一个网站cookie是否存在上限！<strong>聊聊细节问题</strong></p><ul><li>一个Cookie只能保存一个信息；</li><li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie；</li><li>Cookie大小有限制4kb；</li><li>300个cookie浏览器上限</li></ul><p><strong>删除Cookie；</strong></p><ul><li>不设置有效期，关闭浏览器，自动失效；</li><li>设置有效期时间为 0 ；</li></ul><p><strong>编码解码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URLEncoder.encode(<span class="string">&quot;秦疆&quot;</span>,<span class="string">&quot;utf-8&quot;</span>)URLDecoder.decode(cookie.getValue(),<span class="string">&quot;UTF-8&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="7-4、Session（重点）"><a href="#7-4、Session（重点）" class="headerlink" title="7.4、Session（重点）"></a>7.4、Session（重点）</h3><p><img src="/%E7%8B%82%E7%A5%9Eweb/1568344560794.png" alt="1568344560794"></p><p>什么是Session：</p><ul><li>服务器会给每一个用户（浏览器）创建一个Seesion对象；</li><li>一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在；</li><li>用户登录之后，整个网站它都可以访问！–&gt; 保存用户的信息；保存购物车的信息…..</li></ul><p><img src="/%E7%8B%82%E7%A5%9Eweb/1568342773861.png" alt="1568342773861"></p><p>Session和cookie的区别：</p><ul><li>Cookie是把用户的数据写给用户的浏览器，浏览器保存 （可以保存多个）</li><li>Session把用户的数据写到用户独占Session中，服务器端保存  （保存重要的信息，减少服务器资源的浪费）</li><li>Session对象由服务创建；</li></ul><p>使用场景：</p><ul><li>保存一个登录用户的信息；</li><li>购物车信息；</li><li>在整个网站中经常会使用的数据，我们将它保存在Session中；</li></ul><p>使用Session：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionDemo01</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//解决乱码问题</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//得到Session</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        <span class="comment">//给Session中存东西</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="keyword">new</span> Person(<span class="string">&quot;秦疆&quot;</span>,<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//获取Session的ID</span></span><br><span class="line">        String sessionId = session.getId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断Session是不是新创建</span></span><br><span class="line">        <span class="keyword">if</span> (session.isNew())&#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;session创建成功,ID:&quot;</span>+sessionId);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;session以及在服务器中存在了,ID:&quot;</span>+sessionId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Session创建的时候做了什么事情；</span></span><br><span class="line"><span class="comment">//        Cookie cookie = new Cookie(&quot;JSESSIONID&quot;,sessionId);</span></span><br><span class="line"><span class="comment">//        resp.addCookie(cookie);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到Session</span></span><br><span class="line">HttpSession session = req.getSession();</span><br><span class="line"></span><br><span class="line">Person person = (Person) session.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(person.toString());</span><br><span class="line"></span><br><span class="line">HttpSession session = req.getSession();</span><br><span class="line">session.removeAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">//手动注销Session</span></span><br><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure><p><strong>会话自动过期：web.xml配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置Session默认的失效时间--&gt;</span><span class="tag">&lt;<span class="name">session-config</span>&gt;</span>    <span class="comment">&lt;!--15分钟后Session自动失效，以分钟为单位--&gt;</span>    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/%E7%8B%82%E7%A5%9Eweb/1568344679763.png" alt="1568344679763"></p><h2 id="8、JSP"><a href="#8、JSP" class="headerlink" title="8、JSP"></a>8、JSP</h2><p>==<strong>静态网页&amp;动态网页</strong>==</p><table><thead><tr><th></th><th><strong>静态网页</strong></th><th><strong>动态网页</strong></th></tr></thead><tbody><tr><td>组成</td><td>html+js+css</td><td>jsp+html;asp+html;php+html;</td></tr><tr><td>交互</td><td>不可交互</td><td>可交互</td></tr><tr><td>运行方式</td><td>客户端运行</td><td>服务端生成，客户端运行</td></tr><tr><td>数据库</td><td>无数据库连接</td><td>连接数据库</td></tr></tbody></table><h3 id="8-1、什么是JSP"><a href="#8-1、什么是JSP" class="headerlink" title="8.1、什么是JSP"></a>8.1、什么是JSP</h3><ul><li><p>Java Server Pages ： Java服务器端页面，也和Servlet一样，用于动态Web技术！</p></li><li><p><a href="http://127.0.0.1:8080/login/index.jsp">http://127.0.0.1:8080/login/index.jsp</a></p></li><li><p>最大的特点：</p><ul><li>写JSP就像在写HTML</li><li>区别：<ul><li>HTML只给用户提供静态的数据</li><li>JSP页面中可以嵌入JAVA代码，为用户提供动态数据；</li></ul></li></ul></li><li><p><strong>工作原理</strong></p><ul><li><p>客户端请求</p></li><li><p>把 *.jsp 翻译成 *.java </p></li><li><p>编译为 *.class</p></li><li><p>执行生成servlet</p></li><li><p>反馈结果给客户端显示</p><pre><code>第二次访问 有改动 执行上述过程 无改动 直接执行</code></pre></li><li><p><img src="/%E7%8B%82%E7%A5%9Eweb/clip_image001-1583305097106.png" alt="123"></p></li><li><img src="/狂神web/clip_image001-1583305111348.png" alt="112" style="zoom:80%;" /></li><li><p><img src="/%E7%8B%82%E7%A5%9Eweb/clip_image001-1583305154041.png" alt="44"></p></li><li><p><img src="/%E7%8B%82%E7%A5%9Eweb/clip_image001-1583305166669.png" alt="54"></p></li></ul></li></ul><h3 id="8-2、JSP原理"><a href="#8-2、JSP原理" class="headerlink" title="8.2、JSP原理"></a>8.2、JSP原理</h3><p>思路：JSP到底怎么执行的！</p><ul><li><p>代码层面没有任何问题</p></li><li><p>服务器内部工作</p><p>tomcat中有一个work目录；</p><p>IDEA中使用Tomcat的会在IDEA的tomcat中生产一个work目录</p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1568345873736.png" alt="1568345873736"></p><p>我电脑的地址：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\.IntelliJIdea2018<span class="number">.1</span>\system\tomcat\Unnamed_javaweb-session-cookie\work\Catalina\localhost\ROOT\org\apache\jsp</span><br></pre></td></tr></table></figure><p>发现页面转变成了Java程序！</p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1568345948307.png" alt="1568345948307"></p></li></ul><p><strong>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet！</strong></p><p>JSP最终也会被转换成为一个Java类！</p><p><strong>JSP 本质上就是一个Servlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化  public void _jspInit() &#123;        &#125;//销毁  public void _jspDestroy() &#123;  &#125;//JSPService  public void _jspService(.HttpServletRequest request,HttpServletResponse response)      </span></span><br></pre></td></tr></table></figure><ol><li><p>判断请求</p></li><li><p>内置一些对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> javax.servlet.jsp.PageContext pageContext;  <span class="comment">//页面上下文javax.servlet.http.HttpSession session = null;    //sessionfinal javax.servlet.ServletContext application;   //applicationContextfinal javax.servlet.ServletConfig config;         //configjavax.servlet.jsp.JspWriter out = null;           //outfinal java.lang.Object page = this;               //page：当前HttpServletRequest request                        //请求HttpServletResponse response                      //响应</span></span><br></pre></td></tr></table></figure></li><li><p>输出页面前增加的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html&quot;</span>);       <span class="comment">//设置响应的页面类型pageContext = _jspxFactory.getPageContext(this, request, response,                                          null, true, 8192, true);_jspx_page_context = pageContext;application = pageContext.getServletContext();config = pageContext.getServletConfig();session = pageContext.getSession();out = pageContext.getOut();_jspx_out = out;</span></span><br></pre></td></tr></table></figure></li><li><p>以上的这些个对象我们可以在JSP页面中直接使用！</p></li></ol><p><img src="/%E7%8B%82%E7%A5%9Eweb/1568347078207.png" alt="1568347078207"></p><p>在JSP页面中；</p><p>只要是 JAVA代码就会原封不动的输出；</p><p>如果是HTML代码，就会被转换为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out.write(<span class="string">&quot;&lt;html&gt;\r\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>这样的格式，输出到前端！</p><h3 id="8-3、JSP基础语法"><a href="#8-3、JSP基础语法" class="headerlink" title="8.3、JSP基础语法"></a>8.3、JSP基础语法</h3><p>任何语言都有自己的语法，JAVA中有,。 JSP 作为java技术的一种应用，它拥有一些自己扩充的语法（了解，知道即可！），Java所有语法都支持！</p><h4 id="JSP-的组成-JSP页面的构成"><a href="#JSP-的组成-JSP页面的构成" class="headerlink" title="JSP 的组成 JSP页面的构成"></a>JSP 的组成 <a href="https://www.cnblogs.com/yangyquin/p/5430231.html"><strong>JSP页面的构成</strong></a></h4> <img src="/狂神web/clip_image001-1583305406375.png" alt="54" style="zoom:50%;" /><p><strong>==1 静态页面==</strong></p><h5 id="2-指令"><a href="#2-指令" class="headerlink" title="==2 指令=="></a>==2 指令==</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ %&gt;<span class="comment">&lt;!--page--&gt;</span>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;  contentType=&quot;text/html; charset=UTF-8&quot; isErrorPage=&quot;true&quot;%&gt;<span class="comment">&lt;!--include--&gt;</span>&lt;%@ include file=&quot;foot.html&quot; %&gt;   静态引入/静态包含&lt;%@ include file=&quot;foot.jsp&quot; %&gt;使用jsp要删除&lt;% String path = request.getContextPath( );   String basePath = request.getScheme( )+&quot;://&quot;+request %&gt;<span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">jsp:include</span> <span class="attr">page</span>=<span class="string">&quot;foot.html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">jsp:include</span>&gt;</span>   动态引入/动态包含<span class="tag">&lt;<span class="name">jsp:include</span> <span class="attr">page</span>=<span class="string">&quot;foot.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">jsp:include</span>&gt;</span> (可使用html/jsp)    <span class="comment">&lt;!--taglib--&gt;</span>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;     <span class="comment">&lt;!--======================================================================--&gt;</span>    &lt;%@page args.... %&gt;&lt;%@include file=&quot;&quot;%&gt;&lt;%--@include会将两个页面合二为一--%&gt;&lt;%@include file=&quot;common/header.jsp&quot;%&gt;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>网页主体<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&lt;%@include file=&quot;common/footer.jsp&quot;%&gt;<span class="tag">&lt;<span class="name">hr</span>&gt;</span>&lt;%--jSP标签    jsp:include：拼接页面，本质还是三个    --%&gt;<span class="tag">&lt;<span class="name">jsp:include</span> <span class="attr">page</span>=<span class="string">&quot;/common/header.jsp&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>网页主体<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">jsp:include</span> <span class="attr">page</span>=<span class="string">&quot;/common/footer.jsp&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-声明"><a href="#3-声明" class="headerlink" title="==3 声明=="></a>==3 声明==</h5><ul><li>JSP声明：会被编译到JSP生成Java的类中！其他的，就会被生成到_jspService方法中！在JSP，嵌入Java代码即可！</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在JSP页面中定义变量,方法或类  &lt;%!  %&gt;&lt;%!  String s = &quot;这是一个声明&quot; ;    public  int  add(int x,int y )&#123;         return x+y;     &#125; %&gt;=========================================&lt;%!static &#123;  System.out.println(&quot;Loading Servlet!&quot;);&#125;private int globalVar = 0;public void kuang()&#123;  System.out.println(&quot;进入了方法Kuang！&quot;);&#125;%&gt;</span><br></pre></td></tr></table></figure><h5 id="4-表达式"><a href="#4-表达式" class="headerlink" title="==4 表达式=="></a>==4 表达式==</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= 变量或表达式%&gt; basePath:&lt;%=basePath%&gt;<span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前时间： <span class="tag">&lt;/<span class="name">h1</span>&gt;</span>    &lt;%= new Date() %&gt;<span class="tag">&lt;/<span class="name">body</span>&gt;</span>================================&lt;%--JSP表达式作用：用来将程序的输出，输出到客户端&lt;%= 变量或者表达式%&gt;--%&gt;&lt;%= new java.util.Date()%&gt;</span><br></pre></td></tr></table></figure><h5 id="5-脚本段-（小脚本-代码块）"><a href="#5-脚本段-（小脚本-代码块）" class="headerlink" title="==5 脚本段==（小脚本/代码块）"></a>==5 脚本段==（小脚本/代码块）</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在JSP页面中执行的Java代码 语法： &lt;% Java代码 %&gt;&lt;%  System.out.println(&quot;这是一个代码块&quot;);%&gt;================================================== &lt;%--jsp脚本片段--%&gt;&lt;%int sum = 0;for (int i = 1; i &lt;=100 ; i++) &#123;  sum+=i;&#125;out.println(&quot;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Sum=&quot;+sum+&quot;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&quot;);%&gt;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--脚本片段的再实现--&gt;</span>&lt;%int x = 10;out.println(x);%&gt;<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个JSP文档<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&lt;%int y = 2;out.println(y);%&gt;<span class="tag">&lt;<span class="name">hr</span>&gt;</span>&lt;%--在代码嵌入HTML元素--%&gt;&lt;%for (int i = 0; i &lt; 5; i++) &#123;%&gt;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,World  &lt;%=i%&gt; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&lt;%&#125;%&gt;</span><br></pre></td></tr></table></figure><h5 id="6-标准动作"><a href="#6-标准动作" class="headerlink" title="==6 标准动作=="></a>==6 标准动作==</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jsp:include</span> <span class="attr">page</span>=<span class="string">&quot;foot.html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">jsp:include</span>&gt;</span>   动态引入/动态包含<span class="tag">&lt;<span class="name">jsp:forward</span> <span class="attr">page</span>=<span class="string">&quot;encoding.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">jsp:forward</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="7-注释"><a href="#7-注释" class="headerlink" title="==7 注释=="></a>==7 注释==</h5><ul><li>JSP的注释，不会在客户端显示，HTML就会！</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- This is my JSP page. &lt;br&gt; --&gt;</span>&lt;%--  &lt;% System.out.println(&quot;这是一个代码块&quot;);%&gt;--%&gt;//System.out.println(&quot;这是一个代码块&quot;); /* System.out.println(&quot;这是一个代码块1&quot;); */</span><br></pre></td></tr></table></figure><h3 id="8-4、9大内置对象"><a href="#8-4、9大内置对象" class="headerlink" title="8.4、9大内置对象"></a>8.4、9大内置对象</h3><ul><li>PageContext    存东西</li><li>Request     存东西</li><li>Response</li><li>Session      存东西</li><li>Application   【SerlvetContext】   存东西</li><li>config    【SerlvetConfig】</li><li>out</li><li>page ，不用了解</li><li>exception</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pageContext.setAttribute(<span class="string">&quot;name1&quot;</span>,<span class="string">&quot;秦疆1号&quot;</span>); <span class="comment">//保存的数据只在一个页面中有效request.setAttribute(&quot;name2&quot;,&quot;秦疆2号&quot;); //保存的数据只在一次请求中有效，请求转发会携带这个数据session.setAttribute(&quot;name3&quot;,&quot;秦疆3号&quot;); //保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器application.setAttribute(&quot;name4&quot;,&quot;秦疆4号&quot;);  //保存的数据只在服务器中有效，从打开服务器到关闭服务器</span></span><br></pre></td></tr></table></figure><p>request：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！</p><p>session：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车；</p><p>application：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如：聊天数据；</p><h3 id="8-5、JSP标签、JSTL标签、EL表达式"><a href="#8-5、JSP标签、JSTL标签、EL表达式" class="headerlink" title="8.5、JSP标签、JSTL标签、EL表达式"></a>8.5、JSP标签、JSTL标签、EL表达式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JSTL表达式的依赖 --&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- standard标签库 --&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>EL表达式：  ${ }</p><ul><li><strong>获取数据</strong></li><li><strong>执行运算</strong></li><li><strong>获取web开发的常用对象</strong></li></ul><p><strong>JSP标签</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--jsp:include--%&gt;&lt;%--http:<span class="comment">//localhost:8080/jsptag.jsp?name=kuangshen&amp;age=12--%&gt;&lt;jsp:forward page=&quot;/jsptag2.jsp&quot;&gt;    &lt;jsp:param name=&quot;name&quot; value=&quot;kuangshen&quot;&gt;&lt;/jsp:param&gt;    &lt;jsp:param name=&quot;age&quot; value=&quot;12&quot;&gt;&lt;/jsp:param&gt;&lt;/jsp:forward&gt;</span></span><br></pre></td></tr></table></figure><p><strong>JSTL表达式</strong></p><p>JSTL标签库的使用就是为了弥补HTML标签的不足；它自定义许多标签，可以供我们使用，标签的功能和Java代码一样！</p><p><strong>格式化标签</strong></p><p><strong>SQL标签</strong></p><p><strong>XML 标签</strong></p><p><strong>核心标签</strong> （掌握部分）</p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1568362473764.png" alt="1568362473764"></p><p><strong>JSTL标签库使用步骤</strong></p><ul><li>引入对应的 taglib</li><li>使用其中的方法</li><li><strong>在Tomcat 也需要引入 jstl的包，否则会报错：JSTL解析错误</strong></li></ul><p>c：if</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h4&gt;<span class="keyword">if</span>测试&lt;/h4&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;coreif.jsp&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    &lt;%--</span><br><span class="line">    EL表达式获取表单中的数据</span><br><span class="line">    $&#123;param.参数名&#125;</span><br><span class="line">    --%&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;param.username&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--判断如果提交的用户名是管理员，则登录成功--%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;param.username==&#x27;admin&#x27;&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;isAdmin&quot;</span>&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">&quot;管理员欢迎您！&quot;</span>/&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--自闭合标签--%&gt;</span><br><span class="line">&lt;c:out value=<span class="string">&quot;$&#123;isAdmin&#125;&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>c:choose   c:when</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;&lt;%--定义一个变量score，值为<span class="number">85</span>--%&gt;&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;score&quot;</span> value=<span class="string">&quot;55&quot;</span>/&gt;&lt;c:choose&gt;    &lt;c:when test=<span class="string">&quot;$&#123;score&gt;=90&#125;&quot;</span>&gt;        你的成绩为优秀    &lt;/c:when&gt;    &lt;c:when test=<span class="string">&quot;$&#123;score&gt;=80&#125;&quot;</span>&gt;        你的成绩为一般    &lt;/c:when&gt;    &lt;c:when test=<span class="string">&quot;$&#123;score&gt;=70&#125;&quot;</span>&gt;        你的成绩为良好    &lt;/c:when&gt;    &lt;c:when test=<span class="string">&quot;$&#123;score&lt;=60&#125;&quot;</span>&gt;        你的成绩为不及格    &lt;/c:when&gt;&lt;/c:choose&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>c:forEach</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%    ArrayList&lt;String&gt; people = <span class="keyword">new</span> ArrayList&lt;&gt;();    people.add(<span class="number">0</span>,<span class="string">&quot;张三&quot;</span>);    people.add(<span class="number">1</span>,<span class="string">&quot;李四&quot;</span>);    people.add(<span class="number">2</span>,<span class="string">&quot;王五&quot;</span>);    people.add(<span class="number">3</span>,<span class="string">&quot;赵六&quot;</span>);    people.add(<span class="number">4</span>,<span class="string">&quot;田六&quot;</span>);    request.setAttribute(<span class="string">&quot;list&quot;</span>,people);%&gt;&lt;%--<span class="keyword">var</span> , 每一次遍历出来的变量items, 要遍历的对象begin,   哪里开始end,     到哪里step,   步长--%&gt;&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;people&quot;</span> items=<span class="string">&quot;$&#123;list&#125;&quot;</span>&gt;    &lt;c:out value=<span class="string">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;&lt;/c:forEach&gt;&lt;hr&gt;&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;people&quot;</span> items=<span class="string">&quot;$&#123;list&#125;&quot;</span> begin=<span class="string">&quot;1&quot;</span> end=<span class="string">&quot;3&quot;</span> step=<span class="string">&quot;1&quot;</span> &gt;    &lt;c:out value=<span class="string">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><h2 id="9、JavaBean"><a href="#9、JavaBean" class="headerlink" title="9、JavaBean"></a>9、JavaBean</h2><p>实体类</p><p>JavaBean有特定的写法：</p><ul><li>必须要有一个无参构造</li><li>属性必须私有化</li><li>必须有对应的get/set方法；</li></ul><p>一般用来和数据库的字段做映射  ORM；</p><p>ORM ：对象关系映射</p><ul><li>表—&gt;类</li><li>字段–&gt;属性</li><li>行记录—-&gt;对象</li></ul><p><strong>people表</strong></p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>address</th></tr></thead><tbody><tr><td>1</td><td>秦疆1号</td><td>3</td><td>西安</td></tr><tr><td>2</td><td>秦疆2号</td><td>18</td><td>西安</td></tr><tr><td>3</td><td>秦疆3号</td><td>100</td><td>西安</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;    <span class="keyword">private</span> <span class="keyword">int</span> id;    <span class="keyword">private</span> String name;    <span class="keyword">private</span> <span class="keyword">int</span> id;    <span class="keyword">private</span> String address;&#125;<span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;    <span class="keyword">new</span> People(<span class="number">1</span>,<span class="string">&quot;秦疆1号&quot;</span>,<span class="number">3</span>，<span class="string">&quot;西安&quot;</span>);    <span class="keyword">new</span> People(<span class="number">2</span>,<span class="string">&quot;秦疆2号&quot;</span>,<span class="number">3</span>，<span class="string">&quot;西安&quot;</span>);    <span class="keyword">new</span> People(<span class="number">3</span>,<span class="string">&quot;秦疆3号&quot;</span>,<span class="number">3</span>，<span class="string">&quot;西安&quot;</span>);&#125;</span><br></pre></td></tr></table></figure><ul><li>过滤器</li><li>文件上传</li><li>邮件发送</li><li>JDBC 复习 ： 如何使用JDBC ,  JDBC crud， jdbc 事务</li></ul><h2 id="10、MVC三层架构"><a href="#10、MVC三层架构" class="headerlink" title="10、MVC三层架构"></a>10、MVC三层架构</h2><p>什么是MVC：  Model     view     Controller  模型、视图、控制器</p><h3 id="10-1、早些年"><a href="#10-1、早些年" class="headerlink" title="10.1、早些年"></a>10.1、早些年</h3><p><img src="/%E7%8B%82%E7%A5%9Eweb/1568423664332.png" alt="1568423664332"></p><p>用户直接访问控制层，控制层就可以直接操作数据库；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">servlet--CRUD--&gt;数据库弊端：程序十分臃肿，不利于维护  servlet的代码中：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码架构：没有什么是加一层解决不了的！程序猿调用|JDBC|Mysql Oracle SqlServer ....</span><br></pre></td></tr></table></figure><h3 id="10-2、MVC三层架构"><a href="#10-2、MVC三层架构" class="headerlink" title="10.2、MVC三层架构"></a>10.2、MVC三层架构</h3><p><img src="/%E7%8B%82%E7%A5%9Eweb/1568424227281.png" alt="1568424227281"></p><p>Model</p><ul><li>业务处理 ：业务逻辑（Service）</li><li>数据持久层：CRUD   （Dao）</li></ul><p>View</p><ul><li>展示数据</li><li>提供链接发起Servlet请求 （a，form，img…）</li></ul><p>Controller  （Servlet）</p><ul><li><p>接收用户的请求 ：（req：请求参数、Session信息….）</p></li><li><p>交给业务层处理对应的代码 </p></li><li><p>控制视图的跳转  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">登录---&gt;接收用户的登录请求---&gt;处理用户的请求（获取用户登录的参数，username，password）----&gt;交给业务层处理登录业务（判断用户名密码是否正确：事务）---&gt;Dao层查询用户名和密码是否正确--&gt;数据库</span><br></pre></td></tr></table></figure></li></ul><h2 id="11、Filter-（重点）"><a href="#11、Filter-（重点）" class="headerlink" title="11、Filter （重点）"></a>11、Filter （重点）</h2><p>Filter：过滤器 ，用来过滤网站的数据；</p><ul><li>处理中文乱码</li><li>登录验证….</li></ul><p><img src="/%E7%8B%82%E7%A5%9Eweb/1568424858708.png" alt="1568424858708"></p><p>Filter开发步骤：</p><ol><li><p>导包</p></li><li><p>编写过滤器</p><ol><li><p>导包不要错</p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1568425162525.png" alt="1568425162525"></p><p>实现Filter接口，重写对应的方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;    <span class="comment">//初始化：web服务器启动，就以及初始化了，随时等待过滤对象出现！    public void init(FilterConfig filterConfig) throws ServletException &#123;        System.out.println(&quot;CharacterEncodingFilter初始化&quot;);    &#125;    //Chain : 链    /*    1. 过滤中的所有代码，在过滤特定请求的时候都会执行    2. 必须要让过滤器继续同行        chain.doFilter(request,response);     */    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;        request.setCharacterEncoding(&quot;utf-8&quot;);        response.setCharacterEncoding(&quot;utf-8&quot;);        response.setContentType(&quot;text/html;charset=UTF-8&quot;);        System.out.println(&quot;CharacterEncodingFilter执行前....&quot;);        chain.doFilter(request,response); //让我们的请求继续走，如果不写，程序到这里就被拦截停止！        System.out.println(&quot;CharacterEncodingFilter执行后....&quot;);    &#125;    //销毁：web服务器关闭的时候，过滤会销毁    public void destroy() &#123;        System.out.println(&quot;CharacterEncodingFilter销毁&quot;);    &#125;&#125;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>在web.xml中配置 Filter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span>    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.kuang.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span><span class="tag">&lt;/<span class="name">filter</span>&gt;</span><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span>    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>    <span class="comment">&lt;!--只要是 /servlet的任何请求，会经过这个过滤器--&gt;</span>    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>    <span class="comment">&lt;!--&lt;url-pattern&gt;/*&lt;/url-pattern&gt;--&gt;</span><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="12、监听器"><a href="#12、监听器" class="headerlink" title="12、监听器"></a>12、监听器</h2><p>实现一个监听器的接口；（有N种）</p><ol><li><p>编写一个监听器</p><p>实现监听器的接口…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//统计网站在线人数 ： 统计sessionpublic class OnlineCountListener implements HttpSessionListener &#123;    //创建session监听： 看你的一举一动    //一旦创建Session就会触发一次这个事件！    public void sessionCreated(HttpSessionEvent se) &#123;        ServletContext ctx = se.getSession().getServletContext();        System.out.println(se.getSession().getId());        Integer onlineCount = (Integer) ctx.getAttribute(&quot;OnlineCount&quot;);        if (onlineCount==null)&#123;            onlineCount = new Integer(1);        &#125;else &#123;            int count = onlineCount.intValue();            onlineCount = new Integer(count+1);        &#125;        ctx.setAttribute(&quot;OnlineCount&quot;,onlineCount);    &#125;    //销毁session监听    //一旦销毁Session就会触发一次这个事件！    public void sessionDestroyed(HttpSessionEvent se) &#123;        ServletContext ctx = se.getSession().getServletContext();        Integer onlineCount = (Integer) ctx.getAttribute(&quot;OnlineCount&quot;);        if (onlineCount==null)&#123;            onlineCount = new Integer(0);        &#125;else &#123;            int count = onlineCount.intValue();            onlineCount = new Integer(count-1);        &#125;        ctx.setAttribute(&quot;OnlineCount&quot;,onlineCount);    &#125;    /*    Session销毁：    1. 手动销毁  getSession().invalidate();    2. 自动销毁     */&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>web.xml中注册监听器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册监听器--&gt;</span><span class="tag">&lt;<span class="name">listener</span>&gt;</span>    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.kuang.listener.OnlineCountListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>看情况是否使用！</p></li></ol><h2 id="13、过滤器、监听器常见应用"><a href="#13、过滤器、监听器常见应用" class="headerlink" title="13、过滤器、监听器常见应用"></a>13、过滤器、监听器常见应用</h2><p><strong>监听器：GUI编程中经常使用；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPanel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame(<span class="string">&quot;中秋节快乐&quot;</span>);  <span class="comment">//新建一个窗体</span></span><br><span class="line">        Panel panel = <span class="keyword">new</span> Panel(<span class="keyword">null</span>); <span class="comment">//面板</span></span><br><span class="line">        frame.setLayout(<span class="keyword">null</span>); <span class="comment">//设置窗体的布局</span></span><br><span class="line"></span><br><span class="line">        frame.setBounds(<span class="number">300</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> Color(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>)); <span class="comment">//设置背景颜色</span></span><br><span class="line"></span><br><span class="line">        panel.setBounds(<span class="number">50</span>,<span class="number">50</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        panel.setBackground(<span class="keyword">new</span> Color(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>)); <span class="comment">//设置背景颜色</span></span><br><span class="line"></span><br><span class="line">        frame.add(panel);</span><br><span class="line"></span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听事件，监听关闭事件</span></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.windowClosing(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户登录之后才能进入主页！用户注销后就不能进入主页了！</p><ol><li><p>用户登录之后，向Sesison中放入用户的数据</p></li><li><p>进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">HttpServletResponse response = (HttpServletResponse) resp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (request.getSession().getAttribute(Constant.USER_SESSION)==<span class="keyword">null</span>)&#123;</span><br><span class="line">    response.sendRedirect(<span class="string">&quot;/error.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chain.doFilter(request,response);</span><br></pre></td></tr></table></figure></li></ol><h2 id="14、JDBC"><a href="#14、JDBC" class="headerlink" title="14、JDBC"></a>14、JDBC</h2><p>什么是JDBC ： Java连接数据库！</p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1568439601825.png" alt="1568439601825"></p><p>需要jar包的支持：</p><ul><li>java.sql</li><li>javax.sql</li><li>mysql-conneter-java…  连接驱动（必须要导入）</li></ul><p><strong>实验环境搭建</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users(    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,    `name` <span class="type">VARCHAR</span>(<span class="number">40</span>),    `password` <span class="type">VARCHAR</span>(<span class="number">40</span>),    email <span class="type">VARCHAR</span>(<span class="number">60</span>),    birthday <span class="type">DATE</span>);<span class="keyword">INSERT</span> <span class="keyword">INTO</span> users(id,`name`,`password`,email,birthday)<span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;zs@qq.com&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>);<span class="keyword">INSERT</span> <span class="keyword">INTO</span> users(id,`name`,`password`,email,birthday)<span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;ls@qq.com&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>);<span class="keyword">INSERT</span> <span class="keyword">INTO</span> users(id,`name`,`password`,email,birthday)<span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;ww@qq.com&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>);<span class="keyword">SELECT</span><span class="operator">*</span> <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure><p>导入数据库依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql的驱动--&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>IDEA中连接数据库：</p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1568440926845.png" alt="1568440926845"></p><p><strong>JDBC 固定步骤：</strong></p><ol><li>加载驱动</li><li>连接数据库,代表数据库</li><li>向数据库发送SQL的对象Statement : CRUD</li><li>编写SQL （根据业务，不同的SQL）</li><li>执行SQL</li><li>关闭连接</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJdbc</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;        <span class="comment">//配置信息        //useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码        String url=&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;;        String username = &quot;root&quot;;        String password = &quot;123456&quot;;        //1.加载驱动        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);        //2.连接数据库,代表数据库        Connection connection = DriverManager.getConnection(url, username, password);        //3.向数据库发送SQL的对象Statement,PreparedStatement : CRUD        Statement statement = connection.createStatement();        //4.编写SQL        String sql = &quot;select * from users&quot;;        //5.执行查询SQL，返回一个 ResultSet  ： 结果集        ResultSet rs = statement.executeQuery(sql);        while (rs.next())&#123;            System.out.println(&quot;id=&quot;+rs.getObject(&quot;id&quot;));            System.out.println(&quot;name=&quot;+rs.getObject(&quot;name&quot;));            System.out.println(&quot;password=&quot;+rs.getObject(&quot;password&quot;));            System.out.println(&quot;email=&quot;+rs.getObject(&quot;email&quot;));            System.out.println(&quot;birthday=&quot;+rs.getObject(&quot;birthday&quot;));        &#125;        //6.关闭连接，释放资源（一定要做） 先开后关        rs.close();        statement.close();        connection.close();    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>预编译SQL</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC2</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;        <span class="comment">//配置信息        //useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码        String url=&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;;        String username = &quot;root&quot;;        String password = &quot;123456&quot;;        //1.加载驱动        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);        //2.连接数据库,代表数据库        Connection connection = DriverManager.getConnection(url, username, password);        //3.编写SQL        String sql = &quot;insert into  users(id, name, password, email, birthday) values (?,?,?,?,?);&quot;;        //4.预编译        PreparedStatement preparedStatement = connection.prepareStatement(sql);        preparedStatement.setInt(1,2);//给第一个占位符？ 的值赋值为1；        preparedStatement.setString(2,&quot;狂神说Java&quot;);//给第二个占位符？ 的值赋值为狂神说Java；        preparedStatement.setString(3,&quot;123456&quot;);//给第三个占位符？ 的值赋值为123456；        preparedStatement.setString(4,&quot;24736743@qq.com&quot;);//给第四个占位符？ 的值赋值为1；        preparedStatement.setDate(5,new Date(new java.util.Date().getTime()));//给第五个占位符？ 的值赋值为new Date(new java.util.Date().getTime())；        //5.执行SQL        int i = preparedStatement.executeUpdate();        if (i&gt;0)&#123;            System.out.println(&quot;插入成功@&quot;);        &#125;        //6.关闭连接，释放资源（一定要做） 先开后关        preparedStatement.close();        connection.close();    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>事务</strong></p><p>要么都成功，要么都失败！</p><p>ACID原则：保证数据的安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">开启事务事务提交  commit()事务回滚  rollback()关闭事务转账：A:1000B:<span class="number">1000</span>    A(<span class="number">900</span>)   --<span class="number">100</span>--&gt;   B(<span class="number">1100</span>) </span><br></pre></td></tr></table></figure><p><strong>Junit单元测试</strong></p><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--单元测试--&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>简单使用</p><p>@Test注解只有在方法上有效，只要加了这个注解的方法，就可以直接运行！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/%E7%8B%82%E7%A5%9Eweb/1568442261610.png" alt="1568442261610"></p><p>失败的时候是红色：</p><p><img src="/%E7%8B%82%E7%A5%9Eweb/1568442289597.png" alt="1568442289597"></p><p><strong>搭建一个环境</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> account(</span><br><span class="line">   id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">   `name` <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">   money <span class="type">FLOAT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account(`name`,money) <span class="keyword">VALUES</span>(<span class="string">&#x27;A&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account(`name`,money) <span class="keyword">VALUES</span>(<span class="string">&#x27;B&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account(`name`,money) <span class="keyword">VALUES</span>(<span class="string">&#x27;C&#x27;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//配置信息</span></span><br><span class="line">    <span class="comment">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class="line">    String url=<span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">    String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    String password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.加载驱动</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.连接数据库,代表数据库</span></span><br><span class="line">         connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.通知数据库开启事务,false 开启</span></span><br><span class="line">        connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;update account set money = money-100 where name = &#x27;A&#x27;&quot;</span>;</span><br><span class="line">        connection.prepareStatement(sql).executeUpdate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//制造错误</span></span><br><span class="line">        <span class="comment">//int i = 1/0;</span></span><br><span class="line"></span><br><span class="line">        String sql2 = <span class="string">&quot;update account set money = money+100 where name = &#x27;B&#x27;&quot;</span>;</span><br><span class="line">        connection.prepareStatement(sql2).executeUpdate();</span><br><span class="line"></span><br><span class="line">        connection.commit();<span class="comment">//以上两条SQL都执行成功了，就提交事务！</span></span><br><span class="line">        System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//如果出现异常，就通知数据库回滚事务</span></span><br><span class="line">            connection.rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">b站javaweb视频笔记</summary>
    
    
    
    <category term="笔记" scheme="http://gaoxianglong.gitee.io/yisheep/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="javaweb" scheme="http://gaoxianglong.gitee.io/yisheep/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>搭建教程</title>
    <link href="http://gaoxianglong.gitee.io/yisheep/2021/08/19/%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <id>http://gaoxianglong.gitee.io/yisheep/2021/08/19/%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</id>
    <published>2021-08-19T08:41:14.000Z</published>
    <updated>2021-09-18T02:03:50.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-Butterfly网站搭建教程"><a href="#Hexo-Butterfly网站搭建教程" class="headerlink" title="Hexo+Butterfly网站搭建教程"></a>Hexo+Butterfly网站搭建教程</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li>安装nodejs</li><li>安装hexo</li><li>拉取Butterfly</li><li>配置主题</li></ol><h2 id="参考的教程"><a href="#参考的教程" class="headerlink" title="参考的教程:"></a>参考的教程:</h2><ul><li><p><a href="https://www.antmoe.com/">小康博客</a></p></li><li><p><a href="https://butterfly.js.org/">Butterfly</a></p></li><li><p><a href="https://hexo.io/zh-cn/docs/">hexo官方文档</a></p></li></ul><h2 id="写作相关"><a href="#写作相关" class="headerlink" title="写作相关"></a>写作相关</h2><p><strong>文章</strong></p><p><code>hexo new [fileName]</code></p><p><strong>文章头部信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 搭建教程</span><br><span class="line">date: 2021-08-19 16:41:14</span><br><span class="line">tags: [hexo,主题]</span><br><span class="line">categories: 教程</span><br><span class="line">description: 记录搭建时参考的教程</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><strong>文章置顶</strong></p><p>修改插件<code>hero-generator-index</code>, 文件路径<code>node_modules/hexo-generator-index/lib/generator.js</code></p><p>将</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> posts = locals.posts.sort(config.index_generator.order_by);</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> posts = locals.posts;</span><br><span class="line">posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">    <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// top值一样则按照文章日期降序排</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 只有一篇文章top有定义，将排在最前面</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在文章头部加上<code>top: 数字</code>就能置顶文章了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">...</span><br><span class="line">top: 10</span><br><span class="line">...</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="遇见的问题："><a href="#遇见的问题：" class="headerlink" title="遇见的问题："></a>遇见的问题：</h2><ul><li><p>部分css资源或其他<strong>资源无法加载</strong></p><p>其主要原因在于路径出错了，可以尝试这个打开浏览器的开发者工具</p><p><img src="%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98_%E8%B5%84%E6%BA%90%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD_01.png" alt="常见问题_资源无法加载_01"></p><p>解决办法修改配置文件中的<code>url</code>和<code>root</code></p><p><a href="https://gitee.com/help/articles/4136#article-header1">gitee官方解决办法</a></p></li></ul><h2 id="可能会用到的教程"><a href="#可能会用到的教程" class="headerlink" title="可能会用到的教程"></a>可能会用到的教程</h2><h3 id="GitHub桌面应用连接gitee"><a href="#GitHub桌面应用连接gitee" class="headerlink" title="GitHub桌面应用连接gitee"></a>GitHub桌面应用连接gitee</h3><p>左上角&gt;&gt;文件&gt;&gt;克隆仓库&gt;&gt;手动填写url&gt;&gt;填写入gitee的仓库地址</p>]]></content>
    
    
    <summary type="html">记录搭建时参考的教程</summary>
    
    
    
    <category term="教程" scheme="http://gaoxianglong.gitee.io/yisheep/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="hexo" scheme="http://gaoxianglong.gitee.io/yisheep/tags/hexo/"/>
    
    <category term="主题" scheme="http://gaoxianglong.gitee.io/yisheep/tags/%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
</feed>
